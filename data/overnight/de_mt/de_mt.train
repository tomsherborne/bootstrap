was die spieler in einer saison weniger als drei assists gemacht haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte mindestens so viele blöcke in der saison wie kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
anzahl der punkte in einer saison von spieler kobe bryant aus der saison 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_points ) ) )
wie viele blocks hat kobe bryant in den spielzeiten gemacht, in denen er 3 assists gemacht hat?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_blocks ) ) )
welcher spieler hatte in dieser saison 3 oder weniger blöcke?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele umsätze macht kobe bryant durchschnittlich über einen grund	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string team ) ) )
spieler mit der geringsten anzahl von vorlagen über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat die wenigsten umsätze in der gesamten saison?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche position spielt kobe bryant für die la lakers?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string position ) ) )
spieler, der keinen point guard spielt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string ! = ) en.position.point_guard ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat nicht mehr als drei steals	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte mehr fouls als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit weniger blöcken als kobe bryant in allen jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
beachten sie, dass der spieler in einer saison die meisten rebounds auf seinem konto hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat nicht point guard gespielt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string ! = ) en.position.point_guard ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in welchem jahr hatte kobe bryant drei rebounds?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string season ) ) )
welche spieler spielten mehr spiele als kobe bryant die jahreszeiten, die er spielte	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
anzahl der saisons, in denen kobe bryant drei fouls hatte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_fouls ) ) )
von welcher position hat kobe mehr als 3 steals gemacht	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string position ) ) )
was war die gesamtzahl der rebounds für kobe bryant in der saison, in der er nur 3 steals hatte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_rebounds ) ) )
wie viele fouls wurden von kobe bryant im jahr 2004 gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_fouls ) ) )
saison des spielers kobe bryant, der in einer saison 3 umsätze erzielt	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string season ) ) )
nennen sie einen spieler mit mindestens drei rebounds in der saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat die führung für die meisten umsätze in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was spieler hatten die gleiche anzahl von umsätzen wie kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler in den spielzeiten 2004 oder 2010 gespielt haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
auf welcher mannschaft hat kobe bryant im jahr 2004 gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string team ) ) )
wer hat weniger als 4 spiele pro saison gespielt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche jahreszeit war kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ) )
wie viele blöcke wurden von kobe bryant gemacht	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) )
für welches team hat kobe bryant 3 spiele gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string team ) ) )
welcher spieler hatte die gleichen oder weniger stiehlt als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte in einer saison die gleiche anzahl an diebstählen oder weniger als kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was war die gesamtzahl der rebounds von kobe bryant in der saison, in der er nur drei blöcke hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_rebounds ) ) )
spieler mit mehr als 2 rebounds	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele spiele hat kobe bryant mit drei blöcken gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_games_played ) ) )
wie viele blöcke hatte kobe bryant in der saison 04?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_blocks ) ) )
nennen sie den spieler mit den meisten blöcken während der saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler hatten 3 oder mehr rebounds?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele spiele hat kobe bryant mehr als 3 vorlagen gemacht	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_games_played ) ) )
position des spielers kobe bryant, der in einer saison 3 spiele bestritten hat	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string position ) ) )
nennen sie einen spieler mit weniger als 3 vorlagen pro saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler erhält so viele vorlagen wie kobe bryant, wenn nicht mehr	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit nicht mehr als 3 rebounds pro saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, dessen anzahl an diebstählen in einer saison geringer ist als die des spielers kobe bryant in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat mehr oder weniger als 3 fouls gehabt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string ! = ) ( number 3 foul ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele blöcke kobe bryant in der saison gemacht hat, hat er 3 rebounds gemacht	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_blocks ) ) )
spieler mit weniger als 3 stehlen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele blöcke hatte kobe bryant in drei spielen der saison?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_blocks ) ) )
wie viele fouls hatte kobe in der letzten saison?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) )
wie viele punkte hatte kobe bryant, als er 3 blöcke hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_points ) ) )
nennen sie spieler mit umsatzbeträgen in einer beliebigen saison, die unter den umsatzbeträgen liegen, die kobe bryant in einer beliebigen saison zuzuordnen ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte die gleiche anzahl von umsätzen wie kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte die meisten rebounds in einer saison?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, die mehr und weniger als 3 haben, stehlen in allen jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_steals ) ( string ! = ) ( number 3 steal ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat über eine saison die gleiche anzahl an umsätzen wie kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche position hat kobe bryant gespielt, als er drei blocks in einer saison hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string position ) ) )
zu welchen jahreszeiten hatte kobe bryant nur drei blöcke?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string season ) ) )
welche spieler gehören zum selben team wie kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele blöcke in einer saison hatte kobe bryant?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) )
welche position hat kobe bryant im jahr 2004 gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string position ) ) )
wie viele steals pro saison hat kobe bryant durchschnittlich, wenn er auch 3 rebounds hat	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_steals ) ) )
welcher spieler hat mehr oder weniger als 3 spiele gespielt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_games_played ) ( string ! = ) ( number 3 game ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, der maximal zwei teams hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string team ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
finden sie die spieler, die eine gesamtanzahl von diebstählen begehen, die größer ist als die gesamtanzahl der diebstähle, die kobe bryant in einer saison begeht	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler haben zwei oder weniger positionen gespielt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat in dieser saison mehr punkte als kobe bryant erzielt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche position hat kobe bryant in der saison 2004 gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string position ) ) )
in wie vielen spielen hat kobe bryant 3 blocks gemacht	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_games_played ) ) )
welcher spieler hat so viele steals wie die meisten steals, die kobe bryant in einer saison gemacht hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat kobe bryant gespielt, als er drei rebounds in der ganzen saison hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string team ) ) )
welche spieler haben mindestens so viele blocks gemacht wie kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit mehr als 3 punkten in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welches team war kobe bryant auf, als er 3 blöcke in einer saison hatte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string team ) ) )
wie viele rebounds hatte kobe im jahr 04?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_rebounds ) ) )
anzahl der fouls kobe bryant, der 3 vorlagen hat	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_fouls ) ) )
spieler mit der geringsten anzahl von fouls in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
für welches team hat kobe bryant drei blocks gemacht?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string team ) ) )
welcher spieler hatte in dieser saison die wenigsten fouls?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele umsätze hat kobe bryant in allen jahreszeiten gemacht	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) )
wie viele rebounds erzielte kobe bryant in den saisons, in denen er drei fouls begangen hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_rebounds ) ) )
welcher spieler hat weniger blöcke pro saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
nennen sie den spieler mit der gesamtzahl der vorlagen, die weniger als 3 entspricht	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat mehr als 3 punkte in dieser saison gemacht	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele teams gibt es?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.team ) ( string ! type ) ) ) )
welcher spieler hatte in einer saison nicht mehr umsätze als kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit der geringsten anzahl an vorlagen in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler haben weniger als zwei positionen gespielt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat die gleichen oder weniger spiele als kobe bryant gespielt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, dessen anzahl der fouls in einer saison geringer ist als die des spielers kobe bryant in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, dessen anzahl der umsätze in einer saison der des spielers kobe bryant in einer saison entspricht	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele fouls hatte kobe bryant nach 3 spielen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_fouls ) ) )
wer hat mehr oder weniger als 3 umsätze gehabt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string ! = ) ( number 3 turnover ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele fouls hat kobe bryant gehabt	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_fouls ) ) )
was spieler haben so viele rebounds wie kobe bryant in allen jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte mehr als 3 blöcke in dieser saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
während der saison, in der er 3 umsätze hatte, war das team auf kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string team ) ) )
welche anderen spieler spielen die gleiche position wie kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
umsätze von kobe bryant in einer saison, in der er 3 vorlagen machte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_turnovers ) ) )
wie lange hat kobe bryant schon mit mehr als 3 assists pro saison gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string season ) ) )
spieler, dessen diebstahl während einer saison nicht mehr als der diebstahl von spieler kobe bryant während einer saison ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele assists hat kobe bryant mit drei steals gehabt	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_assists ) ) )
spieler, die die geringsten umsätze in einer saison hatten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
nenne einen spieler mit weniger als drei stehlen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler haben in allen spielzeiten weniger als 3 spiele gespielt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was ist die anzahl der positionen	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.position ) ( string ! type ) ) ) )
welche position hat kobe bryant bekommen 3 steals als	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string position ) ) )
wie viele blöcke hat kobe bryant in der saison mit mindestens 3 gespielten spielen erzielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_blocks ) ) )
welcher spieler hatte die wenigsten rebounds in einer saison?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
finden sie einen spieler mit 3 oder mehr stehlen in einer beliebigen saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte mehr fouls als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele blöcke hat kobe bryant gehabt	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_blocks ) ) )
entweder kobe bryant oder lebron james	( call SW.listValue ( call SW.concat en.player.kobe_bryant en.player.lebron_james ) )
welcher spieler ist es kobe bryant oder lebron james?	( call SW.listValue ( call SW.concat en.player.kobe_bryant en.player.lebron_james ) )
anzahl der rebounds in einer saison von spieler kobe bryant mit 3 blöcken in einer saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_rebounds ) ) )
nennen sie die position von kobe bryant, als er drei rebounds machte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string position ) ) )
wie viele steals in einer saison hatte kobe bryant für die lakers?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_steals ) ) )
welcher spieler hat nicht 3 vorlagen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string ! = ) ( number 3 assist ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele spiele hatte kobe bryant in einer saison drei assists?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_games_played ) ) )
wie viele blöcke kobe bryant in der saison 2004 gemacht	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_rebounds ) ) )
nennen sie die anzahl der umsätze, die kobe bryant im jahr 2004 erzielte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_turnovers ) ) )
in welcher saison hat kobe bryant 3 punkte erzielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string season ) ) )
wie viele rebounds hat kobe nach 3 fouls erhalten?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_rebounds ) ) )
welcher spieler hatte mehr oder weniger fouls als 3 in einer saison?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string ! = ) ( number 3 foul ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte die gleiche menge an rebounds wie kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_rebounds ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler spielen nicht mehr als zwei positionen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte mehr als 3 stiehlt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
mannschaft von spieler kobe bryant 2004 saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string team ) ) )
mannschaften, für die kobe bryant spielt	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ) )
während welcher jahreszeiten hat kobe bryant 3 blöcke gemacht	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string season ) ) )
wie viele spiele hat kobe bryant gespielt, in denen er mehr als 3 fouls hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_games_played ) ) )
welche spieler hatten die gleichen oder mehr rebounds als kobe bryant in allen jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat die geringste anzahl von blöcken gehabt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte in einer saison so viele rebounds wie kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_rebounds ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit nicht mehr als 3 fouls in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele rebounds in einer saison hatte kobe bryant im jahr 2004?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_rebounds ) ) )
welcher spieler gibt in jeder saison die gleiche anzahl von umsätzen wie kobe bryant auf?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat weniger spiele als kobe bryant gespielt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was spieler im laufe einer saison mehr rebounds als kobe bryant machten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat durchweg mehr steals pro saison als kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele spiele hat kobe bryant in jeder saison gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) )
spieler mit mehr als 3 blöcken in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte mehr blöcke als kobe bryant, dessen anzahl der blöcke 3 ist	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string season ) ) )
stiehlt von kobe bryant im jahr 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_steals ) ) )
was war die gesamtzahl der saison, in der kobe bryant nur drei rebounds hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_rebounds ) ) )
wie viele umsätze hat kobe bryant in der saison mit mindestens 3 punkten verloren?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_turnovers ) ) )
wie viele spiele hat kobe bryant gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_games_played ) ) )
wie viele blöcke hatte kobe bryant in der saison? er hatte auch drei rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_blocks ) ) )
wie viele fouls wurden von kobe bryant nach 3 rebounds gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_fouls ) ) )
nennen sie die anzahl der gesamtumsätze von kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) )
wie viele blöcke als point guard kobe bryant gemacht	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_blocks ) ) )
wie viele fouls hatte kobe bryant mit drei punkten	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_fouls ) ) )
finden sie spieler, deren gesamtzahl der rebounds in einer bestimmten saison größer ist als die anzahl der rebounds, die kobe bryant in einer saison gemacht hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler erzielte weniger als 3 punkte in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
nennen sie einen spieler, der keine drei vorlagen hatte	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string ! = ) ( number 3 assist ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler weniger als 4 fouls gemacht haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler sind keine point guards?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string ! = ) en.position.point_guard ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte weniger rebounds als kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele vorlagen hatte spieler kobe bryant in dieser saison, um 3 umsätze zu erzielen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_assists ) ) )
spieler, die in einer saison weniger fouls haben als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
nennen sie die spieler, bei denen die gesamtzahl der fouls in einer saison mindestens der von kobe bryant entspricht	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit kleineren umsätzen über eine saison als spieler kobe bryant über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in welchem jahr spielte kobe bryant für die la lakers?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string season ) ) )
für welche mannschaft hat kobe bryant im jahr 2004 gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string team ) ) )
in welcher saison hatte kobe bryant nur 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string season ) ) )
wen viele rebounds in der saison machten point guard kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_rebounds ) ) )
welche spieler haben höchstens 2 positionen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat weniger als 3 blöcke	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele blöcke hatte kobe während seines drei-punkte-gesamtspiels?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_blocks ) ) )
nennen sie die spieler mit erzielten vorlagen in einer beliebigen saison mit mindestens 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat die mindestpunktzahl erreicht?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele punkte erzielte kobe, als er für die lakers spielte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_points ) ) )
spieler, der in einer saison weniger als 4 blocks gemacht hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele rebounds hatte der lakerspieler kobe bryant?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_rebounds ) ) )
wie viele fouls hatte kobe bryant, als er 3 punkte hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_fouls ) ) )
welcher spieler hat 3 oder mehr spiele gespielt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat die gleichen oder mehr umsätze als kobe bryant gehabt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat mehr als 3 punkte bekommen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
finden sie die spieler mit umsätzen in einer bestimmten saison, die höchstens 3 entsprechen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele steals bekommt kobe in einer saison, in der er mehr als 3 steals hat?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_steals ) ) )
welcher spieler hat weniger vorlagen als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele blöcke hat kobe bryant gemacht, nachdem er 3 steals bekommen hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_blocks ) ) )
wie viele spiele hat kobe bryant gespielt, in denen er drei vorlagen gemacht hat?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_games_played ) ) )
spieler, der in einer saison keine 3 spiele bestritten hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_games_played ) ( string ! = ) ( number 3 game ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat eine gesamtanzahl von fouls unter 3 für die saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele rebounds hatte kobe bryant während der gesamten saison, als sein umsatz 3 betrug?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_rebounds ) ) )
anzahl der umsätze in einer saison von spieler kobe bryant, der 3 rebounds in einer saison hat	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_turnovers ) ) )
welcher spieler hat weniger assists pro saison als point guard kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele ganzjahresblöcke hatte kobe bryant im jahr 2004?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_blocks ) ) )
spieler, die in einer saison die gleiche anzahl an vorlagen hatten wie die spieler mit der niedrigsten gesamtanzahl an vorlagen von kobe bryants	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat in dieser saison mehr spiele als kobe bryant gespielt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele fouls hat kobe bryant in einer saison?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) )
welcher spieler hatte 3 oder mehr blöcke	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat die gleiche anzahl von rebounds in einer saison wie kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_rebounds ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte mehr vorlagen als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele steals hatte kobe bryant?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) )
wie viele punkte machte kobe bryant in der saison, in der er für los angeles lakers spielte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_points ) ) )
was spieler hatten weniger blöcke als kobe bryant in allen jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat die maximale anzahl an diebstählen?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat die gleiche menge oder weniger von assists als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
finden sie die spieler, die in einer bestimmten saison eine gesamtanzahl von diebstählen haben, die geringer ist als die gesamtanzahl der diebstähle, die kobe bryant in einer bestimmten saison erlangt hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
team von spieler kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ) )
in welcher position hat kobe bryant 3 umsätze erzielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string position ) ) )
welcher spieler hat die meisten positionen gespielt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string position ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte gleiche oder mehr fouls als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
dies gilt als die saison des spielers kobe bryant mit 3 blöcken	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string season ) ) )
anzahl der gespielten spiele in einer saison von spieler kobe bryant mit 3 punkten in einer saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_games_played ) ) )
finde die spieler, die für weniger als 3 punkte in einer bestimmten saison verantwortlich sind	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele assists hat kobe bryant in einer saison hergestellt?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) )
in welchem team hat kobe bryant 3 steals gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string team ) ) )
wie viele positionen	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.position ) ( string ! type ) ) ) )
wie viele umsätze hatte kobe bryant, als er drei blocks hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_turnovers ) ) )
wie viele umsätze macht kobe bryant, wenn er 3 assists in der saison hat?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_turnovers ) ) )
welche spieler hatten mehr als 3 umsätze in allen jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in welcher saison hat kobe bryant 3 rebounds bekommen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string season ) ) )
spieler, die im laufe einer saison keine drei steals haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_steals ) ( string ! = ) ( number 3 steal ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele umsätze hat kobe bryant gemacht	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_turnovers ) ) )
spieler von los angeles lakers oder cleveland cavaliers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string = ) ( call SW.concat en.team.lakers en.team.cavaliers ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat in einer saison in mehr spielen gespielt als kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler 3 oder weniger assists in dieser saison hatte	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele assists für die gesamte saison hatte kobe bryant zusammen mit drei blocks für die gesamte saison?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_assists ) ) )
welcher spieler hat die gleiche position wie kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele rebounds erzielte kobe bryant im jahr 2004?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_rebounds ) ) )
wer bekommt 3 oder mehr umsätze pro saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer führt das punkterennen in dieser saison bisher an?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, die in allen jahreszeiten mehr punkte als kobe bryant haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele umsätze kobe bryant in der saison machte, spielte er für los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_turnovers ) ) )
für welches team hat kobe in seinen drei steam-saisons gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string team ) ) )
welcher spieler hat in der saison so viele blocks gemacht wie kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
nennen sie einen spieler, dessen punktzahl nicht drei war	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_points ) ( string ! = ) ( number 3 point ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele blöcke wurden von kobe bryant hergestellt, der zum los angeles lakers team gehörte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_blocks ) ) )
anzahl der blöcke in einer saison von spieler kobe bryant, der 3 fouls in einer saison hat	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_blocks ) ) )
entweder 2004 oder 2010	( call SW.listValue ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) )
spieler, die mehr spiele in einer saison als die von kobe bryant spielen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler von spieler kobe bryants team	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat weniger rebound in allen jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler haben in einer saison die gleiche anzahl an fouls begangen wie kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
nenne einen spieler mit weniger als drei fouls	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele vorlagen hat kobe bryant über alle jahreszeiten	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_assists ) ) )
in welcher saison hat kobe bryant an insgesamt 3 spielen teilgenommen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string season ) ) )
welches team hat kobe bryant bekommen 3 rebounds in	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string team ) ) )
nennen sie einen spieler mit mindestens drei gespielten spielen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele umsätze hat kobe bryant gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) )
wie viele rebounds hat kobe bryant in dieser saison bisher gemacht?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) )
anzahl der fouls in einer saison von spieler kobe bryant, der point guard ist	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_fouls ) ) )
in welcher saison hat kobe 3 punkte erzielt	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string season ) ) )
benenne andere spieler als point guard	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string ! = ) en.position.point_guard ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
anzahl der diebstähle in einer saison von spieler kobe bryant mit 3 umsätzen in einer saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_steals ) ) )
spieler mit fouls in einer saison nicht mehr als fouls in einer saison von spieler kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele fouls während der ganzen saison hatte kobe bryant als lakerer?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_fouls ) ) )
welche spieler hatten weniger als 3 spiele in allen jahreszeiten gespielt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
nenne einen spieler mit nicht mehr als drei punkten pro saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat nicht weniger als 3 die ganze saison über assists	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
anzahl der diebstähle in einer saison von spieler kobe bryant mit 3 punkten in einer saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_steals ) ) )
welche spieler haben in einer saison 3 oder mehr fouls begangen?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele karriereumsätze hat kobe bryant?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_turnovers ) ) )
nennen sie den spieler, der in einer saison weniger stiehlt als der spieler kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte nicht mehr als drei umsätze	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit den geringsten umsätzen pro spiel während der saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele rebounds hatte kobe bryant die ganze saison über?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) )
welche position hat kobe bryant für die lakers gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string position ) ) )
spieler, der mehr spiele in einer saison gespielt hat spieler kobe bryant hat in einer saison gespielt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat die gleiche anzahl oder weniger rebounds als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte in einer saison mehr umsätze als kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat mehr als 3 rebounds in jeder saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
kobe bryants anzahl der spiele in der saison hatte er 3 abpraller	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_games_played ) ) )
für welche mannschaften hat kobe in seiner karriere gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string team ) ) )
welcher spieler hatte mehr als 3 rebounds?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat maximal 3 blöcke	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele steals während der gesamten saison hatte kobe bryant in 3 spielen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_steals ) ) )
wer hat weniger umsätze als kobe bryant gehabt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler gehört zu kobe bryant steam?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in welchem jahr hatte kobe bryant drei steals?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string season ) ) )
wer bekommt nicht mehr fouls jedes jahr als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
entweder 2004 oder 2010	( call SW.listValue ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) )
wie viele umsätze hat kobe bryant in den jahreszeiten mit über 3 stehlen	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_turnovers ) ) )
fouls von kobe bryant im jahr 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_fouls ) ) )
welcher spieler hatte drei oder mehr blöcke	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was spieler hatten 3 oder mehr vorlagen in allen jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, der mehr spiele in einer saison gespielt hat als spieler kobe bryant in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hatte mehr punkte als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler hatten die gleichen oder mehr blöcke als kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in welchem team ist kobe bryant?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string team ) ) )
welche spieler für die lakerer oder kavaliere spielen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string = ) ( call SW.concat en.team.lakers en.team.cavaliers ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
nennen sie einen point guard oder einen stürmer	( call SW.listValue ( call SW.concat en.position.point_guard en.position.forward ) )
welcher spieler hat für die wenigsten mannschaften gespielt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string team ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele blöcke hatte kobe bryant in der saison?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) )
welcher spieler hat in einer saison 3 blocks gemacht?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele rebounds hatte kobe bryant in der saison 2004?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_rebounds ) ) )
wie viele umsätze kobe bryant in der saison gemacht hat, hat er 3 fouls gemacht	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_turnovers ) ) )
im jahr 2004, wie viele fouls hat kobe gegen ihn bekommen	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_fouls ) ) )
was war die gesamtzahl der blöcke für kobe bryant in den jahreszeiten, in denen er nur drei fouls hatte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_blocks ) ) )
in der saison hatte er 3 blocks kobe bryant spielte für welches team	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string position ) ) )
spieler, die stürmer oder point guards sind	( call SW.listValue ( call SW.concat en.position.point_guard en.position.forward ) )
wie viele rebounds hatte kobe bryant, als er drei fouls begangen hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_rebounds ) ) )
für welches team kobe bryant in einer saison 3 assists gemacht hat	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string team ) ) )
anzahl der punkte in einer saison von spieler kobe bryant, der 3 vorlagen in einer saison hat	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_points ) ) )
wie viele umsätze gibt kobe bryant als point guard auf?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_turnovers ) ) )
für welches team hat kobe bryant drei spiele gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string team ) ) )
wie viele blöcke wurden von kobe bryant in 3 spielen gemacht	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_blocks ) ) )
wer hat die wenigsten rebounds gehabt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele fouls hatte kobe bryant als point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_fouls ) ) )
nennen sie einen spieler mit den wenigsten umsätzen in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat am anfang der saison die meisten assists gemacht?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welches team hat kobe bryant als point guard gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string team ) ) )
wie viele steals hat kobe bryant in seiner karriere bekommen?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) )
wie viele spiele hat kobe bryant gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_games_played ) ) )
wie viele blöcke hatte kobe bryant in einem spiel, in dem er drei umsätze hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_blocks ) ) )
spieler, der im team am wenigsten punkte erzielt hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string team ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in der saison, in der er 3 gemacht hat, stiehlt er, in wie vielen spielen kobe bryant gespielt hat	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_games_played ) ) )
wie viele umsätze hatte kobe bryant, als er drei fouls begangen hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_turnovers ) ) )
wie viele punkte hat kobe bryant für die lakers?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_points ) ) )
welcher spieler hat weniger als 3 fouls gespielt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat weniger umsätze als kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
für welches team spielt kobe bryant point guard?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string team ) ) )
wie viele spiele hatte kobe im laufe der saison drei mal geklaut?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_games_played ) ) )
was ist die anzahl der rebounds von kobe bryant im laufe der saison?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) )
in der saison, in der kobe bryants insgesamt 3 assists hatte, in welcher mannschaft war er?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string team ) ) )
wie viele blöcke hat kobe bryant durchschnittlich in einer bestimmten saison	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) )
wie viele rebounds hat kobe bryant gehabt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_rebounds ) ) )
in welcher saison hatte kobe bryant 3 umsätze?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string season ) ) )
in der saison, in der kobe bryant drei spiele bestritt, hatte er wie viele umsätze	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_turnovers ) ) )
wie viele rebounds hatte kobe in spielen, in denen er drei punkte erzielte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_rebounds ) ) )
in der saison, in der er 3 punkte erzielte, gab er die anzahl der abpraller an, für die er kobe bryant verantwortlich war	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_rebounds ) ) )
spieler, die die gleiche anzahl von umsätzen in einer saison hatten wie kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte in dieser saison die meisten punkte?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit einer gesamtzahl von rebounds in einer saison von nicht mehr als drei	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler spielte 2004 oder 2010?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
während seiner saison bei den los angeles lakers hat kobe bryant wie viele punkte gesammelt	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_points ) ) )
in wie vielen spielen hat kobe bryant 3 steals bekommen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_games_played ) ) )
welcher spieler hatte mehr rebounds als kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
finden sie den spieler mit der höchsten anzahl von blöcken auf ihrem konto in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
finde die jahreszeit, in der kobe bryant insgesamt 3 steals hatte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_steals ) ) )
in einer saison hat der spieler die meisten rebounds	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler haben in den gleichen jahreszeiten wie kobe bryant gespielt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele blocks macht kobe bryant in der saison mit nur 3 fouls gegen ihn?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_blocks ) ) )
wie viele fouls hat kobe bryant in der saison, wenn er 3 vorlagen hat?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_fouls ) ) )
welcher spieler hat mindestens so viele punkte wie kobe bryant erzielt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat mehr spiele in einer saison als kobe bryant gespielt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit den meisten diebstählen in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler hatten mehr als 3 blöcke	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele punkte hat kobe bryant in 3 spielen erzielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_points ) ) )
nennen sie einen spieler, der keine drei umsätze hatte	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string ! = ) ( number 3 turnover ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele punkte hat kobe bryant durchschnittlich in spiel 3 in einer saison?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_points ) ) )
wie viele rebounds erzielte kobe bryant in einer saison, in der er drei fouls begangen hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_rebounds ) ) )
welcher spieler hat pro saison am meisten gestohlen?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat so viele ganzjahres-steals wie kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
hat kobe bryant 2004 gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string season ) ) )
saison des spielers kobe bryant, der in einer saison 3 punkte hat	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string season ) ) )
wie viele vorlagen hat kobe bryant nach 3 fouls bekommen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_assists ) ) )
wie viele umsätze erzielte kobe bryant während der saison?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_turnovers ) ) )
wer hat die meisten blöcke in einer saison gehabt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat mehr als 3 rebounds gehabt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele fouls in einer saison haben die los angeles lakers kobe bryant begangen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_fouls ) ) )
wie viele blöcke wurden 2004 von kobe bryant hergestellt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_blocks ) ) )
welcher spieler hat die mindestanzahl an blöcken von kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler spielen point guard oder forward?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.concat en.position.point_guard en.position.forward ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele spiele hat kobe bryant gespielt und dabei 3 fouls begangen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_games_played ) ) )
für welche mannschaft hat kobe bryant im jahr 2004 gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string team ) ) )
welcher spieler hat nicht 3 rebounds erzielt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_rebounds ) ( string ! = ) ( number 3 rebound ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele fouls hat kobe bryant im jahr 2004 begangen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_fouls ) ) )
wie viele vorlagen erhielt kobe bryant, der zum los angeles-team gehörte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_assists ) ) )
wie viele steals hatte kobe bryant mit drei umsätzen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_steals ) ) )
wie viele diebstähle hatte kobe von point guards eines teams?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_steals ) ) )
wie viele punkte erzielte kobe bryant nach 3 spielen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_points ) ) )
ein spieler mit mindestens 3 fouls	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
anzahl der vorlagen in einer saison von spieler kobe bryant, der in einer saison 3 spiele gespielt hat	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_assists ) ) )
in der saison, in der er für 3 steals verantwortlich war, stand der name des teams auf kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string team ) ) )
wie viele saisonspiele hat kobe bryant als la laker gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_games_played ) ) )
nennen sie die anzahl der assists, die kobe bryant während einer saison zuschreibt	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) )
wie viele rebounds während der gesamten saison hatte kobe bryant als los angeles laker	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_rebounds ) ) )
in welcher saison hat kobe bryant an 3 spielen teilgenommen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_games_played ) ) )
welcher spieler hat die wenigsten positionen gespielt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string position ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele teams sind in der nba	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.team ) ( string ! type ) ) ) )
in welcher saison hat kobe bryant 3 vorlagen bekommen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string season ) ) )
finden sie die spieler, die in einer bestimmten saison nicht mehr als 3 spiele gespielt haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, der in einer saison mehr stiehlt als spieler kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele punkte hat kobe bryant in jeder saison bei den los angeles lakers erzielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_points ) ) )
finden sie die saison, in der kobe bryant 3 fouls begangen hat, und notieren sie die anzahl der umsätze im gleichen zeitraum	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_turnovers ) ) )
welcher spieler ist nicht in der position eines point guard	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string ! = ) en.position.point_guard ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler spielt die position des point guard oder stürmer	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.concat en.position.point_guard en.position.forward ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele steals hat kobe im jahr 04 bekommen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_steals ) ) )
welcher spieler hat nicht mehr spiele gespielt als kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was spieler mehr punkte als kobe bryant in einer saison gemacht	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele spiele hat kobe bryant in dieser saison drei mal gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_games_played ) ) )
welche position hatte kobe bryant 3 vorlagen als	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string position ) ) )
anzahl der rebounds in einer saison von kobe bryant vom los angeles lakers team	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_rebounds ) ) )
wie viele rebounds hatte kobe bryant in einer saison?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) )
wie viele assists hatte kobe bryant, als er drei blocks hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_assists ) ) )
wie viele blöcke hatte spieler kobe bryant mit 3 vorlagen in dieser saison?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_blocks ) ) )
welche spieler waren in weniger als zwei teams?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string team ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit mehr rebounds in einer saison als der spieler kobe bryant in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
kobe bryant hat 3 steals bekommen	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_steals ) ) )
spieler, die 2004 nicht gespielt haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat 3 oder mehr stiehlt in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat mehr oder weniger als 3 stiehlt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_steals ) ( string ! = ) ( number 3 steal ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in der gleichen saison, in der er 3 punkte gesammelt hat, wie viele umsätze kobe bryant gemacht hat	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_turnovers ) ) )
für welches team hatte kobe bryant 3 steals?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string team ) ) )
spieler, die im selben team wie kobe bryant spielten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat 3 oder weniger blöcke bekommen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat mindestens 3 spiele in einer saison gespielt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat die meisten vorlagen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler 3 oder mehr hatte, stiehlt in dieser saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele blöcke hatte kobe bryant, als er drei vorlagen hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_blocks ) ) )
wer hat den rekord für stiehlt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit vorlagen über eine saison nicht weniger als die des spielers kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele fouls hat kobe bryant bei point guard?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_fouls ) ) )
welcher spieler durchschnittlich mehr umsätze pro saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
saison 2004 von kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string season ) ) )
welche spieler sind point guards oder stürmer	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.concat en.position.point_guard en.position.forward ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat so viele fouls wie kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat die meisten blöcke in einer saison?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wann hat kobe bryant 3 assists in der gesamten saison?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_assists ) ) )
welche spieler haben so viele rebounds wie kobe bryant in einer saison?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
anzahl der umsätze in einer saison von spieler kobe bryant aus der saison 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_turnovers ) ) )
welche position ist kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string position ) ) )
spieler, der in allen spielzeiten die wenigsten fouls hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele punkte hat kobe bryant in einer saison bekommen	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_points ) ) )
wie viele spiele hat kobe bryant in der saison 2004 gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_games_played ) ) )
für welches team hat kobe bryant 3 punkte erzielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string team ) ) )
welche jahreszeit hatte kobe bryant 3 umsätze?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string season ) ) )
wie viele spiele bestritt kobe bryant in der saison, in der er nur drei abpraller hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_games_played ) ) )
wie lautet die nummer der position?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.position ) ( string ! type ) ) ) )
wie viele steals hatte kobe bryant, als er drei punkte erzielte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_steals ) ) )
spieler, der in einer saison die gleichen rebounds hat wie der spieler kobe bryant in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_rebounds ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welches jahr 2004 oder 2010	( call SW.listValue ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) )
wer hat mehr als 3 umsätze in dieser saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
finden sie die spieler, die für 3 oder weniger fouls in einer bestimmten saison verantwortlich sind	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
während des jahres spielte er für die los angeles lakers, wie viele fouls kobe bryant hatte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_fouls ) ) )
wie viele fouls hatte kobe bryant in der saison, in der er point guard spielte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_fouls ) ) )
für die saison, in der er für 3 blocks verantwortlich war, wie viele fouls hat kobe bryant begangen	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_fouls ) ) )
wie viele vorlagen hat kobe bryant in einer saison mit mehr als 3 gestohlen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_assists ) ) )
wie viele blöcke hat kobe bryant in der saison mit genau 3 vorlagen gemacht?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_blocks ) ) )
in welcher saison hat kobe bryant 3 fouls begangen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string season ) ) )
kobe bryant prallt über alle jahreszeiten als point guard ab	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_rebounds ) ) )
welcher spieler hat mehr als 3 umsätze in jeder saison, die sie gespielt haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit maximal 3 stiehlt in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler hatten mehr blöcke als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in welcher position hat kobe bryant während der saison nur drei spiele gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string position ) ) )
team von spieler kobe bryant, der 3 fouls in einer saison hat	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string team ) ) )
spieler, dessen fouls in einer saison nicht 3 sind	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string ! = ) ( number 3 foul ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat 3 oder weniger fouls	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
die anzahl der spiele, die die ganze saison über gespielt wurden, entsprach nicht weniger als kobe bryants	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat mehr blöcke pro saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
anzahl der rebounds in einer saison von spieler kobe bryant mit 3 umsätzen in einer saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_rebounds ) ) )
spieler, die die gleichen oder weniger fouls haben als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele umsätze erzielte kobe bryant mit drei rebounds während der saison?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_turnovers ) ) )
welcher spieler ist auf point guard oder forward position	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.concat en.position.point_guard en.position.forward ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte maximal 3 vorlagen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
für welche mannschaft hat kobe bryant gespielt und dabei 3 vorlagen pro saison gemacht?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string team ) ) )
spieler, der nie 3 spiele in einer saison gespielt hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_games_played ) ( string ! = ) ( number 3 game ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in welchem team hat kobe bryant 3 umsätze erzielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string team ) ) )
wie viele umsätze hat kobe bryant in der saison mit mehr als 3 spielen im dienst aufgegeben?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_turnovers ) ) )
kobe bryant hatte letztes jahr wie viele vorlagen	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_assists ) ) )
wie viele spiele als kobe bryant für die la lakers gespielt	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_games_played ) ) )
welcher spieler hat die wenigsten fouls pro saison?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat in dieser saison in den meisten spielen gespielt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele rebounds hatte kobe bryant für die los angeles lakers?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_rebounds ) ) )
wie viele punkte hat kobe bryant in der gesamten saison gesammelt?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) )
wie viele spiele hat kobe bryant gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_games_played ) ) )
kobe bryant spiel point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string position ) ) )
welcher spieler hat in einer saison mehr als 3 blocks gemacht?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat in einer saison so viel gestohlen wie kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_steals ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
anzahl der blöcke in einer saison von spieler kobe bryant, der 3 punkte in einer saison hat	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_blocks ) ) )
welcher spieler führt kobe bryant für rebounds pro saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele assists hatte kobe bryant in einer saison?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_assists ) ) )
wie viele blöcke hatte kobe bryant, als er drei assists hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_blocks ) ) )
wer hat höchstens 3 vorlagen insgesamt in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, die in einer saison mehr vorlagen hatten als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit nicht weniger als 3 punkten in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele steals bekommt kobe bryant in einer saison, in der er 3 punkte hat?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_steals ) ) )
wie viele rebounds hat kobe bryant in 3 spielen geschafft?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_rebounds ) ) )
der in dieser saison bisher weniger als 3 spiele bestritten hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_games_played ) ( string ! = ) ( number 3 game ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was war das team von kobe bryant im jahr 2004?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string team ) ) )
was spieler hatten gleiche oder mehr vorlagen als kobe bryant in allen jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
kobe bryants erholt sich für die saison	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) )
wie viele all season points hatte kobe bryant als point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_points ) ) )
spieler, der die gleiche position wie kobe bryant spielt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
nennen sie die spieler, die für weniger als 3 blöcke in einer saison verantwortlich sind	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele rebounds hatte kobe bryant in dieser saison?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) )
in welcher jahreszeit hat kobe bryant durchschnittlich 3 blöcke	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string season ) ) )
wie wurden irgendwelche diebstähle von kobe bryant?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) )
wie viele fouls hat kobe bryant nach 3 vorlagen gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_fouls ) ) )
in welcher position konnte kobe 3 vorlagen bekommen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string position ) ) )
spieler, dessen anzahl an blöcken in einer saison geringer ist als die des spielers kobe bryant in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was die spieler die ganze saison über unterstützen, sind über 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
gibt es spieler, deren gesamtzahl an vorlagen in einer bestimmten saison höchstens 3 beträgt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat mehr ganzjährig stiehlt als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat die gleiche anzahl von spielen wie kobe bryant gespielt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_games_played ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat weniger als 3 spiele in dieser saison gespielt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, die in allen jahreszeiten mehr stehlen als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler hatten 3 oder weniger stiehlt in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele umsätze erzielte kobe, als er mit drei fouls in der saison spielte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_turnovers ) ) )
namen spieler, die im jahr 2004 nicht gespielt haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele umsätze hat kobe bryant nach 3 stehlen erzielt	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_turnovers ) ) )
spieler, die eine oder zwei verschiedene positionen einnehmen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
anzahl der punkte in einer saison von spieler kobe bryant, der am point guard ist	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_points ) ) )
in welchem jahr hat kobe bryant gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ) )
was ist der name eines spielers mit weniger umsätzen pro saison als kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
für den zeitraum, in dem kobe bryant point guard war, nenne die anzahl der abpraller, die er in dieser saison hatte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_rebounds ) ) )
spieler mit nicht mehr blöcken in einer saison als spieler kobe bryant in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele saisons hat kobe bryant gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ) )
saison des spielers kobe bryant, der über eine saison 3 rebounds hat	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string season ) ) )
wie viele rebounds hatte kobe bryant, als er 3 steals hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_rebounds ) ) )
wie viele rebounds hatte kobe bryant, der in drei spielen spielte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_rebounds ) ) )
in welchem jahr hat kobe bryant drei spiele gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_games_played ) ) )
welcher spieler ist der vielseitigste und spielt die meisten positionen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string position ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat die mindestanzahl an spielen gespielt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat maximal 3 umsätze	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele fouls hatte kobe bryant, als er drei umsätze hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_fouls ) ) )
spieler, der eine mannschaft hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string team ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in welcher saison hatte kobe bryant drei steals?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string season ) ) )
welcher spieler hatte in dieser saison weniger umsätze als kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat die mindestanzahl von umsätzen gemacht	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
finden sie den spieler, der in derselben saison die gleiche oder eine geringere anzahl von vorlagen gemacht hat wie kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was ist die anzahl der umsätze von kobe bryant, die 3 punkte in der saison gemacht	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_turnovers ) ) )
in wie vielen spielen hat kobe bryant 3 fouls begangen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_games_played ) ) )
wie viele punkte hat kobe bryant in einer saison gemacht, in der er 3 plus rebounds gemacht hat?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_points ) ) )
welcher spieler hatte die gleiche anzahl von vorlagen wie kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele umsätze hatte kobe während der saison im durchschnitt mit drei assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_turnovers ) ) )
wie viele steals hatte kobe bryant, als er 3 blocks hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_steals ) ) )
wie viele vorlagen hat kobe bryant gehabt	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_assists ) ) )
hat kobe bryant durchschnittlich 3 fouls und 3 blocks pro spiel über eine saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_blocks ) ) )
wie viele blöcke hat kobe bryant zum point guard gemacht?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_blocks ) ) )
welcher spieler hatte die wenigsten umsätze in dieser saison?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele fouls hatte kobe bryant in dieser saison?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) )
für welche mannschaft hat kobe bryant gespielt, während er nur 3 fouls in einer saison hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string team ) ) )
wie viele blöcke hatte kobe bryant, als er 3 punkte hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_blocks ) ) )
welche spieler mit 13 rebounds im laufe der saison gemacht haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele spiele bestritt kobe bryant, der im laufe der saison drei rebounds erzielte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_games_played ) ) )
wie viele assists hat kobe bryant in einer saison insgesamt für point guard gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_assists ) ) )
wie viele spiele hat kobe genau 3 umsätze gegeben	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_games_played ) ) )
wie viele blöcke macht kobe bryant normalerweise, wenn er bereits 3 hat?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_blocks ) ) )
wie viele spieler haben weniger oder mehr als 3 umsätze erzielt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string ! = ) ( number 3 turnover ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat in den meisten spielen gespielt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler hatten mehr als drei stiehlt in allen jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit der anzahl der blöcke in einer saison als der von spieler kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_blocks ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
anzahl der vorlagen in einer saison von spieler kobe bryant, dessen team los angeles lakers ist	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_assists ) ) )
das ist die mannschaft von kobe bryant, die 3 spiele gespielt hat	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string team ) ) )
spieler mit weniger als 3 punkten in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat weniger als drei punkte erzielt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
für die saison, die die gleiche anzahl von spielen wie kobe bryant spielte	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_games_played ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
nennen sie den spieler, der die meisten teams vertreten hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string team ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
beachten sie die spieler, die in einer saison insgesamt mehr als 3 punkte gesammelt haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
kobe bryant hatte 3 umsätze	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_turnovers ) ) )
welcher spieler hat mehr rebounds pro saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat mehr oder weniger als 3 punkte gehabt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_points ) ( string ! = ) ( number 3 point ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, die 2004 bis 2010 gespielt haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, der in dieser saison mehr rebounds als kobe bryant hatte	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in welchem jahr spielte kobe bryant point guard?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string season ) ) )
wer hat weniger fouls als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
erwähnen sie die punkte des spielers kobe bryant, der in dieser saison drei rebounds hatte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_points ) ) )
wie viele umsätze hat kobe bryant gemacht	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_turnovers ) ) )
wie viele steals hat kobe nach 3 umsätzen bekommen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_steals ) ) )
wie viele rebounds hat kobe bryant gehabt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_rebounds ) ) )
wie viele vorlagen hat kobe bryant in einer saison gemacht?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_assists ) ) )
in welcher saison hatte kobe bryant 3 umsätze?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string season ) ) )
wie viele punkte erzielte kobe bryant, als er drei rebounds hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_points ) ) )
welcher spieler hat in einer saison weniger als 4 spiele gespielt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
anzahl der mannschaften	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.team ) ( string ! type ) ) ) )
was spieler mehr als 3 fouls in einer saison gemacht	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
der spieler mit den wenigsten blöcken in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele punkte bekommt kobe bryant in der saison mit 3 vorlagen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_points ) ) )
welcher spieler hat mindestens drei steals	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, die über alle jahreszeiten die gleiche anzahl von rebounds haben wie kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte die gleichen oder mehr rebounds wie kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte in dieser saison die meisten fouls?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte weniger als 3 umsätze	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte die wenigsten vorlagen?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche position kobe bryant in der saison gespielt hat, hat er 3 rebounds gemacht	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string position ) ) )
welche spieler hatten in einer bestimmten saison die geringsten umsätze?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat die wenigsten fouls	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
finden sie die spieler, die in einer bestimmten saison mehr als 3 steals gemacht haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler nicht mit 3 umsätzen in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string ! = ) ( number 3 turnover ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, der in einer saison die meisten rebounds hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche position ist kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string position ) ) )
welcher spieler macht weniger als 3 rebounds pro karriere-durchschnittssaison?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit der gleichen unterstützung pro spiel durchschnittlich als kobe bryant über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat die niedrigsten durchschnittlichen blöcke pro saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat die meisten abpraller	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, dessen anzahl an vorlagen in einer saison der anzahl der vorlagen von kobe bryant in einer saison entspricht	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
für welche mannschaft spielte kobe bryant, als er in einer saison nur drei rebounds hatte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string team ) ) )
spieler mit weniger und mehr als 3 rebounds in allen jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_rebounds ) ( string ! = ) ( number 3 rebound ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
team von spieler kobe bryant, der über eine saison 3 assists hat	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string team ) ) )
in der saison, in der er insgesamt 3 spiele bestritt, spielte kobe bryant auf welcher position	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string position ) ) )
wie viele punkte erzielte kobe bryant in einer saison?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_points ) ) )
spieler, die für ein oder zwei nba-teams gespielt haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string team ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele steals hatte kobe bryant für die los angeles lakers?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_steals ) ) )
spieler mit den meisten punkten in allen spielzeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele punkte hatte kobe bryant, als er drei fouls hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_points ) ) )
welcher spieler durchschnittlich nicht mehr als 3 vorlagen pro spiel hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string ! = ) ( number 3 assist ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte nicht 3 vorlagen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string ! = ) ( number 3 assist ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler nicht mit 3 blöcken über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_blocks ) ( string ! = ) ( number 3 block ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was war die vollständige anzahl der steals in der saison, in der kobe bryant nur drei punkte hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_steals ) ) )
wer hat mehr gestohlen als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat weniger als 3 vorlagen gehabt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
beachten sie die spieler mit einer gesamtanzahl von blöcken in einer beliebigen saison, die mehr als die gesamtanzahl von blöcken in einer von kobe bryant erworbenen saison sind	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit nicht mehr als 3 stehlen eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele umsätze erzielte kobe bryant, nachdem er drei blocks gemacht hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_turnovers ) ) )
anzahl der fouls in einer saison von spieler kobe bryant mit 3 blöcken in einer saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_fouls ) ) )
anzahl der umsätze in einer saison von spieler kobe bryant, der 3 umsätze in einer saison hat	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_turnovers ) ) )
welcher spieler hatte mehr blöcke als kobe bryant in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat die meisten umsätze in allen jahreszeiten gemacht	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte die meisten fouls in einer saison?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler kobe bryant hat in dieser saison 3 fouls begangen	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_steals ) ) )
nennen sie die gesamtpunkte von kobe bryant während der saison und notieren sie den vergleich mit dem spieler, dessen gesamtanzahl an blöcken während der saison 3 betrug	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_points ) ) )
was spieler nicht mehr als drei punkte in einer saison erzielte	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat so viele fouls oder mehr gehabt wie kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
nennen sie einen spieler mit weniger umsätzen während der saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
stiehlt durch kobe bryant in allen jahreszeiten mit 3 oder mehr punkten	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_steals ) ) )
nenne einen spieler, der in einer saison keine blöcke mehr hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele spiele hat kobe bryant in einer saison gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_games_played ) ) )
wie viele rebounds kobe bryant in der saison gemacht hat, hat er für los angeles lakers gespielt	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_rebounds ) ) )
welche spieler spielen nicht für die la lakers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string ! = ) en.team.lakers ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in welchem jahr hat kobe bryant in drei spielen gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string season ) ) )
anzahl der diebstähle in einer saison von spieler kobe bryant mit 3 blöcken in einer saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_steals ) ) )
welcher spieler hatte nicht mehr als drei blöcke	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler haben mindestens 3 umsätze in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele spiele hat kobe bryant gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_games_played ) ) )
anzahl der blöcke in einer saison von spieler kobe bryant vom team los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_blocks ) ) )
wie viele fouls hat kobe bryant in der gleichen saison begangen, in der er insgesamt 3 assists hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_fouls ) ) )
wie viele steals hatte kobe bryant im jahr 2004?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_steals ) ) )
anzahl der fouls in einer saison von spieler kobe bryant, der in einer saison 3 spiele bestritten hat	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_fouls ) ) )
welcher spieler hatte nicht mehr als die anzahl der diebstähle von kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele blöcke hat kobe bryant gemacht, als er drei punkte hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_blocks ) ) )
welcher spieler hat maximal 3 rebounds in der gesamten saison?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
nennen sie einen spieler, der die gleiche anzahl von diebstählen hatte wie kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_steals ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat die meisten vorlagen in der saison?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie lautet die spielernummer für eine bestimmte mannschaft?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.team ) ( string ! type ) ) ) )
wie viele rebounds hatte kobe bryant, als er drei fouls hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_rebounds ) ) )
was war die gesamtzahl der vorlagen für kobe bryant in einer saison, in der er drei abpraller hatte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_assists ) ) )
welche spieler haben zeit in mindestens 3 spielen bekommen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte weniger als 3 punkte in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_points ) ( string ! = ) ( number 3 point ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
nenne einen spieler mit weniger blöcken als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
anzahl der diebstähle in einer saison von spieler kobe bryant, der in einer saison 3 spiele gespielt hat	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_steals ) ) )
wer ist jemand mit weniger als 3 blöcken in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche position spielt kobe bryant, wenn er genau 3 vorlagen in einer saison hat?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string position ) ) )
für welches team kobe bryant in einer saison 3 blocks gemacht hat	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string team ) ) )
wie viele punkte erzielte kobe bryant in drei gespielten spielen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_points ) ) )
wer hatte die meisten stiehlt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele rebounds hat kobe bryant in den saisons bekommen? er erzielte 3 punkte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_rebounds ) ) )
wie viele spiele hat kobe bryant gespielt, in denen er drei blocks gemacht hat?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_blocks ) ) )
welcher spieler hatte 3 oder weniger umsätze	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte so viele blöcke wie kobe bryant über als saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_blocks ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte mehr als 3 vorlagen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
dies ist die saison des spielers kobe bryant, der 3 spiele gespielt hat	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string season ) ) )
für welches team hat kobe bryant gespielt, als er 3 blocks hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string team ) ) )
wie viele punkte hatte kobe bryant in allen jahreszeiten?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_points ) ) )
wie viele punkte erzielte kobe bryant als point guard?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_points ) ) )
wie viele vorlagen hat kobe nach 3 punkten bekommen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_assists ) ) )
wie viele umsätze hat kobe bryant in einer saison gemacht?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) )
wie viele steals hatte kobe bryant die ganze saison über?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) )
welcher spieler hatte die gleichen oder weniger blöcke wie kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele steals hat kobe bryant während einer saison gemacht, als er für die los angeles lakers gespielt hat?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_steals ) ) )
welcher spieler hat nicht mehr als drei ganzjahresblöcke	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer passt oder schlägt kobe bryant in stiehlt pro saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, dessen anzahl der umsätze in einer saison höher ist als die des spielers kobe bryant in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, die 2004 nicht gespielt haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit mehr als drei blöcken in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche position hat kobe bryant gespielt, als er 3 all-season-steals gemacht hat?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string position ) ) )
welcher spieler hat die meisten positionen gespielt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string position ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat die gleichen oder weniger stiehlt als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele fouls hat kobe bryant pro saison als lakrer gemittelt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_fouls ) ) )
nennen sie die saison, in der kobe bryant drei blocks absolvierte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_blocks ) ) )
welcher spieler hatte in dieser saison weniger fouls als kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche position hatte der kobe-spieler, als er drei vorlagen hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string position ) ) )
was ist die punkte kobe bryant erzielte in der saison 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_points ) ) )
wie viele vorlagen hatte kobe bryant, als er point guard spielte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_assists ) ) )
wie viele spiele hat kobe bryant mehr als 3 umsätze in allen jahreszeiten gehabt	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_turnovers ) ) )
nennen sie einen spieler, der mindestens so viele vorlagen hatte wie kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, der mindestens 3 vorlagen in einer saison hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche jahreszeiten hat kobe bryant gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ) )
welche spieler haben in einer saison die gleiche anzahl von rebounds gemacht wie kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_rebounds ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele steals hat kobe bryant im jahr 2004 bekommen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_steals ) ) )
wer hat die gleichen blöcke pro saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_blocks ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele punkte hatte kobe bryant auf den los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_points ) ) )
was war die anzahl der umsätze für spieler kobe bryant, als er nur drei steals in einer saison hatte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_turnovers ) ) )
wie viele punkte erzielte kobe bryant, als er drei blocks machte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_points ) ) )
welcher spieler hatte in einer saison noch keine drei rebounds?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_rebounds ) ( string ! = ) ( number 3 rebound ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer ist ein spieler mit weniger rebounds als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was war die gesamtzahl der fouls in einer saison für kobe bryant, als er nur drei blocks hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_fouls ) ) )
welcher spieler hatte weniger punkte in der saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat noch keine 3 blöcke gemacht	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_blocks ) ( string ! = ) ( number 3 block ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele rebounds hat kobe bryant im jahr 2004 gemacht?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_rebounds ) ) )
gesamtpunkte von kobe bryant über eine saison	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) )
wer hat am wenigsten spiele gespielt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele punkte hatte kobe bryant, als er 3 steals hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_points ) ) )
wie viele fouls hat kobe in seinen drei punktespielen in der gesamten saison durchschnittlich begangen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_fouls ) ) )
welcher spieler hat nicht mehr als drei spiele gespielt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat die meisten umsätze in einer saison?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
kobe bryant gehört zum los angeles lakers team	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string team ) ) )
anzahl gespielter spiele in einer saison von spieler kobe bryant, der in einer saison 3 spiele gespielt hat	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_games_played ) ) )
nennen sie einen spieler mit nicht mehr punkten pro saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, der kein los angeles laker ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string ! = ) en.team.lakers ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was ist die anzahl der blöcke von kobe bryant, der im laufe der saison 3 rebounds gemacht hat?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_blocks ) ) )
anzahl der blöcke in einer saison von spieler kobe bryant mit 3 umsätzen in einer saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_blocks ) ) )
statistiken von kobe bryant während der saison 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string season ) ) )
welche nummer hat kobe bryant und wie viele vorlagen hat er?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string team ) ) )
wie viele fouls hat kobe bryant in der saison, wenn er insgesamt 3 steals macht?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_fouls ) ) )
welcher spieler spielt point guard oder stürmer?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.concat en.position.point_guard en.position.forward ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele vorlagen werden von kobe bryant im laufe der saison abgegeben?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) )
welcher spieler hat die meisten umsätze in einer saison gehabt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
finden sie den spieler mit einer gesamtzahl von blöcken, die kleiner ist als die gesamtzahl der von kobe bryant in einer beliebigen saison ausgeführten blöcke	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, der mehr fouls begangen hat als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche position hat kobe bryant gespielt, als er drei blocks hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string position ) ) )
wer ist besser kobe bryant oder lebron james	( call SW.listValue ( call SW.concat en.player.kobe_bryant en.player.lebron_james ) )
welches gespielt hat, hat auf den meisten mannschaften gespielt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string team ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
zu welchen jahreszeiten hatte kobe bryant nur drei schnäppchen	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string season ) ) )
wer hatte die wenigsten stiehlt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in welchem team ist kobe bryant?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string team ) ) )
wie viele verschiedene positionen gibt es	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.position ) ( string ! type ) ) ) )
welche position hat kobe bryant gespielt, als er 3 rebounds bekam?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string position ) ) )
welche position spielte kobe bryant auf den lakern?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string position ) ) )
welcher spieler hat 2004 oder 2010 nicht gespielt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
namen spieler, die nicht in los angeles lakers sind	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string ! = ) en.team.lakers ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte in dieser saison 3 oder weniger punkte?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
auf welcher mannschaft spielte kobe bryant, als er drei vorlagen hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string team ) ) )
zu welchen jahreszeiten spielte kobe bryant point guard?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string season ) ) )
welche spieler haben weniger als oder gleich der anzahl der rebounds als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele steals hatte kobe bryant in der saison, in der er nur drei rebounds hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_steals ) ) )
gibt es spieler, deren gesamtes assistenspiel geringer ist als das assistenspiel, das kobe bryant in der gleichen saison erworben hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
finden sie den spieler mit vorlagen für eine beliebige saison, die mehr als die gesamtzahl der von kobe bryant in einer beliebigen saison durchgeführten vorlagen umfassen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
finden sie spieler, die punktzahlen für eine saison von nicht mehr als 3 haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele spieler haben weniger als 3 diebstähle in einer saison?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit den meisten blöcken in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer sind die spieler mit foulsummen, die in einer beliebigen saison denen von kobe bryant in einer beliebigen saison entsprechen?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele rebounds hat kobe bryant im jahr 2004 gemacht?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_rebounds ) ) )
wie viele steals hatte kobe bryant in der saison 2004?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_steals ) ) )
welcher spieler hatte in der letzten saison mindestens drei vorlagen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler sind point guard oder stürmer?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.concat en.position.point_guard en.position.forward ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer machte die gleichen umsätze wie die geringsten umsätze von kobe bryant über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte mehr saisonpunkte als kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
während der saison, in der seine punktzahl 3 betrug, war in wie vielen spielen kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_games_played ) ) )
welche spieler haben 3 oder mehr vorlagen während der saison?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler sind keine point guards?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string ! = ) en.position.point_guard ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler hatten mehr als drei fouls pro spiel in der saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele ganzjahresblöcke hatte kobe bryant als la laker	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_blocks ) ) )
wie viele all-season-punkte erzielte kobe bryant bei einem rebound von 3?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_points ) ) )
wie viele punkte machte kobe bryant in einer saison, in der er drei assists erzielte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_points ) ) )
zu welchem team gehört kobe bryant, der 3 punkte erzielt hat?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string team ) ) )
wie viele steals hat kobe bekommen, nachdem er 3 assists bekommen hat?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_steals ) ) )
wie viele saisons hat kobe bryant mehr als 3 punkte erzielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string season ) ) )
spieler, dessen anzahl der fouls in einer saison der anzahl der fouls von spieler kobe bryant in einer saison entspricht	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat nicht weniger die ganze saison über stiehlt als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in der gleichen saison, in der er an 3 spielen teilgenommen hat, wurde die anzahl der von kobe bryant begangenen fouls angegeben	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_fouls ) ) )
welche spieler auf zwei positionen spielen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit zwei positionen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele steals hat kobe bryant in der saison gemacht?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_steals ) ) )
spieler, der auf zwei positionen spielt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
nennen sie einen spieler mit mehr als drei rebounds in dieser saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche position spielt kobe bryant?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string position ) ) )
wie viele spiele hat kobe bryant während der saison gespielt? seine gesamtanzahl an blöcken betrug 3	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_games_played ) ) )
gibt es spieler, deren punktzahl in einer jahreszeit unter der gesamtpunktzahl von kobe bryant liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, die in einer saison am wenigsten rebounds hatten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele umsätze hatte kobe bryant, als er 3 steals hatte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_turnovers ) ) )
anzahl der diebstähle in einer saison von spieler kobe bryant mit 3 diebstählen in einer saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_steals ) ) )
wieviele spieler sind da	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.player ) ( string ! type ) ) ) )
spieler, der in einer saison weniger spiele gespielt hat als spieler kobe bryant, hat in einer saison gespielt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele spiele in einer saison hatte kobe bryant 3 steals?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_games_played ) ) )
welcher spieler hat die meisten all-season-fouls?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat mehr als 3 spiele gespielt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, die mehr als 3 spiele in einer saison gespielt haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was spieler mehr als 3 assists in einer saison gemacht haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele fouls kobe bryant in der saison gemacht hat, in der er 3 rebounds gemacht hat	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_fouls ) ) )
welcher spieler erleidet mehr fouls als kobe bryant oder derselbe pro saison?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler gehört nicht zum los angeles lakers team?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string ! = ) en.team.lakers ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat mehr vorlagen als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele fouls hatte kobe bryant, als er drei umsätze machte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_fouls ) ) )
wie man fouls hatte kobe bryant in allen jahreszeiten, in denen er drei rebounds hatte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_fouls ) ) )
wie viele umsätze hatte kobe bryant, als er in drei spielen spielte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_turnovers ) ) )
während seiner saison spielte point guard, für wie viele assists bryant kobe verantwortlich war	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_assists ) ) )
spieler, der position point guard oder stürmer spielt	( call SW.listValue ( call SW.concat en.position.point_guard en.position.forward ) )
spieler mit weniger punkten in einer saison als der spieler kobe bryant in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
nennen sie einen spieler mit weniger als drei blöcken pro saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele spiele hat kobe gespielt, seit er profi wurde?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_games_played ) ) )
nennen sie einen spieler, der in der saison mindestens drei fouls hatte	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat keine 3 rebounds?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_rebounds ) ( string ! = ) ( number 3 rebound ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
anzahl der fouls von kobe bryant, der 3 blocks hat	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_fouls ) ) )
wie viele drei-punkte-umsätze hatte kobe bryant?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_turnovers ) ) )
in welcher jahreszeit spielte kobe bryant point guard?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string season ) ) )
wie viele punkte erzielte kobe bryant als point guard?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_points ) ) )
welcher spieler hat die wenigsten rebounds überhaupt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele fouls wurden von kobe bryant gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) )
wie viele kobe bryant-käufe wurden in einer saison getätigt?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) )
wie viele saisons hat kobe bryant für die lakers gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string season ) ) )
in welcher position spielte kobe, als er drei schüsse blockte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string position ) ) )
welcher spieler hat mehr punkte pro saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler mehr als 3 blocks in der saison gemacht hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele steals hatte kobe bryant nach 3 spielen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_steals ) ) )
welcher spieler spielt die meisten positionen?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string position ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, die in einer saison die gleiche anzahl an fouls hatten wie kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele fouls hatte kobe bryant an den los angeles lakers?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_fouls ) ) )
welcher spieler hat die wenigsten ganzjahresblöcke?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele steals hat kobe bryant in den saisons gemacht, in denen er 3 rebounds gemacht hat?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_steals ) ) )
wie viele steals hatte kobe bryant in dem spiel, in dem er drei blocks hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_steals ) ) )
spieler mit mindestens 3 stiehlt in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler erzielte die gleichen oder weniger punkte als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler haben weniger vorlagen als kobe bryant gemacht	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat in einer saison mindestens so viele spiele gespielt wie kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat nicht 3 steals	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_steals ) ( string ! = ) ( number 3 steal ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte weniger umsätze als drei	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was war die gesamtzahl der umsätze in einer saison für kobe bryant bei point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_turnovers ) ) )
wie viele rebounds kann kobe bryant in einer saison machen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_rebounds ) ) )
wer ist ein spieler, der nicht einmal 3 steals pro saison macht	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_steals ) ( string ! = ) ( number 3 steal ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat die führung für fouls in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit nicht weniger als 3 fouls in einer saison ist mindestens 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele punkte hat kobe bryant in dieser saison erzielt?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) )
gibt es einen spieler mit dem gleichen punktedurchschnitt pro saison wie kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_points ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler die gleichen oder mehr hatten, stiehlt kobe im laufe der saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler spielten in der gleichen saison wie kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche saison hatte kobe bryant 3 assists für die gesamte saison?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string season ) ) )
welcher spieler hat nur für eine mannschaft gespielt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string team ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat weniger unterstützt als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele rebounds erzielte kobe bryant in einer saison, in der er drei spiele bestritt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_rebounds ) ) )
wie viele assists hatte kobe bryant, als er 3 punkte hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_assists ) ) )
wie viele punkte erzielte kobe bryant in einer einzigen saison, in der er genau drei vorlagen hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_points ) ) )
welcher spieler hatte die gleiche anzahl von fouls wie kobe bryant die ganze saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele umsätze macht kobe bryant durchschnittlich in spielen mit mehr als 3 rebounds für ihn?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_turnovers ) ) )
welche spieler haben die gleichen spiele gespielt wie die wenigsten spiele, die kobe bryant in einer saison gespielt hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler erzielte weniger punkte als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat mehr oder die gleiche anzahl von rebounds als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte mehr als 3 umsätze	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat so viele fouls wie maximale fouls, die kobe bryant in einer saison gemacht hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in wie vielen spielen in einer saison hatte kobe bryant mehr als drei blöcke?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_games_played ) ) )
welcher spieler hatte nicht 3 steals	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_steals ) ( string ! = ) ( number 3 steal ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele rebounds hatte kobe bryant, als er 3 punkte hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_rebounds ) ) )
welches team spielt kobe bryant für welches weniger als 3 umsätze hat	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string team ) ) )
wer spielt für die los angeles lakers oder cleveland cavaliers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string = ) ( call SW.concat en.team.lakers en.team.cavaliers ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat in einer saison so viele punkte gemacht wie kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_points ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte die meisten karriereblöcke pro saison?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche position hat kobe bryant im jahr 2004 gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string position ) ) )
wie viele blöcke hat kobe bryant während der saison gemacht?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_blocks ) ) )
nennen sie den spieler mit weniger als drei vorlagen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
team von spieler kobe bryant, der am point guard ist	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string team ) ) )
in welcher position spielt kobe bryant in seinen besten spielzeiten?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string position ) ) )
als kobe bryant 3 assists während der gesamten saison hatte, wie viele rebounds hatte er	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_rebounds ) ) )
welcher spieler hatte mehr blöcke als kobe bryant, dessen anzahl von vorlagen 3 ist	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_blocks ) ) )
die gesamtanzahl der diebstähle in allen jahreszeiten für point guard kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_steals ) ) )
spieler mit weniger als 3 umsätzen in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele fouls in einer saison hat point guard kobe bryant gehabt	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_fouls ) ) )
wie viele steals hatte kobe bryant in drei gespielten spielen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_steals ) ) )
wie viele steals hat kobe bryant in der saison gemacht, in der er im los angeles lakers team gespielt hat?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_steals ) ) )
wie viele assists hat kobe bryant in der saison gemacht, in der er 3 blocks gemacht hat?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_assists ) ) )
wie viele punkte erzielte kobe bryant, als er im durchschnitt 3 assists pro spiel über die saison erzielte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_points ) ) )
für welches team hat kobe bryant gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string team ) ) )
wie viele spiele hat kobe bryant in den letzten 3 spielzeiten gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_games_played ) ) )
wie viele rebounds hat kobe bekommen, nachdem er 3 blocks gemacht hat?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_rebounds ) ) )
welche position hat kobe bryant gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string position ) ) )
welche spieler haben im jahr 2004 nicht gespielt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat die mindestanzahl von umsätzen von kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat nicht 3 punkte erzielt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_points ) ( string ! = ) ( number 3 point ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele blöcke hat kobe bryant in der saison gemacht, in der er 3 spiele gespielt hat?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_blocks ) ) )
wie viele spiele hat kobe bryant in dem jahr gespielt, in dem er drei fouls hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_games_played ) ) )
wenn kobe bryant drei umsätze in einer saison aufgegeben hat, wie viele fouls hat er in der regel gegeben	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_fouls ) ) )
wie viele fouls in einer saison hatte kobe bryant, das sind mehr als drei umsätze	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_fouls ) ) )
in welcher saison erzielte kobe bryant 3 punkte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string season ) ) )
welche spieler erzielten in allen jahreszeiten so viele punkte wie kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_points ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele fouls bekam kobe bryant für die saison, für die er 3 assists hatte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_fouls ) ) )
wie lautet die nummer des teams?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.team ) ( string ! type ) ) ) )
welche spieler hatten weniger umsätze pro saison als kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, deren punktzahl in einer saison unter 3 liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte weniger als 3 blöcke	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche point guard spieler hatten mehr punkte als kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_points ) ) )
wie viele rebounds hatte kobe bryant nach 3 spielen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_rebounds ) ) )
finden sie die spieler, die in einer bestimmten saison an weniger oder mehr als 3 spielen teilgenommen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_games_played ) ( string ! = ) ( number 3 game ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte die gleichen oder mehr umsätze als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was ist die mannschaft von kobe bryant, die 3 fouls gespielt hat?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string team ) ) )
welcher spieler hat in den wenigsten spielen einer saison gespielt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler spielt entweder point guard oder forward?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.concat en.position.point_guard en.position.forward ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler gehört zum los angeles lakers team oder zu den cleveland cavaliers?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string = ) ( call SW.concat en.team.lakers en.team.cavaliers ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat mehr rebounds als kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
saison des spielers kobe bryant, der am point guard ist	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string season ) ) )
spieler mit der niedrigsten trikotnummer	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string team ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie hat kobe irgendwelche blöcke gemacht, nachdem er 3 rebounds bekommen hat?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_blocks ) ) )
wie viele punkte kobe bryant in der saison machte er 3 umsätze	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_points ) ) )
in welcher saison hat kobe bryant insgesamt 3 assists erzielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string season ) ) )
spieler mit mehr punkten in einer saison als der spieler kobe bryant in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in wie vielen spielen erzielte kobe bryant 3 umsätze?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_games_played ) ) )
nennen sie die saison, in der kobe bryant 3 fouls begangen hat	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_fouls ) ) )
in welcher saison hatte kobe bryant 3 fouls?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string season ) ) )
in welcher position hat kobe 3 punkte erzielt	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string position ) ) )
wie viele spieler hatten spielzeit in mindestens 3 spielen in der saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit einer gesamtanzahl von diebstählen in einer saison, die der niedrigsten anzahl von diebstählen in einer saison für kobe bryant entspricht	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
als kobe bryant in einer saison drei assists hatte, welche position hatte er?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string position ) ) )
punkte von kobe bryant in einer saison, in der er 3 blöcke machte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_points ) ) )
welcher spieler hatte die gleichen oder weniger fouls wie kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was spieler mehr als 2 punkte in einer saison gemacht	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat am wenigsten punkte gemacht?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte in dieser saison die wenigsten vorlagen?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer waren kobe bryants teamkollegen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
kobe bryant machte 3 blöcke	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_blocks ) ) )
welcher spieler hat nicht mehr umsätze pro saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
anzahl der umsätze in einer saison von spieler kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) )
wie viele fouls erzielte kobe bryant während der saison?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_fouls ) ) )
wie viele punkte hat kobe bryant in der saison erzielt, in der er drei mal geklaut hat?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_points ) ) )
während seiner saison als point guard hat kobe bryant wie viele blocks absolviert	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_blocks ) ) )
spieler, die in der saison insgesamt mehr als kobe bryant gespielt haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele vorlagen hat kobe bryant gehabt	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_assists ) ) )
welcher spieler hat die mindestanzahl an fouls?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler haben eine gesamtzahl von fouls in einer saison, die nicht 3 beträgt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string ! = ) ( number 3 foul ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat die mindestanzahl an kobe bryant stehlen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte in dieser saison mehr blöcke als kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele rebounds hatte kobe bryant in der saison, in der er drei spiele bestritt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_rebounds ) ) )
in welcher saison hat kobe bryant durchschnittlich über 3 spiele gestohlen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string season ) ) )
welcher spieler hatte in dieser saison mehr steals als kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat in einer saison am wenigsten an spielen teilgenommen?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler war in den meisten teams?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string team ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
der spieler, der die meisten fouls in einer saison gemacht hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte mehr als drei fouls in der saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit mindestens so vielen umsätzen wie kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in welcher position konnte kobe 3 blocks machen	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string position ) ) )
wie viele assists hat kobe bryant nach 3 steals bekommen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_assists ) ) )
wie viele vorlagen hat kobe bryant im laufe der saison abgegeben?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_assists ) ) )
wie viele rebounds bekam kobe bryant als point guard?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_rebounds ) ) )
anzahl der gespielten spiele in einer saison von spieler kobe bryant, der auf der hut ist	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_games_played ) ) )
welcher spieler hat mindestens 3 blöcke gemacht	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler mehr oder weniger als 3 punkte in einer saison erzielt haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_points ) ( string ! = ) ( number 3 point ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
anzahl der gespielten spiele in einer saison des spielers kobe bryant, dessen team los angeles lakers ist	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_games_played ) ) )
spieler, der in einer saison weniger stiehlt als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
als läscher hat kobe bryant wie viele steals pro saison gemittelt	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_steals ) ) )
wer hat weniger stiehlt pro saison im durchschnitt als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat die meisten fouls gehabt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
für die saison, in der er 3 blocks auf seinem konto hatte, wie viele diebstähle waren auf kobe bryant zurückzuführen	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_steals ) ) )
welcher spieler hat in einer saison nur 1 oder 2 spiele bestritten?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele umsätze hat kobe bryant in einer saison als point guard erzielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_turnovers ) ) )
wie viele fouls hat kobe bryant nach 3 steals gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_fouls ) ) )
wie viele steals kobe bryant in der saison gemacht hat, hat er 3 assists gemacht	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_steals ) ) )
wie viele umsätze gab kobe bryant in der regulären saison 2004 auf?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_turnovers ) ) )
welcher spieler hat die wenigsten fouls in der gesamten saison?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
saison des spielers kobe bryant vom los angeles lakers team	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string season ) ) )
welche position hat kobe bryant für die los angeles lakers gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string position ) ) )
wie viele spiele hat kobe bryant in der saison 2004 gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_games_played ) ) )
wie viele steals hatte kobe bryant, als er 3 umsätze hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_steals ) ) )
was war die position von kobe bryant, als er 3 fouls spielte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string position ) ) )
wie viele saisons hat kobe mehr als 3 spiele gespielt und was ist seine karriere insgesamt erholt	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_rebounds ) ) )
welcher spieler hatte höchstens 3 spiele in der gesamten saison?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in jahreszeiten mit mehr als 3 stiehlt, wie viele blöcke kobe bryant hatte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_blocks ) ) )
nennen sie einen spieler mit nicht mehr als drei rebounds in der saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele umsätze erzielte kobe bryant?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) )
welches team wird kobe bryant in diesem jahr sein?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string team ) ) )
wie viele umsätze erzielte kobe bryant im jahr 2004?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_turnovers ) ) )
welche position hatte kobe bryant mit 3 umsätzen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string position ) ) )
wie viele rebounds hatte kobe bryant, der drei blöcke hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_rebounds ) ) )
welcher spieler hat für die meisten mannschaften gespielt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string team ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler kobe bryants anzahl der rebounds in einer saison	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) )
welcher spieler hat mehr punkte als kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
anzahl der diebstähle in einer saison des spielers kobe bryant vom team los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_steals ) ) )
welcher spieler hat mehr als 3 ganzjahresblöcke?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele rebounds macht kobe bryant, wenn er 3 punkte in einer saison hat?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_rebounds ) ) )
anzahl der diebstähle in einer saison von spieler kobe bryant mit 3 fouls in einer saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_steals ) ) )
wie viele vorlagen hat kobe bryant nach 3 umsätzen erhalten?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_assists ) ) )
wer hat weniger spiele gespielt als kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat die geringste position	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string position ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele umsätze hat kobe bryant in der saison 2004 erzielt	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_turnovers ) ) )
welche position hat kobe gespielt, als sie in dieser saison drei umsätze hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string position ) ) )
welche jahreszeiten hat kobe bryant für die la lakers gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string season ) ) )
was ist die position von kobe bryant im los angeles lakers team?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string position ) ) )
was spieler haben weniger als 3 umsätze in dieser saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string ! = ) ( number 3 turnover ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat die maximale anzahl von blöcken gemacht	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele umsätze hatte kobe bryant, als er 3 punkte hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_turnovers ) ) )
wie viele positionen gibt es?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.position ) ( string ! type ) ) ) )
spieler, die in einer saison nicht mehr rebounds hatten als die von kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
position des spielers kobe bryant aus der saison 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string position ) ) )
wie viele rebounds hat kobe bryant gehabt?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) )
team von spieler kobe bryant, der über eine saison 3 steals hat	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string team ) ) )
nennen sie einen spieler, der 2004 nicht gespielt hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
nennen sie einen spieler, der in einer einzigen saison assistiert, mindestens so viel wie kobe bryants	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
für welches team spielt kobe bryant?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string team ) ) )
wer hat nicht mehr als 3 rebounds pro saison gemittelt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele punkte hat kobe bryant durchschnittlich in der saison mit 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_points ) ) )
was ist kobe bryants team	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ) )
nennen sie die spieler mit rebounds in einer beliebigen saison, die weniger als 3 entsprechen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler halten zwei oder weniger positionen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
für welches team hat kobe in der saison durchschnittlich drei blocks gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string team ) ) )
was war die gesamtzahl der vorlagen in einer saison für kobe bryant, als er 3 steals hatte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_assists ) ) )
kobe bryants vorlagen für die saison hatte er 3 vorlagen	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_assists ) ) )
wer hat weniger als oder die gleiche anzahl von umsätzen als kobe bryant gehabt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in der saison, in der kobe bryant es geschafft hat, 3 assistiert, wie viele spiele er gespielt hat	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_games_played ) ) )
welcher spieler hatte die wenigsten steals in der gesamten saison?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
nennen sie die spieler mit insgesamt weniger als 3 fouls in einer bestimmten saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele umsätze hatte kobe bryant, als er drei assists hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_turnovers ) ) )
wer hat das gleiche oder mehr stiehlt als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
punkte von kobe bryant in einer saison, in der er in point guard spielte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_points ) ) )
welche spieler haben in der gleichen menge oder mehr spiele gespielt als kobe in dieser saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
hat kobe bryant im durchschnitt 3 rebounds pro saison erzielt, während er für eine beliebige mannschaft gespielt hat?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string team ) ) )
wenn kobe bryant 2 blöcke in einer saison hatte, wie viele umsätze hatte er gemacht	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_turnovers ) ) )
was spieler in der saison 2004 nicht gespielt haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit den meisten umsätzen in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit der meisten anzahl an diebstählen in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
anzahl der punkte in einer saison von spieler kobe bryant, der 3 blöcke in einer saison hat	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_points ) ) )
spieler, die während der saison die gleichen oder weniger punkte als kobe erzielt haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
als welche position hat kobe bryant 3 spiele gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string position ) ) )
wie viele steals hat kobe bryant gemacht?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) )
für welche mannschaft hat kobe bryant mit drei vorlagen gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string team ) ) )
spieler mit mehr als 3 umsätzen in allen jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was ist die position von kobe bryant in der saison spielte er 3 spiele	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string position ) ) )
das ist die saison, in der kobe bryant 3 fouls begangen hat	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string season ) ) )
wie viele umsätze erzielte kobe bryant in der saison 2004?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_turnovers ) ) )
wie viele assists hatte kobe bryant, der drei rebounds hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_assists ) ) )
in welcher saison hat kobe 3 steals bekommen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string season ) ) )
spieler, der in einer saison nicht mehr spiele als der spieler kobe bryant gespielt hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler spielte 2004 oder 2010?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was ist der durchschnitt pro saison für die erzielten punkte, während kobe bryant an der point guard war	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_points ) ) )
wie viele blöcke hat kobe bryant in einer saison gemacht, in der er 3 fouls gemacht hat?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_blocks ) ) )
wie lautet die nummer des spielers?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.player ) ( string ! type ) ) ) )
wer hat in jeder saison die gleiche anzahl an fouls wie kobe?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat die mindestpunktzahl von kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
nennen sie die spieler mit punktestand in einer beliebigen saison entweder weniger als oder mehr als 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_points ) ( string ! = ) ( number 3 point ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele assists bekam kobe bryant, als er in der position eines point guard war?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_assists ) ) )
wer hat die gleichen oder weniger punkte in dieser saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat kobe bryants die höchste saisonpunktzahl in einer einzigen saison erzielt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
finden sie spieler, die in einer beliebigen saison blöcke ausgeführt haben, die dieselbe anzahl von blöcken aufweisen, die von kobe bryant in einer beliebigen saison ausgeführt wurden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele umsätze kobe bryant in der saison machte er 3 punkte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_turnovers ) ) )
wie viele punkte hatte kobe bryant nach 3 rebounds erzielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_points ) ) )
welcher spieler hatte die gleiche anzahl von punkten in der saison wie kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_points ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele rebounds hat kobe bryant eine saison mit 3 umsätzen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_rebounds ) ) )
wie viele fouls in einer saison hatte kobe bryant, das sind mehr als drei assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_steals ) ) )
welcher spieler hat mehr punkte in einer saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele rebounds hat kobe bryant gemacht?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_rebounds ) ) )
spieler mit der gleichen anzahl an gespielten spielen wie kobe bryant über alle jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_games_played ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was war die position von kobe bryant in der saison machte er 3 umsätze	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string position ) ) )
welcher spieler hat mehr als 3 fouls gespielt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler hatten mehr als drei fouls in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele blöcke hat kobe bryant gehabt	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) )
wie viele umsätze hat kobe bryant gemacht	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_turnovers ) ) )
welcher spieler hatte nicht mehr als drei vorlagen während der saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat die rekordzahl von spielen in einer saison gespielt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
auf welcher mannschaft war kobe bryant, als er weniger als drei spiele in einer saison bestritt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string team ) ) )
wie viele spiele hat kobe bryant für die los angeles lakers gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_games_played ) ) )
in der saison, in der kobe bryant in 3 spielen spielzeit hatte, war er für wie viele vorlagen verantwortlich	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_assists ) ) )
was ist kobe bryants saison umsatz durchschnitt	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) )
welcher spieler stiehlt in einer einzigen saison am meisten?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in welchem jahr hat kobe bryants insgesamt drei punkte gesammelt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string season ) ) )
finden sie die spieler, bei denen die anzahl der partien, an denen kobe bryant teilgenommen hat, geringer ist als die anzahl der partien, an denen kobe bryant bereits teilgenommen hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele fouls hat kobe bryant gespielt, als er 3 punkte erzielte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_fouls ) ) )
wie viele diebstähle hatte point guard kobe bryant im laufe der saison?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_steals ) ) )
nennen sie einen spieler, der mehr blöcke als kobe bryant hatte	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
position des spielers kobe bryant, der innerhalb einer saison 3 umsätze erzielt	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string position ) ) )
welcher spieler hatte mehr blöcke als kobe bryant, dessen punktzahl 3 ist	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_points ) ) )
team von spieler kobe bryant mit 3 punkten über eine saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string team ) ) )
kobe bryants team, als er 3 rebounds für die saison hatte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string team ) ) )
wie viele drei-punkte-vorlagen hat kobe bryant in einer saison?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_assists ) ) )
wie viele assists hat kobe bryant in der saison 2004 hergestellt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_assists ) ) )
welcher spieler hat die geringste anzahl von positionen gespielt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string position ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler unter 3 jahren hat, hilft die ganze saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in welcher position spielte kobe bryant, als er drei vorlagen machte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string position ) ) )
in welchen jahreszeiten machte kobe bryant 3 vorlagen	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string season ) ) )
wer hat weniger als 3 umsätze gehabt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele punkte hat kobe bryant in dieser saison gesammelt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_points ) ) )
welche position hat kobe bryant gespielt, als seine gesamtpunktzahl 3 betrug?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string position ) ) )
wer hat die meisten umsätze gehabt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler haben in der saison weniger punkte erzielt als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
finde einen spieler mit 3 oder weniger blöcken in einer bestimmten saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
die anzahl der umsätze von kobe bryant in dieser saison beträgt 3	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_turnovers ) ) )
welcher spieler hat mindestens so viele saisonpunkte wie kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat 3 oder weniger spiele gespielt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, dessen vorlagen über eine saison höchstens 3 sind	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, die weniger als drei mal in einer saison stehlen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele spiele hat kobe bryant in einer saison in point guard position gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_games_played ) ) )
wie viele spiele hat kobe bryant in einer saison gespielt, in der er 3 punkte gemacht hat?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_games_played ) ) )
was spieler hatten mehr punkte als kobe bryant im jahr 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_points ) ) )
wie viele rebounds hat kobe bryant nach 3 umsätzen erhalten?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_rebounds ) ) )
spieler, dessen anzahl an blöcken in einer saison nicht geringer ist als die des spielers kobe bryant in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele steals hat kobe bryant im laufe der saison mit nur 3 umsätzen gemacht?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_steals ) ) )
was ist kobe bryants all-season-punkt insgesamt	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) )
welcher plater hat während der saison die geringste anzahl von blöcken erzeugt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat nicht 3 spiele gespielt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_games_played ) ( string ! = ) ( number 3 game ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat in einer saison weniger als 4 punkte gemacht?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele umsätze hat kobe bryant in 3 spielen gemacht?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_turnovers ) ) )
nennen sie den spieler mit mehr umsätzen pro saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele umsätze hat kobe bryant in einer saison? er hat 3 rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_turnovers ) ) )
wie viele vorlagen hatte kobe bryant in der gesamten saison, wenn er auch 3 punkte hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_assists ) ) )
wie viele rebounds hatte kobe bryant in seiner saison in los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_rebounds ) ) )
wie viele steals hatte kobe bryant während der saison im durchschnitt mit drei assists?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_steals ) ) )
in welchen jahreszeiten machte kobe bryant 3 blöcke	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string season ) ) )
spieler, dessen punktzahl in einer saison der des spielers kobe bryant in einer saison entspricht	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_points ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
nenne einen spieler mit der gleichen anzahl von blöcken wie kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_blocks ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele umsätze hatte kobe bryant in der saison für die la lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_turnovers ) ) )
welche spieler haben höchstens zwei positionen gespielt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte weniger als 3 umsätze	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat mehr als 3 vorlagen pro saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
anzahl der umsätze in einer saison von spieler kobe bryant vom team los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_turnovers ) ) )
wie viele assists gab es in den spielzeiten, in denen kobe bryant nur drei punkte hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_assists ) ) )
was ist die nummer des spielers kobe bryant	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.player ) ( string ! type ) ) ) )
wie viele vorlagen hat kobe bryant in einer saison gemacht, in der er 3 umsätze gemacht hat?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_assists ) ) )
wie viele vorlagen hatte kobe bryant nach 3 spielen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_assists ) ) )
wer hat gleich oder mehr als 3 umsätze	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele steals hatte kobe bryant als point guard?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_steals ) ) )
auf welcher position spielte kobe bryant, als sein umsatz in der gesamten saison 3 betrug?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string position ) ) )
wer hat mehr als 3 stiehlt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler hatten eine gesamtzahl von rebounds in einer saison ungleich drei?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_rebounds ) ( string ! = ) ( number 3 rebound ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele teams gibt es?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.team ) ( string ! type ) ) ) )
wer hat mehr als 3 spiele in einer saison gespielt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler spielte in der gleichen saison wie kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
kobe bryant hat drei spiele gespielt	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_games_played ) ) )
wer hat 3 oder mehr spiele gespielt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, die weniger als 3 spiele in einer saison gespielt haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat die kleinste zahl im team?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string team ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat weniger als drei spiele gespielt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele assists hatte kobe bryant, als er drei umsätze machte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_assists ) ) )
wer hat mehr oder gleich 3 fouls gehabt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele spiele hat kobe bryant gespielt, der umsätze gemacht hat?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_games_played ) ) )
in welcher saison hat kobe bryant 3 spiele gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string season ) ) )
in welchem jahr hatte kobe bryant genau 3 steals?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string season ) ) )
spieler mit höchstens 3 umsätzen in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte die gleiche anzahl an fouls wie kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
entweder los angeles lakers oder cleveland cavaliers	( call SW.listValue ( call SW.concat en.team.lakers en.team.cavaliers ) )
wer hat den rekord für die meisten rebounds in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele vorlagen hat kobe bryant gehabt	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_assists ) ) )
wann hat kobe bryant gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ) )
was spieler haben weniger gestohlen als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in welcher position war kobe bryant, als er drei fouls in einer saison erzielte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string position ) ) )
wie viele spieler waren auf den lakern oder kavalieren	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string = ) ( call SW.concat en.team.lakers en.team.cavaliers ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat die mindestanzahl an diebstählen?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler hatten die gleichen spiele gespielt als kobe bryant in allen jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_games_played ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in welcher mannschaft hat kobe bryant in der saison 2004 gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string team ) ) )
welcher spieler spielt die gleiche position wie kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele fouls hatte kobe bryant, als er drei rebounds hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_fouls ) ) )
wie viele umsätze hatte kobe bryant mit den los angeles lakers?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_turnovers ) ) )
wie viele umsätze hatte kobe bryant in einer saison mit 3 assists?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_turnovers ) ) )
welcher spieler hat mindestens 3 umsätze	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele vorlagen hat kobe bryant für diese saison bisher?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) )
wie viele saisons hatte kobe bryant nicht mehr als drei vorlagen	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_assists ) ) )
wie viele vorlagen hatte kobe bryant mit drei blöcken?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_assists ) ) )
wie viele blöcke hat kobe bryant in einer saison gemacht, in der er 3 assists gemacht hat?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_blocks ) ) )
spieler, deren umsatz in einer saison nicht höher ist als der von kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat die maximalen punkte von kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele spieler	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.player ) ( string ! type ) ) ) )
was war die gesamtanzahl der einkäufe in den spielzeiten, in denen kobe bryant nur drei spiele bestritten hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_steals ) ) )
welcher spieler hatte 3 oder mehr vorlagen?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat die meisten positionen gespielt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string position ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele spiele bestritt kobe bryant, dessen team im laufe der saison los angeles lakers ist?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_games_played ) ) )
spieler, die mehr und weniger als 3 blöcke in der saison haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_blocks ) ( string ! = ) ( number 3 block ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler mehr fouls begangen haben, die kobe bryant im laufe einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche position spielt kobe bryant?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ) )
welche position hat kobe bryant in der saison 2004 gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string position ) ) )
wie viele umsätze hat kobe bryant in allen jahreszeiten?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_turnovers ) ) )
was spieler haben weniger fouls als kobe bryant in allen jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler bekommt mehr blöcke als kobe bryant oder zumindest die gleichen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat nicht mehr als zwei mannschaften gespielt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string team ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in wie vielen spielen war kobe bryant in der saison, die er mit den los angeles lakers spielte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_games_played ) ) )
wie viele fouls wurden von kobe bryant gespielt, als er point guard war?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_fouls ) ) )
wie viele punkte erzielte kobe bryant in der saison, in der er drei spiele bestritt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_points ) ) )
in wie vielen spielen hat kobe bryant in der saison 2004 gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_games_played ) ) )
finden sie die spieler mit einer gesamtanzahl von umsätzen in einer bestimmten saison, die weniger als 3 beträgt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was war die gesamtanzahl der blöcke in einer saison für kobe bryant, als er drei vorlagen hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_blocks ) ) )
wie viele rebounds hat kobe bryant gehabt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_rebounds ) ) )
wie viele assists hatte kobe bryant von den lakern?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_assists ) ) )
welcher spieler hat nicht weniger als 3 rebounds während der gesamten saison?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat die meisten spiele gespielt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele rebounds hat der spieler, der nicht die 3 hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_rebounds ) ( string ! = ) ( number 3 rebound ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat mehr als 3 spiele gespielt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte die wenigsten rebounds?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat mehr als 3 assists zu ihrem kredit pro saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat die wenigsten punkte gehabt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele vorlagen erhält kobe bryant in einer saison, in der er 3 oder mehr blöcke hat?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_assists ) ) )
welche saison kobe bryant machte 3 rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string season ) ) )
was war die position von kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler spielt weniger als zwei positionen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte in dieser saison die wenigsten punkte?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in wie vielen spielen erzielte kobe 3 punkte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_games_played ) ) )
welcher spieler hat die wenigsten positionen gespielt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string position ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte die gleiche anzahl von umsätzen wie kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat die meisten positionen inne?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string position ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele punkte hat kobe bryant die ganze saison über, wenn er auch 3 blöcke hat?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_points ) ) )
spieler mit den gleichen oder weniger blöcken pro saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler haben die meisten spiele in einer saison gespielt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat mit höchstens zwei teams gespielt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string team ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was spieler hatten mehr stiehlt als kobe bryant in allen jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele rebounds hatte kobe bryant die ganze saison über als point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_rebounds ) ) )
nennen sie einen spieler mit mindestens so vielen diebstählen wie kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele spiele hat kobe bryant in einer saison gespielt, in der seine anzahl an blöcken über 3 lag?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_games_played ) ) )
wie viele punkte hat kobe bryant in der saison erzielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_points ) ) )
nennen sie die saison, in der kobe bryants insgesamt 3 punkte erzielt hat	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_points ) ) )
was spieler haben mindestens so viele umsätze, die kobe bryant während einer saison hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche position hat kobe bryant mit 3 punkten bewertet?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string position ) ) )
spieler mit vorlagen ungleich drei in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string ! = ) ( number 3 assist ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele vorlagen hat kobe bryant in der saison gemacht, in der er drei punkte erzielte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_assists ) ) )
wie viele fouls begeht kobe bryant durchschnittlich in einer saison?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string season ) ) )
was spieler weniger als 4 assists in einer saison gemacht haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string ! = ) ( number 3 assist ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was ist die position von kobe bryant in der saison 2004?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string position ) ) )
für welche mannschaft hat kobe bryant in der saison 2004 gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string team ) ) )
nennen sie kobe bryants position, als er drei umsätze hatte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string position ) ) )
spieler mit mehr fouls in einer saison als spieler kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit einer mindestanzahl von mannschaften	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string team ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat in dieser saison die geringste punktzahl?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
anzahl der blöcke in einer saison von spieler kobe bryant, der in einer saison 3 spiele gespielt hat	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_blocks ) ) )
in welcher position spielte kobe bryant, als er die saison hatte, in der er 3 steals hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string position ) ) )
wer hat weniger punkte als kobe bryant in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
während der saison erzielte er 3 punkte, wofür die anzahl der fouls von kobe bryant verantwortlich war	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_fouls ) ) )
spieler, die in allen spielzeiten die gleiche anzahl an fouls wie kobe bryant haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele fouls hat kobe bryant durchschnittlich in der saison auf 3 rebounds begrenzt	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_assists ) ) )
das ist das team von kobe bryant, das 3 umsätze hatte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string team ) ) )
wer hat die gleiche anzahl von vorlagen als kobe bryant gehabt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
als kobe bryant 3 all-season-umsätze hatte, wie viele all-season-punkte hatte er	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_points ) ) )
welche spieler hatten 3 oder weniger rebounds?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
anzahl der punkte in einer saison von spieler kobe bryant, der 3 umsätze in einer saison hat	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_points ) ) )
was spieler über eine saison mehr steals als kobe bryant gemacht haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hatte wenige stiehlt im laufe der saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat weniger als 3 punkte in dieser saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit einer gesamtanzahl von blöcken in einer saison, die den meisten blöcken in einer saison für kobe bryant entspricht	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele punkte hat kobe bryant in dem spiel erzielt, in dem er in der letzten saison drei mal gestohlen hat?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_points ) ) )
wie viele assists hatte kobe bryant, als er 3 steals hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_assists ) ) )
wie viele steals hatte kobe bryant in der saison 2004?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_steals ) ) )
wer hat die meisten punkte	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, die durch überholt waren	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was ist die position des spielers kobe bryant mit 3 rebounds in dieser saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string position ) ) )
spieler mit weniger als drei fouls pro spiel im laufe der saison spieler mit den wenigsten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit den am wenigsten gespielten spielen in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele umsätze hat point guard kobe bryant in einer saison?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_turnovers ) ) )
finden sie die anzahl der blöcke in der saison, in der kobe bryant auch 3 steals erworben hat	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_blocks ) ) )
wie viele rebounds und assists hat kobe bryant in einer saison?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_rebounds ) ) )
wie viele ganzjahresblöcke hatte kobe bryant in 3 ganzjahresspielen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_blocks ) ) )
wie viele punkte hatte kobe bryant, der drei umsätze hatte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_points ) ) )
spieler mit weniger als 3 blöcken in allen jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte weniger als 3 stiehlt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, die im durchschnitt mindestens drei vorlagen pro spiel in einer saison haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler in dieser saison am wenigsten gestohlen hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer spielt für la lakers oder cleveland cavaliers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string = ) ( call SW.concat en.team.lakers en.team.cavaliers ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was spieler weniger punkte als kobe bryant in einer saison gemacht	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele blöcke hatte kobe bryant in einer saison? er hatte 3 punkte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_blocks ) ) )
kobe bryant spielte in der saison 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string season ) ) )
nennen sie einen spieler, der so viele spiele wie kobe bryant gespielt hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_games_played ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit weniger als drei fouls in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele fouls hat kobe bryant gehabt	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_fouls ) ) )
in welcher saison erzielte kobe bryant 3 punkte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string season ) ) )
wie viele punkte wurden von kobe bryant erzielt?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) )
in welcher saison gab kobe nur 3 fouls auf?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string season ) ) )
was war die gesamtzahl der vorlagen in allen spielzeiten für den spieler kobe bryant, als er bei den los angeles lakers war?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_assists ) ) )
wer hat die gleichen oder mehr fouls als kobe bryant gehabt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat die gleiche anzahl von ganzjahresvorlagen wie kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat mehr als 3 vorlagen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat weniger punkte erzielt als kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit drei oder mehr fouls in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte weniger als 3 blöcke die ganze saison über	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat die meisten zweien pro position?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele blöcke hatte kobe bryant in einer saison?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_blocks ) ) )
für welche mannschaft hat kobe bryant gespielt, als er drei fouls in einer saison hatte?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string team ) ) )
was spieler all-season blocks sind nicht mehr als kobe bryants all-season blocks	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele steals hat kobe bryant gehabt	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) )
nenne spieler mit einer einzigen position	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
anzahl der fouls in einer saison von spieler kobe bryant mit 3 vorlagen in einer saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_fouls ) ) )
was war die gesamtzahl der blöcke für kobe bryant in der saison 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_blocks ) ) )
wie viele blöcke mit einem diebstahl von mehr als 3 hat kobe bryant in einer saison gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_blocks ) ) )
in der saison, in der er 3 umsätze erzielt hat, gibt er die anzahl der spiele an, an denen kobe bryant teilgenommen hat	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_games_played ) ) )
gibt es spieler, die in einer saison mehr punkte erzielt haben als in der gleichen saison von kobe bryant?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
nennen sie den spieler, der die meisten punkte in einer saison erzielt hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele saisons hat kobe bryant für die los angeles lakers gespielt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string season ) ) )
kobe bryant mit drei assists hatte wie viele rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_rebounds ) ) )
welcher block ist rechts von block 1 und hat eine länge von 3 zoll	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
wählen sie den block mit der gleichen breite wie block 1 mit der höhe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( call SW.getProperty en.block.block1 ( string height ) ) ) )
3-zoll-block rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
finde den block über den kleinsten blöcken	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string below ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wählen sie einen block mit der gleichen breite wie block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
wählen sie blöcke mit einer länge von 3 icnhes rechts von block 1 aus	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
block, dessen länge höchstens der höhe von block 1 entspricht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
block auf der linken seite von block 1, der 3 cm breit ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
finde mich alle blöcke mit einer kleineren breite als die länge von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
block, dessen höhe kleiner als die länge von block 1 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
suchen sie einen block über block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
welcher pyramidenförmige block ist von block 1 übrig geblieben?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string left ) ( string = ) en.block.block1 ) )
finde mich alle blöcke kürzer als block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
finde einen block, der höchstens so groß ist wie der block 1s breite	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
oberhalb und links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )
suchen sie einen block, der sich auf der linken seite von zwei anderen blöcken befindet	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block nach rechts und unter block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )
nicht mehr als 3 cm breiter block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
wählen sie den block rechts neben einem block mit einer länge von 3 zoll aus	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
suchen sie einen block mit einer breite, die kleiner als die höhe von block 1 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
finde mich alle 3 oder 6 zoll breiten blöcke	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )
3-zoll-block in der nähe von oben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
suchen sie block 1 oder block 2	( call SW.listValue ( call SW.concat en.block.block1 en.block.block2 ) )
links vom sonderblock	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
finde mir den block, der eine länge von 3 zoll hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
welcher pyramidenförmige block über block 1 liegt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
welcher block ist einzigartig und wie eine pyramide geformt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string shape ) ( string = ) en.shape.pyramid ) )
finde den block rechts von zwei oder mehr blöcken	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wähle den längsten stein	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string length ) ) ) )
suchen sie einen block rechts von einem block mit einer höhe von 3	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
welcher block ist zwei blöcke links von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )
wählen sie die 3 zoll breiten blöcke aus	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )
finde mich alle blöcke länger als 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
block, der unter block ist, dessen breite 3 zoll ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )
finden sie den block mit der gleichen länge wie block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string length ) ) ) )
finde mich alle blöcke mit mehr als 2 blöcken links davon	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher block ist rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )
block über und links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
suchen sie den block rechts neben dem block links von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )
wie breit ist block 1?	( call SW.listValue ( call SW.getProperty en.block.block1 ( string width ) ) )
wähle die blöcke rechts und links von block 1 aus	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
befinden sich 3-zoll-lange blöcke rechts von block 1?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
gibt es irgendwelche blöcke, deren höhe entweder 3 zoll oder höchstens 6 zoll beträgt?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
wähle den ziegel aus, der sich ganz links befindet	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string right ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wählen sie den block aus, über dem sich block 1 mit einer breite von 3 zoll befindet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
finde mich alle 3 zoll hohen blöcke	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
finde mich alle blöcke, die über 3 zoll hohen blöcken sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
welcher stein ist kürzer als 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
suchen sie den block, der die form einer pyramide hat und sich rechts von block 1 befindet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
links von block 3	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
block über sonderblock	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
suchen sie einen block unterhalb und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )
finde den 3 zoll langen block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
block unter drei zoll block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
3 zoll hohen block rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string right ) ( string = ) en.block.block1 ) )
finde mir einen pyramidenförmigen block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) )
welcher stein ist 3 cm breit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
welcher block hat die größte anzahl von blöcken auf der linken seite	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string left ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle blöcke, die block 1 ist rechts und unterhalb von	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )
wähle den block mit den meisten formen aus	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string shape ) ) )
block rechts von block 1, der 3 cm hoch ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
block, dessen länge die länge von block 1 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string length ) ) ) )
finde mich alle 3 zoll langen steine links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string left ) ( string = ) en.block.block1 ) )
wählen sie den block links vom spezialblock aus	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
welcher block ist block 1 oder 2 rechts von	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
ein pyramidenförmiger block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string shape ) ( string = ) en.shape.pyramid ) )
finde alle blöcke, die über und unter block 1 liegen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
welcher stein eine länge hat, die kürzer als die länge von stein 1 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
nennen sie einen block, der zwei oder mehr formen hat	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string >= ) ( number 2 ) ) )
welcher stein von stein 1 oder 2 übrig ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
welcher stein über weniger als zwei steinen liegt	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle blöcke mit der gleichen form wie block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) ( call SW.getProperty en.block.block1 ( string shape ) ) ) )
block mit block 1 rechts und links	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
welcher block ist über einem block, der drei zoll hoch ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
wähle alle blöcke aus, die die form einer pyramide haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
suchen sie den block, der die gleiche höhe wie block 1 hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.getProperty en.block.block1 ( string height ) ) ) )
finde mich einen block rechts von block 1 oder block 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
block größer oder gleich hoch wie die breite von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
wählen sie einen stein, der mindestens so breit ist, wie der stein 1 lang ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
holen sie sich den zweiten block über block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
finde mich alle blöcke mit höchstens 2 farben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string <= ) ( number 2 ) ) )
block, der nicht block 1 oben hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string ! = ) en.block.block1 ) )
finde mich alle steine mit 2 blöcken darüber	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block, der mehr als zwei block ist rechts von	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
was ziegel so breit ist wie ziegel 1, ist lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( call SW.getProperty en.block.block1 ( string length ) ) ) )
finde mich alle blöcke mit weniger als 2 blöcken rechts davon	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welche farbe hat block 1?	( call SW.listValue ( call SW.getProperty en.block.block1 ( string color ) ) )
suchen sie den block über dem 3 zoll hohen block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
finde mich alle blöcke 2 unter block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )
block unter zwei anderen blöcken	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle blöcke, die block 1 unten ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
finde blöcke, die breiter als 5 cm sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
block, der von block links ist, dessen höhe 3 zoll beträgt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
welcher ziegelstein ist unter einem ziegelstein, der 3 zoll lang ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
2 blöcke rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )
finde mich alle blöcke unter mindestens 2 blöcken	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle blöcke mindestens 3 cm breit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
welcher block ist rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )
block breiter als blocklänge 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
finde mich den 3 zoll breiten pyramidenförmigen block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string shape ) ( string = ) en.shape.pyramid ) )
welcher spezialstein ist pyramidenförmig?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string is_special ) ) )
finde mich alle blöcke links und unter block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )
finde mich alle blöcke, die block 1 unten und oben ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
welcher block ist 3 oder weniger zoll breit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
finde alle blöcke über und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )
finde alle pyramidenblöcke links oder rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
welche farbe hat ziegel 1?	( call SW.listValue ( call SW.getProperty en.block.block1 ( string color ) ) )
welcher block ist auf der linken seite des 3-zoll-hohen blocks	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
finden sie alle blöcke, die sich unter blöcken mit einer höhe von 3 zoll befinden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
finde mich alle blöcke nicht richtig von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string ! = ) en.block.block1 ) )
block, dessen höhe mindestens der höhe von block 1 entspricht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
welcher block hat die meisten blöcke darüber	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string below ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde den 3 zoll langen block links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
links und über block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )
welcher block hat block 1 links und rechts	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )
welche form hat block 1?	( call SW.listValue ( call SW.getProperty en.block.block1 ( string shape ) ) )
ein ziegelstein, dessen länge zwischen 3 und 6 zoll liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
suchen sie einen block auf der linken seite der kleinsten anzahl von blöcken	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string left ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wählen sie den 3 oder 6 zoll breiten block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )
block, dessen breite mindestens der höhe von block 1 entspricht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
welcher block sich unter block 1 befindet, der mindestens 3 zoll hoch ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
welcher block ist links und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
welche speziellen blöcke stehen über block 1?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string above ) ( string = ) en.block.block1 ) )
wähle den baustein unten und rechts von block 1 aus	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )
3 zoll langer block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
wählen sie den stein mit der geringsten breite	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string width ) ) ) )
welcher spezialziegel rechts von ziegel 1 ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string right ) ( string = ) en.block.block1 ) )
finde mich alle blöcke von mehr als 2 blöcken	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wähle den ziegelstein rechts neben dem 3-zoll-block aus	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
block, dessen länge der breite von block 1 entspricht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )
wie hoch sind die blöcke?	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ) ) )
block nach links von zwei oder mehr blöcken	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wähle ziegel 1 oder ziegel 2	( call SW.listValue ( call SW.concat en.block.block1 en.block.block2 ) )
finde mich alle blöcke höchstens 3 cm lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
welche blöcke sind etwas besonderes und liegen unter block 1?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
finde mich alle blöcke nicht unter block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string ! = ) en.block.block1 ) )
finde mich alle blöcke, die nicht von block 1 übrig sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string ! = ) en.block.block1 ) )
wähle den kürzesten block	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string length ) ) ) )
finde alle spezialblöcke, über denen block 1 liegt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string is_special ) ) )
wählen sie den block aus, der sich rechts von block 1 befindet und 3 zoll hoch ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
finde mich einen block mindestens 3 cm breit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
welcher block ist übrig und unter block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )
finde die gesamthöhe der blöcke	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ) ) )
block rechts von zwei oder mehr blöcken	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher block hat die gleiche farbe wie block 1?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string = ) ( call SW.getProperty en.block.block1 ( string color ) ) ) )
finde mich einen block kleiner als 6 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
welcher ziegelstein links von dem 3 zoll hohen ziegelstein ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
suchen sie den block links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
wählen sie den sonderblock rechts von block 1 aus	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string is_special ) ) )
wählen sie einen block, der größer als block 1 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
3-zoll-block links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
welcher block hat eine breite von weniger als 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
suchen sie einen block, dessen breite drei zoll beträgt, und block 1 befindet sich rechts von	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
finde alle sonderblöcke, unter denen block 1 liegt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
finde mich alle blöcke rechts von 3 zoll hohen blöcken	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
finde den speziellen block links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string is_special ) ) )
welcher stein nicht breiter als stein 1 ist, ist lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
block, der unter block ist, dessen höhe 3 zoll ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
wählen sie den block unter block 1, der 5 cm lang ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
gibt es einen block unter zwei anderen blöcken?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
nennen sie einen block, auf dessen linker seite sich block 1 befindet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
welcher block ist über zwei blöcken	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block, der höchstens einem block entspricht	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde alle blöcke, die unten in block 1 oder 2 stehen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
finde mir alle blöcke, die etwas besonderes sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
suchen sie den block links von der größten anzahl von blöcken	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string left ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finden sie den block links neben dem block, über dem sich block 1 befindet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )
finde alle blöcke, die rechts von dem block sind, zu dem block 1 gehört	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )
wählen sie den block mit der größten breite	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string width ) ) ) )
welcher block ist links von nicht mehr als zwei blöcken	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block, der unter der geringsten anzahl von blöcken liegt	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string below ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher ziegelstein über einem 3 zoll breiten ziegelstein liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )
finde mich alle 3 oder 6 zoll hohen blöcke	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )
finde mich einen block über mindestens zwei blöcken	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wähle den block auf der rechten seite von block 1 aus	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
finden sie die blöcke mit längen, die entweder 3 oder 6 zoll überschreiten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
blockhöhe 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string height ) ) )
block, der kürzer als block 1 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
block, der kürzer als block eins ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
wählen sie die blöcke links unterhalb von block 1 aus	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )
welcher stein hat nicht mehr als zwei steine zu seiner linken	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wählen sie den block rechts neben der geringsten anzahl von blöcken aus	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string right ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wählen sie einen block, der nicht 3 zoll ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string ! = ) ( number 3 en.inch ) ) )
gibt es einen block mit einer länge, deren maß dem der blockhöhe entspricht?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
wähle einen block links von dem speziellen stein	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
suchen sie den block, der über block 1 liegt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )
finde mich alle blöcke so hoch wie block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.getProperty en.block.block1 ( string height ) ) ) )
wählen sie einen stein, der mindestens 3 cm breit ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
welcher block hat die größte höhe	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string height ) ) ) )
block innerhalb von 2 blocks nach links	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher stein hat mindestens 2 steine rechts von ihm	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher ziegelstein ist links vom speziellen ziegelstein	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
suche mir einen block mit der gleichen oder einer geringeren breite als block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
block rechts und ab block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )
wählen sie einen block mit der gleichen breite und höhe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )
finde mich alle 3 zoll breiten blöcke unter block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string below ) ( string = ) en.block.block1 ) )
suchen sie den block, der von block 1 oder block 2 übrig ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
finde mich alle blöcke, die block 1 unten und rechts von	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
suchen sie den block mit der geringsten anzahl von blöcken links daneben	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string left ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wählen sie den baustein mit den wenigsten blöcken rechts davon aus	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string left ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finden sie den block mit 3 zoll breite	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
welcher block ist block 1 unten und links von	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
wählen sie den speziellen 3-zoll-hohen block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string is_special ) ) )
finden sie einen block, der 3 cm lang ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
welcher ziegelstein ist so lange wie ziegelstein 1 breit ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )
block, dessen höhe 3 zoll und dessen breite 3 zoll beträgt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
welcher block ist größer als block 1?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
wählen sie unter block 1 einen block mit pyramidenform	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string below ) ( string = ) en.block.block1 ) )
finde den block, den block 1 auf der rechten seite und darüber hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )
finde mich alle blöcke rechts von block 1 ist oben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )
finde mich alle blöcke so hoch wie block 1 lang ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
finde mich alle sonderblöcke über block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string is_special ) ) )
finde alle blöcke unter dem block 1, der darüber liegt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
bring mir einen block rechts von einem 3-zoll-block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
finden sie einen block mindestens 3 cm lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
sonderblock rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string is_special ) ) )
finden sie einen block mindestens 3 cm breit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
block, der über höchstens zwei block ist	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher stein ist nicht breiter als 3 oder 6 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
welcher block hat die meisten blöcke darunter?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string above ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mir einen block, der entweder 3 oder 6 zoll groß ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )
finde mich in allen blöcken über höchstens 2 blöcken	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
2. block rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )
wählen sie einen block, der höchstens 2 blocks links liegt	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher block ist unter dem 3 zoll langen block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
block, dessen länge 3 zoll oder 6 zoll ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )
block, dessen länge mindestens der höhe von block 1 entspricht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
finde mich alle blöcke rechts vom pyramidenblock	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
finde mich alle blöcke breiter als 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
welcher block ist rechts und über block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
suchen sie einen speziellen block unter block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
suchen sie den block rechts neben dem block, unter dem sich block 1 befindet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )
block links von block links von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )
finde einen block, der breiter als block 1 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
welcher stein ist nicht höher als 3 oder 6 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
finde mich alle blöcke mit mindestens 2 blöcken darüber	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher block ist unter dem block unter block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )
finde mich alle blöcke mit weniger als 2 blöcken darüber	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher stein ist höher als 3 oder 6 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
welcher block hat eine höhe, die kleiner oder gleich der länge von block 1 ist?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
finden sie blöcke, die mindestens 3 cm breit oder 6 cm breit sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
suchen sie den speziellen block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) )
gibt es einen block mit einer breite von 3 oder 6 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )
finde mich alle blöcke so lange wie block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
block, der rechts von block ist, der speziell ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
wählen sie einen block, dessen breite der länge des blocks 1 entspricht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( call SW.getProperty en.block.block1 ( string length ) ) ) )
suchen sie den block unter block 1, der ebenfalls 3 zoll lang ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
wählen sie den 3 zoll langen block aus, der sich über block 1 befindet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
finde mich alle blöcke mit der form von block 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string shape ) ) )
block, dessen länge mindestens der breite von block 1 entspricht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
befindet sich links von block 1 ein block?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string ! = ) en.block.block1 ) )
finde den block, der unter zwei oder mehr blöcken liegt	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher block ist links von block 1 und hat eine breite von 3 zoll	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
welcher block sich links neben dem block befindet, unter dem sich block 1 befindet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )
wählen sie den block unter dem block 2 aus	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block, dessen breite kleiner als die länge von block 1 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
finden sie mich den block, der block 1 ist unten und links von	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )
welcher stein hat die meisten farben?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string color ) ) )
block rechts von block über block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
ein block, der 3 cm lang ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
finde mich alle blöcke unter den speziellen blöcken	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
wählen sie den speziellen block unter block 1 aus	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string is_special ) ) )
block nicht rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string ! = ) en.block.block1 ) )
durchschnittliche blockhöhe	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ) ) )
welcher block ist über und links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )
finde mich alle blöcke über block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )
finde alle blöcke, für die block 1 nicht richtig ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string ! = ) en.block.block1 ) )
welcher block ist über und links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
pyramidenblock rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string right ) ( string = ) en.block.block1 ) )
wählen sie einen block mit weniger als zwei farben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string < ) ( number 2 ) ) )
block unter 2 blöcken	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block über einem block, der 3 cm breit ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )
die blöcke unter block 2 sind kleiner	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde den block, der über dem block liegt, der über block 1 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )
welcher block befindet sich rechts von und unter block 1?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )
finde mich alle 3 zoll langen blöcke, von denen block 1 übrig ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
welcher block hat höchstens zwei blöcke darüber	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher block so hoch ist wie block 1, ist breit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )
block mit mehr als zwei formen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string > ) ( number 2 ) ) )
block über zwei oder mehr blöcken	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle blöcke über pyramidenblöcken	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
block, dessen höhe mindestens 3 zoll beträgt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
welcher block hat die meisten blöcke rechts davon?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string left ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle 3 zoll breiten blöcke, die rechts von block 1 sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
welcher block hat die kürzeste länge	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string length ) ) ) )
finde einen block über höchstens zwei blöcken	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle 3 zoll hohen blöcke, über denen block 1 liegt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
links von block unter block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )
block, dessen höhe kleiner als 3 zoll ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
finde blöcke über block 1 oder block 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
finde mich alle blöcke links und unter block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )
welcher ziegelstein mindestens so hoch ist wie ziegelstein 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
blöcke von zwei oder mehr farben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string >= ) ( number 2 ) ) )
welcher block drei zoll breit ist, bleibt von block 1 übrig	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
block, der rechts von block 1 ist, und der rechts von block 1 ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )
über block mindestens 3 cm lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
block oben und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
welcher stein befindet sich rechts neben dem pyramidenförmigen stein?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
block oben mindestens zwei blöcke	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wählen sie einen block über dem block aus, der 5 cm lang ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
wählen sie den breitesten block aus	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string width ) ) ) )
welcher block ist rechts und über block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
finde mir alle blöcke, die höchstens unter 2 blöcken liegen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle blöcke kürzer als 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
suchen sie einen block, der unter nicht mehr als zwei blöcken liegt	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block mit block 1 rechts und darunter	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )
welcher block ist links von mehr als zwei blöcken	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block mit einer höhe von entweder 3 zoll oder 6 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )
finde mich alle blöcke höchstens so lange wie block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
block unter block, der über block 1 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
der 3x3 zoll block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
finde alle blöcke, unter denen block 1 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )
block in block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
sonderblock rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
finde mich alle blöcke breiter als die höhe von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
wähle den stein ganz links aus	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string left ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle blöcke rechts von pyramidenblöcken	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
welcher block mindestens so hoch ist, wie block 1 breit ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
kann nicht paraphieren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )
wählen sie die blöcke unter block 2 aus	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle blöcke mit weniger als 2 formen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string < ) ( number 2 ) ) )
wähle die blöcke links von block 1 aus	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) )
finde mich alle sonderblöcke unter block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
block links von zwei blöcken auswählen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde den block links von block 1, dessen form eine pyramide ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
block unten und zwei links von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )
finde mich alle 3 oder 6 zoll langen blöcke	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )
such mir einen speziellen pyramidenförmigen block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string is_special ) ) )
finde mich alle blöcke so hoch wie block 1 lang ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.getProperty en.block.block1 ( string length ) ) ) )
finde mich alle blöcke mit der gleichen breite wie block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )
links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
welcher block ist unter weniger als zwei blöcken	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle blöcke unter pyramidenblöcken	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
wähle alle aus, die 3 zoll breit und pyramidenförmig sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string shape ) ( string = ) en.shape.pyramid ) )
finde alle blöcke, die sich links von einem pyramidenblock befinden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
wählen sie den speziellen block rechts von block 1 aus	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string is_special ) ) )
finde einen block mit einem speziellen block rechts von mir	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
block, der sich unter dem block befindet, der sich unter dem block 1 befindet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )
suche mir den block rechts über block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )
finden sie einen block, der 3 cm groß ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
bock rechts von block, der rechts von block 1 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )
finde mich alle blöcke mit mehr als 2 blöcken darüber	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
gibt es einen block mit einem maß von 3 zoll oder 6 zoll	( call SW.listValue ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) )
3 zoll langer block über block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string above ) ( string = ) en.block.block1 ) )
finde einen block größer als block 1 breit ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
suchen sie den block rechts von mindestens zwei anderen blöcken	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle blöcke mit weniger als 2 blöcken darunter	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mir einen speziellen 3 zoll langen block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string is_special ) ) )
sonderblock rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string is_special ) ) )
3 zoll hoher block unter block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string below ) ( string = ) en.block.block1 ) )
welche blöcke sind von block 1 und 3 zoll in der höhe übrig	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string left ) ( string = ) en.block.block1 ) )
block, der speziell ist und der rechts von block 1 ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string right ) ( string = ) en.block.block1 ) )
welcher block von dem block links ist, von dem block 1 rechts ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )
block breiter als block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
3-zoll-block rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
suchen sie den block, der sich über der höchsten anzahl anderer blöcke befindet	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string above ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher stein ist unter weniger als zwei steinen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher block länger als block 1 ist, ist breit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
finde mich alle blöcke unter 3 zoll breiten blöcken	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )
finden sie mich den block, der unter block 1 ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
welche blöcke haben eine höhe ungleich 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string ! = ) ( number 3 en.inch ) ) )
suchen sie den block, unter dem sich block 1 befindet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )
finden sie mich den block, der über block 1 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
block 3 cm hoch und lang	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
befindet sich links von einem anderen block ein 3 zoll langer block?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
wähle den pyramidenförmigen block unter block 1 aus	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
finde mich alle blöcke über block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
finden sie einen block kürzer als 6 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
welcher block hat die form einer pyramide und befindet sich über block 1?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string above ) ( string = ) en.block.block1 ) )
finde mir den block, der eine höhe von 3 zoll hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
welcher block über mehr als zwei blöcken liegt	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finden sie einen block größer als 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
welcher block ist weniger als 3 cm lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
suchen sie den block rechts von block 1, dessen form ebenfalls eine pyramide ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
suchen sie den block, über dem sich block 1 befindet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )
welcher ziegelstein hat eine breite von weniger als 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
finde einen block links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )
wähle alle steine rechts von block 1 oder 2 aus	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
finde mich alle blöcke und und über block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
was backstein ist 3 cm breit und 3 cm hoch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
finde mich einen block breiter als 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
block, der höchstens zwei block ist rechts von	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
such mir einen block, der links von block 1 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )
finde mich alle blöcke so breit oder breiter als block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
wählen sie einen 3-zoll-block rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string right ) ( string = ) en.block.block1 ) )
finde mir einen block, der höchstens zwei blöcke tiefer liegt	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wähle einen stein, der mehr als 2 blöcke auf der linken seite hat	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wie lang ist block 1?	( call SW.listValue ( call SW.getProperty en.block.block1 ( string length ) ) )
wählen sie alle blöcke mit der geringsten anzahl an formen aus	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string shape ) ) )
welcher stein ist breiter als 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
finde mich alle 3 zoll hohen spezialblöcke	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
block unter sonderblock	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
finde den block, unter dem sich block 1 befindet und der 3 zoll lang ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
wählen sie einen block über einem 3-zoll-block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
suchen sie den einzelnen block, der sich rechts von der größten anzahl von blöcken befindet	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string left ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block links und unter block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )
suchen sie einen 3-zoll-breiten block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
welcher stein ist wie eine pyramide geformt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string shape ) ( string = ) en.shape.pyramid ) )
block zwei über block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )
welche blöcke befinden sich links und unter block 1?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )
wählen sie den baustein mit den wenigsten blöcken links davon aus	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string right ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher block ist 3 zoll hoch und über block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
welcher block ist 3 zoll oder weniger lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
entweder block 1 oder 2	( call SW.listValue ( call SW.concat en.block.block1 en.block.block2 ) )
welcher stein ist mindestens 3 oder 6 zoll	( call SW.listValue ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) )
finde mich alle blöcke rechts von block 1, der darüber liegt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
wähle einen stein, der nicht höher als stein 1 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
finde mich alle 3 zoll breiten blöcke über block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
block zwei über block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )
siehe block über block 1 und erhalte den block links von diesem	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )
was 3 zoll ziegel ist links von ziegel 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
suchen sie einen block, der sich unter block 1 oder block 2 befindet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
welcher stein hat eine länge von weniger als 3 oder 6 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
das ist der block rechts vom sonderblock	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
welcher block ist rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )
nummer des blocks	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wählen sie den block aus, der sich auf der rechten seite von block 1 befindet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )
finde mich alle blöcke 2 blöcke unter block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )
wählen sie den block, der mindestens 5 cm hoch ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
wählen sie den block aus, der unter block 1 liegt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
3 zoll block unter block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
2. block links von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )
welcher block hat eine breite von 3 zoll und ist über block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string above ) ( string = ) en.block.block1 ) )
block, der rechts von block 1 ist und dessen länge 3 zoll beträgt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
wählen sie einen block, der unterhalb eines 3-zoll-blocks liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )
block mit 3 zoll höhe und 3 zoll breite	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
suchen sie den block, der nicht größer als die breite von block 1 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
rechts und unter block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
finde einen block mit zwei oder weniger blöcken links	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wähle den block rechts von block 2 aus	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mir alle pyramidenblöcke	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) )
finden sie mich alle blöcke unten und links von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )
finde mir einen block mit der gleichen breite wie block 1s länge	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( call SW.getProperty en.block.block1 ( string length ) ) ) )
wählen sie den block aus, unter dem sich block 1 nicht befindet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string ! = ) en.block.block1 ) )
finde alle pyramidenblöcke, die rechts von block 1 liegen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string right ) ( string = ) en.block.block1 ) )
finde mich alle blöcke von 3-zoll-blöcken links	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
block, dessen breite kleiner als die höhe von block 1 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
welcher block hat die form einer pyramide und befindet sich links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string left ) ( string = ) en.block.block1 ) )
finden sie mich alle blöcke unten und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
block, der unter block 1 oder block 2 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
3-zoll-block links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
wählen sie den baustein aus, der über der geringsten anzahl von blöcken liegt	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string above ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich entweder block 1 oder block 2	( call SW.listValue ( call SW.concat en.block.block1 en.block.block2 ) )
finde die blöcke rechts und links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
welcher block hat block 1 rechts und links	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )
finden sie den block, der nicht weniger als 3 cm hoch ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
welcher block ist nicht länger als jeder andere	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string length ) ) ) )
wählen sie den ziegel unterhalb von ziegel 1, der 5 cm lang ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string below ) ( string = ) en.block.block1 ) )
welcher stein ist links von weniger als zwei steinen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
ein drei zoll großer block links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string left ) ( string = ) en.block.block1 ) )
welcher spezialziegel über dem ziegel 1 liegt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string above ) ( string = ) en.block.block1 ) )
finde mich einen block höchstens 6 cm breit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
such mir einen 3 zoll langen spezialblock	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
unterhalb und links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )
befindet sich rechts neben dem block ein block unter block 1?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )
was ist die durchschnittliche breite der blöcke	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ) ) )
finde mir alle sonderblöcke, zu denen block 1 gehört	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
block rechts vom 3 zoll hohen block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
wählen sie den baustein mit der geringsten anzahl von blöcken links davon aus	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string left ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block über und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )
block, dessen breite mindestens der länge von block 1 entspricht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
wähle den speziellen block links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string is_special ) ) )
welcher block sich über dem block befindet, der sich über block 1 befindet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
finde den kürzesten block	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string height ) ) ) )
finde den block 1 und rechts 1 von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )
welcher sonderblock befindet sich links von ziegel 1?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string left ) ( string = ) en.block.block1 ) )
wie hoch ist der ziegel 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string height ) ) )
wähle die blöcke rechts von den pyramidenblöcken aus	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
welcher block ist nicht links von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string ! = ) en.block.block1 ) )
ein beliebiger block mit einer breite von 3 zoll oder 6 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )
welcher block mindestens so hoch ist wie block 1, ist lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
finde die durchschnittliche höhe eines blocks	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ) ) )
finde mich alle blöcke, die zwei formen haben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) ( number 2 ) ) )
finde mich alle blöcke, deren breite kleiner als 6 zoll ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
wählen sie den block links neben dem block aus, über dem sich block 1 befindet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
welcher stein ist länger als der stein 1?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
finde alle pyramidenblöcke, zu denen block 1 gehört	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
wählen sie blöcke aus, die 3 zoll hoch sind und sich rechts von block 1 befinden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string right ) ( string = ) en.block.block1 ) )
3 zoll langer block und das ist über block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
finden sie den block, der zum block von 3 zoll übrig bleibt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )
finde mich alle blöcke mit der gleichen breite wie die länge von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( call SW.getProperty en.block.block1 ( string length ) ) ) )
2 blöcke unter block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )
welcher block ist rechts von mehr als zwei blöcken	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
hol mir einen block unter und über block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )
block zwei unter block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )
suchen sie den block, der shorer als block 1 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
welcher stein hat nicht mehr als 2 farben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string <= ) ( number 2 ) ) )
welcher block ist 3 zoll oder größer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
suchen sie einen block rechts von zwei blöcken	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle steine länger als die breite von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
welcher block unter block 1 ist 3 zoll breit	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string below ) ( string = ) en.block.block1 ) )
finde mich einen block so breit wie block 1 oder breiter	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
zwei blocks rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )
gibt es einen block mit der gleichen farbe wie block 1?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string = ) ( call SW.getProperty en.block.block1 ( string color ) ) ) )
finden sie den block, der rechts und unter block 1 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )
welcher block ist links von den meisten blöcken	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string right ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
was ist die breite des blocks	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ) ) )
block, dessen länge höchstens der länge von block 1 entspricht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
wähle einen stein rechts neben dem stein direkt unter dem stein 1 aus	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )
wählen sie einen stein, der nicht länger als 5 cm ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
welcher block befindet sich links vom block über block 1?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
2. links von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )
welcher block ist der höchste?	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string height ) ) ) )
block mit der geringsten anzahl von farben	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string color ) ) )
wähle einen block rechts von block 2	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block links vom pyramidenförmigen block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
rechts und unter block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
wie groß ist block 1?	( call SW.listValue ( call SW.getProperty en.block.block1 ( string height ) ) )
welches ist ein 3-zoll-spezialblock	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
finde den block mit der geringsten anzahl von blöcken darunter	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string below ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle blöcke links von block 1 oder 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
finde mich alle pyramidenblöcke	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
das ist der 3 zoll große block links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
wählen sie einen block mit der gleichen breite wie block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )
block um block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )
block über mehr als 2 blöcke	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block rechts von zwei anderen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block über block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
finden sie einen block ohne eine länge von 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string ! = ) ( number 3 en.inch ) ) )
finde den 3 zoll breiten spezialblock	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string is_special ) ) )
finde mich alle 3 zoll langen blöcke	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
block links von einem block links von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )
finde mich alle blöcke mit 2 blöcken darunter	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher spezialstein ist 3 zoll breit	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string is_special ) ) )
finde einen block mit den kleinsten blöcken links von	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string left ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block unter block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
suchen sie den speziellen block rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string is_special ) ) )
wählen sie den block über dem besonders aussehenden block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string is_special ) ) )
block, dessen breite kleiner als 3 zoll oder 6 zoll ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
welcher block hat zwei oder weniger formen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string <= ) ( number 2 ) ) )
finde einen block mit einer länge größer als block 1 ist groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
finde einen block mit einem pyramidenförmigen block darunter	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
welcher ziegel ist höchstens 3 oder 6 zoll lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
welcher stein hat nicht mehr als zwei blöcke zu seiner linken	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wählen sie die blöcke aus, deren höhe kleiner oder gleich der länge von block 1 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
finde den block, den block 1 rechts davon hat und der die form einer pyramide hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
block links von zwei anderen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block, dessen form eine pyramide ist und dessen breite 3 zoll beträgt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
was ist der block darüber, der seine länge als 3 zoll hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
finde mich alle blöcke über und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
block, der speziell ist und dessen länge 3 zoll beträgt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
welche blöcke sind rechts von den blöcken 1 oder 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
was ist die anzahl der steine	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
was ist die durchschnittliche breite der steine	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ) ) )
links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
gibt es einen block links von mehr als zwei blöcken?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
gibt es einen block, dessen höhe kürzer als die breite von block 1 ist?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
welcher stein befindet sich unter dem stein rechts von stein 1?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )
finde einen block, dessen block 1 länger ist als	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
finde mich alle blöcke, die mindestens 2 blöcke auf der linken seite haben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
was ist die gesamtlänge der blöcke	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ) ) )
wählen sie den block unter block 1 und block 2 aus	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
welcher block länger als block 1 ist, ist breit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
block über pyramidenblock	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
suchen sie den block, der eine breite von 3 zoll hat und sich über block 1 befindet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
welcher ziegel höher ist als ziegel 1, ist lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
wählen sie den block mit einer länge von 5 cm über einem anderen block aus	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
block über der geringsten anzahl von blöcken	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string above ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block, der über dem speziellen block liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
finde mich alle blöcke unter 3 zoll langen blöcken	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
finde mir einen block mit einer breite von drei zoll, unter dem block 1 liegt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
welcher ziegel über ziegel 1 oder 2 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
welche blockbreite kleiner oder gleich der blockhöhe ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
3 zoll langer block unter block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
finde mir einen block mit einer pyramidenform und hat eine länge von 3 zoll	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
welcher ziegel breiter als ziegel 1 ist, ist breit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
finde mich in allen blöcken unterhalb von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )
wählen sie den block links und über block 1 aus	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )
finde einen block, der unter mindestens zwei anderen blöcken begraben ist	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle blöcke so breit wie block 1 lang ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
wähle den stein ganz rechts aus	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string left ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle blöcke kürzer als die breite von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
was ist die durchschnittliche länge der steine	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ) ) )
finde mich alle blöcke über block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) )
finde mich alle blöcke mit weniger als 2 blöcken auf der linken seite	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde alle blöcke mit mindestens 2 blöcken darunter	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
such mir einen block, der weniger als zwei blöcke darunter hat	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block, der block 1s unten und rechts hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )
gibt es einen block, der auf einen anderen block gestapelt ist, aber nur einen?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wählen sie alle blöcke mit einer höhe aus, die der länge von block 1 entspricht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.getProperty en.block.block1 ( string length ) ) ) )
welcher stein mindestens so lang ist, wie der stein 1 breit ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
welcher block mit 3 breiten ist rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
suchen sie einen block, der von block zwei übrig ist	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle blöcke von 3 zoll hohen blöcken übrig	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
rechts vom block über block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )
wählen sie blöcke, die breiter als die höhe von block 1 sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
finde einen block mit der gleichen höhe wie block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.getProperty en.block.block1 ( string height ) ) ) )
wählen sie den speziellen block und den block 1 darüber	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string is_special ) ) )
block, der sich links neben dem block unter block 1 befindet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )
schauen sie rechts von block 1 und finden sie 3-zoll-block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
block, der nicht rechts von block 1 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string ! = ) en.block.block1 ) )
suche mir einen block mit zwei blöcken links davon	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle blöcke größer als block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
welcher block ist links von block eins	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )
wählen sie einen block, der größer als 5 cm ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
block mit pyramidenform rechts vom block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
block, der von höchstens zwei blöcken rechts ist	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
beschreiben sie die form von block 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string shape ) ) )
welcher ziegelstein ist einzigartig und 3 zoll	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string is_special ) ) )
suchen sie einen block, der nicht breiter als die höhe von block 1 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
welcher block sich rechts neben dem block befindet, über dem sich block 1 befindet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )
wählen sie einen stein, der mindestens 3 cm breit ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
finde den pyramidenförmigen block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string shape ) ( string = ) en.shape.pyramid ) )
welcher block hat zwei blöcke oder weniger darunter	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block nicht rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string ! = ) en.block.block1 ) )
sieh unten und rechts von block 1 nach	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )
finde mich alle blöcke 3 zoll lang rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string right ) ( string = ) en.block.block1 ) )
welcher block hat eine breite von 3 zoll und block 1 ist auf der rechten seite von	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
block, dessen länge kleiner als 3 zoll ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
welche blocklänge kleiner ist als die blockbreite 1s	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
3 zoll breiter block rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string right ) ( string = ) en.block.block1 ) )
finde mich alle blöcke größer als block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
pyramidenblock über block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
block, dessen höhe höchstens 3 zoll beträgt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
welcher block ist kürzer als block 1?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
suchen sie den block unter block 1 mit einem durchmesser von 3 zoll	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string below ) ( string = ) en.block.block1 ) )
finde mir einen block mit durchschnittlicher länge	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ) ) )
block, der die kleinste breite hat	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string width ) ) ) )
block über 3 zoll block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
finde mich alle blöcke rechts von 3 zoll hohen blöcken	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
suchen sie den block in der form einer pyramide, von der sich block 1 rechts befindet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
welcher block von und über block 1 übrig bleibt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )
block, dessen höhe die höhe von block 1 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.getProperty en.block.block1 ( string height ) ) ) )
finde den block mit den wenigsten blöcken darunter	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string above ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block über dem block rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )
finden sie einen pyramidenförmigen block mit einer höhe von 3 zoll	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
finden sie einen block 6 zoll oder kürzer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
wählen sie einen block, der so dick ist, wie block 1 lang ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
wählen sie einen block, der genau wie block 1 aussieht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) ( call SW.getProperty en.block.block1 ( string shape ) ) ) )
finde mich in allen blöcken darunter, die über block 1 liegen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )
finde mich alle 3 zoll breiten blöcke	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
block, dessen länge mindestens der länge von block 1 entspricht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
finde alle pyramidenblöcke unter block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
welcher stein ist links von stein 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) )
oberhalb und links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
block, der die kleinste höhe hat	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string height ) ) ) )
wie lang ist block 1?	( call SW.listValue ( call SW.getProperty en.block.block1 ( string length ) ) )
finde mir alle blöcke mit höchstens 2 formen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string <= ) ( number 2 ) ) )
welcher block breiter als block 1 ist, ist lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
welcher block hat eine breite von entweder 3 oder 6 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )
wählen sie einen block mit einer länge von 3 oder 6 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )
finde den dünnsten block	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string width ) ) ) )
wie breit ist block 1?	( call SW.listValue ( call SW.getProperty en.block.block1 ( string width ) ) )
finde alle sonderblöcke, die unter block 1 liegen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
finden sie den block, den block 1 links von und über befindet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
finde mich alle blöcke rechts von 3 zoll langen blöcken	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
bloch länger als die länge von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
finde mich alle blöcke mit 2 blöcken davon übrig	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle speziellen blöcke von etwas übrig	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
finde mich alle blöcke unter 3 zoll hohen blöcken	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
finde den block, der wie eine pyramide oder ein würfel geformt ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) ( call SW.concat en.shape.pyramid en.shape.cube ) ) )
such mir den speziellen block oben auf dem block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
block ein über block, der über block 1 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
finden sie einen block kürzer als 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
wählen sie den block über block 1 mit einer länge von 3 zoll	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
pyramide rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string right ) ( string = ) en.block.block1 ) )
welcher block ist der kleinste?	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string height ) ) ) )
welcher stein ist am weitesten links?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string left ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
gibt es einen block, der über der geringsten anzahl anderer blöcke liegt?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string above ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
3 zoll breiter block unter block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
welcher block sich unter dem block befindet, unter dem sich block 1 befindet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )
block, von dem die meiste anzahl von blöcken übrig ist	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string left ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mir einen block mit zwei oder weniger farben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string <= ) ( number 2 ) ) )
welcher stein hat mehr als 2 steine darunter	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finden sie den block mit der geringsten länge	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string length ) ) ) )
block rechts von einem speziellen block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
wählen sie den block über block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )
finde mich alle blöcke mit weniger als 2 farben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string < ) ( number 2 ) ) )
finde den block über und links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
finde alle blöcke, die links und rechts von block 1 liegen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )
was ist der block über sonderblock	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
finde alle blöcke, die mindestens so lang sind wie block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
finde mich alle 3 zoll hohen blöcke links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string left ) ( string = ) en.block.block1 ) )
wählen sie den block rechts neben dem block über block 1 aus	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )
wählen sie einen block, der die form eines würfels oder einer pyramide hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) ( call SW.concat en.shape.pyramid en.shape.cube ) ) )
block, der höchstens zwei form hat	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string <= ) ( number 2 ) ) )
block auf und links von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )
pyramidenblock links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
finde mich alle steine mindestens 3 cm lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
3-zoll-block rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
blockhöhe nicht mehr als die breite von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
welcher block ist block 1 unten und rechts von	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )
wählen sie einen baustein, dessen länge größer als die breite von block 1 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
wähle den block oben rechts aus	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
zweite links von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )
block über block eins und rechts	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
was ist die gesamtbreite der blöcke	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ) ) )
block, von dem mindestens zwei übrig sind	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
suchen sie einen block mit einer länge von 3 zoll, über dem sich block 1 befindet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
finde mich in allen blöcken unter dem block, von dem 1 übrig ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )
was 3 zoll ziegel ist rechts von ziegel 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
welcher stein hat zwei blöcke darunter	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finden sie mich alle blöcke zwei blocks von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )
finde mich alle blöcke mit höchstens 2 blöcken rechts davon	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle blöcke, die block 1 ist rechts und darunter	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )
holen sie sich einen block über einem pyramidenblock	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
block, von dem höchstens zwei block übrig sind	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher block kürzer ist als block 1, ist lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
block, der unter der meisten anzahl von blöcken liegt	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string below ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher block ist über und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
block, der über weniger als zwei block ist	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde den block mit den wenigsten blöcken links davon	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string right ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block, von dem der eine nicht übrig ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string ! = ) en.block.block1 ) )
suchen sie einen block, der über und links von block 1 liegt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
block, der links vom block über block 1 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )
block, der block 1 darüber und darunter hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )
wählen sie den block aus, der sich rechts von block 1 unter dem block befindet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )
block rechts vom pyramidenblock	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
block, der speziell ist und der von block 1 übrig bleibt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string left ) ( string = ) en.block.block1 ) )
wählen sie alle blöcke aus, deren länge maximal 6 zoll beträgt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
unterhalb und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
finden sie den block mit einer höhe, die 3 oder 6 zoll nicht überschreitet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
welcher block ist links von den kleinsten blöcken	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string right ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher stein hat weniger als zwei formen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string < ) ( number 2 ) ) )
finde mich alle blöcke mit mindestens 2 blöcken rechts davon	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
suchen sie einen block mit einer höhe, die der länge von block 1 entspricht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.getProperty en.block.block1 ( string length ) ) ) )
block, dessen form eine pyramide ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) )
finde den pyramidenblock rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
wählen sie den block aus, der zwei blöcke über diesem block liegt	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher stein ist rechts von dem speziellen stein	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
block mit zwei formen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) ( number 2 ) ) )
wie viele blöcke gibt es	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher stein hat nicht mehr als zwei steine darüber	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wählen sie einen block unter block 2	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
was ist die farbe von block 1?	( call SW.listValue ( call SW.getProperty en.block.block1 ( string color ) ) )
finde alle blöcke, die 2 blöcke unter block 1 liegen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )
finde alle pyramidenblöcke, die rechts von block 1 liegen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string right ) ( string = ) en.block.block1 ) )
3 zoll langer block links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
welcher block ist über dem backstein, der 3 cm hoch ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
suchen sie einen block, der rechts von mindestens zwei blöcken ist	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher block hat eine breite von 3 zoll und befindet sich links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string left ) ( string = ) en.block.block1 ) )
wähle den stein zwei steine links von stein 1 aus	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )
suchen sie mir den block, der sich links neben dem block befindet, der sich rechts neben block 1 befindet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
block unten und links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
block, von dem weniger als zwei blocks übrig sind	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wie lang ist der block?	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ) ) )
finde mich alle blöcke rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
welcher block ist links und unter block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )
finde mich alle blöcke, die 3 cm breit und lang sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
welcher block ist rechts von dem 3 zoll breiten block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )
wählen sie den block, der sich auf der linken seite des blocks befindet und 3 zoll lang ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
finde den block mit einer länge, die kürzer als die von block 1 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
block über weniger als zwei blöcken	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wähle den ziegelstein in form einer pyramide oder eines würfels	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) ( call SW.concat en.shape.pyramid en.shape.cube ) ) )
finde die blöcke mit zwei oder weniger formen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string <= ) ( number 2 ) ) )
was ist der untere und linke block von block 1?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )
block unter 3 zoll breiten block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )
suchen sie den block unter block 1, der ebenfalls eine breite von 3 zoll hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
3 zoll hoher bock unter block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
wähle mir den block aus, der über block 1 liegt und eine höhe von 3 zoll hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
finde alle blöcke, die noch von spezialblöcken übrig sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
block unter einem speziellen block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
welcher block hat eine breite von drei zoll und dieser block 1 ist unten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
suchen sie den block mit einem höhenmaß, das mindestens der länge von block 1 entspricht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
wählen sie einen block mit der gleichen höhe wie block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
finden sie alle sonderblöcke unter block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string below ) ( string = ) en.block.block1 ) )
wählen sie den unteren block, der 5 cm hoch ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
welcher pyramidenförmige block befindet sich rechts von block 1?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
block, über dem die geringste anzahl von blöcken liegt	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string above ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wählen sie den block über dem block rechts aus. 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )
sammeln sie alle blöcke, die nicht 3 cm lang sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string ! = ) ( number 3 en.inch ) ) )
finde mich alle blöcke bei block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )
finde mich alle sonderblöcke über block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string above ) ( string = ) en.block.block1 ) )
finde mich einen block unter mindestens zwei blöcken	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle blöcke über dem block 1 ist unten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )
wählen sie den block rechts von mehr als 2 blöcken aus	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block, dessen breite die breite von block 1 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )
finde alle blöcke, über denen block 1 liegt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )
block über 3 zoll hohen block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
ist es eine pyramide oder ein würfel	( call SW.listValue ( call SW.concat en.shape.pyramid en.shape.cube ) )
suchen sie einen block, der mindestens die gleiche höhe wie block 1 hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
finde mich alle 3 zoll langen blöcke unter block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
finde einen block größer als block 1 ist lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
suchen sie den block über block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
finde mich alle blöcke mit einer länge länger als 3 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
suchen sie einen block, der über zwei anderen blöcken liegt	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wählen sie einen block mit zwei blöcken darunter aus	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
pyramidenförmiger block, der sich links von block 1 befindet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
wählen sie den ziegel, der sich über dem ziegel links von ziegel 1 befindet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )
wählen sie den block unter block unter block 1 aus	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )
finde mich alle blöcke mindestens 3 cm breit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
was ist der am weitesten links stehende block?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string left ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle 3 zoll langen blöcke	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
wählen sie die blöcke aus, die sich unter nicht mehr als 2 blöcken befinden	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher stein ist ganz oben	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string below ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block 1 oder 2 auswählen	( call SW.listValue ( call SW.concat en.block.block1 en.block.block2 ) )
block mit einer form	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string < ) ( number 2 ) ) )
suchen sie einen block mit einer breite von mehr als 3 oder 6 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
suchen sie den block, der eine breite von 3 zoll hat und sich rechts von block 1 befindet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string right ) ( string = ) en.block.block1 ) )
finde mich alle blöcke, von denen block 1 rechts und links ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )
wählen sie den 3 zoll breiten spezialblock	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
suchen sie einen block, der breiter als block 1 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
sonderblock links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string is_special ) ) )
welcher stein kürzer als stein 1 ist, ist hoch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
block mit der gleichen breite wie block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )
block rechts von mindestens 2 blöcken	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
suchen sie einen block mit einem durchmesser, der die höhe von block 1 nicht überschreitet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
block unter block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
welche pyramidenblöcke über block 1 liegen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
welcher ziegel unterhalb des speziellen ziegels liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
finde mich alle blöcke über block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
was ist die gesamtbreite des ziegels	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ) ) )
block, der sich über dem block befindet, der sich rechts von block 1 befindet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )
wählen sie den pyramidenförmigen block rechts neben block 1 aus	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string right ) ( string = ) en.block.block1 ) )
finde mich alle pyramidenblöcke mit einer höhe von 3 zoll	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string shape ) ( string = ) en.shape.pyramid ) )
block, dessen länge 3 zoll ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
finde einen speziellen block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string is_special ) ) )
block, der block 1 oben und links hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
finde alle sonderblöcke, die block 1 unten hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string is_special ) ) )
finde den block mit den meisten formen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string shape ) ) )
suchen sie den block, der über mindestens einem anderen block liegt und eine länge von 3 zoll hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
wähle alle pyramidenblöcke aus	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) )
finde mich alle blöcke mindestens 3 cm lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
finde mich alle blöcke höchstens so hoch wie 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
welcher stein hat weniger als zwei steine darüber?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher block befindet sich rechts von einem pyramidenförmigen block?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
finde mich alle blöcke links und über block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
suchen sie den block rechts von block 1 mit einer breite von 3 zoll	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
finde alle blöcke, von denen block 1 noch übrig ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )
oberhalb und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )
block, der sich unter dem block befindet, der von block 1 links ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )
finden sie einen block mit gleichen höhen- und breitenmaßen, speziell 3 zoll	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
finde den pyramidenförmigen block unter block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
wählen sie einen 3 zoll langen block links von block 1 aus	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string left ) ( string = ) en.block.block1 ) )
block, der etwas besonderes ist und der etwas besonderes ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string is_special ) ) )
wählen sie die blöcke unter block 1 aus	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) )
block ist an der zweiten linken seite von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )
welcher ziegelstein 3 zoll breit und rechts von ziegelstein 1 ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string right ) ( string = ) en.block.block1 ) )
finden sie die blöcke, die eine breite von 3 zoll haben und sich links von block 1 befinden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
wählen sie den 3-zoll-hohen block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
welcher block ist rechts von den kleinsten blöcken	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string left ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich einen block dünner als block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
finden sie den block, dessen länge und höhe 3 zoll beträgt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
wählen sie den block mit einer breite von 3 zoll	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
finde spezielle blöcke mit block 1 darüber	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
finde mich alle blöcke so hoch wie die breite von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
wählen sie einen block zwischen 3 oder 6 zoll	( call SW.listValue ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) )
finde den block links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )
such mir einen 3 zoll langen pyramidenförmigen block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string shape ) ( string = ) en.shape.pyramid ) )
block, der rechts von weniger als zwei block ist	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wie hoch ist der block 1?	( call SW.listValue ( call SW.getProperty en.block.block1 ( string height ) ) )
finde mich alle blöcke über und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )
finde alle pyramidenblöcke, die von block 1 übrig sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string left ) ( string = ) en.block.block1 ) )
der block, der der länge von block 1 entspricht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
wie hoch ist ein durchschnittlicher block?	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ) ) )
wählen sie einen block links von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )
finde mich alle blöcke so lange wie block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string length ) ) ) )
suchen sie einen block, der kürzer als 3 zoll oder 6 zoll ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
block länger als blockbreite 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
wählen sie einen block rechts von den meisten blöcken	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string right ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
suchen sie den block links von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
was 3 zoll langer block ist über block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
block links von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )
welcher block ist 3 oder weniger zoll groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
block, der zwei block ist rechts von	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle blöcke mindestens 2 blöcke weiter unten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welche blöcke sind von einzelnen oder weniger blöcken übrig	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde alle blöcke, von denen block 1 übrig ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
welcher block befindet sich links von und unter block 1?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )
wählen sie den block 1 links und darunter aus	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
finde blöcke, die mindestens so hoch sind, wie block 1 breit ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
blöcke mit mehr als zwei farben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string > ) ( number 2 ) ) )
welcher ziegel hat eine breite, die kleiner ist als die länge von ziegel 1?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
welcher block ist links von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string ! = ) en.block.block1 ) )
welcher block ist rechts und unter block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )
pyramidenblock unter block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
finden sie alle blöcke mit einer höhe von weniger als 6 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
finde mich alle blöcke rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) )
wählen sie die 3 zoll langen blöcke aus	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
block weniger als zwei blöcke weiter unten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
suchen sie den block, der sich unter der kleinsten anzahl anderer blöcke befindet	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string below ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wählen sie einen block länger als 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
welcher 3 zoll lange block über block 1 liegt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
finden sie den block höher als 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
wählen sie den block mit zwei formen aus	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) ( number 2 ) ) )
3 zoll block über block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string above ) ( string = ) en.block.block1 ) )
finde mich alle blöcke mit 2 farben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string = ) ( number 2 ) ) )
wähle den block auf der linken seite von block 1 aus	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
wählen sie einen block mit einer höhe von 1 blockbreite	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )
was ist der spezialblock links von block 1?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
wählen sie alle blöcke der länge 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string length ) ) )
was ist die farbe von block 1?	( call SW.listValue ( call SW.getProperty en.block.block1 ( string color ) ) )
finde mich alle blöcke, die nicht 3 cm lang sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string ! = ) ( number 3 en.inch ) ) )
block links von der geringsten anzahl von blöcken	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string left ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde alle speziellen blöcke, die rechts von block 1 sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string is_special ) ) )
finde einen block rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )
block, solange block 1 breit ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )
welcher block ist über dem block, der 3 cm lang ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
finde mich alle 3-zoll-blöcke links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
welcher pyramidenförmige ziegelstein 3 zoll lang ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string shape ) ( string = ) en.shape.pyramid ) )
welcher stein hat zwei steine darunter	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher block ist länger als block 1?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
wähle den pyramidenförmigen block aus	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
wähle steine aus, die mindestens 5 cm hoch sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
wählen sie einen block, der sich rechts vom äußersten block links befindet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )
finde mich alle blöcke vor und links von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )
finde mich alle blöcke mit einer breite von weniger als 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
finde mich alle steine breiter als die breite von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
der einzigartige 3 zoll breite block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string is_special ) ) )
block zwei leerzeichen über block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
block, der größer als drei zoll ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
es gibt einen block unter block 1 und einen block darüber	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )
wählen sie den block aus, der sich auf der rechten seite des blocks auf der linken seite von block 1 befindet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )
suchen sie den block mit einer höhe, die die höhe von block 1 nicht überschreitet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
block rechts von 3 zoll breiten block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )
finde einen block links von zwei oder weniger blöcken	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle blöcke kürzer als block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
finde den kürzesten block	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string height ) ) ) )
finde mich alle blöcke höchstens so lang wie die breite von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
gibt es einen block auf der rechten seite von block 1?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )
finde blöcke mit der länge von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string length ) ) ) )
3 zoll hohen block rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
2 blöcke unter block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )
welcher stein hat eine länge von weniger als 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
finden sie den speziellen block, der 3 zoll ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string is_special ) ) )
wähle den 3 zoll langen block rechts von block 1 aus	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string right ) ( string = ) en.block.block1 ) )
finde mich alle blöcke unten und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )
wählen sie einen 3-zoll-block unter block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
finde mir alle speziellen pyramidenblöcke	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string shape ) ( string = ) en.shape.pyramid ) )
finde mich alle blöcke rechts und über block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
wählen sie den block mit einer breite von weniger als 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
block rechts von block 1 und darüber	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
finden sie den block, der sich links von block 1 mit einer höhe von 3 zoll befindet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
welcher ziegel nicht unter ziegel 1 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string ! = ) en.block.block1 ) )
holen sie sich die blöcke unter block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
finde mich alle blöcke über 3 zoll langen blöcken	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
block unter einem pyramidenförmigen block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
finden sie den block rechts neben dem block, über dem sich block 1 befindet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )
block unten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle 3 zoll breiten pyramidenblöcke	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string shape ) ( string = ) en.shape.pyramid ) )
block unten und links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
block rechts von mehr als zwei blöcken	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
ein ziegel zwischen 3 und 6 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
block, der rechts von block ist, der rechts von block 1 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )
3 zoll langer block, der block 1 auf der linken seite hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
finde mich alle speziellen 3 zoll langen blöcke	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
der block unter dem block, der weniger als zwei ist	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block oben und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )
wählen sie einen speziellen pyramidenblock	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string is_special ) ) )
wählen sie den block aus, der sich links von block 1 befindet und eine höhe von 3 zoll hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
wählen sie alle blöcke mit einer länge von mehr als 3 aus	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
finden sie die blöcke, die über und links von block 1 sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )
finde mich alle blöcke 2 über block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
finden sie den block, dessen höhe 3 zoll ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
block links von 3-zoll-block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )
finde mich alle blöcke über und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )
finde mich alle blöcke links von 3 zoll breiten blöcken	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )
wählen sie den block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string is_special ) ) )
blockieren, dass die größte anzahl von blöcken darunter liegt	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string below ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block, dessen höhe größer als 3 zoll ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
welcher block sich über dem block befindet, der sich links von block 1 befindet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )
finde mich alle 3 zoll hohen blöcke, von denen block 1 rechts ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
welcher stein über dem pyramidenförmigen block liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
welcher stein befindet sich unterhalb des ziegels in form einer pyramide?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
welcher block ist unter dem speziellen block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
finde einen block, der 6 zoll oder weniger lang ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
pyramidenblock unter block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
finde mich alle blöcke nicht größer als 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
welcher block ist über block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
finde alle blöcke, die höchstens 2 blöcke rechts davon haben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
was ist die anzahl der blöcke	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wählen sie den block mit einer breite von 3 zoll aus, der sich unter block 1 befindet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
suchen sie einen block unter und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
welcher ziegel nicht höher ist als ziegel 1, ist breit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
wähle einen 3 zoll hohen ziegelstein	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
block rechts von 3 zoll breiten block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )
wählen sie einen speziellen block, der unter block 1 liegt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string below ) ( string = ) en.block.block1 ) )
finde mich alle blöcke die übrig sind und über block 1 liegen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )
welcher block sich unter dem block befindet, der sich rechts von block 1 befindet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )
gibt es einen block, dessen durchmesser und länge in beiden richtungen 3 zoll beträgt?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
wählen sie einen block mit weniger als zwei farben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string < ) ( number 2 ) ) )
welcher block ist am weitesten links	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string right ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finden sie einen block mit einem 3 zoll langen block darunter	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
finde mir die blöcke, die mehr als zwei formen haben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string > ) ( number 2 ) ) )
wählen sie den pyramidenförmigen block rechts neben block 1 aus	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string right ) ( string = ) en.block.block1 ) )
wähle alle steine mit einer länge von 1 aus	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.getProperty en.block.block1 ( string length ) ) ) )
welcher block ist der block rechts und unter block 1?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )
finde alle blöcke, unter denen block 1 übrig ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
welcher ziegelstein ist links vom 3-zoll-ziegelstein	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
befindet sich rechts von block 1 und links von block 1 ein block?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )
gibt es einen block, der sich links von block 1 befindet und ebenfalls 3 zoll lang ist?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string left ) ( string = ) en.block.block1 ) )
welche blöcke sind sowohl über als auch unter block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )
suchen sie den block unter block 1, der 5 cm lang ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string below ) ( string = ) en.block.block1 ) )
block mit der gleichen farbe wie block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string = ) ( call SW.getProperty en.block.block1 ( string color ) ) ) )
finde den pyramidenförmigen block unter block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
finde mich alle steine unter block 1 oder 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
holen sie sich einen block links von block 1 oder block 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
mehrfarbenblock	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string > ) ( number 2 ) ) )
wählen sie den 3 zoll hohen block rechts von block 1 aus	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
welche blöcke befinden sich unter block 1?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )
wählen sie einen block, der sich unter den am dichtesten besiedelten steinen befindet	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string below ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher block ist rechts von block 1 und hat die form einer pyramide	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
finde alle blöcke, die so lang oder länger als block 1 sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
welcher block ist am nächsten am boden	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string above ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
zweifarbiger block	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string > ) ( number 2 ) ) )
finde alle blöcke, die rechts von block 1 sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )
welcher block ist nur eine einzige farbe	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string < ) ( number 2 ) ) )
finden sie den block mit 3 zoll höhe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
welcher stein ist unter einem stein, der 3 cm breit ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )
holen sie sich einen 3 zoll langen block unter block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
finde mir alle blöcke, die keine pyramide sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string ! = ) en.shape.pyramid ) )
welcher block ist rechts von block 1 und hat eine breite von 3 zoll	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
finden sie den block, der mindestens 3 cm lang ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
der block unter block eins und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )
wähle links von block 1 aus	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
wählen sie einen block rechts von block 2 aus	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher stein ist höher als 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
welcher block ist so lange wie block 1 breit ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )
finde mich alle blöcke höchstens so hoch wie block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
wähle den 3 zoll breiten block links von block 1 aus	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string left ) ( string = ) en.block.block1 ) )
wählen sie den block, der von einem block, der 3 zoll ist, links ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
wähle den buntesten block	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string color ) ) )
block, dessen länge nicht 3 zoll ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string ! = ) ( number 3 en.inch ) ) )
finde mich alle blöcke mit mindestens 2 farben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string >= ) ( number 2 ) ) )
finde einen block der gleichen farbe wie block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string = ) ( call SW.getProperty en.block.block1 ( string color ) ) ) )
welcher block ist links von mehr als zwei blöcken	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wählen sie einen block, der nicht mehr als 2 formen enthält	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string <= ) ( number 2 ) ) )
welcher ziegel über dem ziegel rechts von ziegel 1 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )
block, der unter block ist, dessen länge 3 zoll ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
finde mich alle 3 zoll hohen blöcke, die block 1 oben ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
wählen sie einen block mit einer länge von mehr als 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
suchen sie den 3 zoll hohen block auf der rechten seite von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string right ) ( string = ) en.block.block1 ) )
finde den block links und unter block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
finde mich alle 3 zoll langen blöcke, von denen block 1 rechts ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
block mit zwei farben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string = ) ( number 2 ) ) )
wählen sie die blöcke links von und über block 1 aus	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )
block 3 zoll lang und unter block eins	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
suchen sie den block unter block 1, der 3 zoll hoch ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
welcher block ist etwas besonderes und hat block 1 auf der rechten seite	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
finden sie den block links von zwei blöcken oder einen, aber nicht mehr	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welche blöcke befinden sich oberhalb des blocks rechts von block 1?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )
wählen sie alle 3 zoll langen blöcke aus	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
wählen sie rechts neben block den block 1 aus	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
wähle blöcke aus, die zwei farben haben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string = ) ( number 2 ) ) )
block links von 2 blöcken	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block links von den blöcken 1 und 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
finde mich alle 3 zoll hohen blöcke rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
welcher block ist über dem 3 zoll hohen block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
wähle den block links aus	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )
welcher block ist der kürzeste?	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string height ) ) ) )
block unterhalb und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )
suchen sie den block auf der rechten seite eines 3 zoll breiten blocks	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )
finde mich alle blöcke über einem pyramidenblock	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
wählen sie einen baustein, dessen länge mindestens der breite von block 1 entspricht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
finde mich alle blöcke mit höchstens zwei blöcken davon übrig	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finden sie den speziellen block mit block 1 darunter	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string is_special ) ) )
welcher block ist mindestens 3 oder 6 zoll lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
wählen sie jeden 3 oder 6 zoll großen block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )
ein 3-zoll-block hat einen block darüber und findet diesen block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )
wählen sie die blöcke aus, die über und unter block 1 liegen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )
finde mich alle blöcke unter zwei block	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mir den block mit den wenigsten farben	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string color ) ) )
wählen sie den block links von block 1 mit einer gesamthöhe von 3 zoll aus	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
wie lang ist der block?	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ) ) )
welcher ziegel hat die meisten formen?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string shape ) ) )
3 zoll hoher block über block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string above ) ( string = ) en.block.block1 ) )
finden sie den block, der sich unter dem block befindet, der sich unter block 1 befindet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )
wählen sie den block links von block 1 aus	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
unten und rechts ab block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )
block unter block 1, der 3 zoll lang ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
block, dessen höhe höchstens 3 zoll oder 6 zoll beträgt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
such mir den speziellen block, der sich links von block 1 befindet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string left ) ( string = ) en.block.block1 ) )
such mir einen speziellen block links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string left ) ( string = ) en.block.block1 ) )
gibt es einen block mit einer breite, die 3 oder 6 zoll maximal entspricht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
finde mich alle blöcke unter block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )
block, der die meisten formen hat	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string shape ) ) )
welcher block mindestens so hoch ist wie block 1, ist breit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
finde einen block, der 6 zoll lang oder weniger ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
block über block, der unter block 1 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )
block links vom pyramidenblock	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
wählen sie alle sonderblöcke über block 1 aus	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string is_special ) ) )
wählen sie einen block über den am dünnsten besiedelten steinen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string above ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde den block mit dem pyramidenförmigen block darüber	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
welche blockhöhe ist nicht 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string ! = ) ( number 3 en.inch ) ) )
finde mich alle blöcke länger als block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
sammeln sie alle blöcke, die 3 zoll oder mehr sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
finde mich alle pyramidenblöcke rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
welcher block sich links vom block befindet, befindet sich rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )
block über 1 block und links von 1 block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
welcher stein hat mindestens zwei steine auf der linken seite	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
rechts von block 1 und block 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
3 zoll block über block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string above ) ( string = ) en.block.block1 ) )
welcher stein ist 3 oder 6 cm lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )
wählen sie den block, dessen breite 3 zoll beträgt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )
rechts vom sonderblock	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
finde mich alle pyramidenförmigen blöcke	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string shape ) ( string = ) en.shape.pyramid ) )
wählen sie einen block, der weniger dick ist als block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
finde mich alle blöcke unter den blöcken 1 oder 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
welcher pyramidenförmige block 3 zoll breit ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string shape ) ( string = ) en.shape.pyramid ) )
gesamtlänge des blocks	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ) ) )
block über der pyramide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
nimm den spezialblock von rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string is_special ) ) )
finde mich alle blöcke links von block 1 ist unten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )
wählen sie einen block, der kürzer als block 1 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
finde alle blöcke, von denen block 1 rechts und von denen block 1 links ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )
suchen sie einen block mit der gleichen form wie block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) ( call SW.getProperty en.block.block1 ( string shape ) ) ) )
finde mich alle blöcke über und links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
finde den block über zwei blöcken	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle 3 zoll breiten blöcke rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string right ) ( string = ) en.block.block1 ) )
finden sie einen block, der eine länge von weniger als 3 zoll hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
finde einen block zwischen block 1 und einem block über block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
welcher block ist unter block 1 und hat eine höhe von 3 zoll	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
welcher block ist von block 1 und 3 zoll in der länge übrig	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
block, dessen länge größer als 3 zoll oder 6 zoll ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
dritter block links	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
gibt es einen block über dem pyramidenförmigen block?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
suchen sie den block mit einer länge, die die breite von block 1 überschreitet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
block, der sich rechts von der meisten anzahl von blöcken befindet	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string right ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
suchen sie einen block mit block 1 rechts	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) )
block, von dem mehr als zwei blöcke übrig sind	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wählen sie einen block mit einer breite und höhe von 3 zoll	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
such mir einen block, der keine pyramide ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string ! = ) en.shape.pyramid ) )
wählen sie die blöcke rechts von mehr als zwei blöcken aus	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wählen sie den 3 zoll hohen block über block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
wie lautet die nummer des blocks?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block mit maximal zwei farben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string <= ) ( number 2 ) ) )
welcher block ist unter zwei blöcken	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block, der sich rechts von der meisten anzahl von blöcken befindet	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string right ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher block ist auf der linken seite des 3-zoll-hochblocks	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
3 zoll block über block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
welche pyramidenblöcke befinden sich rechts von block 1?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
block zwei rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )
finde mich alle blöcke über 3 zoll breiten blöcken	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )
welcher block hat weniger als zwei blöcke links davon	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finden sie den block von 3 cm höhe und links platziert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
welcher block hat block 1 oben und links	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )
welcher block hat eine breite, die kleiner oder gleich der länge von block 1 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
block über und links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
finde alle blöcke, unter denen block 1 rechts ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
finden sie den block mit einer höhe von weniger als 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
wählen sie den 3-zoll-block unter block 1 aus	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string below ) ( string = ) en.block.block1 ) )
block, dessen länge 3 zoll und dessen länge 3 zoll ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
welcher block ist block 1 rechts von	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
welcher block ist zwei blöcke rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )
wählen sie einen block, der von block 1 übrig bleibt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) )
ein spezieller block, dessen form pyramide ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string shape ) ( string = ) en.shape.pyramid ) )
welcher block befindet sich links von block 1 oder block 2?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
suchen sie den block unter block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )
block, dessen höhe nicht 3 zoll ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string ! = ) ( number 3 en.inch ) ) )
finde mich alle blöcke größer als 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
was ist die höhe des blocks	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ) ) )
welcher ziegelstein nicht breiter als ziegelstein 1 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
welcher stein ist 3 oder 6 cm hoch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )
wähle den am wenigsten bunten stein aus	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string color ) ) )
such mir einen pyramiden- oder würfelförmigen block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) ( call SW.concat en.shape.pyramid en.shape.cube ) ) )
welcher block hat block 1 auf der rechten seite	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )
block, der über mehr als zwei blöcken liegt	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finden sie den block, der sich unter dem block befindet, und den block, über dem sich block 1 befindet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )
welcher block ist über dem block von block1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )
finde mich alle blöcke über dem block 1 ist oben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )
block, dessen länge größer ist als die breite von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
welcher block ist auf der linken seite des 3 zoll langen blocks	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
benenne einen block mit block 1 unten und rechts	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )
finde mich alle blöcke 2 blocks von rechts	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block links von der pyramide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
finde den längsten block	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string length ) ) ) )
block über 3 zoll langen block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
block, dessen länge mindestens 3 zoll oder 6 zoll beträgt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
welcher block ist rechts von 3 cm langen block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
welcher stein ist nicht links von stein 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string ! = ) en.block.block1 ) )
wählen sie den block aus, der über der kleinsten blockgruppe liegt	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string below ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
suchen sie einen block links von und unter block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
gibt es einen block nicht breiter als 3 oder 6 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
block, dessen länge 3 zoll ist und dessen form eine pyramide ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string shape ) ( string = ) en.shape.pyramid ) )
block mit der geringsten breite	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string width ) ) ) )
wie lang ist block 1?	( call SW.listValue ( call SW.getProperty en.block.block1 ( string length ) ) )
welcher block hat block 1 auf der rechten seite und ist pyramidenförmig	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
wählen sie einen block, der nicht pyramidenförmig ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string ! = ) en.shape.pyramid ) )
suchen sie den block unter dem block mit einer breite von 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )
block nicht links von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string ! = ) en.block.block1 ) )
welcher stein ist am weitesten links?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string right ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle 3 zoll breiten blöcke, über denen block 1 liegt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
finde einen pyramidenförmigen block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) )
finde den block, der über dem block liegt, der unter block 1 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )
finde mir alle steine mit einer geringeren breite als block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
links und über block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )
welcher block ist 3 zoll groß und pyramidenförmig	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string shape ) ( string = ) en.shape.pyramid ) )
finde mich alle 3 zoll langen blöcke, die block 1 unten ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
block zwei über block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
finde mich alle blöcke 2 unter block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )
finde mich alle 3 zoll breiten und langen blöcke	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
welche blöcke 3 zoll breit überschreiten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
welcher block ist unter den meisten blöcken	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string above ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wählen sie einen block zwischen 3 und 6 zoll breit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
finde mich alle sonderblöcke links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string is_special ) ) )
finden sie einen block mit einem durchmesser, der insgesamt größer als 5 cm ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
finde alle blöcke, von denen block 1 noch übrig ist und darunter	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )
welcher block hat die höchste anzahl von blöcken darunter?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string below ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde blöcke, die größer als block 1 sind, ist lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
block über 3 zoll block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
wählen sie den block unter dem rechten aus	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
welcher ziegel eine breite hat, die kleiner als die höhe von ziegel 1 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
welcher block hat die wenigsten formen?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string shape ) ) )
wählen sie den block links von block 1 mit einer länge von 3 zoll aus	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
wähle den block über dem linken aus	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )
finde mich alle 3 zoll hohen blöcke	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
finde mich alle blöcke unter block 1, der block 1 ist auch darunter	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
wählen sie den block über block 1 aus	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
block, der über block 1 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) )
finde mich alle steine unten höchstens 2 blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle blöcke mindestens in der gleichen höhe wie block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
finde mich alle blöcke höchstens 6 cm hoch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
welcher pyramidenförmige ziegelstein 3 zoll hoch ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
finden sie alle sonderblöcke rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string is_special ) ) )
welcher stein befindet sich unter dem stein, der sich über dem stein 1 befindet?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
wählen sie einen block mit weniger als 2 blöcken links davon	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
suchen sie den 3-zoll-langen block, der sich rechts von block 1 befindet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
wählen sie den block links neben dem block über block 1 aus	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
finde alle pyramidenblöcke, unter denen block 1 liegt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
block, dessen höhe 3 zoll beträgt und der unter block 1 liegt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string below ) ( string = ) en.block.block1 ) )
suchen sie den block unter block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )
finde mich alle speziellen blöcke, die oben sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
wählen sie die blöcke links von und über block 1 aus	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
wählen sie den block links von einem anderen block aus	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
finde mich alle blöcke größer als die länge von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
suchen sie den block, der sich auf der anderen seite eines blocks links von block 1 befindet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )
welcher ziegelstein ist nicht länger als ziegelstein 1?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
finde mich alle blöcke rechts und unter block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )
wählen sie den block über block 1 und auf der linken seite	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
wählen sie einen block, der so lang ist, wie block 1 breit ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )
wählen sie die steine aus, die weniger als 6 zoll hoch sind, und wählen sie dann die steine aus, die weniger als 3 zoll hoch sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
finde mich alle 3 zoll großen spezialblöcke	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string is_special ) ) )
suchen sie einen block, der nicht über block 1 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string ! = ) en.block.block1 ) )
finde alle spezialblöcke, die unten stehen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
welcher sonderblock ist über block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string above ) ( string = ) en.block.block1 ) )
block, der unter block 1 liegt und dessen breite 3 zoll beträgt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
block mit block 1 oder block 2 rechts	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
such mir einen 3 zoll großen pyramidenförmigen block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
wählen sie die blöcke unten und links von block 1 aus	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
suchen sie die blöcke, die sich links von block 1 befinden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )
welcher ziegel größer ist als ziegel 1, ist hoch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
welche art von block hat die meisten formen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string shape ) ) )
finde mich alle 3 zoll hohen blöcke, von denen block 1 übrig ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
finde den höchsten block	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string height ) ) ) )
wählen sie den block aus, der rechts von block 1 und darüber liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )
finde die blöcke links und über block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
wählen sie einen 3-zoll-block, der von block 1 übrig bleibt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
wähle den baustein links unter block 1 aus	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )
finden sie einen block, der mindestens 3 bis 6 zoll ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
block, dessen länge größer als 3 zoll ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
such mir einen 3 zoll langen block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
block über block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
block, dessen form eine pyramide ist und das ist etwas besonderes	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string is_special ) ) )
2 blöcke rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )
welche speziellen blöcke haben eine länge von 3 zoll	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string is_special ) ) )
welcher stein ist mindestens so hoch wie stein 1 ist lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
welcher stein ist über dem stein 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) )
finde mich einen block mit höchstens zwei blöcken links davon	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
pyramidenblock rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string left ) ( string = ) en.block.block1 ) )
welcher block ist über block 1 und hat eine höhe von 3 zoll	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
suchen sie den block, über und unter dem sich block 1 befindet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )
welcher stein ist mindestens 3 cm hoch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
was ist die gesamthöhe der blöcke	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ) ) )
befindet sich rechts von block 1 oder block 2 ein block?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
suchen sie den block, der rechts von block 1 ist und eine breite von 3 zoll hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
welcher block mindestens so breit ist, wie block 1 hoch ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
3 zoll breiter block über block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
block rechts von mindestens zwei block	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
breite von block 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string width ) ) )
finden sie den pyramidenförmigen block unter block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string below ) ( string = ) en.block.block1 ) )
welcher block sich unter einem block befindet, vor dem sich block 1 rechts befindet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )
block, der über block ist, dessen länge 3 zoll ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
finde den block über dem block, den block 1 darunter hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )
block, zu dem die geringste anzahl von blöcken gehört	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string right ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
suche mir alle steine, die höchstens 2 blöcke darunter haben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher block über block 2 oder block 1 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
finden sie mich den block über dem speziellen block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
finden sie einen block mit einer länge und breite von 3 zoll pro seite	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
wählen sie die blöcke aus, die kleiner als 5 cm sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
wie groß ist block 1?	( call SW.listValue ( call SW.getProperty en.block.block1 ( string height ) ) )
finde mich alle 3 zoll breiten blöcke, die block 1 unten ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
such mir den block, der sich rechts vom spezialblock befindet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
welcher ziegel hat die gleiche form wie ziegel 1?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) ( call SW.getProperty en.block.block1 ( string shape ) ) ) )
besprechungen, die später als die wöchentliche stand-up-besprechung beginnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
welches datum ist das wöchentliche stand-up-meeting?	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) )
wann ist der wöchentliche standup?	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) )
zeigen sie mir alle besprechungen im greenberg cafe, an denen alice teilnimmt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string attendee ) ( string = ) en.person.alice ) )
zeig mir das meeting, das spätestens am tag beginnt	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string start_time ) ) ) )
zeig mir alle treffen, die nicht um 10 uhr enden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string ! = ) ( time 10 0 ) ) )
zeigen sie mir alle besprechungen mit mindestens zwei teilnehmern	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string >= ) ( number 2 ) ) )
zeig mir alle treffen, die drei stunden dauern	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )
besprechungen, die vor 10 uhr oder vor 15 uhr beginnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )
welche besprechungen beginnen nicht um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string ! = ) ( time 10 0 ) ) )
welches meeting endet vor dem beginn des wöchentlichen standups?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
zeig mir treffen nach dem 2. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) ) )
welches meeting hat den frühesten startzeitpunkt?	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string start_time ) ) ) )
zeig mir alle treffen drei stunden lang im greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )
zeig mir alle besprechungen, die spätestens um 10 uhr enden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
wichtiges treffen am 2. januar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
zeigen sie mir alle besprechungen, die spätestens zu dem zeitpunkt beginnen, an dem die wöchentliche besprechung beginnt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
wie lange dauert das wöchentliche stand-up-meeting?	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) )
zeig mir alle 3 stunden langen treffen, die um 10 uhr enden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )
zeig mir alle termine, die nicht um 10 uhr beginnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string ! = ) ( time 10 0 ) ) )
welche meetings enden, wenn der wöchentliche standup-vorgang gestartet werden soll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) )
zeige mir alle locations, die mindestens zwei meetings hatten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
zeigen sie mir besprechungen, die 3 stunden dauern	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )
in welchem meeting tauchten die wenigsten leute auf?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( string attendee ) ) )
wann endet die wöchentliche aufstehphase?	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) )
welches treffen um 10 uhr endet und alice anwesend ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string end_time ) ( string = ) ( time 10 0 ) ) )
zeigen sie mir die durchschnittliche besprechungsdauer	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ) ) )
person, die am 2. januar teilnimmt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ) )
zeig mir alle treffen mit bob oder alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
zeigen sie mir besprechungen mit zwei teilnehmern	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( number 2 ) ) )
zeigen sie mir alle besprechungen, die zur selben zeit oder früher als der wöchentliche start enden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
zeigen sie mir alle besprechungen mit zwei teilnehmern	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( number 2 ) ) )
zeig mir alle teilnehmer der treffen am 2. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ) )
sitzung beginnt um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
welches wichtige treffen hat einen ort im greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )
zeig mir alle dreistündigen treffen am 2. januar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
finden sie alle treffen, die am 2. januar oder 3. januar beginnen	( call SW.listValue ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) )
welches treffen beginnt frühestens	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string start_time ) ) ) )
zeig mir alle treffen, die nach 10 oder 15 uhr enden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )
welches treffen endet spätestens um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
ort verfügt über die größte anzahl von besprechungen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string location ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
welche besprechungen haben eine startzeit von 10 oder 15 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) )
treffen im greenberg cafe, an denen alice teilnahm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string location ) ( string = ) en.location.greenberg_cafe ) )
zeig mir die daten aller wöchentlichen stand-up-meetings	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) )
welche besprechung hat die gleiche endzeit wie wöchentliches aufstehen?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
welche meetings enden gleichzeitig mit dem wöchentlichen roundup-meeting?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) )
treffen, an dem alice teilnimmt, beginnt um 1000 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
zeigen sie mir alle besprechungen, deren dauer weniger als drei stunden oder weniger als eine stunde beträgt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) ) )
welches treffen ist zum frühesten zeitpunkt geplant	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string date ) ) ) )
sitzungen finden später als am 2. januar statt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
zeig mir treffen, die 3 stunden dauern und bei alice sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string attendee ) ( string = ) en.person.alice ) )
welche person besucht das wöchentliche startup?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) en.meeting.weekly_standup ) )
die besprechung beginnt vor 10 oder 15 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )
was für ein treffen nicht später als das des wöchentlichen starts	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )
welches treffen ist länger als wöchentliche stand-up	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) ) ) )
welches treffen hat ein nach dem 2. oder 3. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) ) )
zeigen sie mir alle meetings, die nach dem ende des wöchentlichen standups beginnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
was ist die startzeit für das wöchentliche stand-up-meeting?	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) )
wie lange dauert das treffen?	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ) ) )
besprechungen, die nach dem start der wöchentlichen startbesprechung enden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
besprechungen, an denen alice teilnimmt und die drei stunden dauern	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string attendee ) ( string = ) en.person.alice ) )
wer ist bei der wöchentlichen oder jährlichen überprüfung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.concat en.meeting.weekly_standup en.meeting.annual_review ) ) )
welche sitzungen enden um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )
besprechungen, die um 10 uhr morgens enden und um 10 uhr morgens beginnen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
besprechung am 2. oder 3. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) )
zeig mir die leute, die an den meisten meetings teilnehmen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string attendee ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
wichtiges treffen um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
welches treffen beginnt am frühesten	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string start_time ) ) ) )
standorte, an denen das wöchentliche stand-up-meeting nicht stattfindet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string ! = ) en.meeting.weekly_standup ) )
zeigen sie mir wichtige besprechungen, die um 10 uhr beginnen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
wie lange dauert ein wöchentlicher start?	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) )
zeig mir alle treffen, die bis zum 3. januar stattfinden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) ) )
wo ist der wöchentliche standup	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) en.meeting.weekly_standup ) ( call SW.reverse ( string location ) ) ( string = ) en.meeting.weekly_standup ) )
zeig mir alle dreistündigen besprechungen ab 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
sitzungen, die um 10 uhr enden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )
zeig mir die daten der wöchentlichen stand-up-meetings	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) )
besprechung, die um oder nach der endzeit des wöchentlichen stand-ups endet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
treffen, die nicht im greenberg cafe stattfinden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string ! = ) en.location.greenberg_cafe ) )
welche besprechung hat eine endzeit, die nicht größer ist als das ende des wöchentlichen startvorgangs	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
besprechungen, die um 10 uhr beginnen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
besprechungen, die vor dem wöchentlichen standup-meeting enden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
besprechungen, die zur gleichen zeit wie die wöchentliche stand-up-besprechung enden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) )
zeigen sie mir alle als wichtig gekennzeichneten besprechungen, die um 10 uhr beginnen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string is_important ) ) )
zeigen sie mir alle meetings, die später als die wöchentliche sitzung enden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
treffen, das früher endet als wöchentliches aufstehen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
zeig mir alle treffen, die vor dem 2. januar oder dem 3. januar stattfinden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) ) )
ist das treffen um 10 oder 15 uhr	( call SW.listValue ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) )
besprechung mit mindestens zwei teilnehmern	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string >= ) ( number 2 ) ) )
zeigen sie mir die orte aller besprechungen, die um 10 uhr beginnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ) )
person, die wöchentlich an stand-up teilnimmt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) en.meeting.weekly_standup ) )
treffen länger als ein oder drei stunden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) ) )
zeige mir treffen an weniger als zwei orten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string < ) ( number 2 ) ) )
wählen sie alle wichtigen besprechungen aus	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string is_important ) ) )
welche besprechung beginnt vor 10 oder 15 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )
zeigen sie mir alle besprechungen, die zu dem zeitpunkt beginnen, an dem die wöchentliche besprechung endet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) )
welches meeting hat den gleichen ort wie das wöchentliche aufstehen?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) en.meeting.weekly_standup ) ) )
welche besprechungen haben die gleiche startzeit wie die wöchentliche startbesprechung?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) )
sitzungen vor dem 3. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) ) )
zeigen sie mir alle teilnehmer von besprechungen, die um 10 uhr beginnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ) )
treffen am 2. januar, die um 10 uhr enden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )
zeigen sie mir alle besprechungen, die zur gleichen zeit oder früher als das wöchentliche ende des stand-ups beginnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
welches treffen beginnt um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
welches treffen beginnt mindestens um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
wie lange dauert das wöchentliche stand-up-meeting?	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) )
was ist das meeting, das unmittelbar vor dem wöchentlichen standup stattfindet?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
an welchem ort werden mehr als zwei sitzungen abgehalten?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
zeig mir die orte aller treffen am 2. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ) )
zeigen sie mir alle teilnehmer von besprechungen, die drei stunden lang sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ) )
zeigen sie mir besprechungen, die nicht um 10 uhr enden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string ! = ) ( time 10 0 ) ) )
besprechungen, an denen personen teilnehmen, die an der wöchentlichen besprechung teilnehmen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string attendee ) ) ) )
welche treffen finden am 2. januar im greenberg cafe statt?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
welches meeting hat die gleiche länge wie das wöchentliche startup?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) ) )
welche person nimmt nicht am wöchentlichen stand-up-meeting teil?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string ! = ) en.meeting.weekly_standup ) )
treffen im greenberg cafe, die um 10 uhr beginnen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
besprechungen, die am selben tag oder nach dem wöchentlichen stand-up-meeting abgehalten werden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )
zeigen sie mir alle besprechungen, die am selben tag oder vor dem wöchentlichen standup stattfinden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )
zeig mir alle besprechungen, an denen entweder alice oder bob teilgenommen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
welche besprechung beginnt mindestens um 10 oder 15 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )
finde mir ein treffen, das kürzer als drei stunden ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.hour ) ) ) )
welcher ort sind die meisten meetings?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string location ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
wöchentlicher startteilnehmer	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string attendee ) ) )
zeig mir alle treffen, die um 10 uhr beginnen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
zeigen sie mir besprechungen, die enden, bevor das wöchentliche aufstehen beginnt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
meeting teilt teilnehmer mit wöchentlichem standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) en.meeting.weekly_standup ) ) )
zeig mir treffen um 10 uhr mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string attendee ) ( string = ) en.person.alice ) )
besprechungen, die nicht um 10 uhr enden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string ! = ) ( time 10 0 ) ) )
welches treffen endet um 10 uhr am zweiten januar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
personen, die nicht am wöchentlichen stand-up-meeting teilnehmen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string ! = ) en.meeting.weekly_standup ) )
besprechungen, die drei stunden oder länger oder eine stunde oder länger dauern	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) ) )
treffen am 2. januar um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
zeig mir treffen vor dem 3. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) ) )
zeigen sie mir die besprechungen mit der geringsten anzahl von verschiedenen standorten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( string location ) ) )
zeigen sie mir standorte aller als wichtig gekennzeichneten besprechungen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ) )
zeigen sie mir alle besprechungen, an denen personen teilgenommen haben, die auch an der wöchentlichen besprechung teilgenommen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string attendee ) ) ) )
personen, die an besprechungen teilnehmen, die um 10 uhr morgens enden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ) )
zeig mir, wer an drei stunden tagen teilnimmt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ) )
welche besprechung hat die geringste teilnehmerzahl?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( string attendee ) ) )
zeige mir alle als wichtig gekennzeichneten besprechungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string is_important ) ) )
sitzungen, an denen zwei oder weniger personen teilnehmen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string <= ) ( number 2 ) ) )
welches treffen hatte jemand, der wöchentlich auf stand-up ging	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string attendee ) ) ) )
zeig mir wer nicht im wöchentlichen standup ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string ! = ) en.meeting.weekly_standup ) )
zeig mir alle termine, die um 10 uhr beginnen und enden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )
wichtige sitzungen von alice besucht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string attendee ) ( string = ) en.person.alice ) )
besprechungen, die vor dem wöchentlichen stand-up-meeting beginnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
welches treffen findet im greenberg cafe statt?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )
an welchem dreistündigen treffen hat alice teilgenommen?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string length ) ( string = ) ( number 3 en.hour ) ) )
zeig mir die längsten treffen	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string length ) ) ) )
zeige mir alle locations die nicht das wöchentliche standup hosten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string ! = ) en.meeting.weekly_standup ) )
was ist ein wichtiges treffen?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string is_important ) ) )
zeig mir alle treffen, die um 10 uhr beginnen und um 10 uhr enden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
zeigen sie mir alle besprechungen, die drei oder eine stunde dauern sollen	( call SW.listValue ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) )
dreistündiges treffen im greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )
personen, die an besprechungen teilnehmen, an denen alice teilnimmt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ) )
zeigen sie mir die teilnehmer für alle besprechungen am 2. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ) )
zeig mir alle, die an meetings teilgenommen haben, an denen auch alice teilgenommen hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ) )
wer ist die person, die an dem wöchentlichen stand-up-meeting teilnimmt?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) en.meeting.weekly_standup ) ( call SW.reverse ( string attendee ) ) ( string = ) en.meeting.weekly_standup ) )
welche besprechung hat eine länge von mehr als wöchentlichem start	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) ) ) )
welche person nimmt an mehr als zwei meetings teil?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
treffen vor dem 2. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
zeig mir alle treffen, an denen alice am 2. januar teilgenommen hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string attendee ) ( string = ) en.person.alice ) )
welche besprechung hat eine endzeit vor dem wöchentlichen start	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
zeigen sie mir besprechungen, die enden, bevor der wöchentliche standup beginnt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
welche treffen am 2. januar enden um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
welche wichtigen treffen werden von alice besucht?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string is_important ) ) )
besprechungen, die genauso lang sind wie die wöchentliche stand-up-besprechung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) ) )
sitzung endet nach 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
besprechungen, die nach dem wöchentlichen standup-meeting beginnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
welches treffen hat die kürzeste zeit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string end_time ) ) ) )
besprechung, die später als zu beginn des wöchentlichen stand-ups beginnt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
zeigen sie mir alle besprechungen, die höchstens zwei standorte haben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string <= ) ( number 2 ) ) )
welche wichtigen treffen beginnen um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string is_important ) ) )
2. januar treffen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
welche besprechung hat eine endzeit von mindestens 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
welches treffen war kürzer als drei stunden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) ) )
welches wichtige treffen befindet sich im greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string is_important ) ) )
welche besprechung hat eine endzeit, die kleiner ist als die wöchentliche stand-up-zeit?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
zeigen sie mir alle personen, die an mehr als zwei besprechungen teilgenommen haben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
sitzungen am oder vor dem 2. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
welcher ort hat mehr als zwei treffen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
meetings an den meisten orten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( string location ) ) )
treffen im greenberg cafe, die um 10 uhr morgens enden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )
dreistündiges treffen mit alice als teilnehmerin	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string length ) ( string = ) ( number 3 en.hour ) ) )
welche besprechung beginnt mit der durchschnittlichen wöchentlichen startzeit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
besprechungen anzeigen, die nicht früher als die wöchentliche startbesprechung beginnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
zeig mir alle gespräche, an denen alice teilnimmt, die drei stunden dauern	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string attendee ) ( string = ) en.person.alice ) )
zeigen sie mir alle besprechungen, die zur gleichen zeit enden, zu der der wöchentliche standup beginnt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) )
welche besprechung hat eine startzeit zum endzeitpunkt des wöchentlichen stand-ups?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) )
orte wichtiger treffen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ) )
zeig mir treffen ab 10 oder 15 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )
welches meeting beginnt, bevor das wöchentliche aufstehen endet?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
zeig mir alle treffen drei stunden lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )
standorte, an denen mindestens zwei sitzungen stattfinden	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
zeig mir treffen nicht am 2. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string ! = ) ( date 2015 1 2 ) ) )
das meeting endet nach der endzeit des wöchentlichen stand-ups	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
zeig mir den ort aller treffen, an denen alice teilgenommen hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ) )
zeig mir alle treffen am 2. januar, die um 10 uhr enden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
zeig mir alle treffen im greenberg cafe, die um 10 uhr enden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )
drei stunden lang wichtiges treffen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string is_important ) ) )
welche besprechung hat alice anwesend und beginnt um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
wichtige besprechungen beginnen um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
wie viele besprechungen gibt es?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
wöchentliche standup-endzeit	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) )
welcher ort ist das meeting, an dem alice teilnimmt?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ) )
zeig mir alle treffen, an denen alice nicht teilgenommen hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string ! = ) en.person.alice ) )
wie lange dauert die durchschnittliche besprechung?	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ) ) )
zeige mir alle treffen am 2. januar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
person ist teilnehmer der wöchentlichen standup- oder jährlichen überprüfung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.concat en.meeting.weekly_standup en.meeting.annual_review ) ) )
besprechungen, die drei stunden oder länger dauern	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.hour ) ) ) )
wichtige treffen, die um 10 uhr morgens enden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string is_important ) ) )
zeig mir alle treffen am 2. januar, die um 10 uhr enden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )
besprechungen, die kürzer als drei stunden oder kürzer als eine stunde sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) ) )
besprechungen, die um 10 oder 15 uhr enden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) )
die besprechung beginnt nicht um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string ! = ) ( time 10 0 ) ) )
sitzungen beginnen später als 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
zeig mir alle treffen, die mindestens drei stunden dauern	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.hour ) ) ) )
zeig mir treffen, die nach dem 2. januar stattfinden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
welches treffen hat die geringste länge	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string length ) ) ) )
zeigen sie mir alle besprechungen, die um 10 uhr enden und an denen alice teilnimmt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string end_time ) ( string = ) ( time 10 0 ) ) )
wichtiges treffen im greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )
zeig mir alle treffen im greenberg cafe, die um 10 uhr enden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )
besprechungen, die kürzer als drei stunden sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.hour ) ) ) )
zeigen sie mir alle als wichtig gekennzeichneten besprechungen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) )
zeig mir alle treffen am 2. januar ab 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
zeigen sie mir alle besprechungen mit maximal zwei teilnehmern	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string <= ) ( number 2 ) ) )
wer wird an wichtigen treffen teilnehmen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ) )
besprechungen, die gleichzeitig mit oder vor dem wöchentlichen standup-meeting enden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
zeigen sie mir alle teilnehmer von besprechungen, die als wichtig markiert sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ) )
zeig mir alle meetings nicht länger als die wöchentlichen stand-ups	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) ) ) )
welches meeting beginnt, wenn das wöchentliche aufstehen endet?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) )
zeig mir alle treffen zwischen 10 und 15 uhr	( call SW.listValue ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) )
zeig mir, an welchem treffen alice teilnehmen wird, das um 10 uhr endet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string attendee ) ( string = ) en.person.alice ) )
zeige mir alle termine ab spätestens 15 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )
welches meeting hat die früheste endzeit?	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string end_time ) ) ) )
welches wichtige treffen begann um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
besprechungen, die um oder nach 10 uhr enden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
welcher ort beherbergt die meisten meetings?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string location ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
zeigen sie mir alle besprechungen, die frühestens mit dem ende der wöchentlichen besprechung beginnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
zeigen sie mir alle besprechungen, die am oder nach dem datum des wöchentlichen standups stattfinden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )
zeigen sie mir alle besprechungen, die nach 10 uhr beginnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string > ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
zeigen sie mir die besprechung, die am 2. januar um 10 uhr beginnt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
ist dieses treffen drei stunden lang oder eine stunde lang	( call SW.listValue ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) )
zeig mir alle besprechungen, an denen alice teilgenommen hat und die um 10 uhr beginnen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string attendee ) ( string = ) en.person.alice ) )
treffen vor dem wöchentlichen stand-up-meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )
sitzungen enden um 10 uhr und dauern drei stunden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )
zeig mir alle meetings, die nach dem wöchentlichen standup stattfinden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )
die besprechung endet spätestens zur startzeit des wöchentlichen stand-ups	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
zeigen sie mir alle besprechungen im greenberg cafe oder in der zentrale	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) ( call SW.concat en.location.greenberg_cafe en.location.central_office ) ) )
welche besprechung dauert eine stunde oder länger?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) ) )
dreistündiges treffen, das um 10 uhr endet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )
treffen nicht länger als die dauer der wöchentlichen stand-up	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) ) ) )
zeigen sie mir alle besprechungen mit einer länge von weniger oder mehr als drei stunden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string ! = ) ( number 3 en.hour ) ) )
zeigen sie mir die besprechungen, die nicht später als das wöchentliche aufstehen enden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
wann beginnt das wöchentliche stand-up-meeting?	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) )
welche besprechung hat ein früheres datum als der 2. januar?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
zeigen sie mir alle besprechungen, die vor dem wöchentlichen standup beginnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
zeig mir alle meetings, an denen alice nicht teilnimmt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string ! = ) en.person.alice ) )
person, die an der sitzung teilnimmt, die um 10 uhr endet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ) )
treffen von zwei personen besucht	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( number 2 ) ) )
welche person nimmt an mindestens zwei sitzungen teil?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
wo findet das meeting statt, an dem alice teilnimmt?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ) )
zeigen sie mir alle besprechungen im greenberg cafe oder in der zentrale	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) ( call SW.concat en.location.greenberg_cafe en.location.central_office ) ) )
besprechung, deren startzeit nach der endzeit des wöchentlichen stand-ups liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
show-meetings, die um 10 uhr im greenberg cafe beginnen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )
welches meeting hat die späteste startzeit?	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string start_time ) ) ) )
welches meeting sich im greenberg cafe befindet und alice wird anwesend sein	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string location ) ( string = ) en.location.greenberg_cafe ) )
was ist das kürzeste treffen?	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string length ) ) ) )
zeigen sie mir alle besprechungen, die um 10 uhr enden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )
besprechungen, die genauso lang oder kürzer sind als das wöchentliche stand-up-meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) ) ) )
zeigen sie mir besprechungen, die denselben standort haben wie der wöchentliche start	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string location ) ) ) )
zeigen sie mir alle drei stunden langen besprechungen, die als wichtig markiert sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string is_important ) ) )
an welchem ort finden die meisten meetings statt?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string location ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
welches treffen hat zwei standorte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string <= ) ( number 2 ) ) )
zeig mir die besprechungen ab 15 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )
zeige mir alle treffen, die später als 10 uhr enden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
wer hat die geringste anzahl von sitzungen besucht	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string attendee ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
zeigen sie mir alle besprechungen, an denen personen teilgenommen haben, die auch am wöchentlichen standup teilgenommen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) en.meeting.weekly_standup ) ) )
leute, die an treffen im greenberg cafe teilnehmen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ) )
sitzungen finden vor dem 2. oder 3. januar statt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) ) )
zwei teilnehmer sind an der besprechung	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( number 2 ) ) )
zeigen sie mir alle besprechungen, bei denen es sich entweder um wöchentliche oder jährliche besprechungen handelt	( call SW.listValue ( call SW.concat en.meeting.weekly_standup en.meeting.annual_review ) )
wo findet das meeting mit der geringsten teilnehmerzahl statt?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string location ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
die besprechung findet zu einem späteren zeitpunkt als der wöchentlichen stand-up-sitzung statt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )
zeige alle meetings, die früher als 10 uhr beginnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
wichtige besprechungen, die drei stunden dauern	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string is_important ) ) )
welcher ort ist das meeting, das um 10 uhr endet?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ) )
treffen im greenberg cafe oder in der zentrale	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) ( call SW.concat en.location.greenberg_cafe en.location.central_office ) ) )
welche meetings sind am selben tag wie das wöchentliche standup-meeting?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) )
zeig mir wichtige treffen am 2. januar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string is_important ) ) )
wo findet das wichtige treffen statt?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ) )
besprechungen, die zum oder vor dem wöchentlichen standup-meeting beginnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
drei oder eine stunde	( call SW.listValue ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) )
welche besprechung hat ein späteres datum als die wöchentliche besprechung?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )
wöchentliche standup-dauer	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) )
welches treffen ist nicht länger als ein bis drei stunden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) ) )
zeig mir alle treffen, die am oder nach dem 2. januar stattfinden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
ort von mindestens zwei sitzungen ist der ort	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
zeig mir alle 10-uhr-meetings, an denen alice teilnimmt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string attendee ) ( string = ) en.person.alice ) )
zeig mir alle besprechungsteilnehmer im greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ) )
welche meetings haben die gleiche startzeit wie das wöchentliche standup-meeting?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) )
an welchem meeting nehmen die meisten personen teil?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( string attendee ) ) )
sitzungen, die vor 10 uhr enden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string < ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
zeigen sie mir alle meetings, die vor dem wöchentlichen standup-meeting beginnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
welche besprechung hat den späteren termin	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string date ) ) ) )
besprechungen, die am oder vor dem wöchentlichen stand-up-meeting abgehalten wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )
zeige mir treffen vor dem wöchentlichen aufstehen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )
meeting mit der längsten endzeit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string end_time ) ) ) )
zeigen sie mir alle besprechungen, die zur selben zeit oder früher als die wöchentliche besprechung enden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
zeig mir alle treffen, an denen alice um 10 uhr teilgenommen hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string attendee ) ( string = ) en.person.alice ) )
wie viele besprechungen sind geplant?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
zeigen sie mir alle besprechungen, die länger als drei stunden dauern	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) ) )
welche besprechung hat eine endzeit, die größer ist als der wöchentliche stand-up	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
welches treffen endet um 10 uhr, an dem alice teilnimmt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string attendee ) ( string = ) en.person.alice ) )
zeigen sie mir alle besprechungen, die spätestens um 10 uhr beginnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
was für ein wichtiges treffen hat eine länge von drei stunden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string is_important ) ) )
welche besprechung beginnt früher als 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
welcher besprechungstermin liegt vor dem 2. oder 3. januar?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) ) )
zeigen sie mir alle besprechungen, die nicht früher als das wöchentliche stand-up-meeting beginnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )
zeigen sie mir alle meetings, die nach dem start des wöchentlichen stand-up-meetings enden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
wie lautet die nummer des treffens?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
besprechungen mit der letzten endzeit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string end_time ) ) ) )
orte der sitzungen, an denen alice teilnahm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ) )
dreistündiges treffen in greenberg	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string length ) ( string = ) ( number 3 en.hour ) ) )
wichtiges treffen mit alice als teilnehmerin	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string attendee ) ( string = ) en.person.alice ) )
treffen von geringster dauer	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string end_time ) ) ) )
zeig mir treffen am 2. januar mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
person, die an den wenigsten sitzungen teilnimmt	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string attendee ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
2. oder 3. januar	( call SW.listValue ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) )
zeig mir die länge des wöchentlichen standups	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) )
zeig mir alle treffen, die am oder vor dem 2. januar stattfinden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
zeigen sie mir alle als wichtig gekennzeichneten besprechungen im greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )
das treffen beginnt um 10 uhr im greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
besprechung, die um 10 uhr oder früher beginnt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
besprechungen, die drei stunden oder eine stunde dauern	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) )
ort, an dem mehr als zwei sitzungen abgehalten werden	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
treffen mit der größten anzahl von standorten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( string location ) ) )
welches treffen findet spätestens am 2. januar statt?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
wo finden die treffen statt, die um 10 uhr enden?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ) )
welches treffen hat eine startzeit um 10 uhr im greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )
zeigen sie mir besprechungen, die sich den standort mit dem wöchentlichen standup-meeting teilen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) en.meeting.weekly_standup ) ) )
was ist die durchschnittliche dauer einer besprechung?	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ) ) )
wann endet das wöchentliche stand-up-meeting?	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) )
welches treffen ist vor dem wöchentlichen aufstehen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )
zeigen sie mir alle besprechungen im greenber cafe, die drei stunden dauern	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )
welche besprechung ist am oder vor dem 2. oder 3. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) ) )
welches meeting hat die wenigsten geplanten orte?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( string location ) ) )
wöchentliche startzeit	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) )
besprechungen, die höchstens drei stunden dauern	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.hour ) ) ) )
sitzungen, die nicht drei stunden lang sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string ! = ) ( number 3 en.hour ) ) )
welches meeting hat die länge der meisten wöchentlichen startup-meetings	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) ) ) )
zeigen sie mir besprechungen, die beginnen, bevor die wöchentliche besprechung endet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
wo befindet sich das wöchentliche stand-up-meeting?	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string location ) ) )
planen sie ein meeting für 10 oder 15 uhr	( call SW.listValue ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) )
zeigen sie mir alle besprechungen, die entweder wöchentlich oder jährlich stattfinden	( call SW.listValue ( call SW.concat en.meeting.weekly_standup en.meeting.annual_review ) )
welches treffen ist nicht am 2. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string ! = ) ( date 2015 1 2 ) ) )
besprechungen, die nach 10 uhr beginnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string > ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
besprechungen, an denen zwei oder mehr personen teilnehmen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string >= ) ( number 2 ) ) )
ist dieses treffen am 2. januar oder 3. januar	( call SW.listValue ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) )
besprechungen, die um 10 oder 15 uhr beginnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) )
personen, die an dreistündigen besprechungen teilnehmen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ) )
welche person nimmt an einem wichtigen meeting teil?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ) )
zeig mir die treffen, die in dem monat aktuell sind	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string date ) ) ) )
besuche mich für ein drei stunden langes treffen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )
welche person besucht wöchentliche stand-up	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) en.meeting.weekly_standup ) ( call SW.reverse ( string attendee ) ) ( string = ) en.meeting.weekly_standup ) )
besprechungen mit dem frühesten startzeitpunkt	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string start_time ) ) ) )
wo findet die wöchentliche inbetriebnahme statt?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) en.meeting.weekly_standup ) ( call SW.reverse ( string location ) ) ( string = ) en.meeting.weekly_standup ) )
wie lange dauert dieses treffen?	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ) ) )
zeigen sie mir alle besprechungen, die nicht später als 10 oder 15 uhr beginnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )
was für ein wichtiges treffen ist, an dem alice teilnimmt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string is_important ) ) )
zeig mir alle treffen, die nicht im greenberg cafe stattfinden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string ! = ) en.location.greenberg_cafe ) )
wer nimmt an den meisten meetings teil?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string attendee ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
welches treffen war kürzer oder länger als drei stunden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string ! = ) ( number 3 en.hour ) ) )
zeigen sie mir alle dreistündigen besprechungen, die um 10 uhr enden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )
zeigen sie mir alle besprechungen, die um 10 uhr beginnen und alle besprechungen, die um 10 uhr enden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )
welche wichtigen treffen sind für den 2. januar geplant?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
zeig mir treffen am 2. januar im greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )
besprechungen, die nicht um 10 uhr beginnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string ! = ) ( time 10 0 ) ) )
wer besucht wöchentlich standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) en.meeting.weekly_standup ) )
dauer des treffens	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ) ) )
zeig mir alle termine ab 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
zeig mir wichtige treffen mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string attendee ) ( string = ) en.person.alice ) )
zeigen sie mir die meetings, die später als das wöchentliche stand-up-meeting beginnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
zeige mir alle besprechungen, die für 3 stunden angesetzt sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.hour ) ) ) )
welche besprechungen haben das gleiche datum wie die wöchentliche stand-up-besprechung?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) )
wie lang ist das treffen?	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ) ) )
welche person nimmt an dem treffen im greenberg cafe teil?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ) )
zeigen sie mir alle besprechungen, die an tagen vor dem wöchentlichen standup stattfinden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )
wer nimmt an der wöchentlichen stand-up teil?	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string attendee ) ) )
zeig mir alle treffen am 2. januar, die auch 3 stunden lang sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
zeige mir alle treffen, die für drei stunden angesetzt sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )
personen, die an mehr als zwei sitzungen teilnehmen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
welche besprechung hat eine startzeit vor dem wöchentlichen standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
was für ein treffen, das um 10 uhr endet, ist alice, die anwesend ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string end_time ) ( string = ) ( time 10 0 ) ) )
die startzeit des meetings liegt nach der startzeit des wöchentlichen stand-ups	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
treffen am 2. januar mit alice als teilnehmer	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
zeige mir alle besprechungen, die um oder vor 10 uhr beginnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
zeigen sie mir alle als wichtig gekennzeichneten besprechungen, die um 10 uhr enden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string is_important ) ) )
sitzungen am 2. januar, die drei stunden dauern	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
wie lautet die nummer des standorts?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ) )
welche besprechung hat die gleiche länge wie der wöchentliche start	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) ) ) )
zeig mir treffen nicht im greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string ! = ) en.location.greenberg_cafe ) )
an wichtigen treffen nimmt alice teil	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string is_important ) ) )
dreistündiges treffen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )
zeige mir treffen ab 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
wichtige treffen im greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )
zeig mir alle treffen am 2. januar ab 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
wer nimmt an der sitzung am 2. januar teil?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ) )
wann beginnt das wöchentliche stand-up-meeting?	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) )
sitzungen am oder nach dem 2. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
zeigen sie mir alle besprechungen, die am selben ort stattfinden wie die wöchentliche sitzung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) en.meeting.weekly_standup ) ) )
zeigen sie mir alle besprechungen, die vor 10 oder 15 uhr beginnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )
welches treffen endet um 10 oder 15 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )
zeigen sie mir die leute, die an den meisten meetings teilnehmen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string attendee ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
sitzung, die am tag der ersten wöchentlichen stand-up ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )
wie lautet die nummer der person?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
wer besucht das greenberg cafe für das treffen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ) )
die sitzung beginnt um 700 uhr und endet um 000 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )
welche besprechung hat eine startzeit bis spätestens 10.00 uhr oder 15.00 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )
wer nimmt an der 10-uhr-sitzung teil?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ) )
zeig mir treffen vor dem 2. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
zeig mir alle treffen, die am 2. oder 3. januar stattfinden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) )
zeigen sie mir alle meetings, die einen teilnehmer mit dem wöchentlichen standup-meeting teilen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) en.meeting.weekly_standup ) ) )
zeige mir alle meetings, die am 2. januar um 10 uhr beginnen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
zeigen sie mir alle besprechungen, die früher enden, als der wöchentliche standup beginnt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
an welchem treffen ist alice um 10 uhr teilzunehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
besprechungen mit der spätesten startzeit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string start_time ) ) ) )
zeig mir alle treffen, an denen alice teilgenommen hat und die im greenberg cafe stattfinden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string attendee ) ( string = ) en.person.alice ) )
zeigen sie mir alle besprechungen, die um 10 uhr enden und um 10 uhr beginnen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
welches treffen hat ein datum vom 2. januar und hat alice anwesend	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string attendee ) ( string = ) en.person.alice ) )
zeig mir treffen im greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string location ) ( string = ) en.location.greenberg_cafe ) )
welches meeting hat die meisten standorte?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( string location ) ) )
treffen am ort der wöchentlichen stand-up	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string location ) ) ) )
besprechung, die um 10 uhr beginnt und endet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )
zeig mir die treffen mit den letzten endzeiten	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string end_time ) ) ) )
welche besprechung endet früher als 10 oder 15 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )
zeigen sie mir besprechungen, die vor dem wöchentlichen standup enden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
welches treffen hat die längste zeit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string end_time ) ) ) )
besprechungen, an denen personen teilnehmen, die auch an der wöchentlichen besprechung teilnehmen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) en.meeting.weekly_standup ) ) )
an welchem wichtigen treffen hat alice teilgenommen?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string attendee ) ( string = ) en.person.alice ) )
welche meetings finden im greenberg cafe statt?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )
zeigen sie mir alle besprechungen, die am selben ort stattgefunden haben wie die geringste anzahl von besprechungen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string location ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
die sitzung endet mindestens zum beginn der wöchentlichen zusammenfassung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
zeigen sie mir alle besprechungen am selben tag wie die wöchentliche besprechung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) )
welches treffen endete nach 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
welche sitzungen sind von bedeutung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) )
zeigen sie mir alle besprechungen, die später als 10 oder 15 uhr stattfinden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )
zeigen sie mir alle personen, die an dem wöchentlichen stand-up-meeting oder an der jährlichen überprüfung teilnehmen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.concat en.meeting.weekly_standup en.meeting.annual_review ) ) )
zeig mir treffen im greenberg cafe am 2. januar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
zeigen sie mir die standorte mit den meisten besprechungen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string location ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
die besprechung beginnt nach 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string > ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
welche besprechung ist für den spätesten termin geplant?	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string date ) ) ) )
sitzungen, die drei stunden dauern	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )
zeigen sie mir alle drei stunden dauernden besprechungen im greenberg-café	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string length ) ( string = ) ( number 3 en.hour ) ) )
welcher ort ist nicht dasselbe wie wöchentliches aufstehen?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string ! = ) en.meeting.weekly_standup ) )
die sitzung beginnt am 2. januar um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
treffen am 2. januar, an denen alice teilnimmt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string attendee ) ( string = ) en.person.alice ) )
welches treffen hat einen ort im greenberg cafe und beginnt um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
welche besprechungen sollen um 10 uhr enden?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )
zeigen sie mir besprechungen, die um 10 uhr beginnen und enden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
wo findet das treffen am 2. januar statt?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ) )
welches treffen beginnt um 10 uhr am 2. januar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
wichtiges treffen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) )
besprechungen, die nach 10 uhr oder nach 15 uhr beginnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )
meetings, die später als das wöchentliche standup-meeting enden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
teilnehmer an besprechungen, die um 10 uhr beginnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ) )
sitzung, die um 1000 uhr beginnt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
was ist die durchschnittliche länge aller sitzungen	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ) ) )
welche besprechung hat zwei oder weniger teilnehmer?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string <= ) ( number 2 ) ) )
zeig mir alle treffen, die kürzer als drei stunden sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.hour ) ) ) )
welche besprechung endet zu beginn oder nach beginn des wöchentlichen stand-ups?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
welche person hat wöchentlich am standup teilgenommen?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) en.meeting.weekly_standup ) ( call SW.reverse ( string attendee ) ) ( string = ) en.meeting.weekly_standup ) )
welche besprechung hat eine endzeit von 10 uhr am 2. januar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
sitzungen, die nicht am 2. januar sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string ! = ) ( date 2015 1 2 ) ) )
besprechungen, die drei stunden dauern und um 10 uhr morgens enden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )
welche besprechung endet spätestens um 10 oder 15 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )
dreistündige besprechungen, die um 10 uhr beginnen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )
treffen im greenberg cafe, das um 10 uhr endet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )
welches treffen ist mindestens drei stunden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.hour ) ) ) )
wo findet das wichtige treffen statt?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ) )
die startzeit des meetings ist am ende des wöchentlichen stand-ups	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
welche meetings werden so viel zeit in anspruch nehmen wie wöchentliche stand-ups?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) ) ) )
besprechung, die vor der startzeit des wöchentlichen stand-ups beginnt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
zeig mir alle treffen, an denen alice teilnimmt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string attendee ) ( string = ) en.person.alice ) )
das treffen dauert mindestens 3 stunden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.hour ) ) ) )
die besprechung beginnt spätestens zur startzeit des wöchentlichen stand-ups	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
sitzungen, an denen die geringste anzahl von personen teilnahm	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( string attendee ) ) )
der ort ist derselbe wie der ort eines dreistündigen meetings	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ) )
sitzungen finden vor dem 2. januar statt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
zeigen sie mir alle teilnehmer von besprechungen, die um 10 uhr enden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ) )
zeigen sie mir besprechungen, die beginnen, bevor das wöchentliche aufstehen endet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
welches treffen ist am 2. januar um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
person, die an einem wichtigen treffen teilnimmt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ) )
zeig mir alle meetings, die zur gleichen zeit beginnen, wenn die wöchentliche stand-up-phase endet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) )
welches treffen ist nicht drei stunden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string ! = ) ( number 3 en.hour ) ) )
person, die an den meisten sitzungen teilnimmt	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string attendee ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
besprechung, die zum endzeitpunkt des wöchentlichen standups endet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) )
wo finden wöchentliche stand-ups und jährliche überprüfungen statt?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.concat en.meeting.weekly_standup en.meeting.annual_review ) ) )
zeig mir dreistündige treffen am 2. januar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
besprechungen, die um oder vor 10 uhr beginnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
was für ein treffen ist im greenberg cafe und alice ist anwesend	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string attendee ) ( string = ) en.person.alice ) )
welches treffen endet am ehesten am tag	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string end_time ) ) ) )
ort unterscheidet sich vom ort der wöchentlichen stand-up	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string ! = ) en.meeting.weekly_standup ) )
zeig mir alle besprechungen, die vor 10 uhr enden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string < ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
sitzungen an zwei oder weniger orten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string <= ) ( number 2 ) ) )
welche besprechungen sind wichtig und beginnen um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string is_important ) ) )
besprechungen, die drei stunden oder weniger oder eine stunde oder weniger dauern	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) ) )
orte, an denen treffen am 2. januar stattfinden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ) )
zeige mir alle besprechungen, die vor 10 uhr beginnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
besprechungen, die zur gleichen zeit oder später als zu beginn der wöchentlichen stand-up-besprechung enden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
welche treffen in greenberg cafe dauern drei stunden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string length ) ( string = ) ( number 3 en.hour ) ) )
standort ist greenberg cafe oder zentrale	( call SW.listValue ( call SW.concat en.location.greenberg_cafe en.location.central_office ) )
personen, die an mindestens zwei sitzungen teilnehmen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
platziert das haus mindestens eine besprechung	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string location ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
das treffen beginnt um 1000 uhr im greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )
treffen an einem einzigen ort	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string < ) ( number 2 ) ) )
besprechungen, die um oder vor 10 uhr enden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
zeig mir alle treffen im greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string location ) ( string = ) en.location.greenberg_cafe ) )
besprechungen, die zu dem zeitpunkt enden, an dem die wöchentliche stand-up-besprechung beginnt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) )
welche besprechungen dauern am kürzesten?	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string length ) ) ) )
sie hat mir alle treffen mit einer dauer zwischen 1 und 3 stunden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) ) )
für welche besprechung gilt die endzeit des fans nach 10 oder 15 uhr?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )
zeigen sie mir alle drei stunden langen besprechungen, die um 10 uhr enden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )
orte von besprechungen, die drei stunden lang sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ) )
welche person nimmt an den meisten besprechungen teil?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string attendee ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
sitzungen, die vor 10 uhr oder vor 15 uhr enden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )
zeig mir alle wichtigen treffen, an denen alice teilnimmt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string is_important ) ) )
welcher ort ist wöchentliche stand-up und jährliche überprüfung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.concat en.meeting.weekly_standup en.meeting.annual_review ) ) )
person, die an der gleichen sitzung teilnimmt wie alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ) )
wer nimmt an der besprechung teil, die um 10 uhr endet?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ) )
zeigen sie mir alle besprechungen, die um 10 uhr enden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )
besprechung, die nicht um 10 uhr endet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string ! = ) ( time 10 0 ) ) )
zeigen sie mir alle meetings, die zur selben zeit oder später als das wöchentliche standup-meeting enden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
zeigen sie mir alle besprechungen, die später enden, als der wöchentliche standup beginnt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
besprechung, die spätestens zur endzeit des wöchentlichen stand-ups beginnt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
welche besprechung endet 10 uhr oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )
was ist das jüngste treffen	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string date ) ) ) )
gehäuse, das größer als 123 sesamstraße ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )
zeigen sie mir, dass es sich um die gleiche wohnung wie in der sesamstraße 123 handelt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) )
welche wohneinheit hat eine mindestmiete von 1500 dollar pro monat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )
wohnraum vor oder am selben tag wie die sesamstraße 123	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )
nachbarschaft mit der geringsten anzahl von wohneinheiten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
finden sie wohneinheiten mit mietkosten von weniger als 2000 dollar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) ) )
welche wohneinheit hat mehr als zwei arten von häusern	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
wie viel ist 123 sesamstraße pro monat	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) )
finde die größte wohneinheit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string size ) ) ) )
welche wohnung ist bei 1500 oder 2000 dollar festgesetzt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) ) )
gehäuse mit einem schlafzimmer und eigenem bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string has_private_room ) ) )
wohneinheit mit eigenem bad und 1500 dollar miete	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )
welche wohneinheit erlaubt katzen und hatte ein eigenes bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string has_private_bath ) ) )
finden sie eine wohneinheit am 2. januar und das erlaubt katzen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string allows_cats ) ) )
einheiten mit einer größeren miete als 123 sesamstraße	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )
welche wohneinheit ist bei 1500 dollar festgesetzt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )
finden sie wohneinheiten mit eigenem zimmer in der nähe von midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string has_private_room ) ) )
gehäuse mit eigenem bad, das am 2. januar veröffentlicht wurde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string has_private_bath ) ) )
welche wohneinheit in der größe 123 sesamstraße ähnelt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) )
apartments mit einem privaten raum	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ) )
gehäuse, das 800 quadratmeter mit einem privaten raum ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )
welche wohneinheiten in der region midtown east erlauben auch hunde?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
wohnungstyp wohneinheit mit eigenem bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )
was für ein gehäuse ist 800 quadratmeter	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ) )
welche wohneinheit hat eine geringere monatliche miete als 123 sesamstraße	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )
finden sie eine wohneinheit am 2. januar mit dem gleichen mietpreis wie 123 sesam st	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string rent ) ) ( string = ) en.housing_unit.123_sesame_street ) )
wohnung mit einem privaten raum, der für 1500 ein monat mietet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string has_private_room ) ) )
gehäuse die gleiche größe wie 123 sesamstraße	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )
800 quadratmeter wohneinheit mit eigenem bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string has_private_bath ) ) )
wohneinheiten, die ein privates zimmer haben, das am 2. januar gepostet wurde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )
welche wohneinheit hat häuser der wohnungstyp	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string housing_type ) ( string = ) en.housing.apartment ) )
gehäuse, das mindestens zwei arten hat	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string >= ) ( number 2 ) ) )
finden sie wohneinheiten, die kleiner oder gleich der größe der sesamstraße 123 sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )
welche wohneinheit hat die höchste miete pro monat	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string rent ) ) ) )
gehäuse, das am 2. januar oder 3. februar veröffentlicht wurde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) ) )
was ist die 123 sesamstraße gehäusetyp	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string housing_type ) ) )
welche wohneinheit bietet ein eigenes bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string has_private_bath ) ) )
gehäuse, das 800 quadratmeter mit einem eigenen bad ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string has_private_bath ) ) )
nachbarschaft mit den meisten wohneinheiten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
gehäusetyp von mehr als zwei verfügbaren gehäusen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
wohneinheit, die beide ein eigenes zimmer haben und hunde erlauben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string allows_dogs ) ) )
bereich um 123sesame straße	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string neighborhood ) ) )
welche wohneinheit hat eine monatliche miete von weniger als 1500 dollar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string < ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )
zeigen sie mir, wo hunde erlaubt sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string allows_dogs ) ) )
gehäuse von zwei arten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
wohnungen mit miete zwischen 1500 und 2000	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) ) )
apartments mit eigenem bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string has_private_bath ) ) )
wohneinheiten mit 2 nachbarschaften	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( number 2 ) ) )
welche wohnung kostet 1500 dollar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )
wohnungen mit der gleichen miete wie 123 sesamstraße	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )
welche wohneinheiten erlauben hunde und katzen?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string allows_dogs ) ) )
gehäuse, das mindestens so teuer ist wie 123 sesamstraße	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )
privatzimmer in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string has_private_room ) ) )
wohneinheiten übergröße 123 sesamstraße	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )
wohnungen in der midtown west oder chelsea nachbarschaften	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.concat en.neighborhood.midtown_west en.neighborhood.chelsea ) ) )
gehäusetypen wie 123 sesamstraße oder 900 mission avenue	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.concat en.housing_unit.123_sesame_street en.housing_unit.900_mission_ave ) ) )
gehäuse, das zwischen 800 und 1000 quadratmetern reicht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) ) )
welche wohneinheiten haben die gleiche größe wie die in der sesamstraße 123?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )
wohneinheiten finden, die keine wohnung sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string ! = ) en.housing.apartment ) )
welcher bereich hat mindestens zwei wohneinheiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
gehäuse in der nähe von 123 sesamstraße	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string neighborhood ) ) )
welche wohneinheit enthält ein privatzimmer und erlaubt katzen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string has_private_room ) ) )
finde wohneinheiten, die vor dem 2. januar gepostet wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
finden sie wohneinheiten, die an anderen daten als dem 2. januar veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string ! = ) ( date 2015 1 2 ) ) )
finden sie wohneinheiten, die tierfreundlich sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string allows_dogs ) ) )
gehäuse in den meisten stadtteilen gefunden	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( string neighborhood ) ) )
mietwohnungen für 1500 pro monat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )
welche nachbarschaften haben gehäuse mit eigenem bad	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ) )
gehäuse, das am 3. februar veröffentlicht wurde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) ) )
wohneinheit, die 800 oder 1000 quadratfuß ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) )
gehäuse mit weniger als zwei einheiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
geben sie den gehäusetyp der wohneinheit an, die über ein eigenes bad verfügt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ) )
gehäuse am 2. januar veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
einheiten größer als 800 quadratfuß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) ) )
was ist die art von gehäuse, das einen privaten raum hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ) )
wohneinheiten mit mehr als zwei stadtteilen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string > ) ( number 2 ) ) )
welche wohneinheit hat eine fläche von 800 quadratmetern	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )
zeigen sie mir unterkünfte, die am oder vor dem tag 123 sesamstraße gepostet haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )
wohnungen mit einer miete unter 1500 pro monat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string ! = ) ( number 1500 en.dollar ) ) )
welche wohneinheit in midtown west hat ein eigenes bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
wie lautet die gehäusetypennummer?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ) )
welche wohneinheit hat die vielfalt der häuser	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( string housing_type ) ) )
gehäuse, das nicht die gleiche art wie 123 sesamstraße ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string ! = ) en.housing_unit.123_sesame_street ) )
nennen sie die nachbarschaft der wohneinheit mit eigenem bad	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ) )
in welchem gebiet gibt es die meisten wohneinheiten?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( string neighborhood ) ) )
gehäuse art von 123 sesamstraße, die am 2. januar geschrieben wurde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) )
wohnung mit eigenem bad zu vermieten um 1500	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string has_private_bath ) ) )
wohnen in midtown west, das am 2. januar veröffentlicht wurde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
gehäuse, das mehr als 1500 monate oder mehr als 2000 monate ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) ) )
wohneinheiten nach dem 2. januar gebucht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
nachbarschaft von 123 sesamstraße oder 900 mission ave.	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.concat en.housing_unit.123_sesame_street en.housing_unit.900_mission_ave ) ) )
welche wohneinheit mit eigenem bad wurde am 2. januar veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string has_private_bath ) ) )
eine wohneinheit in der sesamstraße 123, die am 2. januar gepostet wurde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) )
gehäuse, das am selben tag bei 123 sesamstraße geschrieben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )
gehäuse, das 1500 monate mit einem privaten raum ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )
wohnungen, die hunde erlauben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string allows_dogs ) ) )
wohnung mit eigenem bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )
in welcher nachbarschaft befand sich die wohneinheit am 2. januar?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
auf der suche nach wohnraum, der entweder eine wohnung oder eine eigentumswohnung ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) ( call SW.concat en.housing.apartment en.housing.condo ) ) )
auf der suche nach häusern in ruhigen vierteln	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( string housing_type ) ) )
was gehäuse kostet 1500 dollar und ist 800 quadratmeter	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )
wie groß ist die wohneinheit?	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ) ) )
800 quadratmeter einheit mit einer miete von 1500 monatlich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )
wohneinheiten in midtown west, die hunde erlauben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string allows_dogs ) ) )
nachbarschaften mit wohnraum, der 1500 monate ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ) )
gehäuse, das mehr als zwei nachbarschaft hat	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string > ) ( number 2 ) ) )
finden sie eine wohnung, die größer als die sesamstraße 123 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )
welche nachbarschaft hat die geringste menge an wohnraum	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
welche wohneinheit in der mitte west hat ein eigenes zimmer	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
welche wohneinheit hat die gleiche miete wie die einheit, die am 2. januar gebucht wurde?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
finden sie apartments mit eigenem bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string has_private_bath ) ) )
wohnungen in midtown west mit miete bei 1500	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
welcher haustyp erlaubt haustiere?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ) )
günstigstes gehäuse	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string rent ) ) ) )
wohneinheiten mit 1500 dollar bis 2000 als miete finden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) ) )
hier finden sie alle freistehenden wohneinheiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
finden sie wohneinheiten, die vor der sesamstraße 123 gepostet wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )
gehäuse, das 800 quadratmeter oder größer ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )
wohneinheit in midtown west, die monatliche miete von 1500 hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
welche wohneinheit ist für einen preis von weniger als 1500 dollar verfügbar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string ! = ) ( number 1500 en.dollar ) ) )
wohnungen mit miete zwischen 1500 bis 2000 dollar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) ) )
wohneinheit mit dem größten buchungsdatum	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )
welche wohneinheit hat ein eigenes zimmer	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string has_private_room ) ) )
wohnen in der nähe von 123 sesamstraße oder 900 mission ave.	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.concat en.housing_unit.123_sesame_street en.housing_unit.900_mission_ave ) ) )
wohnen in midtown west, die am 2. januar veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
welche wohneinheit gepostet wurde, wurde am 2. januar gepostet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string posting_date ) ) ( string = ) en.housing_unit.123_sesame_street ) )
welche arten von wohnungen hat ein eigenes bad	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ) )
welche nachbarschaft ist 123 sesamstraße in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.housing_unit.123_sesame_street ) )
finden sie eine unterkunft, die katzen erlaubt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ) )
welche wohneinheit hat die meisten arten von häusern?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string housing_type ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
gehäuse, das katzen erlaubt und ein privates zimmer enthält	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string allows_cats ) ) )
auf der suche nach wohnungen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ) )
nachbarschaften mit zwei oder mehr wohneinheiten benennen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
welche wohneinheit mit einer fläche von 800 quadratmetern hat ein eigenes zimmer	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )
welche wohneinheit ähnelt der der sesamstraße 123	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string housing_type ) ) ) )
finden sie wohneinheiten mit einer größe von mehr als 800 quadratfuß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string > ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )
welche unterkunft an einem anderen datum als dem 2. januar gepostet wurde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string ! = ) ( date 2015 1 2 ) ) )
welche nachbarschaften haben einheiten mit 800 quadratmetern	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ) )
welche wohneinheit hat zwei oder mehr stadtteile	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string >= ) ( number 2 ) ) )
welche art von unterkunft ist die einzige ihrer art?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
welche art von unterkunft bietet 800 quadratmeter und erlaubt katzen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string allows_cats ) ) )
wohnung in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
gehäuse 800 qm groß am 2. januar veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )
wohnungsarten in midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )
wo sind 800 quadratmeter wohneinheiten, die hunde erlauben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string allows_dogs ) ) )
welche wohneinheit wurde am 2. januar veröffentlicht?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )
wohnung zu vermieten um 1500	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )
welche art von gehäuse ist für 1500 monate verfügbar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ) )
wohneinheit, die katzen mit midtown west als nachbarschaft erlaubt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
gehäuse nach 123 sesamstraße geschrieben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )
gehäuse mit einem privaten raum und einem bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string has_private_bath ) ) )
was ist der zahlreichste wohnungstyp?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( string housing_type ) ) )
hier finden sie alle 800 quadratmeter großen einheiten mit eigenem bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )
gehäuse in zwei oder weniger stadtteilen gefunden	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string <= ) ( number 2 ) ) )
gehäuse wohnung mit eigenem bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )
was für eine art von unterkunft ist 123 sesamstraße	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) )
wohneinheiten vom typ wohnung finden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ) )
wohneinheit, die billiger als 1500 dollar ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string < ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )
gehäuse, das mindestens 1500 monate oder mindestens 2000 monate ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) ) )
ausgeschlossen sind apartments, die sich in der nachbarschaft der sesamstraße 123 befinden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string ! = ) en.housing_unit.123_sesame_street ) )
wohneinheit mit einem privaten raum und erlaubt katzen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string allows_cats ) ) )
miete weniger als 15002000 dollar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) ) )
wohnungen, die hunde erlauben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) )
katzenfreundliches gehäuse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) )
wohnungen mit miete, die teurer als 123 sesamstraße ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )
an welchem tag wurde 123 sesamstraße verfügbar?	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) )
was sind die einheiten, die nicht zu der gegend um midtown west gehören?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string ! = ) en.neighborhood.midtown_west ) )
welche wohneinheit am 2. januar gebucht ist in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
gehäusetyp mit weniger als 2 einheiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
gehäuse, dass der gleiche typ wie 123 sesamstraße ist, die am 2. januar veröffentlicht wurde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) )
wohneinheit, die katzen erlaubt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string allows_cats ) ) )
haustierfreundliche unterkunft in der nähe von midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string allows_cats ) ) )
gehäuse wohnungen in einer midtown-west-nachbarschaft	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string housing_type ) ( string = ) en.housing.apartment ) )
gehäuse vor dem 2. januar oder 3. februar veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) ) )
finden sie katzenfreundliche wohneinheiten mit eigenem bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string has_private_bath ) ) )
welche nachbarschaft hat gehäuse mit einem privaten raum	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ) )
ruhige wohnungen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string < ) ( number 2 ) ) )
eine wohneinheit in midtown west, die am 2. januar gepostet wurde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )
wohneinheit, die hunde und katzen erlaubt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string allows_cats ) ) )
gehäuse, das die gleiche miete wie oder billiger als 123 sesamstraße ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )
welche wohneinheit am 2. januar gebucht ist die gleiche art wie 123 sesamstraße	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) )
wohnung oder eigentumswohnung einheiten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) ( call SW.concat en.housing.apartment en.housing.condo ) ) )
wohneinheiten mit eigenem bad in der region midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string has_private_bath ) ) )
gehäuse mit einem privaten raum, der am 2. januar gebucht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )
welche nachbarschaft ist die 800 quadratmeter große wohnung in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ) )
800 quadratmeter große wohnungen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )
gehäuse, das nicht 800 quadratfuß ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string ! = ) ( number 800 en.square_feet ) ) )
wohnung, die am 2. januar gebucht wurde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )
wohneinheiten in der nähe von zwei stadtteilen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( number 2 ) ) )
eine wohneinheit, die am 2. januar gebucht wurde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
wie lautet die hausnummer der wohnung?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
welche wohneinheit wurde am 2. januar veröffentlicht?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
was ist die art der unterbringung der wohneinheit, die hunde erlaubt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ) )
einheit kleiner als 123 sesamstraße	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )
gehäuse, das nicht 1500 monate ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string ! = ) ( number 1500 en.dollar ) ) )
gehäuse typisch für 123 sesamstraße gehäuse am 2. januar veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string size ) ) ( string = ) en.housing_unit.123_sesame_street ) )
welche wohneinheit befindet sich in derselben nachbarschaft wie die am 2. januar eingestellte wohneinheit?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
welche wohneinheit erlaubt hunde und verfügt über ein eigenes bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string has_private_bath ) ) )
welches gehäuse bietet weniger als zwei arten von einheiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string < ) ( number 2 ) ) )
wohneinheiten mit weniger als zwei stadtteilen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string < ) ( number 2 ) ) )
nachbarschaft, die mindestens 2 wohnungen hat	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
zeigen sie mir eine wohnung mit 800 quadratmetern fläche, in der katzen akzeptiert werden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )
wie lautet die telefonnummer dieser apartmentanlage?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ) )
800 quadratmeter wohneinheit mit einem privaten raum	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string has_private_room ) ) )
finden sie wohneinheiten mit einer maximalen größe von 800 quadratfuß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )
gehäuse wie 123 sesamstraße, die am 2. januar veröffentlicht wurde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string size ) ) ( string = ) en.housing_unit.123_sesame_street ) )
miete zwischen 1500 und 2000 dollar	( call SW.listValue ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) )
finden sie eine wohnung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string housing_type ) ( string = ) en.housing.apartment ) )
gehäuse am oder vor dem 2. januar gebucht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
welche wohneinheit ist in der gleichen umgebung wie 123 sesame st und wurde am 2. januar gepostet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.housing_unit.123_sesame_street ) )
wohneinheit in west midtown am 2. januar gebucht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
eine wohneinheit, die am 2. januar oder 3. februar gepostet wurde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) )
gehäuse, das 800 quadratmeter und 1500 monate ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )
welche art von gehäuse ist 123 sesamstraße	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) )
welches gehäuse hat die günstigste miete	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string rent ) ) ) )
wohnungstyp in der sesamstraße 123	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string housing_type ) ) )
wohnung mit einem privaten raum	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string has_private_room ) ) )
800 quadratmeter große wohnung mit eigenem bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string has_private_bath ) ) )
apartment mit eigenem bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string has_private_bath ) ) )
wohnung mit einem master-bad	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) )
gehäuse, das hunde erlaubt und am 2. januar veröffentlicht wurde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )
welche stadtteile haben hundefreundliche unterkünfte?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ) )
wohneinheiten mit einem privaten raum finden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string has_private_room ) ) )
was für ein gehäuse ist ein typ mit zwei einheiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
finden sie eine ähnliche unterkunft wie das haus in der sesamstraße 123	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) ) )
gehäusetypen der meisten einheiten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string housing_type ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
welche wohneinheit hat die gleiche größe wie die am 2. januar veröffentlichte wohneinheit?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
welches gehäuse in midtown west hat ein eigenes bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
welcher bereich hat mehr als zwei wohneinheiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
gehäuse, das 2. januar oder später gebucht wurde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
in welcher nachbarschaft befindet sich die wohneinheit, die am 2. januar gepostet wurde?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
wohneinheit in der nähe von midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
katzenfreundliche apartments mit eigenem zimmer	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string has_private_room ) ) )
wohneinheit mit einer größe von entweder 800 oder 1000 quadratfuß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) )
liste alle gehäuse, die kleiner als 800 quadratmeter sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string < ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )
gehäuse, das nach dem 2. januar oder 3. februar veröffentlicht wurde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) ) )
welche art von gehäuse sind die beiden wohneinheiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
wie viel kostet die miete in der sesamstraße 123 im monat?	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) )
welches gehäuse ist nicht größer als 123 sesamstraße	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )
apartments mit eigenem bad	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ) )
auf der suche nach einer wohnung, die keine wohnung ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string ! = ) en.housing.apartment ) )
seltenste wohnform	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string housing_type ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
gehäuse in weniger als zwei stadtteilen gefunden	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string < ) ( number 2 ) ) )
apartment mit hauptschlafzimmer und eigenem bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string has_private_bath ) ) )
welche wohneinheit hat eine miete von 1500 dollar oder 2000 dollar pro monat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) ) )
was midtown west housing erlaubt katzen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
welche wohneinheit am 2. januar gebucht ist die gleiche größe wie 123 sesamstraße	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string size ) ) ( string = ) en.housing_unit.123_sesame_street ) )
nachbarschaften, die 800 quadratfuß gehäuse haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ) )
auf der suche nach einer ruhigen gegend	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
wohneinheiten von entweder 800 quadratfuß oder 1000 quadratfuß	( call SW.listValue ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) )
gehäuse mit 2 umliegenden stadtteilen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string <= ) ( number 2 ) ) )
suche nach apartments, die am 2. januar veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )
in welchen stadtteilen sind hunde erlaubt?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ) )
wohnungen gepostet vor 123 sesame street gepostet wurde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )
haustierfreundliche 800 quadratfuß wohneinheit	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string allows_dogs ) ) )
gehäuse, das 800 quadratmeter oder weniger ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )
wohneinheit in midtown west und erlaubt hunde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string allows_dogs ) ) )
welche wohneinheit mit einer fläche von 800 quadratmetern ist für eine miete von 1500 dollar pro monat verfügbar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )
katzenfreundliche wohnungen mit miete um 1500	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string allows_cats ) ) )
gehäuse am 2. januar veröffentlicht, die hunde erlaubt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )
auf der suche nach wohnungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string housing_type ) ( string = ) en.housing.apartment ) )
welche größe hat die wohneinheit am 2. januar?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
gehäuse wohnungen mit eigenem bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string has_private_bath ) ) )
welches gehäuse hat eine monatliche miete von 1500 dollar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )
finden sie wohneinheiten in der gleichen größe von 123 sesamstraße	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) )
gehäuse, das hunde erlaubt und am 2. januar veröffentlicht wurde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string allows_dogs ) ) )
wohneinheit zur miete am 2. januar gebucht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
suche nach wohneinheiten, die vor oder am selben datum wie die sesamstraße 123 gepostet wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )
was ist der durchschnitt? finden sie 800 quadratmeter große wohneinheiten, in denen katzen leben können	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ) ) )
gehäuse, das für mindestens 1500 pro monat mietet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )
apartments veröffentlicht am 2. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
suche mir eine wohneinheit, die 1500 für miete berechnet und ein eigenes bad hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string has_private_room ) ) )
die 1500 monatlichen mieten sind 800 quadratmeter	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )
in welcher wohneinheit sind katzen erlaubt?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string allows_cats ) ) )
eine nachbarschaft mit weniger als zwei wohneinheiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
gehäuse mit nicht mehr als zwei wohneinheiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
wie viele nachbarschaften	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ) )
wie groß ist das gerät in der sesamstraße 123?	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) )
wohnungen zur miete unter 1500	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )
hundefreundliches wohnen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string allows_dogs ) ) )
welche wohneinheit ist teurer als 123 sesamstraße	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )
wohneinheiten, die mindestens so groß sind wie die wohneinheit in der sesamstraße 123	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )
was ist die art von wohnraum in der sesamstraße 123	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) )
welche wohneinheit, die katzen erlaubt, wurde am 2. januar veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string allows_cats ) ) )
wohneinheit mit 2 gehäusetypen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string < ) ( number 2 ) ) )
lokalisieren wohneinheiten mit eigenem bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string has_private_bath ) ) )
kleinste verfügbare einheit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string size ) ) ) )
unterbringung von wohnungen, die katzen erlaubt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )
einheiten, die vor dem 2. januar veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
welche unterkunft mit privatem zimmer gebucht 2. jan	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string has_private_room ) ) )
eine nachbarschaft mit höchstens zwei wohneinheiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
welche art von unterkunft ist für eine miete von 1500 dollar pro monat zur verfügung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ) )
wohneinheit mit einem buchungsdatum, das unter dem der sesamstraße 123 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )
wie hoch ist die monatliche durchschnittsmiete einer wohneinheit?	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ) ) )
gehäuse, das billiger als 1500 monate ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string < ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )
apartmentkomplexe mit den meisten einheiten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( string housing_type ) ) )
gehäuse, das nach dem 2. januar oder nach dem 3. februar veröffentlicht wurde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) ) )
gehäuse mit mehr quadratmeter als 123 sesamstraße	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )
gehäuse, das weniger als 800 quadratfuß ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string < ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )
wohneinheiten mit einem gehäusetyp	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string < ) ( number 2 ) ) )
eine zwei wohneinheit	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) ( number 2 ) ) )
gehäuse, das 800 quadratmeter groß ist und eine private bah enthält	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )
welche unterkunft mit am 2. januar gebucht hat ein eigenes bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )
hier finden sie alle wohneinheiten, die am 2. januar veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
finde wohneinheiten weit weg von midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string ! = ) en.neighborhood.midtown_west ) )
800 fuß wohnung mit einem privaten raum	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )
gehäuse, das mindestens 800 quadratmeter oder mindestens 1000 quadratmeter groß ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) ) )
wohneinheit, die eine wohnung ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string housing_type ) ( string = ) en.housing.apartment ) )
finden sie wohneinheiten in der gleichen wohnform wie in der sesamstraße 123	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string housing_type ) ) ) )
wohneinheiten mit privatem zimmer finden und 1500 dollar als monatliche miete haben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )
finden sie wohneinheiten mit einer größe von weniger als 800 quadratfuß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string < ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )
wohnungen mit einer günstigeren miete als 123 sesamstraße	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )
welche wohneinheit ist größer in der fläche von 800 quadratmetern oder 1000 quadratmetern	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) ) )
wohnraum für weniger als 1500 dollar finden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string < ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )
800 quadratmeter große wohnung mit einem privaten raum	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string has_private_room ) ) )
wohnungen, die kleiner als 123 sesamstraße sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )
das ist die nachbarschaft, die von den meisten wohneinheiten geteilt wird	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
gehäuse mit der gleichen miete wie 123 sesamstraße	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) )
eine wohnung, die am 2. januar gepostet wurde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )
welche wohneinheit erlaubt katzen darin	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) )
nachbarschaften mit wohnungen, die ein eigenes bad haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ) )
wohneinheit mit dem gleichen wohnungstyp wie in der sesamstraße 123	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string housing_type ) ) ) )
welche wohneinheit hat die kleinste größe	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string size ) ) ) )
was für eine art von unterkunft ist in der sesamstraße 123	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string neighborhood ) ) )
wohneinheit am 2. januar gebucht und das ist die gleiche größe wie 123 sesam st	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string size ) ) ( string = ) en.housing_unit.123_sesame_street ) )
welche wohneinheit gehört zur apartmentkategorie mit der ausstattung eines privatzimmers?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )
wohnen in einer nachbarschaft größer als zwei häuser	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
gehäuse, das über 800 quadratfuß oder über 1000 quadratfuß ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) ) )
gehäuse, das keine wohnung ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string ! = ) en.housing.apartment ) )
was sind die seltenen gehäusetypen?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string housing_type ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
nennen sie gehäusetypen, die mehr als eine wohneinheit dieses typs haben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
wohneinheit mit einem privaten raum	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) )
suchen sie eine wohneinheit, die am 2. januar veröffentlicht wurde und über ein eigenes zimmer verfügt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string has_private_room ) ) )
suche wohnung oder eigentumswohnung	( call SW.listValue ( call SW.concat en.housing.apartment en.housing.condo ) )
welche 1500 monatsmieten sind hundefreundlich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )
wohnen nicht in midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string ! = ) en.neighborhood.midtown_west ) )
welche wohneinheit in der gegend erlaubt katzen?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ) )
gehäuse mit privatem zimmer, das am 2. januar veröffentlicht wurde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )
was ist der am häufigsten verwendete gehäusetyp?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string housing_type ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
welche wohneinheit ist flächenmäßig größer?	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string size ) ) ) )
welche wohneinheit, die hunde erlaubt, wurde am 2. januar veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string allows_dogs ) ) )
was ist der haustyp von 123 sesamstraße	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) )
hundefreundliche unterkunft, die 800 quadratmeter ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string allows_dogs ) ) )
finden sie 800 quadratmeter große wohneinheiten, die katzenfreundlich sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )
was ist die nachbarschaft der wohneinheit der wohnungen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ) )
welches gehäuse besteht aus maximal zwei einheiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
was ist das für eine wohnungsgröße	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ) ) )
finden sie 800 quadratmeter große wohneinheiten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )
welches gehäuse am 2. januar bei 123 sesamstraße gebucht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string posting_date ) ) ( string = ) en.housing_unit.123_sesame_street ) )
finden sie eine wohnung, die 800 quadratmeter groß ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )
was ist die miete von 123 sesamstraße	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) )
midtown west einheit mit 1500 miete monatlich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
katzenfreundliche apartments mit eigenem bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string allows_cats ) ) )
listen sie alle wohnungen auf, die mindestens 800 oder 1000 quadratfuß groß sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) ) )
zeige nur wohneinheiten von 800 quadratfuß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ) )
wo sind die meisten wohneinheiten gefunden	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
finden sie wohneinheiten in den stadtteilen von midtown west mit 1500 dollar monatlicher miete	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )
welche nachbarschaft hat die meisten apartmentkomplexe	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
katzenfreundliche unterkunft mit einem privaten raum	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string has_private_room ) ) )
nachbarschaften mit wohneinheiten mit privaten räumen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ) )
wohneinheit innerhalb von höchstens 2 stadtteilen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string <= ) ( number 2 ) ) )
welche wohneinheit gibt es in der gegend um midtown west?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
wann wurde 123 sesamstraße gebucht	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) )
welche wohneinheit hat zwei oder mehr gehäusetypen?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string > ) ( number 2 ) ) )
zeigen sie mir wohnen in midtown west oder chelsea	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.concat en.neighborhood.midtown_west en.neighborhood.chelsea ) ) )
was für eine art von unterkunft ist 123 sesamstraße oder 900 mission ave.	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.concat en.housing_unit.123_sesame_street en.housing_unit.900_mission_ave ) ) )
finden sie 800 quadratmeter große wohnungen in den vierteln von midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
welche wohneinheit hat wohnung art von haus mit einer fläche von 800 quadratmetern	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )
welche wohneinheit ist am oder vor dem 2. januar gebucht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
eigentumswohnung oder apartment gehäuse	( call SW.listValue ( call SW.concat en.housing.apartment en.housing.condo ) )
zeigen sie mir orte mit einem privaten raum, in denen katzen willkommen sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string has_private_room ) ) )
wohnen in der nachbarschaft von 123 sesamstraße	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string neighborhood ) ) ) )
wie viele wohneinheiten gibt es?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
welche wohneinheit ist vor dem buchungsdatum von 123 sesamstraße gebucht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )
wohneinheit gebucht 2. januar und die gleiche miete wie 123 sesamstraße	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string rent ) ) ( string = ) en.housing_unit.123_sesame_street ) )
gebäude mit zwei oder weniger arten von einheiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string <= ) ( number 2 ) ) )
einheit von durchschnittlicher größe	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ) ) )
welche nachbarschaft ist 123 sesamstraße in	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string neighborhood ) ) )
apartments, die hundefreundlich sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string allows_dogs ) ) )
welche wohneinheit hat die geringste vielfalt an häusern?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( string housing_type ) ) )
wohneinheiten, die katzen erlauben und 1500 miete monatlich berechnen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string allows_cats ) ) )
wohnung zu vermieten um 1500	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )
welche arten von wohnungen haben ein eigenes bad?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ) )
hundefreundliche 800 quadratmeter große wohnung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string allows_dogs ) ) )
wohnen in midtown west mit einem privaten raum	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
nennen sie andere wohnungstypen als 123 sesamstraße	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string ! = ) en.housing_unit.123_sesame_street ) )
wohneinheit höchstens 800 quadratmeter	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )
eine wohneinheit, die am 2. januar in irgendeiner nachbarschaft gepostet wurde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
welche midtown west gehäuse 800 quadratmeter haben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
welches gehäuse nicht früher als 2. januar oder 3. februar veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) ) )
wohneinheit kleiner als 800 quadratfuß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string < ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )
welches gehäuse am 2. januar gepostet wurde, erlaubt hunde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )
800 quadratmeter große wohnung in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
hundefreundliche wohnung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )
zeigen sie mir gehäuse, die ein eigenes bad haben und katzen erlauben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string allows_cats ) ) )
gehäuse, das kleiner als 800 quadratfuß oder kleiner als 1000 quadratfuß ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) ) )
gehäuse, das mehr als 800 quadratfuß ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string ! = ) ( number 800 en.square_feet ) ) )
apartments mit eigenem bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string has_private_bath ) ) )
welche wohneinheit ähnelt 123 sesamstraße oder 900 mission ave.	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.concat en.housing_unit.123_sesame_street en.housing_unit.900_mission_ave ) ) )
was ist der gehäusetyp der wohneinheit mit einem privaten raum	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ) )
welche wohneinheit mit einer fläche von 800 quadratmetern hat die möglichkeit, einen privaten raum	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string has_private_room ) ) )
stadtteile midtown west oder chelsea	( call SW.listValue ( call SW.concat en.neighborhood.midtown_west en.neighborhood.chelsea ) )
gehäuse am 2. januar oder 3. februar veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) )
wohneinheit mit einem buchungsdatum größer als das datum 123 sesamstraße	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )
800 quadratmeter große wohnung, die katzen erlaubt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string allows_cats ) ) )
welche wohneinheit mit privatem zimmer wurde am 2. januar gepostet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string has_private_room ) ) )
welche wohneinheit hat zwei gehäusetypen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) ( number 2 ) ) )
welche wohneinheit befindet sich im stadtteil midtown east?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )
finden wohneinheiten nach 123 sesamstraße	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )
zeigen sie mir wohnungen und eigentumswohnungen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) ( call SW.concat en.housing.apartment en.housing.condo ) ) )
eine wohneinheit mit eigenem bad, die am 2. januar veröffentlicht wurde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )
haustierfreundliche unterkunft mit 1500 dollar als miete	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )
welches gehäuse ist derselbe typ wie das am 2. januar veröffentlichte gehäuse?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
ich möchte einen haustyp wie die sesamstraße 123	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) )
was ist die miete von 123 sesamstraße pro monat	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) )
welches gehäuse am 2. januar gepostet wurde, erlaubt katzen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )
apartments in midtown west mit eigenem zimmer	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
was ist die nachbarschaft der wohneinheit mit einem privaten raum	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ) )
wohnraum mit mietkosten zwischen 1500 und 2000 dollar finden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) )
einheiten, die ein eigenes zimmer haben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string has_private_room ) ) )
gehäuse vor 123 sesamstraße geschrieben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )
unterkunft für katzen, die am 2. januar veröffentlicht wurde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string allows_cats ) ) )
gehäuse am 2. januar veröffentlicht, die ein privates zimmer enthält	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string has_private_room ) ) )
einheit größer als 800 quadratfuß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string > ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )
zeigen sie mir eine wohnung, die für 1500 dollar im monat oder weniger verfügbar ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )
wohneinheit mit dem kleinsten buchungsdatum	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )
wohneinheiten mit einem buchungsdatum zwischen dem 2. januar und dem 3. februar suchen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) ) )
welche wohneinheit hat am 2. januar gepostet?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )
gerät mit einem gehäusetyp	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string < ) ( number 2 ) ) )
suche nach wohneinheiten, die am selben tag wie die sesamstraße 123 oder später veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )
gehäuse, das am 2. januar von 123 sesamstraße art geschrieben wurde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string posting_date ) ) ( string = ) en.housing_unit.123_sesame_street ) )
was ist die monatliche miete bei 123 sesamstraße	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) )
was ist die quadratmeterzahl von 123 sesamstraße	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) )
wohnungen mit miete über 1500	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string > ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )
gehäuse, das 1500 monate oder 2000 monate ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) )
welche arten von häusern gibt es in den stadtvierteln von midtown west?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )
wohnung zwischen 800 und 1000 quadratmetern	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) ) )
finden sie ein gehäuse, das nicht mehr als 800 quadratmeter groß ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )
eine wohneinheit, die mehr als zwei gehäusetypen umfasst	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string > ) ( number 2 ) ) )
wohneinheiten mit wenig wohnraum	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( string housing_type ) ) )
welche wohneinheit hat maximal zwei gehäusetypen?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string <= ) ( number 2 ) ) )
welche wohneinheit am 2. januar gebucht hat eine monatliche miete von 1500 dollar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )
wohneinheit mit einem buchungsdatum bis spätestens 2. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
auf der suche nach einer einheit mit eigenem bad und hundefreundlich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string allows_dogs ) ) )
wohnung mit einem privaten raum zur miete bei 1500	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )
das ist die wohneinheit, in der hunde leben können	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string allows_dogs ) ) )
wohneinheit mit dem aktuellsten buchungsdatum suchen	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )
wohneinheit größer als 800 quadratfuß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )
gehäuse, das mindestens zwei nachbarschaft hat	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string >= ) ( number 2 ) ) )
wohneinheit mit einem privaten raum in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string has_private_room ) ) )
wohneinheit, die hunde erlaubt und ein eigenes bad hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string has_private_bath ) ) )
privathaus in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
apartments mit eigenem bad in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
gehäuse von 800 quadratmetern am 2. januar veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )
welche wohneinheit auf jan 2s miete gebucht ist 1500 dollar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )
finden sie eine unterkunft mit einem privaten raum und bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string has_private_bath ) ) )
wohneinheiten mit monatlich ungleich 1500 dollar finden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string ! = ) ( number 1500 en.dollar ) ) )
welche art von gehäuse ist in midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )
gehäuse gebucht am selben tag wie 123 sesamstraße	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) )
in welchen stadtteilen sind mehr als zwei plätze verfügbar?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
gehäuse am selben tag oder nach 123 sesamstraße gebucht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )
finden sie wohneinheiten mit 1500 dollar als miete und ist in der nähe von midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
welches gehäuse hat ein privates zimmer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) )
welche arten von unterkünften erlauben katzen?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ) )
welche wohneinheit ist in zwei stadtteilen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( number 2 ) ) )
wohneinheiten mit eigenem bad	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) )
wohneinheit mit buchungsdatum zwischen 2. januar oder 3. februar suchen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) ) )
welches gehäuse am gleichen datum wie 123 sesamstraße gebucht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) )
was ist die nachbarschaft der wohneinheit mit der monatlichen miete 1500 dollar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ) )
welche wohneinheit wurde am 2. januar gepostet und entspricht der wohnart 123 sesam st	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) )
welche wohneinheit hat mindestens zwei arten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string >= ) ( number 2 ) ) )
was ist der gehäusetyp der beiden wohneinheiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
wohnung, die die gleiche größe ist, sind 123 sesamstraße	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )
hundefreundliches apartment mit eigenem bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string allows_dogs ) ) )
wohnungen in der nachbarschaft midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
wohneinheiten mit nur einer nachbarschaft finden	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string < ) ( number 2 ) ) )
gehäuse, das am 2. januar veröffentlicht wurde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
zeigen sie mir eine unterkunft in midtown west, in der hunde willkommen sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string allows_dogs ) ) )
wie viele verschiedene wohnungsarten gibt es	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ) )
gehäuse, das keine höhere miete als 123 sesamstraße hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )
gehäuse veröffentlicht zuletzt	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )
welche wohneinheit hat eine wohnung art von haus	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ) )
was ist das datum der 123 sesamstraße posting	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) )
wohnungssuche zwischen 1500 und 2000	( call SW.listValue ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) )
finden sie eine unterkunft zwischen 800 und 1000 quadratfuß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) )
welche wohneinheit ist in der gegend von midtown west oder chelsea	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.concat en.neighborhood.midtown_west en.neighborhood.chelsea ) ) )
wohneinheit mit einem privaten raum und einem bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string has_private_bath ) ) )
einheit von 800 quadratfuß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ) )
in welcher nachbarschaft befindet sich die wohneinheit, die am 2. januar veröffentlicht wurde?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
katzenfreundliche apartments in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
suche nach wohneinheiten mit mietkosten von mehr als 123 sesamstraße	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )
welche wohneinheit ist am buchungsdatum von 123 sesamstraße gebucht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) )
welche wohneinheit hat wohnung art von häusern mit einer fläche von 800 quadratmetern	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )
welche art von unterkunft wurde am 2. januar veröffentlicht?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
800 quadratmeter große wohnung für 1500 miete	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )
welches gehäuse mit privatem zimmer mietet für 1500 dollar monatlich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )
zeigen sie mir wohneinheiten, die keine wohnungen sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string ! = ) en.housing.apartment ) )
wohneinheit, die eine wohnung ist, die hunde freundlich ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )
apartments mit eigenem bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string has_private_bath ) ) )
wohnen in der sesamstraße 123, die am 2. januar veröffentlicht wurde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.housing_unit.123_sesame_street ) )
finden sie wohneinheiten mit einzigartigen gehäusetypen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( string housing_type ) ) )
finden sie tierfreundliche wohneinheiten, die 1500 dollar als miete verlangen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string allows_dogs ) ) )
wohnung gehäuse, das am 2. januar gebucht wurde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )
welche wohneinheit hat eine monatliche miete von mehr als 1000 dollar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string > ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )
was ist die häufigste wohnform?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string housing_type ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
wohneinheiten, die wohnungen sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )
katzen erlaubt in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string allows_cats ) ) )
nachbarschaften nicht in der nähe von 123 sesamstraße	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string ! = ) en.housing_unit.123_sesame_street ) )
welche wohneinheit hat einen jan 2. posting	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )
finden sie wohneinheiten mit einer größe, die kleiner als die der sesamstraße 123 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )
was sind die wohneinheiten in der gegend um midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )
wohnungen mit miete unter 1500	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string < ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )
welche wohneinheit befindet sich im bereich der sesamstraße 123	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.housing_unit.123_sesame_street ) ) )
wohnung ähnlich der wohnung in midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )
gehäuse, das 1500 monate oder weniger oder 2000 monate oder weniger ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) ) )
was ist die anderen bereiche um midtown west, die wohneinheiten hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )
was 800 quadratmeter gehäuse erlaubt hunde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )
finden sie 800 quadratmeter große wohneinheiten in den vierteln von midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )
gehäuse mit buchungsdaten vor dem 2. januar und 3. februar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) ) )
welche wohneinheit hat die monatliche miete von 123 sesamstraße	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) )
was ist die größte wohneinheit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string size ) ) ) )
welche wohneinheiten erlaubt hunde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) )
nachbarschaft, in der ich gehäuse mit einem privaten raum finden kann	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ) )
gehäuse, das die gleiche größe oder größer als 123 sesamstraße ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )
800 quadratmeter große wohnungen in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )
gehäuse nicht am 2. januar gebucht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string ! = ) ( date 2015 1 2 ) ) )
wohneinheiten, die 800 quadratmeter groß sind und ein eigenes bad haben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string has_private_bath ) ) )
gehäuse, das am 2. januar veröffentlicht wurde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
nachbarschaften, die mehr als zwei einheiten haben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
welche wohneinheit gehört nicht zum wohnungstyp mit einer monatlichen miete von 1500 dollar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )
welche wohneinheit hat 1500 dollar monatliche miete und hat auch die möglichkeit eines privaten bades	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string has_private_bath ) ) )
welche wohneinheit mit einer miete von 1500 dollar pro monat hat ein privatzimmer	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )
finden sie 800 quadratmeter große wohneinheiten mit einem privaten raum	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )
was ist die durchschnittliche größe einer wohnung	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ) ) )
in welchen wohneinheiten in der nachbarschaft sind hunde erlaubt?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ) )
welche wohneinheit ist derselbe typ wie die am 2. januar eingestellte wohneinheit?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
was ist die fläche von 123 sesamstraße	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) )
vergleiche 123 sesamstraße und 900 mission avenue	( call SW.listValue ( call SW.concat en.housing_unit.123_sesame_street en.housing_unit.900_mission_ave ) )
katzen in der einheit erlaubt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) )
hier finden sie alle verfügbaren einheiten in midtown east	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
zeigen sie mir eine wohnung, deren miete 1500 dollar beträgt und die ein eigenes bad bietet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )
finden sie die wohneinheit mit der meisten monatlichen miete	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string rent ) ) ) )
wohneinheit mit der gleichen monatlichen miete wie 123 sesamstraße	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) )
wohnkosten von mehr als 1500 dollar pro monat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string > ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )
gehäuse in den wenigsten stadtteilen aufgeführt	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( string neighborhood ) ) )
wohnungen in midtown west mit einer miete von 1500 pro monat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )
was ist die monatliche miete dieser wohnung	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ) ) )
wohnen in mehr als zwei stadtteilen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string > ) ( number 2 ) ) )
zeigen sie mir gehäuse mit 800 quadratmetern raum	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )
gehäuse am 2. januar um 123 sesamstraße geschrieben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.housing_unit.123_sesame_street ) )
wohneinheit mit einem postdatum vor dem 2. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
welche wohneinheit mit einer fläche von 800 quadratmetern erlaubt hunde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string allows_dogs ) ) )
gehäuse, das hunde erlaubt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ) )
800 quadratfuß in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
nachbarschaften von wohneinheiten, die katzen erlaubt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ) )
billigste orte zu vermieten	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string rent ) ) ) )
welche wohneinheit ist vor dem 2. januar gebucht?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) ) )
wohneinheiten, die katzen in midtown west ermöglichen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string allows_cats ) ) )
welche wohneinheit in dieser nachbarschaft hat die möglichkeit eines eigenen bades	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ) )
was ist der wohnungstyp in der sesamstraße 123?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) )
zeigen sie mir das gehäuse mit dem größten verfügbaren platz	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string size ) ) ) )
finden sie katzenfreundliche wohneinheiten mit einem privaten raum	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string allows_cats ) ) )
welche midtown west wohneinheit hat ein eigenes bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string has_private_bath ) ) )
finden sie wohneinheiten in der nähe der sesamstraße 123	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string neighborhood ) ) ) )
wie viele stadtteile gibt es?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ) )
welche wohneinheit am 2. januar gebucht hat die gleiche miete wie 123 sesamstraße	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string rent ) ) ( string = ) en.housing_unit.123_sesame_street ) )
welche wohneinheit befindet sich in midtown west und wurde am 2. januar veröffentlicht?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )
wohneinheiten in der sesamstraße 123 finden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.housing_unit.123_sesame_street ) )
gehäuse am oder vor dem 2. januar oder am oder vor dem 3. februar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) ) )
wohneinheit, die eine wohneinheit mit einem privaten raum ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string has_private_room ) ) )
haustierfreundliche wohneinheit	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string allows_cats ) ) )
welche art von gehäuse hat zwei gehäusetypen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string >= ) ( number 2 ) ) )
alle wohneinheiten wurden am 2. januar veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
wohneinheit mit eigenem bad und kostet 1500 dollar miete	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )
gehäusetyp am 2. januar veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
finden sie andere arten von häusern als 123 sesamstraße	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string ! = ) en.housing_unit.123_sesame_street ) )
welche wohneinheit am 2. januar gebucht hat ein privates zimmer	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )
apartments mit einem privaten raum	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string has_private_room ) ) )
in welcher wohnungsart sind katzen erlaubt?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )
finden sie wohneinheiten mit eigenem bad in den vierteln von midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
gehäuse, das 1500 monate oder weniger ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )
wohnen in midtown west nachbarschaft am 2. januar gebucht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )
wohnungen mit mindestens 2 einheiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
welches gehäuse nach dem 2. januar gepostet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
gehäuse, das zwischen 800 und 1000 quadratmetern ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) ) )
wohnung mit einem privaten raum	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string has_private_room ) ) )
wohnungen von ähnlicher größe wie in der sesamstraße 123	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) )
wohneinheit, die 1500 dollar miete kostet und katzen erlaubt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string allows_cats ) ) )
hund und katze freundliche unterkunft	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string allows_dogs ) ) )
finden sie wohneinheiten in den vierteln von midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
wohnungen 800 quadratmeter und mehr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )
nachbarschaft der sesamstraße 123	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.housing_unit.123_sesame_street ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.housing_unit.123_sesame_street ) )
anzahl der verschiedenen einheiten	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ) )
unterbringung von wohnungen, die hunde erlauben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )
gehäuse, das das gleiche wie 123 sesamstraße kostet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) )
welche nachbarschaft hat unter zwei wohneinheiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
wie groß ist 123 sesamstraße	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) )
wohneinheit nach dem 2. januar oder 3. februar gebucht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) ) )
finden sie eine wohneinheit, die sich in zwei stadtteilen befindet	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( number 2 ) ) )
was ist das datum der 123 sesamstraße posting	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) )
wohnungen, die am 2. januar gebucht wurden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )
welche wohneinheit erlaubt hunde und katzen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string allows_cats ) ) )
artikel mit der größten anzahl von autoren	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( string author ) ) )
artikel unter berufung auf artikel in annalen der statistik veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )
in welchem artikel aus dem jahr 2004 wird die multivariate datenanalyse zitiert?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )
hier finden sie einen artikel aus dem jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )
artikel, deren veröffentlichungsdatum in der nähe des datums der multivariaten datenanalyse liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )
welcher artikel wurde von efron verfasst und hat die annalen der statistik als veranstaltungsort	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string author ) ( string = ) en.person.efron ) )
veranstaltungsort nur eines artikels	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel mit einem oder zwei autoren	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string <= ) ( number 2 ) ) )
artikel, dessen autor efron oder lakoff ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) ( call SW.concat en.person.efron en.person.lakoff ) ) )
ein preisgekrönter artikel zitiert einen anderen artikel	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )
autor der multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) )
artikel, die im jahr 2004 veröffentlicht wurden und multivariate datenanalysen zitieren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )
welcher autor hat die meisten artikel geschrieben?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel, die an mehr als zwei orten veröffentlicht wurden	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string > ) ( number 2 ) ) )
artikel, die zwei oder mehr städte erwähnen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel, dessen veröffentlichungsdatum kleiner als das veröffentlichungsdatum der multivariaten datenanalyse ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )
artikel in annalen von statistiken veröffentlicht zitiert durch multivariate datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
in welchem artikel geht es um multivariate datenanalyse?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ) )
artikel in weniger als zwei publikationen gefunden	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string < ) ( number 2 ) ) )
nennen sie einen artikel über multivariate datenanalyse des autors efron	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
artikel nicht im jahr 2004 veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string ! = ) ( date 2004 -1 -1 ) ) )
artikel in annalen der statistik zitiert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )
suche mir einen artikel, der an zwei orten ist	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( number 2 ) ) )
artikel, der auf die geringste anzahl von artikeln verweist	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( string cites ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
einen veranstaltungsort mit mehr als zwei artikeln finden	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
ein artikel, der multivariate datenanalyse zitiert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
welcher artikel zitiert multivariate datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ) )
welcher artikel war in weniger als zwei orten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string < ) ( number 2 ) ) )
die mehr als einmal multivariate datenanalyse geschrieben haben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) )
welche artikel zitieren weniger als zwei artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel, die gleichzeitig mit oder nach der multivariaten datenanalyse veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )
welcher artikel zitiert zwei andere artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel veröffentlicht in 2004 oder 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) )
artikel mit weniger als zwei referenzen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
welcher artikel zitiert multivariate datenanalyse und ist auch der veranstaltungsort	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )
artikel mit mehr als zwei autoren	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string > ) ( number 2 ) ) )
wer ist der autor einer multivariaten datenanalyse?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) )
veröffentlichung mit den wenigsten artikeln	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string venue ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
veranstaltungsorte mit weniger als zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel zweimal oder seltener zitiert	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel, die vor dem datum der multivariaten datenanalyse veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )
preisgekrönter artikel von annalen der statistik veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string won_award ) ) )
welcher artikel wurde vor dem veröffentlichungsdatum von artikeln über multivariate datenanalyse geschrieben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )
wer ist der autor des artikels, der multivariate datenanalyse zitiert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string author ) ( string = ) en.person.efron ) )
wann wurde die multivariate datenanalyse veröffentlicht?	( call SW.listValue ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) )
artikel, die vor 2004 veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
artikel am wenigsten zitiert	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string cites ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
welcher autor schrieb zwei artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
autor eines artikels, der multivariate datenanalysen zitiert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
autor mit höchstens zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
welcher artikel zitiert andere artikel über annalen der statistik	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )
welcher veranstaltungsort hat zwei artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
autoren mehrerer artikel	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string author ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel, die nach multivariater datenanalyse veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )
artikel in annalen von statistiken zitiert in multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
artikel, die artikel zitieren, die durch multivariate datenanalyse zitiert werden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
welcher artikel wurde nicht im jahr 2004 veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string ! = ) ( date 2004 -1 -1 ) ) )
veranstaltungsort des artikels, den die multivariate datenanalyse zitiert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
autoren, die keine multivariate datenanalyse geschrieben haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string ! = ) en.article.multivariate_data_analysis ) )
in welchem artikel wird ein weiterer preisgekrönter artikel behandelt?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )
artikel, die von efron geschrieben und durch multivariate datenanalyse zitiert wurden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
welcher artikel wurde im jahr 2004 oder später veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
preisgekrönte artikel	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) )
wer ist der autor von weniger als zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel, die artikel zitieren, die im jahr 2004 veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
nennen sie eine person, die der autor eines artikels über multivariate datenanalyse ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) )
nennen sie eine publikation mit weniger als zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
welcher autor schrieb die geringste anzahl von artikeln	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string author ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
preisgekrönter publikationsort für artikel	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )
artikel, dessen erscheinungsdatum 2004 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
nennen sie einen preisgekrönten artikel	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )
artikel mit mehr als zwei veranstaltungsorten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string > ) ( number 2 ) ) )
wer hat die wenigsten artikel verfasst	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string author ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
welcher artikel hat die meisten autoren?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( string author ) ) )
in welcher publikation wurde die multivariate datenanalyse veröffentlicht?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) en.article.multivariate_data_analysis ) )
artikel, dessen veröffentlichungsdatum höchstens das veröffentlichungsdatum der multivariaten datenanalyse ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )
verfasser von zwei oder weniger artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
nennen sie jemanden, der einen artikel über multivariate datenanalyse geschrieben hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) )
artikel, die am selben tag wie die multivariate datenanalyse veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) )
welche autoren haben zwei oder mehr artikel geschrieben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
finden sie einen ort für einen preisgekrönten artikel	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )
jeder artikel, der einen anderen artikel zitiert, der in annalen der statistik veröffentlicht wurde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )
artikel zitiert von preisgekrönten artikeln	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )
welcher artikel in annalen der statistik zitiert die multivariate datenanalyse?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
artikel, der multivariate datenanalyse zitiert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
herausgeber von nur einem artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
welcher preisgekrönte artikel wurde durch multivariate datenanalyse zitiert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string won_award ) ) )
veranstaltungsorte von zwei artikeln oder weniger	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
ein artikel, dessen ebenfalls multivariate datenanalyse verfasst wurde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) ( call SW.getProperty en.article.multivariate_data_analysis ( string author ) ) ) )
nennen sie einen artikel, in dem die multivariate datenanalyse zitiert wird	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
artikel aus dem jahr 2004, die mit preisen ausgezeichnet wurden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string won_award ) ) )
autoren von weniger als zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
nennen sie eine person, die weniger als zwei artikel verfasst hat	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
nennen sie einen artikel aus den annalen der statistik über multivariate datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
preisgekrönte artikel, die durch multivariate datenanalyse zitiert wurden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
veröffentlichungen, in denen artikel von efron zu finden sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )
artikel, die artikel zitieren, die durch multivariate datenanalyse zitiert werden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
nennen sie einen artikel aus den annalen der statistik	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )
artikel, dessen erscheinungsdatum 2004 ist und der durch multivariate datenanalyse zitiert wird	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
welcher artikel hat ein veröffentlichungsdatum, das größer ist als das der multivariaten datenanalyse?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )
welcher artikel zitiert einen preisgekrönten artikel?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )
welche veröffentlichung enthält zwei artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel, die zwei oder weniger artikel zitieren	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
welcher artikel behandelt annalen der statistik und dessen erscheinungsdatum war 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )
artikel, die artikel zitieren, die in der multivariaten datenanalyse zitiert werden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
welche annalen des statistikartikels multivariate datenanalyse zitieren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
welcher artikel über annalen und statistiken wurde im jahr 2004 veröffentlicht?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
artikel aus dem jahr 2004 zitiert durch multivariate datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
artikel aus dem jahr 2004, die ausgezeichnet wurden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )
nennen sie einen artikel mit weniger als zwei autoren	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string < ) ( number 2 ) ) )
welcher artikel wird in der multivariaten datenanalyse nicht zitiert?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string ! = ) en.article.multivariate_data_analysis ) )
wer schrieb die meisten artikel	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel, der zwei oder mehr artikel zitiert	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel im jahr 2004 zitate veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
welcher artikel zitiert die meisten anderen artikel	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( string cites ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
der im jahr 2004 veröffentlichte artikel wurde durch multivariate datenanalyse zitiert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )
welcher autor schrieb zwei oder mehr artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
nennen sie einen artikel aus dem jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
nennen sie einen preisgekrönten artikel	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )
welcher artikel wurde in mehr als zwei zeitschriften veröffentlicht	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string > ) ( number 2 ) ) )
nennen sie einen artikel, in dem es nicht um multivariate datenanalyse geht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string ! = ) en.article.multivariate_data_analysis ) )
artikel, die keine multivariate datenanalyse zitieren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string ! = ) en.article.multivariate_data_analysis ) )
welcher artikel wurde weniger als zweimal zitiert	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel mit autor der multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) ( call SW.getProperty en.article.multivariate_data_analysis ( string author ) ) ) )
welcher artikel zitiert multivariate datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ) )
wer ist jemand, der artikel über multivariate datenanalyse verfasst hat?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) )
finden sie den autor eines preisgekrönten artikels	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )
veranstaltungsort des efron-artikels	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )
preisgekrönte artikel von efron	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( string author ) ( string = ) en.person.efron ) )
wer ist der autor der beiden artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel veröffentlicht im jahr 2004 und zitiert multivariate datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )
welcher artikel wurde nach 2004 veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
welcher veranstaltungsort hat maximal zwei artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel veröffentlicht vor multivariater datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )
finde einen artikel, den efron nicht geschrieben hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string ! = ) en.person.efron ) )
welcher artikel zitiert nicht multivariate datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string ! = ) en.article.multivariate_data_analysis ) )
artikel von einem autor geschrieben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string < ) ( number 2 ) ) )
nennen sie einen artikel, der in mehr als zwei publikationen gefunden wurde	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string > ) ( number 2 ) ) )
artikel veröffentlicht in oder nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
nennen sie eine publikation, die nicht mehr als zwei artikel enthält	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
welchen artikel hat efron geschrieben, dessen veranstaltungsort annalen von statistiken sind?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string author ) ( string = ) en.person.efron ) )
welche artikel werden von autoren der multivariaten datenanalyse geschrieben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
alle artikel von efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) )
artikel veröffentlicht von 2004 bis 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
finden sie einen autor eines artikels in annalen der statistik	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )
veranstaltungsorte, die die meisten artikel veröffentlicht haben	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string venue ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel an den wenigsten orten veröffentlicht	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( string venue ) ) )
wann wurde die multivariate datenanalyse veröffentlicht?	( call SW.listValue ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) )
autor mit der meisten anzahl von artikeln	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel, die nicht von efron verfasst wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string ! = ) en.person.efron ) )
veranstaltungsorte, die höchstens zwei artikel veröffentlicht haben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel mit mehr als zwei autoren	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string > ) ( number 2 ) ) )
artikel mit zwei oder mehr verlagen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string >= ) ( number 2 ) ) )
welcher artikel von efron geschrieben und ausgezeichnet wurde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string won_award ) ) )
nennen sie einen artikel über multivariate datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
verfasser multivariater datenanalysen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) )
artikel, die vor 2004 veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
artikel in höchstens zwei publikationen gefunden	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string <= ) ( number 2 ) ) )
artikel zitiert von den meisten artikeln	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string cites ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
finden sie einen efron-artikel, der multivariate datenanalysen zitiert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )
welche annalen des statistikartikels wurden durch multivariate datenanalyse zitiert?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
nennen sie einen artikel von mehr als zwei autoren	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string > ) ( number 2 ) ) )
welchen veranstaltungsort hat unter zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
autor von zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel mit der maximalen anzahl von veranstaltungsorten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( string venue ) ) )
wer schrieb multivariate datenanalyse	( call SW.listValue ( call SW.getProperty en.article.multivariate_data_analysis ( string author ) ) )
in welchen annalen des statistikartikels wurde die multivariate datenanalyse zitiert?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )
von efron zitierte artikel	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )
veröffentlichungen mit mindestens zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel unter berufung auf multivariate datenanalysen von efron	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string author ) ( string = ) en.person.efron ) )
welche artikel haben unter zwei autoren	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string < ) ( number 2 ) ) )
suchen sie einen artikel, der mehr als zwei artikel enthält	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
welche artikel wurden von efron geschrieben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )
artikel, der multivariate datenanalyse zitiert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )
in welchem artikel wird ein artikel zitiert, der durch multivariate datenanalyse zitiert wird?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
artikel, dessen veranstaltungsort annalen der statistik ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )
welcher efron-artikel wurde ausgezeichnet?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string won_award ) ) )
autor mit maximal zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
veranstaltungsort mit zwei veröffentlichten artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
welcher artikel zitiert annalen des statistikartikels	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )
artikel, die multivariate datenanalysen zitieren und in annalen von statistiken veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
welcher artikel wird am häufigsten zitiert?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string cites ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel an zwei orten veröffentlicht	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( number 2 ) ) )
artikel zitiert von artikeln in annalen der statistik veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )
artikel von efron, der multivariate datenanalyse zitiert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )
artikel, die nicht in den annalen der statistik veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string ! = ) en.venue.annals_of_statistics ) )
artikel, die nicht durch multivariate datenanalyse zitiert wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string ! = ) en.article.multivariate_data_analysis ) )
was sind einige artikel, die nichts mit annalen von statistiken zu tun haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string ! = ) en.venue.annals_of_statistics ) )
ein artikel von efron, der multivariate datenanalysen zitiert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
frühester veröffentlichter artikel	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string publication_date ) ) ) )
artikel mit mehr als zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
finden sie einen artikel mit demselben veranstaltungsort wie die multivariate datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( call SW.getProperty en.article.multivariate_data_analysis ( string venue ) ) ) )
welche artikel werden in der multivariaten datenanalyse zitiert?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )
artikel veröffentlicht nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
veranstaltungsort des artikels, dessen autor efron ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )
welcher artikelautor ist efron?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) )
welcher autor schrieb zwei artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
autor des artikels zitiert durch multivariate datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
welcher artikel hat ein veröffentlichungsdatum größer als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
was ist ein artikel in annalen von statistiken über multivariate datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
multivariate datenanalyse veranstaltungsort	( call SW.listValue ( call SW.getProperty en.article.multivariate_data_analysis ( string venue ) ) )
welche person hat artikel geschrieben, als eine auszeichnung gewonnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )
artikel, die durch multivariate datenanalyse zitiert und von efron geschrieben wurden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string author ) ( string = ) en.person.efron ) )
welcher artikel hat zwei zitate	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
veröffentlichungen zur multivariaten datenanalyse	( call SW.listValue ( call SW.getProperty en.article.multivariate_data_analysis ( string venue ) ) )
welcher artikel hat weniger als zwei veranstaltungsorte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string < ) ( number 2 ) ) )
artikel von weniger als zwei personen geschrieben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string < ) ( number 2 ) ) )
artikel von mehr als zwei autoren	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string > ) ( number 2 ) ) )
artikel mit ihren erscheinungsdaten zwischen 2004 und 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) )
dieser artikel zitiert 2 weitere artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel zitiert von multivariate datenanalyse, deren veranstaltungsort annalen der statistik ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
artikel, die nicht in statistischen annalen veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string ! = ) en.venue.annals_of_statistics ) )
artikel, die mehr als zwei artikel zitieren	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
welchen preisgekrönten artikel zitiert die multivariate datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
welcher artikel hat ein erscheinungsdatum von mindestens 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
artikel zitiert nicht multivariate datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string ! = ) en.article.multivariate_data_analysis ) )
artikel, die in oder vor 2004 veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
artikel mit weniger als zwei autoren	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string < ) ( number 2 ) ) )
nennen sie einen artikel aus den annalen der statistik	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )
nennen sie einen artikel über multivariate datenanalyse aus den annalen der statistik	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
in welchem artikel wird die multivariate datenanalyse nicht zitiert?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string ! = ) en.article.multivariate_data_analysis ) )
welcher artikel zitiert multivariate datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ) )
in welchem artikel werden multivariate daten analysiert?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( call SW.getProperty en.article.multivariate_data_analysis ( string venue ) ) ) )
welche artikel werden in der multivariaten datenanalyse veröffentlicht?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
artikel, die an den wenigsten orten veröffentlicht wurden	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( string venue ) ) )
artikel, die von efron verfasst und in den annalen der statistik veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
finde einen artikel, der vor 2004 veröffentlicht wurde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
artikel mit dem größten erscheinungsdatum	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string publication_date ) ) ) )
artikel mit den wenigsten zitaten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( string cites ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel zitiert in artikeln von efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )
welcher veranstaltungsort hat zwei oder weniger artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
welcher artikel wurde am selben tag wie die multivariate datenanalyse veröffentlicht?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) )
artikel nicht in den annalen der statistik	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string ! = ) en.venue.annals_of_statistics ) )
artikel in weniger als zwei publikationen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string < ) ( number 2 ) ) )
welcher artikel ist in den meisten artikeln erwähnt	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string cites ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
was efron artikel zitiert multivariate datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
veröffentlichungen mit mehr als zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
finden sie einen artikel, der 2004 oder 2010 veröffentlicht wurde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) )
wo können sie multivariate datenanalyse sehen	( call SW.listValue ( call SW.getProperty en.article.multivariate_data_analysis ( string venue ) ) )
artikel zitiert multivariate datenanalyse von efron	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string author ) ( string = ) en.person.efron ) )
zuletzt veröffentlichter artikel	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string publication_date ) ) ) )
welcher autor hat keine multivariate datenanalyse geschrieben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string ! = ) en.article.multivariate_data_analysis ) )
artikel des multivariaten datenanalyse-autors	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) ( call SW.getProperty en.article.multivariate_data_analysis ( string author ) ) ) )
autor von mehr als zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
welcher artikel wurde im jahr 2004 bei annalen der statistik veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
artikel in annalen von statistiken veröffentlicht, die multivariate datenanalyse zitieren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
in welchem artikel wurde die multivariate datenanalyse zitiert?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ) )
welcher artikel hat weniger als zwei autoren	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string < ) ( number 2 ) ) )
nennen sie eine person, die zwei artikel geschrieben hat	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel zitiert von studien mit multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
artikel, der drei oder mehr artikel zitiert	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
was ist der artikel mit dem ältesten veröffentlichungsdatum?	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string publication_date ) ) ) )
nennen sie den autor eines artikels über multivariate datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
welche artikel zitieren zwei oder weniger artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
nennen sie einen artikel mit mehr als zwei autoren	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string > ) ( number 2 ) ) )
erscheinungsdatum der multivariaten datenanalyse	( call SW.listValue ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) )
artikel zitiert von artikeln in annalen der statistik	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )
artikel, die von multivariaten datenanalysen zitiert wurden und mit preisen ausgezeichnet wurden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string won_award ) ) )
welcher veranstaltungsort hat weniger als zwei artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
in welchem artikel sind zwei weitere artikel zitiert?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
welcher autor hat mehr als zwei artikel geschrieben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel, der multivariate datenanalyse in annalen von statistiken zitierte	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )
artikel in annalen der statistik veröffentlicht und durch multivariate datenanalyse zitiert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
welche artikel werden in den annalen der statistik und im jahr 2004 veröffentlicht?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )
artikel veröffentlicht im jahr 2004 und zitiert multivariate datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )
welcher artikel wurde vom preisgekrönten artikel zitiert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )
preisgekrönter artikel von efron	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string won_award ) ) )
welche artikel zitieren mindestens zwei artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
nennen sie einen artikel über multivariate datenanalyse, der im jahr 2004 veröffentlicht wurde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )
von efron oder lakoff geschriebene artikel	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) ( call SW.concat en.person.efron en.person.lakoff ) ) )
der zwei oder weniger artikel verfasst hat	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
welcher artikel hat ein erscheinungsdatum von 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
nennen sie einen artikel aus dem jahr 2004 über multivariate datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )
was sind einige artikel von efron oder lakoff geschrieben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) ( call SW.concat en.person.efron en.person.lakoff ) ) )
nennen sie einen autor von zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel von mindestens zwei autoren	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string >= ) ( number 2 ) ) )
artikel, die durch multivariate datenanalyse ausgezeichnet wurden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
artikel, der multivariate datenanalyse zitiert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
artikel, dessen autor efron ist und dessen erscheinungsdatum 2004 ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )
artikel, der die 2004 veröffentlichte multivariate datenanalyse zitiert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )
artikel, der preisgekrönten multivariaten artikel zur datenanalyse erwähnt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string won_award ) ) )
artikel, der weniger als zwei veranstaltungsorte hat	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string < ) ( number 2 ) ) )
veranstaltungsorte, die im jahr 2004 veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
artikel, der multivariate datenanalyse in den annalen der statistik zitiert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
was ist ein artikel von efron geschrieben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string author ) ( string = ) en.person.efron ) )
autor von einem oder zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
finden sie einen artikel in annalen der statistik, die im jahr 2004 veröffentlicht wurde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )
artikel, der mindestens zwei artikel zitiert	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
preisgekrönter artikel, der multivariate datenanalysen zitiert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string won_award ) ) )
suchen sie einen artikel, der zwei oder weniger zitate enthält	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
nennen sie einen autor von mindestens zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel mit zwei veranstaltungsorten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( number 2 ) ) )
veranstaltungsort des artikels, in dem multivariate datenanalysen zitiert werden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ) )
welcher efron-artikel zitiert die multivariate datenanalyse?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string author ) ( string = ) en.person.efron ) )
personen, die keine multivariate datenanalyse verfasst haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string ! = ) en.article.multivariate_data_analysis ) )
welcher artikel wurde von efron geschrieben und hat ein erscheinungsdatum von 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )
artikel, die nicht von efron geschrieben wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string ! = ) en.person.efron ) )
artikel, der einen einzelnen artikel zitiert	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel zitiert von zwei anderen artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
welche artikel zitiert zwei andere artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
ein artikel mit dem neuesten erscheinungsdatum	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string publication_date ) ) ) )
artikel, die am selben ort veröffentlicht wurden wie multivariate datenanalysen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
welcher artikel hat über zwei autoren	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string > ) ( number 2 ) ) )
artikel, der artikel zitiert, die im jahr 2004 veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
von einem verfasste artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string < ) ( number 2 ) ) )
bei welchem veranstaltungsort handelt es sich um mindestens zwei artikel?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
wie viele zeitschriften gibt es?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ) )
finden sie einen artikel in den annalen der statistik veranstaltungsort	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
was ist ein artikel, der zwei orte hat	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( number 2 ) ) )
welcher artikel wurde 2010 oder früher veröffentlicht?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
autor von nur einem artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
von efron verfasste artikel	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string author ) ( string = ) en.person.efron ) )
artikel mit der geringsten anzahl von veranstaltungsorten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( string venue ) ) )
welcher artikel zitiert artikel von efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )
artikel über annalen von statistiken von efron	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string author ) ( string = ) en.person.efron ) )
finden sie einen veranstaltungsort ohne multivariate datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string ! = ) en.article.multivariate_data_analysis ) )
was ist das datum des artikels	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel, die im jahr 2004 nicht veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string ! = ) ( date 2004 -1 -1 ) ) )
artikel von efron, der sich auf multivariate datenanalysen bezieht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string author ) ( string = ) en.person.efron ) )
welcher artikel wurde ausgezeichnet und handelt von annalen der statistik	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
artikel, die mehr als zwei artikel zitieren	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
finden sie einen artikel, der nach einer multivariaten datenanalyse veröffentlicht wurde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )
artikel, die an zwei oder weniger orten veröffentlicht wurden	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string <= ) ( number 2 ) ) )
artikel, die nach multivariater datenanalyse veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )
was artikel sites nur einen anderen artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
preisgekrönter artikel zitiert durch multivariate datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
welcher artikel hat die meisten veranstaltungsorte?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( string venue ) ) )
artikel zitiert von artikel, der im jahr 2004 veröffentlicht wird	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
artikel mit den wenigsten autoren	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( string author ) ) )
artikel, die multivariate datenanalysen zitieren und in annalen von statistiken veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
nennen sie den autor, dessen artikel seinen sitz als annalen der statistik hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )
nennen sie einen artikel von efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )
artikel von efron	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string author ) ( string = ) en.person.efron ) )
welcher autor hat maximal zwei artikel geschrieben?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel von einem oder zwei autoren	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string <= ) ( number 2 ) ) )
wo findet ein artikel statt, der durch multivariate datenanalyse zitiert wird?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
welcher veranstaltungsort ist multivariate datenanalyse in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) en.article.multivariate_data_analysis ) )
welcher artikel über multivariate datenanalyse wurde im jahr 2004 veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )
welcher artikel wurde zweimal zitiert	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel im jahr 2004 veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )
artikel mit demselben veröffentlichungsdatum wie der artikel zur multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )
artikel, die keine multivariate datenanalyse zitieren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string ! = ) en.article.multivariate_data_analysis ) )
was ist das veröffentlichungsdatum für die multivariate datenanalyse?	( call SW.listValue ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) )
welcher artikel ist von efron geschrieben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) )
wo findet der 2004 erschienene artikel statt?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
autoren, die multivariate datenanalyse zitierten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ) )
artikel, die vor der multivariaten datenanalyse veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )
wer ist der andere autor des von efron verfassten artikels?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )
welcher artikel hat die geringste anzahl von autoren	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( string author ) ) )
welcher artikel zitiert mindestens zwei andere artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel, der mindestens zwei artikel zitiert	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
welcher autor veröffentlichte einen artikel im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
artikel, die maximal zwei artikel enthalten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
welcher preisgekrönte artikel wurde von efron geschrieben?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( string author ) ( string = ) en.person.efron ) )
artikel dessen autor efron ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )
was ist das veröffentlichungsdatum eines multivariaten datenanalyse-artikels?	( call SW.listValue ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) )
welcher artikel hat das älteste erscheinungsdatum?	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string publication_date ) ) ) )
preisgekrönter artikel	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) )
artikel von efron aus dem jahr 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )
ein artikel, der die 2004 veröffentlichte multivariate datenanalyse zitiert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )
artikel des gleichen autors für multivariate datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
artikel, der die multivariate datenanalyse des autors efron zitiert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string author ) ( string = ) en.person.efron ) )
welcher autor schrieb einen artikel, der städte multivariate datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ) )
was ist die personennummer?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
artikel in annalen der statistik veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
was ist ein artikel von nur einem autor geschrieben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string < ) ( number 2 ) ) )
welcher artikel ist in der geringsten anzahl von anderen artikeln erwähnt	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string cites ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
finden sie einen ort für einen artikel in annalen der statistik	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )
veranstaltungsorte, die efrons artikel haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )
wie lautet die veranstaltungsortnummer?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ) )
welcher artikel wurde in einem artikel von 2004 zitiert?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
veranstaltungsort von zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel von efron verfasst und 2004 veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string author ) ( string = ) en.person.efron ) )
nennen sie einen artikel, der im jahr 2004 nicht veröffentlicht wurde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
an welchem ort wurden mehr als zwei artikel veröffentlicht?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel, die artikel zitieren, die von efron geschrieben wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )
artikel, die in oder vor 2004 veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
nennen sie jemanden, der nicht mehr als zwei artikel geschrieben hat	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel verfasst von efron und hat die annalen der statistik als veranstaltungsort	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
welcher artikel hat das gleiche veröffentlichungsdatum wie die multivariate datenanalyse?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) )
veranstaltungsorte mit weniger als zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
in welcher zeitschrift wird die multivariate datenanalyse veröffentlicht?	( call SW.listValue ( call SW.getProperty en.article.multivariate_data_analysis ( string venue ) ) )
artikel mit zwei verlagen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( number 2 ) ) )
was ist ein veranstaltungsort mit weniger als zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel, der multivariate datenanalyse zitiert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( call SW.getProperty en.article.multivariate_data_analysis ( string venue ) ) ) )
artikel von efron, der multivariate datenanalysen zitiert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
andere als die multivariate datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string ! = ) en.article.multivariate_data_analysis ) )
erster veröffentlichter artikel	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string publication_date ) ) ) )
artikel, der mindestens zwei andere artikel erwähnt	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
nennen sie einen artikel, der an zwei oder mehr orten gefunden wurde	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string >= ) ( number 2 ) ) )
artikel, dessen erscheinungsdatum mindestens 2004 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
was ist ein artikel in einer veröffentlichung über multivariate datenanalyse zitiert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
welcher artikel macht die wenigsten zitate	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string cites ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
welcher veranstaltungsort hat artikel im jahr 2004 veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
finden sie einen efron artikel	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) )
artikel mit zwei veranstaltungsorten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( number 2 ) ) )
wer ist der autor, dessen veranstaltungsort annalen der statistik ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )
artikel mit mehr als zwei autoren	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string > ) ( number 2 ) ) )
welcher artikel hat die wenigsten autoren	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( string author ) ) )
welcher artikel wurde von efron geschrieben und behandelt annalen der statistik	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
artikel von efron unter berufung auf multivariate datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
artikel aus dem jahr 2004, in denen multivariate datenanalysen zitiert werden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )
artikel, der keine multivariate datenanalyse zitiert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string ! = ) en.article.multivariate_data_analysis ) )
artikel, die vor 2004 oder vor 2010 veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
wo findet die multivariate datenanalyse statt?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string venue ) ) ( string = ) en.article.multivariate_data_analysis ) )
artikel mit dem veranstaltungsort als annalen der statistik	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )
veröffentlichungen, die keine multivariaten datenanalysen veröffentlichen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string ! = ) en.article.multivariate_data_analysis ) )
preisgekrönte artikel aus dem jahr 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string won_award ) ) )
artikel des autors für multivariate datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
nennen sie einen preisgekrönten artikel über multivariate datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string won_award ) ) )
preisgekrönter artikel zitiert durch multivariate datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string won_award ) ) )
in welchem veranstaltungsort finden sie multivariate datenanalyse?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string venue ) ) ( string = ) en.article.multivariate_data_analysis ) )
welcher artikel zitiert weniger als zwei andere artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel mit mehr als zwei veranstaltungsorten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string > ) ( number 2 ) ) )
welcher autor schrieb über annalen der statistik	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )
artikel, dessen veranstaltungsort der veranstaltungsort für multivariate datenanalysen ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
welcher veranstaltungsort besteht aus multivariaten datenanalyse	( call SW.listValue ( call SW.getProperty en.article.multivariate_data_analysis ( string venue ) ) )
welcher artikel wurde von einer minimalen anzahl von autoren geschrieben?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( string author ) ) )
wer hat artikel mit efron verfasst	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )
preisgekrönte artikel, die in artikeln mit multivariater datenanalyse zitiert werden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
artikel zitiert von preisgekrönten artikeln	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )
welcher artikel zitiert einen preisgekrönten artikel	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )
veranstaltungsort von zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
wer hat die wenigsten artikel geschrieben	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string author ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
nennen sie einen artikel, der 2004 über multivariate datenanalyse veröffentlicht wurde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )
bei welchem veranstaltungsort handelt es sich um die meisten artikel?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string venue ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel von efron, der durch multivariate datenanalyse zitiert wird	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string author ) ( string = ) en.person.efron ) )
artikel, die gleichzeitig mit oder vor der multivariaten datenanalyse veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )
artikel mit erscheinungsdatum als 2004 und austragungsort als annalen der statistik	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
suche mir einen artikel mit zwei oder mehr veranstaltungsorten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string >= ) ( number 2 ) ) )
finden sie einen artikel von efron	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string author ) ( string = ) en.person.efron ) )
artikel mit erscheinungsdatum 2004 oder 2010	( call SW.listValue ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) )
welcher artikel hat zwei autoren oder weniger	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string <= ) ( number 2 ) ) )
wo findet ein artikel statt, in dem multivariate datenanalysen zitiert werden?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
artikel veröffentlicht im jahr 2004 und zitiert durch multivariate datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
welcher artikel war in den meisten veranstaltungsorten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( string venue ) ) )
welcher autor schrieb unter zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel in den meisten publikationen gefunden	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( string venue ) ) )
artikel, die drei oder mehr städte erwähnen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
welcher artikel hat ein erscheinungsdatum von 2003 und eine auszeichnung gewonnen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string won_award ) ) )
verfasser von artikeln, die durch multivariate datenanalyse zitiert wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
artikel zitiert von sowie zitiert multivariate datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
artikel von efron unter berufung auf multivariate datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string author ) ( string = ) en.person.efron ) )
autor von zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
wer hat mehr als zwei artikel geschrieben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
nennen sie artikel in annalen der statistik	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )
artikel veröffentlicht, außer im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string ! = ) ( date 2004 -1 -1 ) ) )
artikel zitiert von preisgekrönten artikel	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )
verfasser von zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel veröffentlicht am datum der multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) )
welcher artikel zitiert einen artikel aus annalen der statistik	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )
welcher artikel wurde nach 2004 veröffentlicht?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
artikel, die artikel zitieren, die im jahr 2004 veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
welcher artikel wurde ausgezeichnet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) )
preisgekrönte artikel aus der multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string won_award ) ) )
welcher artikel wurde am oder vor 2004 veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
welche multivariaten datenanalyse stadt artikel wurden nach 2004 veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )
artikel, der artikel zitiert, der multivariate datenanalyse zitiert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
artikel, der die wenigsten artikel zitiert	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string cites ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
welcher artikel, der multivariate datenanalysen zitiert, wurde ausgezeichnet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )
veranstaltungsort, der in mindestens zwei artikeln erwähnt wird	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
welcher artikel zitiert mehr als zwei andere artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
autor des artikels unter berufung auf multivariate datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ) )
wer schrieb einen artikel unter berufung auf multivariate datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
artikel in multivariater datenanalyse veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( call SW.getProperty en.article.multivariate_data_analysis ( string venue ) ) ) )
autoren von preisgekrönten artikeln	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )
veröffentlichungen mit von efron verfassten artikeln	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )
artikel, die vor 2004 veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
welcher artikel wurde ausgezeichnet und hat ein erscheinungsdatum von 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )
artikel, die an zwei oder mehr orten veröffentlicht wurden	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string >= ) ( number 2 ) ) )
artikel mit zwei autoren	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) ( number 2 ) ) )
in welchem artikel geht es um multivariate datenanalyse?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
autoren von höchstens zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel zitiert multivariate datenanalyse in annalen der statistik veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
welcher artikel wurde von efron und cities multivariate datenanalyse geschrieben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string author ) ( string = ) en.person.efron ) )
artikel mit einem veranstaltungsort	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string < ) ( number 2 ) ) )
ein artikel, der multivariate datenanalysen zitiert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
welcher veranstaltungsort hat die meisten artikel?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string venue ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel, der ausgezeichnet wurde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( string won_award ) ) )
welcher artikel zitiert einen artikel von 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
artikel, dessen erscheinungsdatum 2004 ist und dessen autor efron ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string author ) ( string = ) en.person.efron ) )
was ist der neueste veröffentlichte artikel	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string publication_date ) ) ) )
artikel zitiert durch multivariate datenanalyse und veröffentlicht in annalen von statistiken	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
entweder annalen der statistik oder der computerlinguistik	( call SW.listValue ( call SW.concat en.venue.annals_of_statistics en.venue.computational_linguistics ) )
autor von nur einem artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel, die vor 2004 geschrieben wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
welcher artikel von efron zitiert die multivariate datenanalyse?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )
preisgekrönter artikel von efron	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( string author ) ( string = ) en.person.efron ) )
welcher artikel wurde vor der multivariaten datenanalyse veröffentlicht?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )
nennen sie einige artikel, die nicht von efron geschrieben wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string ! = ) en.person.efron ) )
artikel, der zwei oder weniger artikel zitiert	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
in welchem artikel wird ein artikel zitiert, der in der multivariaten datenanalyse zitiert wird?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
autoren, die im jahr 2004 veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
artikel mit der geringsten artikelanzahl	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( string cites ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel mit der geringsten autorenzahl	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( string author ) ) )
artikel mit drei oder mehr autoren	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string > ) ( number 2 ) ) )
artikel von efron zitiert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )
artikel, der einen artikel erwähnt	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel zitiert von preisgekrönten artikeln	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )
welcher artikel ist von weniger als zwei autoren geschrieben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string < ) ( number 2 ) ) )
zeitschrift, die keine multivariate datenanalyse veröffentlicht hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string ! = ) en.article.multivariate_data_analysis ) )
artikel vor 2010 veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
nennen sie jemanden, der nicht der autor eines artikels über multivariate datenanalyse ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string ! = ) en.article.multivariate_data_analysis ) )
der artikel enthält mindestens zwei veranstaltungsorte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string >= ) ( number 2 ) ) )
welcher preisgekrönte artikel hat annalen von statistiken als veranstaltungsort	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
welcher veranstaltungsort hat zwei oder mehr artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel zitiert durch multivariate datenanalyse und veröffentlicht in annalen von statistiken	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
artikel zitiert von weniger als zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
nennen sie eine person, die nicht mehr als zwei artikel geschrieben hat	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel des autors für multivariate datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
artikel veröffentlicht zwischen 2004 und 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
artikel mehr als zweimal zitiert	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
für welche mahlzeit sind zwei oder weniger rezepte vorgesehen?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
zeigen sie mir rezepte mit einer zubereitungszeit, die gleich oder länger als die kochzeit von milchreis ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
finde ein rezept, das zwei leute füttert	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
welche zutat ist in zwei oder weniger rezepten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welche rezepte machen mindestens 2 mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
welche zwei zutaten benötigt dieses rezept?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
wie viele zutaten braucht das?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
zeig mir mittags rezepte	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string meal ) ( string = ) en.meal.lunch ) )
welches rezept kann in kürzerer zeit als milchreis vorbereitet werden, kann gekocht werden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
wie viele rezepte gibt es?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches datum rezepte verbreiten, ist mindestens dasselbe wie milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
zeige rezepte, die in jeder mahlzeit verwendet werden könnten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
welche art von küche ist milchreis	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) )
finden sie ein rezept, das die gleiche zeit wie milchreis kocht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )
welches rezept dient höchstens drei	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
das datum der veröffentlichung des mittagsrezepts ist 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string meal ) ( string = ) en.meal.lunch ) )
zeigen sie mir rezepte zum mittagessen, die milch benötigen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string requires ) ( string = ) en.ingredient.milk ) )
was ist ein rezept aus den wenigsten küchen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string cuisine ) ) )
welche rezepte teilen zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
was ist die mahlzeit, zu der milchreis passt?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) )
was rezepte kochzeit ist mindestens die vorbereitungszeit von milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
nennen sie die zutaten, die in mehr als einem rezept verwendet werden	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches rezept buchungsdatum ist nicht in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string ! = ) ( date 2004 -1 -1 ) ) )
rezept für die meisten mahlzeiten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
welches rezept hat eine küche	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string < ) ( number 2 ) ) )
welches rezept benötigt milch?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ) )
zeigen sie mir rezepte, die zwei oder mehr zutaten benötigt	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
zeigen sie mir zutaten, die zwei rezepte erfordern	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
was ist ein rezept für weniger als zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
welches rezept dauert länger als milchreis zu kochen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
welche zutat wird in der geringsten anzahl von rezepten benötigt	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches rezept hat sein buchungsdatum als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
welches lebensmittel wird im milchreis nicht benötigt?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string ! = ) en.recipe.rice_pudding ) )
welche rezepte haben die meisten zutaten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
für welche mahlzeit können maximale rezepte gefunden werden	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
wie viel zeit braucht man, um milchreis zu kochen?	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) )
zeig mir rezepte, die keine mittagsrezepte sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string ! = ) en.meal.lunch ) )
zeig mir mahlzeiten, die milch erfordern	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ) )
was sind zutaten in milchreis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) )
rezepte mit der vorbereitungszeit als garzeit von milchreis anzeigen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )
zeigen sie mir rezepte, deren garzeit länger ist als die vorbereitungszeit für milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
hier finden sie rezepte für das mittagessen, die im jahr 2004 veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string meal ) ( string = ) en.meal.lunch ) )
zutaten im rezept aus dem jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
was ist das rezept, das die minimale anzahl von zutaten benötigt	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
was rezepte garzeit ist das gleiche wie milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )
welches rezept erfordert die meisten zutaten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
rezepte in reispudding zubereitet kochzeit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )
was ist ein rezept, das zum mittag- oder abendessen gut ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( call SW.concat en.meal.lunch en.meal.dinner ) ) )
zutaten in weniger als drei rezepten erforderlich	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
was ist ein mittagessen rezept	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string meal ) ( string = ) en.meal.lunch ) )
zeige rezepte, die mehr als zwei küchen folgen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string > ) ( number 2 ) ) )
zeigen sie mir rezepte, deren zubereitung weniger zeit in anspruch nimmt als reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
welches rezept erfordert milch macht ein mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string requires ) ( string = ) en.ingredient.milk ) )
zeige mir rezepte, die nicht später als das milchreis-rezept veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
welche zutaten braucht milchreis?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) )
was ist die gesamtkochzeit des rezepts	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ) ) )
was ist ein rezept, das nicht im jahr 2004 veröffentlicht wurde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string ! = ) ( date 2004 -1 -1 ) ) )
was ist die verwendete milch oder spinat	( call SW.listValue ( call SW.concat en.ingredient.milk en.ingredient.spinach ) )
welches rezept hat die längste zutatenliste	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
was ist küche für milchreis	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) )
zeig mir rezepte für höchstens zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
zeigen sie mir rezepte, die für mehr als eine mahlzeit arbeiten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
welches rezept benötigt weniger als zwei zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
für welche mahlzeit ist reispudding oder quiche gemacht?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) ) )
wie lange dauert die zubereitung von milchreis?	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) )
zeig mir die am meisten benötigten zutaten in rezepten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
was ist die durchschnittliche vorbereitungszeit für ein rezept	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )
zeigen sie das rezept an, dessen zubereitung am längsten dauert	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )
was ist die durchschnittliche zubereitungszeit dieses rezepts?	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )
welche rezepte wurden bis 2004 oder 2010 veröffentlicht?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
was ist eine zutat in weniger als zwei rezepten gefunden	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
rezept, das zuerst gebucht	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )
welches rezept erfordert drei oder mehr zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
welches rezept buchungsdatum ist 2004 und erfordert milch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string requires ) ( string = ) en.ingredient.milk ) )
welche mahlzeit hat zwei oder mehr rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
zutat, die von der geringsten anzahl an rezepten benötigt wird	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
was ist eine zutat in einem rezept für milchreis oder quiche gefunden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) ) )
listen sie die rezepte zum mittag- oder abendessen auf	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( call SW.concat en.meal.lunch en.meal.dinner ) ) )
was rezepte braucht mehr zeit als milchreis vorzubereiten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
rezept mit garzeit nicht mehr als die von milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
welche rezepte fallen unter mehr als zwei küchen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string > ) ( number 2 ) ) )
finde eine mahlzeit ohne milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string ! = ) en.recipe.rice_pudding ) )
spinat oder milch	( call SW.listValue ( call SW.concat en.ingredient.milk en.ingredient.spinach ) )
was ist die garzeit von milchreis	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) )
zeig mir rezepte, die eine zutat erfordern	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
welches rezept benötigt die längste zeit für die zubereitung?	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )
was ist ein rezept aus mehr als zwei küchen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string > ) ( number 2 ) ) )
was ist die vorbereitungszeit für milchreis	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) )
hier finden sie alle rezepte, die nach 2004 veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
was sind die zutaten für das rezept aus dem jahr 2004?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
welche mahlzeit hat weniger als zwei rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
für welche mahlzeit gibt es die wenigsten rezepte	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
zeigen sie mir die vorbereitungszeit für milchreis	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) )
welche zutat steckt in weniger rezepten?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches rezept braucht weniger zeit zum kochen als milchreis zuzubereiten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
was ist die mittlere garzeit für das rezept	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ) ) )
zeige mir rezepte, die vor 2004 oder vor 2010 gepostet wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
zeig mir zutaten, die für milchreis nicht benötigt werden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string ! = ) en.recipe.rice_pudding ) )
welches rezept wurde im jahr 2004 nicht gebucht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string ! = ) ( date 2004 -1 -1 ) ) )
welches rezept wurde am buchungsdatum von milchreis gebucht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
zeige mir rezepte, die im jahr 2004 oder später veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
finden sie rezepte, die vor dem rezept für milchreis geschrieben wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
was ist das neueste rezept	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )
wie lange dauert die zubereitung von milchreis?	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) )
kochzeit des rezepts	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ) ) )
welches rezept ist das älteste	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )
welche art von küche ist milchreis	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) )
welche zutaten werden nur zum mittagessen verwendet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ) )
was ist ein rezept, das keine milch als zutat verwendet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string ! = ) en.ingredient.milk ) )
welches rezept erfordert die zutaten von milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) ) )
welche rezepte teilen mindestens zwei zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
rezepte anzeigen, deren veröffentlichungsdatum auf oder vor 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
zeig mir die gesamtzahl der rezepte	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
was ist die durchschnittliche garzeit für dieses gericht	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ) ) )
wann wurde das rezept für milchreis veröffentlicht?	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) )
welches rezept benötigt milch oder spinat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( call SW.concat en.ingredient.milk en.ingredient.spinach ) ) )
zeig mir rezept für eine mahlzeit für eine einzelne person	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
welche mahlzeit hat mehr als zwei rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welche rezepte brauchen weniger zeit für die zubereitung als für die zubereitung von milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
was ist die gesamtkochzeit des rezepts	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ) ) )
wie viele zutaten	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
finden sie ein rezept zum mittagessen, das mit milch zubereitet wird	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string meal ) ( string = ) en.meal.lunch ) )
welches rezept braucht die gleiche oder eine geringere zeit, um milchreis zuzubereiten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
was ist eine zutat in einem rezept, das im jahr 2004 veröffentlicht wurde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
zeige mir rezepte, die vor 2010 gepostet wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
zeig mir alle rezepte aus dem jahr 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
für welche mahlzeit ist das rezept, das milch als eine seiner zutaten hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ) )
welches rezept macht etwas zum mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string meal ) ( string = ) en.meal.lunch ) )
welches rezept kocht in kürzerer zeit als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
welches rezept benötigt weniger zeit für die zubereitung als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
wie lang ist die durchschnittliche vorbereitungszeit für das rezept?	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )
welches rezept wurde im jahr 2004 nicht veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string ! = ) ( date 2004 -1 -1 ) ) )
welches rezept ist für mehr als zwei mahlzeiten ausgelegt	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
welche mahlzeit ist für nur ein rezept	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches rezept hat milch als zutat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string requires ) ( string = ) en.ingredient.milk ) )
zeig mir rezepte mit der längsten kochzeit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )
zeigen sie mir rezepte, die milch oder spinat benötigen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( call SW.concat en.ingredient.milk en.ingredient.spinach ) ) )
zeigen sie mir rezepte, die eine kürzere zubereitungszeit haben als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
welches rezept dauert nicht länger als reispudding vorzubereiten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
welche rezepte haben mindestens 2 küchen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string >= ) ( number 2 ) ) )
welche rezepte brauchen milch?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) )
ein rezept, das weniger als zwei zutaten benötigt	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
was ist die vorbereitungszeit für dieses rezept	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )
zeig mir ein rezept für die geringste anzahl von mahlzeiten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
für welches gericht wird der milchreis verwendet?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) )
welche mahlzeit kann durch zwei rezepte gemacht werden	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
zeigen sie mir rezepte, deren garzeit der zubereitungszeit von milchreis entspricht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )
welches rezept kann weniger als zwei mahlzeiten machen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
zeigen sie mir rezepte mit vorbereitungszeiten, die länger sind als die kochzeit von milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
wie lange dauert die zubereitung von milchreis?	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) )
welches rezept macht die wenigsten arten von küche	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string cuisine ) ) )
welches rezept verwendet milch oder spinat als zutat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( call SW.concat en.ingredient.milk en.ingredient.spinach ) ) )
welche rezepte teilen die küche von milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) ) )
zeigen rezepte, die mindestens die vorbereitungszeit von milchreis benötigen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
welches rezept können sie in der gleichen zeit oder in kürzerer zeit zubereiten, als es zum kochen von milchreis erforderlich ist?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
zeigen sie mir zutaten für milchreis und quiche	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) ) )
nennen sie die zutat nach mindestens zwei rezepten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
finden sie rezepte, die vor 2004 oder 2010 veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
ein rezept, dessen zubereitung länger dauert als die zubereitungszeit für milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
das rezept ist für zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
welches rezept kocht für die gleiche oder weniger zeit als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
wie viel zeit wird benötigt, um dieses gericht zu kochen	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ) ) )
welches rezept enthält die meisten zutaten?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
welches rezept wurde vor reispudding rezept gepostet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
welches rezept wurde nach reispudding rezept gebucht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
welches rezept wurde im jahr 2004 veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
welches mittagsrezept benötigt milch?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string meal ) ( string = ) en.meal.lunch ) )
was ist ein rezept in zwei oder mehr küchen gefunden	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string >= ) ( number 2 ) ) )
rezept mit zwei küchen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string = ) ( number 2 ) ) )
welches rezept war das gleiche datum wie das milchreis rezept gebucht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) )
rezepte für mittag- oder abendessen	( call SW.listValue ( call SW.concat en.meal.lunch en.meal.dinner ) )
finde ein rezept, das bis 2004 gepostet wurde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
was erfordert das rezept aus dem jahr 2004?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
entweder 2004 oder 2010	( call SW.listValue ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) )
zeig mir die zutaten, die für die meisten rezepte benötigt werden	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
finde ein rezept für zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
welche mahlzeit hat die wenigsten rezepte	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welche rezepte haben zwei küchen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string = ) ( number 2 ) ) )
welches rezept ist für ein mittagessen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ) )
rezepte, die zur zubereitung die gleiche zeit benötigen wie milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )
zeig mir rezepte mit weniger als zwei zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
zeige mir rezepte aus dem jahr 2004, die milch verwenden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string requires ) ( string = ) en.ingredient.milk ) )
welche zutaten braucht milchreis nicht?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string ! = ) en.recipe.rice_pudding ) )
welches rezept zum mittagessen wurde im jahr 2004 veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string meal ) ( string = ) en.meal.lunch ) )
welches rezept hat weniger kochzeit wie milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
ein rezept für die wenigsten arten von mahlzeiten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
welches rezept erfordert weniger vorbereitungszeit als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
welche rezepte werden zur gleichen zeit wie milchreis gekocht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )
welches rezept hat die geringste anzahl von küchen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string cuisine ) ) )
zeig mir rezepte für die meisten küchen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string cuisine ) ) )
was ist die durchschnittliche garzeit für dieses rezept	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ) ) )
zeig mir ein rezept mit der gleichen vorbereitungszeit wie milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )
rezepte anzeigen, die am selben datum oder später als milchreis veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
welches rezept ist für die geringste anzahl von mahlzeiten gedacht	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
zeig mir rezept, das mindestens zwei küchen hat	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string >= ) ( number 2 ) ) )
ein rezept, das erst 2004 oder 2010 veröffentlicht wurde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
was rezept erfordert weniger als zwei zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
dieses rezept dauert länger als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
rezept von höchstens zwei küchen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string <= ) ( number 2 ) ) )
was rezept erfordert die wenigsten zutaten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
wann wurde milchreis rezept gebucht	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) )
welche rezepte garzeit ist größer als die von milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
zeigen sie mir zutaten, die für mindestens zwei rezepte erforderlich sind	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches rezept hat eine garzeit wie die von milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
welche rezepte können zwei mahlzeiten machen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
welche rezepte zubereitungszeit ist kürzer als die kochzeit von milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
welches rezept wurde im jahr 2004 veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
welches rezept fällt unter die wenigsten arten von küche	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string cuisine ) ) )
welche zutat wird von zwei rezepten verwendet	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches rezept für milch wurde im jahr 2004 veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string requires ) ( string = ) en.ingredient.milk ) )
welches rezept im jahr 2004 veröffentlicht macht ein mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string meal ) ( string = ) en.meal.lunch ) )
zutat von zwei rezepten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welche mahlzeit hat zwei oder weniger rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welche mahlzeit erfordert keinen milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string ! = ) en.recipe.rice_pudding ) )
welche zutat wird in weniger als zwei rezepten benötigt?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
zeig mir die zutaten für milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) )
welche lebensmittel werden benötigt, um milchreis zuzubereiten?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) )
welches rezept wurde am frühesten gebucht	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )
was ist die durchschnittliche zeit für die zubereitung des gerichts	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ) ) )
welches rezept benötigt mindestens zwei zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
welche rezepte können schneller zubereitet werden als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
welche mahlzeit hat zwei oder mehr rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welche rezepte haben drei oder mehr küche	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string > ) ( number 2 ) ) )
was ist die kochzeit für milchreis	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) )
was ist die gesamtzahl der rezepte	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
was ist die übliche zeit, um das rezept zu beenden	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )
welche zutat wird für die geringste menge an rezepten verwendet?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches rezept ist für eine mahlzeit zu zweit	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welche rezepte nicht nach milch verlangen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string ! = ) en.ingredient.milk ) )
welche mahlzeit hat über zwei rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
rezept von weniger als zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
gibt es irgendwelche rezepte, die 2004 zweimal veröffentlicht wurden?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
zu welcher küche gehört reispudding?	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) )
welche rezepte unter weniger als drei küchen fallen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string <= ) ( number 2 ) ) )
welche rezepte wurden nach 2004 oder 2010 veröffentlicht?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
finde eine mahlzeit mit zwei rezepten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
rezepte bis 2004 gepostet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
finde rezepte, die nach 2004 veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
rezept in der vorbereitungszeit von milchreis oder mehr gekocht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
zeig mir das rezept mit der kürzesten garzeit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )
was ist ein rezept mit milch oder spinat als zutat	( call SW.listValue ( call SW.concat en.ingredient.milk en.ingredient.spinach ) )
welches rezept hat eine küche mit milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) ) )
zeigen sie mir rezepte, die weniger als zwei zutaten benötigen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
zeige mir rezepte, die nach 2004 veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
welche zutat wird in mehr als einem rezept benötigt?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
ein rezept, dessen zubereitung mindestens so lange dauert wie bei milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
welches rezept braucht die meiste zeit zum kochen	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )
welches rezept braucht mehr zeit als milchreiszubereitung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
zeig mir rezepte, die milch erfordern	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string requires ) ( string = ) en.ingredient.milk ) )
zeige mir rezepte zum mittagessen, die 2004 veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string meal ) ( string = ) en.meal.lunch ) )
welche rezepte kochzeit ist am größten die kochzeit von milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
nach welchem rezept werden höchstens zwei zutaten verwendet	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
welche mahlzeit hat quiche und milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) ) )
rezept mit buchungsdatum nicht nach buchungsdatum des milchreises	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
zeig mir ein rezept, das genauso viel zeit in anspruch nimmt wie milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )
rezept für nur eine mahlzeit	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
welche zutat ist in milchreis gefunden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) ) )
finden sie ein rezept, das milch für die zubereitung benötigt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string requires ) ( string = ) en.ingredient.milk ) )
welche rezepte erfordern das zur selben zeit oder als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
welche zutaten brauchen die rezepte für das mittagessen?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ) )
für welche mahlzeit wird milchreis verwendet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) )
welche rezepte sind zum mittag- oder abendessen gedacht?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( call SW.concat en.meal.lunch en.meal.dinner ) ) )
welche rezepte erfordern nicht mehr als zwei zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
wie viele rezepte	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
zeig mir ein rezept, das nur zwei zutaten benötigt	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
zeigen sie mir die zutaten, die für rezepte benötigt werden, die milch benötigen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ) )
was rezepte zubereitungszeit ist nicht mehr als die kochzeit von milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
zeige mir rezepte, die zwei zutaten oder weniger enthalten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
welche rezepte brauchen milch und ist im jahr 2004 gebucht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
zeig mir rezepte zum mittag- oder abendessen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( call SW.concat en.meal.lunch en.meal.dinner ) ) )
nennen sie die zutat in den meisten rezepten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
zeigen sie mir rezepte, die die kochzeit von milchreis erfordern	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )
zeige mir rezepte aus den jahren 2004 und 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) )
rezept in mehr zeit als kochzeit von milchreis vorbereitet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
die garzeit dieses rezepts entspricht der von milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
zeigen sie mir rezepte zum mittagessen, die milch brauchen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string meal ) ( string = ) en.meal.lunch ) )
welche mahlzeiten haben zwei rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
was sind die rezepte, die mit milch gemacht werden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) )
welches rezept wird für die meisten mahlzeiten verwendet	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
wie lange braucht der milchreis zum kochen?	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) )
finden sie rezepte aus den jahren 2004 oder 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) )
zeig mir mahlzeiten mit weniger als zwei rezepten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
ein rezept, das die wenigsten zutaten benötigt	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
welches rezept wurde vor oder am selben tag wie milchreis veröffentlicht?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
welche mahlzeit kann nach dem rezept aus dem jahr 2004 zubereitet werden?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
zeige mir rezepte für das mittagessen, die 2004 veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
zeige mir rezepte, die nicht früher als 2004 veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
zeigen sie mir rezepte, die genauso lange brauchen, um sich als milchreis vorzubereiten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )
welche mahlzeit hat maximale rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches rezept im jahr 2004 veröffentlicht wurde, setzt milch als zutat voraus	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string requires ) ( string = ) en.ingredient.milk ) )
welches rezept braucht mehr als zwei zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
welche rezepte sind für weniger als zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
zeig mir rezepte mit der zutat milch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ) )
zeig mir rezepte mit zwei zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string = ) ( number 2 ) ) )
zutat nach rezept, dessen buchungsdatum 2004 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
wann wurde das milchreis-rezept veröffentlicht?	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) )
welche rezepte erfordern mindestens zwei zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
welche rezepte haben eine garzeit, die mindestens so lang ist wie die zubereitungszeit von milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
welche rezepte brauchen länger zum kochen als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
was für mahlzeiten sind rezepte für das mittagessen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ) )
welches rezept verwendet milch als zutat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) )
welche rezeptzutat benötigt dieses mittagessen?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ) )
wie viele rezepte gibt es insgesamt?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches rezept nimmt die maximale vorbereitungszeit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )
welches rezept hat die meisten küche	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string cuisine ) ) )
zeigen sie mir rezepte, deren zubereitung genauso lange dauert wie die zubereitung von milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )
für welche mahlzeit ist milchreis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) )
für welche mahlzeit ist milchreis oder quiche	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) ) )
zeig mir rezepte mit einer garzeit, die dem milchreis entspricht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )
zeig mir rezepte für mehr als zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
zeig mir rezepte aus der gleichen küche wie milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) ) )
welche zutaten gehören zum milchreis?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) )
welches rezept braucht spinat oder milch für die zubereitung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( call SW.concat en.ingredient.milk en.ingredient.spinach ) ) )
rezepte für das mittagessen wurden 2004 veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
zeige das erste gepostete rezept	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )
welches rezept datum ist weniger als das von milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
zeige rezepte, die vor dem milchreis gepostet wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
zeig mir zwei rezepte für eine mahlzeit	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
was ist die gesamtzeit für die zubereitung des gerichts	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )
zeigen sie mir rezepte, die kochzeit erfordern, die mehr als milchreis ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
welches rezept ist nach dem buchungsdatum von milchreis gebucht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
welches rezept wurde zuletzt gepostet	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )
welches rezept hat die gleiche garzeit von milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )
was rezeptvorbereitungszeit ist, ist mindestens die des milchreises	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
rezepte für milchreis oder quice	( call SW.listValue ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) )
welche rezepte haben die meisten mahlzeiten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
nennen sie zutaten, die für milchreis nicht benötigt werden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string ! = ) en.recipe.rice_pudding ) )
nennen sie das rezept mit einer garzeit, die mindestens der garzeit von milchreis entspricht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
zeig mir alle rezepte die nach 2010 gepostet wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
zeigen sie mir rezepte, die zwei küchen betreffen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string = ) ( number 2 ) ) )
dieses rezept hat eine vorbereitungszeit, die nicht länger ist als die vorbereitungszeit für milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
zeig mir rezepte, die milch als zutat haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) )
was ist ein rezept, das nicht mehr zeit zum kochen braucht als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
welche zutat wird am häufigsten verwendet?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
was ist eine andere mahlzeit als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string ! = ) en.recipe.rice_pudding ) )
das ist das lebensmittel, das in zwei rezepten benötigt wird	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches rezept erfordert die gleiche zutat wie milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) ) )
welches rezept wurde im jahr 2004 veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
was ist eine zutat in milchreis gefunden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) )
welches ist das letzte veröffentlichte rezept	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )
zeigen sie mir die rezepte für mahlzeiten, einschließlich milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) ) )
was rezepte kochzeit ist die vorbereitungszeit von milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )
welches rezept macht zwei arten von küche	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string = ) ( number 2 ) ) )
welches rezept hat zwei oder mehr arten von küche	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string >= ) ( number 2 ) ) )
was ist die garzeit von milchreis	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) )
welche zutat wird in den wenigsten rezepten verwendet?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
zeige mir rezepte mit einer zubereitungszeit, die gleich oder länger ist als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
was rezept über zwei zutaten erfordert	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
welches rezept wurde am selben tag wie das von milchreis veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) )
wie lange dauert die zubereitung des rezepts?	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )
welche zutat ist in als zwei rezepten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
nennen sie die zutaten, die nur in ein oder zwei rezepten verwendet werden	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches rezept hat über zwei arten von küche	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string > ) ( number 2 ) ) )
finden sie ein rezept, das eine längere garzeit als milchreis hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
welches rezept braucht milch und ist zum mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string meal ) ( string = ) en.meal.lunch ) )
zu welchen mahlzeiten passt der milchreis nicht?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string ! = ) en.recipe.rice_pudding ) )
welches rezept hat eine kochzeit weniger als die kochzeit von milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
zeigen sie mir das rezept mit der größten vorbereitungszeit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )
welches rezept war am frühesten gebucht	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )
was ist ein rezept, das für mehr als zwei verschiedene mahlzeiten ist	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
hier finden sie die rezepte für das mittagessen aus dem jahr 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string meal ) ( string = ) en.meal.lunch ) )
ein rezept mit milch als zutat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ) )
welches rezept wurde vor 2004 veröffentlicht?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
welche zutat ist in nur einem rezept erforderlich	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welche zutat wird für milchreis oder quiche benötigt?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) ) )
welche zutaten werden für die rezepte benötigt, die im jahr 2004 veröffentlicht wurden?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
wie viele mahlzeiten haben wir jeden tag?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
was ist die durchschnittliche vorbereitungszeit eines rezepts	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )
zeig mir rezepte, die vor dem milchreis gepostet wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
zeige mir rezepte aus dem jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
was sind die rezepte für das mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string meal ) ( string = ) en.meal.lunch ) )
welches rezept buchungsdatum ist 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
welches rezept zum mittagessen verwendet milch als zutat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string requires ) ( string = ) en.ingredient.milk ) )
wie lange braucht dieses rezept, um zu kochen?	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ) ) )
finden sie ein rezept, das zum mittag- oder abendessen geeignet ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( call SW.concat en.meal.lunch en.meal.dinner ) ) )
welche mahlzeit ist das rezept im jahr 2004 veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
welches rezept hat die geringste vorbereitungszeit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )
welches rezeptbuchungsdatum ist das größte im jahr 2004?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
für welche mahlzeit die meisten rezepte gemacht sind	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
rezept von mindestens zwei küche	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string >= ) ( number 2 ) ) )
welches rezept erfordert die wenigsten zutaten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
was ist die küche von milchreis	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) )
rezepte mit nur zwei zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
nennen sie eine zutat, die für zwei verschiedene rezepte benötigt wird	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches rezept ist in kürzerer zeit als milchreis gekocht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
zeigen rezepte mit milch als zutat und ist im jahr 2004 veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string requires ) ( string = ) en.ingredient.milk ) )
welches rezept gehört zu weniger küchen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string cuisine ) ) )
welche zutat wird für weniger als zwei rezepte benötigt?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
rezept der anzahl der zutaten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
was reispudding oder quiche bevorzugen	( call SW.listValue ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) )
welches rezept hat die geringste vorbereitungszeit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )
ein rezept, das aus zwei oder mehr zutaten besteht	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
mahlzeit mit mehr als zwei rezepten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
finde ein rezept, das die maximale anzahl von lebensmitteln benötigt	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
finden sie rezepte aus dem jahr 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
welche rezepte in kürzerer zeit zubereitet werden tan rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
welche zeit kann in der gleichen zeit wie milchreis vorbereitet werden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )
zeige mir rezepte mit der meisten vorbereitungszeit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )
welche mahlzeiten haben rezepte, die milch verwenden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ) )
für welche mahlzeit gibt es mindestens zwei rezepte?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
zeige mir rezepte für das mittagessen, die 2004 veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
zeige rezepte, deren buchungsdatum nicht 2004 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string ! = ) ( date 2004 -1 -1 ) ) )
finde rezepte, die vor 2004 gepostet wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
zeig mir rezepte mit den wenigsten zutaten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
welches rezept braucht mindestens so lange für die zubereitung wie milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
zeig mir milchfreie rezepte	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string ! = ) en.ingredient.milk ) )
zeigen sie mir rezepte, die die gleiche oder eine längere zubereitungszeit haben als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
was ist eine mahlzeit mit der meisten anzahl von rezepten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches rezept ist ein rezept für das mittagessen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ) )
rezepte gesamtvorbereitungszeit	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )
zeig mir rezepte für die meisten mahlzeiten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
rezepte, die die gleiche oder mehr zeit benötigen, um als milchreis vorzubereiten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
welche zutat wird in zwei oder mehr rezepten benötigt?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
was ist die durchschnittliche vorbereitungszeit für das rezept	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )
welches rezept wurde während oder vor 2004 veröffentlicht?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
zeig mir rezepte nicht zum mittagessen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string ! = ) en.meal.lunch ) )
welche rezepte wurden vor milchreis geschrieben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
zeige mir rezepte mit veröffentlichungsdaten von 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
was rezept erfordert zwei zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
zeig mir rezepte, die mehr als zwei zutaten erfordern	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
welches rezept ist für nicht mehr als zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
dieses rezept hat eine längere garzeit als die vorbereitungszeit für milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
rezepte zeigen, die weniger zubereitung erfordern als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
welches rezept braucht keine milch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string ! = ) en.ingredient.milk ) )
welches rezept braucht am wenigsten zutaten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
was ist das rezept für eine mahlzeit	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
welche rezepte zubereitungszeit ist größer als die von milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
erzählen rezepte mit milch zum mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string requires ) ( string = ) en.ingredient.milk ) )
nennen sie das rezept, das zum mittagessen zubereitet wird	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string meal ) ( string = ) en.meal.lunch ) )
zeigen sie mir das rezept mit den meisten anforderungen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
zeig mir rezepte für milchreis oder quiche	( call SW.listValue ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) )
welches rezept kann für mindestens zwei mahlzeiten verwendet werden	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
zeige mir rezepte aus dem jahr 2004, die milch erfordern	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string requires ) ( string = ) en.ingredient.milk ) )
welche zutat wird von einem rezept aus dem jahr 2004 verlangt?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
wie viele mahlzeiten gibt es insgesamt?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
welches rezept hat nicht weniger als zwei küchen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string >= ) ( number 2 ) ) )
welches rezept benötigt die geringste garzeit?	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )
welche rezepte zubereitungszeit ist das gleiche wie milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )
welche rezepte brauchen länger, um zu kochen, als reispudding zuzubereiten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
welches rezept braucht mindestens genauso viel zeit zum kochen wie milchreis?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
zeig mir rezepte, die mindestens drei zutaten benötigen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
rezepte, die weniger oder weniger zeit benötigen als die zeit, die für die zubereitung von milchreis benötigt wird	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
zeig mir rezepte, die ein oder zwei küchen folgen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string <= ) ( number 2 ) ) )
zeigen sie mir rezepte, die weniger zeit zum kochen benötigen als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
zeige mir rezepte, die vor dem posten für milchreis gepostet wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
welches rezeptbuchungsdatum ist höchstens 2004 oder 2010?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
was ist das buchungsdatum für milchreis	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) )
welches rezeptbuchungsdatum ist größer als das des milchreises?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
zeig mir rezepte mit der am wenigsten vertretenen küche	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string cuisine ) ) )
was ist die küche von milchreis	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) )
welches rezept benötigt keine milch?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string ! = ) en.ingredient.milk ) )
welches rezept dauert länger als milchreis zuzubereiten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
hier finden sie ein rezept für ein mittagessen aus dem jahr 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string meal ) ( string = ) en.meal.lunch ) )
was ist die durchschnittliche zubereitungszeit für alle rezepte	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )
für welche mahlzeit ist das rezept milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) ) )
zeige mir rezepte aus den jahren 2004 und 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) )
welches rezept benötigt weniger als zwei lebensmittel für die zubereitung	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
für welches gericht sind zwei rezepte vorgesehen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
mahlzeit als milchreis wird nicht eingenommen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string ! = ) en.recipe.rice_pudding ) )
zeigen sie mir rezepte, die länger zum kochen brauchen als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
welches rezept hat die kleinste vorbereitungszeit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )
was ist die garzeit von milchreis	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) )
nennen sie eine zutat, die für mehr als zwei rezepte erforderlich ist	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welche zutaten werden am wenigsten in rezepten verwendet	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welche zutaten werden von mindestens zwei rezepten verwendet?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
rezepte garzeit	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ) ) )
welches rezept fällt unter zwei küchen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string = ) ( number 2 ) ) )
welche rezepte haben die gleiche kochzeit wie milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )
zeig mir rezepte, die nicht zum mittagessen genommen werden können	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string ! = ) en.meal.lunch ) )
welches rezept hat ein buchungsdatum kleiner als 2004 oder 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
mahlzeit als milchreis oder quiche hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) ) )
welche rezepte gibt es zum mittag- oder abendessen?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( call SW.concat en.meal.lunch en.meal.dinner ) ) )
zeigen sie mir rezepte mit kochzeiten, die länger sind als die kochzeit von milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
zeig mir rezepte für milchreisgerichte	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) ) )
welche zutat ist nicht erforderlich, um milchreis zu machen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string ! = ) en.recipe.rice_pudding ) )
zeig mir rezepte mit zwei oder weniger zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
zeige mir rezepte mit buchungsdatum vor 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
zeig mir die durchschnittliche garzeit für alle rezepte	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ) ) )
zeige rezepte, die höchstens als milchreiszubereitung benötigt werden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
welches rezept ist am schnellsten gekocht	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )
wie viele zutaten werden benötigt?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
welches rezept hat die gleiche kochzeit wie milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )
für welche mahlzeit wird reispudding gegessen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) )
welche zutat wird von vielen rezepten benötigt?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches rezept hat eine kürzere garzeit als reispudding?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
für welche rezepte im jahr 2004 wird milch benötigt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
was ist ein rezept mit einer vorbereitungszeit weniger als die kochzeit von milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
zeigen rezepte, die höchstens zwei küchen haben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string <= ) ( number 2 ) ) )
zeig mir rezepte mit der geringsten kochzeit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )
zutaten in milchreis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) )
was ist die garzeit für milchreis	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) )
zeige mir rezepte, die zum selben datum wie milchreis gepostet wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
ein rezept für milchreis	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) )
für welche mahlzeit wird reispudding verwendet?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) )
rezepte ohne milch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string ! = ) en.ingredient.milk ) )
nennen sie zutaten, die in drei oder mehr rezepten benötigt werden	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches rezeptbuchungsdatum ist in 2004 oder 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) )
welche rezepte brauchen zwei zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
zeige mir rezepte, die nach 2004 oder nach 2010 veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
was rezept ist nicht mittagessen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string ! = ) en.meal.lunch ) )
wie lange dauert es, reispudding zuzubereiten?	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) )
zeig mir ein rezept, das länger zum kochen braucht als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
welches rezept benötigt die niedrigste garzeit?	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )
rezept mit mehr als zwei küchen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string > ) ( number 2 ) ) )
nennen sie das rezept für das mit milch zubereitete mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string requires ) ( string = ) en.ingredient.milk ) )
zeige rezepte mit der maximalen anzahl von küchen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string cuisine ) ) )
was rezepte mindestens zwei zutaten erfordern	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
das ist die am häufigsten verwendete zutat in rezepten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
was ist das buchungsdatum von milchreis	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) )
welches rezept hat die geringste anzahl von küche	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string cuisine ) ) )
für welche mahlzeit ist das rezept mit datum im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
dieses rezept benötigt weniger zeit für die zubereitung als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
eine zutat, die nach mindestens zwei rezepten erforderlich ist	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
zeige rezepte, die keine milch enthalten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string ! = ) en.ingredient.milk ) )
wie lange dauert es, ein rezept vorzubereiten?	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )
welches rezept dauert am längsten zuzubereiten	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )
wie lange dauert die zubereitung des rezepts?	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )
zeig mir das älteste rezept	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )
finden sie essensrezepte zum mittagessen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ) )
was rezept kocht weniger zeit als milchreis zuzubereiten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
welche mahlzeit hat die meisten rezepte	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches rezept braucht die kürzeste zeit zum kochen	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )
zeigen sie mir rezepte mit einer vorbereitungszeit, die länger ist als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
welcher tag war reispudding gebucht	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) )
welche mahlzeit hat zwei oder mehr rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welche zutaten werden für das mittagessen rezepte benötigt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ) )
was ist die gesamtvorbereitungszeit aller rezepte	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )
finden sie einige rezepte zum mittagessen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) )
welches rezept wurde im jahr 2004 veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
welches rezept wurde nicht später als der milchreis rezept veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
wie viele rezepte verwenden mehr als zwei zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
welches rezept hat die kürzeste vorbereitungszeit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )
wie viele mahlzeiten gibt es	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
rezepte mit oder nach dem posten von milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
was ist die meiste zutat, die dieses rezept benötigt	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches rezept hat die garzeit von milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
zeigen sie mir rezepte, die eine zutat aus milchreis erfordern	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) ) )
was ist eine zutat in nicht mehr als zwei rezepten gefunden	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
zeigen sie mir rezepte mit einer garzeit, die der vorbereitungszeit für milchreis entspricht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )
was ist die gesamte vorbereitungszeit für die rezepte	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )
welche rezepte erfordern die gleichen zutaten wie milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) ) )
welche rezepte brauchen milch oder spinat?	( call SW.listValue ( call SW.concat en.ingredient.milk en.ingredient.spinach ) )
welche mahlzeit hat weniger als zwei rezepte, um es zu machen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welche rezepte erfordern die geringste menge an zutaten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
dieses rezept benötigt weniger garzeit als milchreiszubereitung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
welches rezeptbuchungsdatum ist größer als 2004 oder 2010?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
welches rezept benötigt die längste vorbereitungszeit?	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )
welches rezept hat die größte kochzeit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )
welches rezept gehört zur küche des milchreises	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) ) )
zeig mir rezepte ohne milch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string ! = ) en.ingredient.milk ) )
welches rezept hat eine kochzeit gleich der vorbereitungszeit von milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )
finden sie die rezepte der vielfältigen küche	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string >= ) ( number 2 ) ) )
zeige mir zutaten, die für mehr als zwei rezepte benötigt werden	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welche rezepte brauchen drei oder mehr zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
welche rezepte wurden nach 2004 veröffentlicht?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
rezepte für weniger als drei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
zeige rezepte, die zwischen 2004 und 2010 veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
zeigen sie mir die zutaten, die für die rezepte zum mittagessen benötigt werden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ) )
zeigen rezepte, deren garzeit der von milchreis entspricht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )
was sind die rezepte in 2004 oder 2010 veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
welche mahlzeit hat die wenigsten rezepte gewidmet	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches rezept ist das neueste?	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )
rezepte mit mehr vorbereitungszeit als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
welches rezept wurde im jahr 2004 veröffentlicht und braucht milch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string requires ) ( string = ) en.ingredient.milk ) )
hier finden sie rezepte aus dem jahr 2005	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
zeige mir rezepte, die noch am selben tag wie milchreis oder früher veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
welche rezepte benötigen milch?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ) )
was ist eine zutat in mehr als zwei rezepten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches rezept wurde in 2004 oder 2010 veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
für dieses rezept sind mindestens zwei zutaten erforderlich	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
was ist eine zutat nicht in milchreis gefunden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string ! = ) en.recipe.rice_pudding ) )
was ist die durchschnittliche kochzeit des rezepts	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ) ) )
zeige mir rezepte, die in oder nach 2004 oder in oder nach 2010 veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
zeig mir rezepte für mindestens zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
welche zutaten brauchen die rezepte von 2004?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
nennen sie die zutat, die in milchreis nicht benötigt wird	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string ! = ) en.recipe.rice_pudding ) )
was ist ein rezept aus der gleichen küche wie milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) ) )
welche rezepte wurden veröffentlicht, als milchreis veröffentlicht wurde?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
welche rezepte im jahr 2004 veröffentlicht werden, erfordert milch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
was für eine mahlzeit ist ein rezept, für das milch benötigt wird	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ) )
zeigen sie mir rezepte, deren zubereitung so lange dauert wie die von milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
welches rezept wurde am selben tag wie milchreis veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) )
welche rezepte sind für maximal zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
zeige mir rezepte, die nach 2004 veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
welches rezeptbuchungsdatum ist größer als 2004?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
finden sie die rezepte für die gleiche küche wie milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) ) )
was für eine küche ist milchreis?	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) )
welche zutat wird nur in einem einzigen rezept verwendet	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches rezept wurde nach 2004 veröffentlicht?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
rezepte gebucht, bis milchreis gebucht wird	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
zeige mir rezepte von 2004 und früher	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
finde ein rezept für eine mahlzeit, das im jahr 2004 veröffentlicht wurde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
zeigen sie mir rezepte, deren zubereitungszeit am meisten der kochzeit von milchreis entspricht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
zeig mir mahlzeiten mit den wenigsten rezepten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
wie viele zutaten werden verwendet?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
zeigen sie mir rezepte, deren zubereitungszeit unter der kochzeit von milchreis liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
welches rezept wurde vor milchreis geschrieben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
wann wurde milchreis gebucht	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) )
rezepte für die geringste anzahl von mahlzeiten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
zeig mir rezepte für weniger als zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
was ist ein rezept, dessen garzeit mit milchreis identisch ist?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )
zeigen rezepte aus dem jahr 2004 und hat milch als eine seiner zutaten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
welches rezept hat die kürzeste garzeit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )
mahlzeit mit milchrezept	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ) )
welches rezept kann frühestens zubereitet werden	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )
ein rezept für ein mittagessen, das 2004 veröffentlicht wurde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
welche rezepte zum mittagessen enthalten milch?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string meal ) ( string = ) en.meal.lunch ) )
zeigen sie mir mahlzeiten einschließlich milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) )
dieses rezept wird in der gleichen zeit wie der milchreis zubereitet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
liste rezepte, die milch benötigen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ) )
welches rezept wurde spätestens 2004 oder 2010 veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
rezept für drei oder mehr mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
welche zutat ist in über zwei rezepten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welche rezepte so lange dauern wie reispudding zubereiten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
finde zwei essensrezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches rezept hat zwei oder weniger arten von küche	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string <= ) ( number 2 ) ) )
rezept benötigt weniger als drei zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
welches rezept dauert länger als milchreis zuzubereiten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
zeige mir rezepte, die später als 2004 veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
zeigen sie mir rezepte mit einer vorbereitungszeit, die der kochzeit von milchreis entspricht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )
nach rezepten suchen, die nach 2004 oder 2010 veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
zeigen sie mir rezepte, die die gleiche vorbereitungszeit haben wie milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )
zeige mir das rezept für milch aus dem jahr 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
rezepte veröffentlicht nach 2003	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
quiche oder milchreis	( call SW.listValue ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) )
zeig mir rezepte, die zwei oder mehr küchen folgen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string >= ) ( number 2 ) ) )
zeigen sie mir rezepte, deren zubereitungszeit kürzer ist als die kochzeit von milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
welche rezepte haben die gleiche oder längere zubereitungszeit als milchreis?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
welche anderen zutaten benötigen rezepte, die milch verwenden?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ) )
welches rezept wird in den meisten küchen verwendet?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string cuisine ) ) )
welches rezept dauert am längsten zuzubereiten	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )
zeig mir rezepte zum mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string meal ) ( string = ) en.meal.lunch ) )
zeig mir mahlzeiten mit mehr als zwei rezepten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welche rezepte haben höchstens zwei küchen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string <= ) ( number 2 ) ) )
zeig mir rezepte mit zwei zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
ein rezept, das nach 2004 oder 2010 veröffentlicht wurde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
zeig mir zutaten, die für höchstens zwei rezepte benötigt werden	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
was ist eine mahlzeit mit einem rezept aus dem jahr 2004?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
rezepte, deren zubereitung weniger zeit in anspruch nimmt als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
finde mir alle rezepte die milch benötigen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) )
welche rezepte wurden im jahr 2004 zum mittagessen veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
was ist ein rezept, das mindestens so lange dauert wie milchreis zu machen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
welches rezept wurde zuletzt gepostet	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )
was ist ein rezept, das spätestens 2004 veröffentlicht wurde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
wie viele zutaten insgesamt in allen rezepten verwendet werden	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
für die zubereitung dieses rezepts wird am wenigsten zeit benötigt	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )
welches rezept erfordert entweder milch oder spinat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( call SW.concat en.ingredient.milk en.ingredient.spinach ) ) )
welche zutat wird von den meisten rezepten verlangt?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches rezept ist schneller als milchreis gekocht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
zeig mir mahlzeiten mit den meisten rezepten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
zeig mir mahlzeiten mit mindestens zwei rezepten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
finden sie rezepte, die für mehr als zwei mahlzeiten verwendet werden können	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
rezepte veröffentlicht vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
zeigen rezepte zum mittag- oder abendessen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( call SW.concat en.meal.lunch en.meal.dinner ) ) )
was ist eine zutat in einem mittagessen rezept gefunden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ) )
welche rezepte wurden bis 2004 gepostet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
was die kochzeit der rezepte ist, ist die des milchreises am niedrigsten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
welches rezept wurde vor 2010 gepostet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
welches rezept erfordert die höchste anzahl von zutaten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
dieses rezept benötigt mehr als zwei zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
welche rezepte erfordern ein oder zwei zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
welche rezepte erfordern höchstens zwei zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
rezept, dessen buchungsdatum mindestens das buchungsdatum für milchreis ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
welches rezept kann weniger als zwei arten von küche machen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string < ) ( number 2 ) ) )
welche rezepte wurden zur gleichen zeit wie milchreis geschrieben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) )
welche zutaten werden in zwei rezepten benötigt?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welche rezepte haben weniger als zwei küchen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string < ) ( number 2 ) ) )
welche rezepte garzeit ist kürzer als die zubereitungszeit von milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
welches rezept kann für zwei oder mehr mahlzeiten verwendet werden	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
zubereitungszeit des rezepts nicht mehr als die des milchreises	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
welche rezepte brauchen mehr zeit für die zubereitung als milchreis?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
welche rezepte haben eine vorbereitungszeit so lange wie die kochzeit von milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )
was ist ein rezept mit den meisten zutaten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string cuisine ) ) )
welche zutaten werden in milchreis oder quiche verwendet?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) ) )
zeigen sie mir die zutaten, die für die 2004 veröffentlichten rezepte benötigt werden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
welches rezept dauert am längsten zu kochen	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )
welches rezept kochen sie weniger zeit als milchreis?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
welches rezept dauert genauso lange oder kürzer als milchreis, um es zuzubereiten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
zutaten für mittagsrezepte anzeigen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ) )
wie viele mahlzeiten macht das?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
zeigen sie mir rezepte mit einer garzeit, die kürzer als die vorbereitungszeit für milchreis ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
zeigen sie mir rezepte, die kürzere garzeiten haben als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
welches datum für die veröffentlichung von rezepten ist im jahr 2004 und welche zutaten werden dafür benötigt?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
welche rezepte benötigen milch und sind zum mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string requires ) ( string = ) en.ingredient.milk ) )
welches rezept wird in der vorbereitungszeit von milchreis oder früher zubereitet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
zeigen sie mir mahlzeiten für einen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
zeige mir rezepte, die in oder vor 2004 oder in oder vor 2010 veröffentlicht wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
was für eine mahlzeit ist milchreis oder quiche	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) ) )
zeigen sie mir rezepte, die unter die gleiche küche fallen wie milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) ) )
ist das rezept für mittag- oder abendessen	( call SW.listValue ( call SW.concat en.meal.lunch en.meal.dinner ) )
rezepte für zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
hotel mit 3 sternen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
welche küche wird von den wenigsten restaurants serviert	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string cuisine ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
listen sie alle restaurants auf, die entweder thailändisch oder italienisch sind	( call SW.listValue ( call SW.concat en.cuisine.thai en.cuisine.italian ) )
restaurant, dessen küche thailändisch ist und das gut für kinder ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string kids ) ) )
welches restaurant eine preisbewertung größer oder gleich dem thailändischen cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )
welche nachbarschaften haben restaurants, die im freien dienen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ) )
welche kulinarischen möglichkeiten gibt es unter den kinderfreundlichen restaurants?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ) )
welches drei-sterne-restaurant verfügt über sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
das 3-sterne-restaurant ist gut für kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
welches restaurant hat 3 oder 2 menüpunkte	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )
restaurants in midtown west, die thailändisches essen servieren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
thai-restaurants, die zum mitnehmen haben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string takeout ) ) )
restaurant in midtown west, die liefern	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string delivery ) ) )
welches restaurant nimmt reservierungen und hat zum mitnehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string takeout ) ) )
was ist die durchschnittliche sternebewertung?	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ) ) )
ein restaurant, das mindestens zwei sterne hat und zum mitnehmen ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
welche nachbarschaft hat die meisten thailändischen restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ) )
welches 3-sterne-restaurant hat kellner-service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
toller ort für gruppen und reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string groups ) ) )
was 2-dollar-zeichen restaurant nimmt kreditkarte	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string credit ) ) )
küche, die wie ein thailändisches cafe oder eine pizzeria juno ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno ) ) )
welche thailändischen restaurants nehmen reservierungen entgegen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string reserve ) ) )
welche mahlzeit serviert ein thailändisches café nicht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string ! = ) en.restaurant.thai_cafe ) )
restaurants höher bewertet als thailändisches café	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )
küche, die küche des restaurants ist, dessen nachbarschaft midtown west ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )
welches restaurant serviert zwei küchen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( number 2 ) ) )
wie viele restaurants gibt es insgesamt?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
listen sie alle restaurants auf, die take away und lieferservice anbieten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string delivery ) ) )
in diesem restaurant kann man eine ziemlich preiswerte thailändische küche kaufen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
thai-restaurants mit 3 sternen bewertet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
welche restaurants haben eine 3-sterne-bewertung und 2-dollar-preis-bewertung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
welches restaurant ist gut für gruppen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string groups ) ) )
was 3-sterne-restaurant bietet lieferung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
in welchen restaurants stehen mehr als zwei mahlzeiten auf der speisekarte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
3-sterne-restaurant, das reservierungen akzeptiert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string reserve ) ) )
welche restaurants in midtown west liefern	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string delivery ) ) )
ein gruppenfreundliches thailändisches restaurant	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
restaurant, dessen nachbarschaft midtown west ist und das kreditkarten akzeptiert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string credit ) ) )
restaurant in der gegend, das ein 2-dollar-zeichen hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ) )
nachbarschaft, die nachbarschaft des restaurants ist, dessen küche thailändisch ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ) )
welche restaurants haben höhere preisklassen als zwei oder drei dollar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )
restaurants, die gut für kinder sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string kids ) ) )
listen sie alle restaurants mit 3 oder 5 sternen auf	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )
welche restaurants servieren mittagessen und haben einen essbereich im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string meals ) ( string = ) en.food.lunch ) )
ein restaurant mit kellnerservice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string waiter ) ) )
restaurant mit kellnern	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) )
welches restaurant nimmt kreditkarten und ist kinderfreundlich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string kids ) ) )
was ist die sternebewertung des thailändischen cafés	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) )
welche restaurants haben sitzgelegenheiten im freien und akzeptieren kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string credit ) ) )
restaurant, dessen preisklasse 2-dollar-zeichen ist und das gut für kinder ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string kids ) ) )
restaurants mit einem preis von mehr als 3 dollar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )
welches restaurant ist gut für kinder und bietet sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string kids ) ) )
das restaurant in der innenstadt serviert thailändisches essen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
welche restaurants bieten kellner-service	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) )
liste alle 3 sterne bewerteten thailändischen restaurants auf	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
welches restaurant bietet sitzgelegenheiten im freien und zum mitnehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string outdoor ) ) )
restaurants mit mittagessen und nimmt reservierungen entgegen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string reserve ) ) )
restaurants, die reservierungen annehmen und kellner haben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string waiter ) ) )
ein drei-sterne-restaurant, das mittagessen serviert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
restaurants mit mehr als einer küche	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( number 2 ) ) )
restaurant, das gut für gruppen ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) )
hotel, das die mindestanzahl an mahlzeiten serviert	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( string meals ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
welches restaurant serviert zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurant, dessen sternebewertung die sternebewertung des thailändischen cafés ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) )
welche restaurants haben ein preisrating von mindestens zwei oder drei dollar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )
welches restaurant serviert die meisten mahlzeiten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( string meals ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
hotel, das den geschmack von kindern trifft und am besten für gruppen geeignet ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string groups ) ) )
welche restaurants haben zum mitnehmen und lieferung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string delivery ) ) )
welches thailändische restaurant nimmt reservierungen entgegen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
restaurants, die zum mitnehmen haben und reservierungen annehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string reserve ) ) )
ein auslieferndes restaurant mit kellnern	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string waiter ) ) )
wie hoch ist die gesamtbewertung aller restaurants?	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ) ) )
finden sie ein 3-sterne-restaurant mit bedienung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
restaurants mit 5 sternen und niedrigeren preisklassen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )
hotel mit einem thailändischen oder italienischen restaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.concat en.cuisine.thai en.cuisine.italian ) ) )
liste alle 3 sterne restaurants auf	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
welches restaurant serviert die geringste menge an mahlzeiten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string meals ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
welches restaurant ist in der geringsten anzahl von stadtteilen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( string neighborhood ) ) )
welche mahlzeit wird von weniger als zwei restaurants serviert	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
welche restaurants sind gut für gruppen und haben sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string outdoor ) ) )
restaurant mit kellnerservice und einem preis von 2-dollar-zeichen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
was sind die küchen aller 3-sterne-restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ) )
restaurants mit einem 2-dollar-zeichen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
restaurant mit 3 sternen und 3 sternen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
was midtown west restaurant bietet reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
restaurants, die kellner haben und gut für kinder sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string kids ) ) )
welche restaurants mit kellnerservice haben lieferung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string delivery ) ) )
was ist die durchschnittliche preisbewertung eines restaurants?	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ) ) )
restaurant mit bedienung und gut für kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string kids ) ) )
familienfreundliche restaurants, in denen sie draußen sitzen können	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string outdoor ) ) )
was ist die nachbarschaft mit den meisten restaurants, die gut für kinder sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ) )
was midtown west restaurant hat eine 3-sterne-bewertung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
restaurant, das lieferung hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) )
hotel in der gegend von midtown west, das mittagessen serviert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
welche küche passt zu der des thailändischen cafés?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) en.restaurant.thai_cafe ) ( call SW.reverse ( string cuisine ) ) ( string = ) en.restaurant.thai_cafe ) )
was ist die küche der restaurants mit drei sternen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ) )
liste alle restaurants mit mindestens 3 sternen auf	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )
wie viele verschiedene arten von küchen gibt es?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ) )
in welcher nachbarschaft befindet sich das thailändische café?	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string neighborhood ) ) )
restaurant mit zwei küchen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( number 2 ) ) )
restaurant, dessen preisklasse 2-dollar-zeichen ist und das auch kreditkarten akzeptiert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
welche mahlzeit serviert der kellner im restaurant?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ) )
was sind einige restaurants bewertet 3-dollar-zeichen oder weniger	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )
finden sie ein restaurant mit mehr als 3 sternen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )
welches restaurant ist zum mittagessen geöffnet und ist gut für kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string kids ) ) )
restaurants preis bewertet 2 dollar-zeichen oder weniger	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )
welches restaurant verfügt über sitzgelegenheiten im freien und hat eine preisempfehlung von 2 dollar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
restaurant, dessen sternebewertung größer als 3 sterne oder 5 sterne ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )
welche restaurants akzeptieren kreditkarten?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) )
welches restaurant in der nachbarschaft ist gut für eine gruppe von menschen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ) )
restaurant, das mittagessen serviert und dessen preisklasse 2-dollar-zeichen ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
restaurants mit weniger als 3 sternen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )
welches restaurant bietet zum mitnehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string takeout ) ) )
was 3-sterne-restaurant bietet mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string meals ) ( string = ) en.food.lunch ) )
welche restaurants nehmen reservierungen entgegen?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) )
welche restaurants sind kinderfreundlich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string kids ) ) )
welches restaurant ist kinderfreundlich und nimmt reservierungen entgegen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string reserve ) ) )
was 2-dollar-zeichen bietet mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string meals ) ( string = ) en.food.lunch ) )
finden sie ein restaurant mit kellnerservice, das kreditkarten akzeptiert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string waiter ) ) )
welche restaurants bieten die wenigsten mahlzeiten an?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( string meals ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
restaurant mit lieferservice und thailändischer küche	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
restaurants, die kreditkarten akzeptieren und kinderfreundlich sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string kids ) ) )
das hotel bietet einen kellnerservice und sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string outdoor ) ) )
welches restaurant ist gut mit gruppen und serviert mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string meals ) ( string = ) en.food.lunch ) )
liste alle restaurants in midtown west auf	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
welches restaurant hat 3 sterne und hat ein 2-menü	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
ein restaurant in der nähe vieler stadtteile	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( string neighborhood ) ) )
welche 3-sterne-restaurants haben sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
restaurants mit kellnern und essbereichen im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string waiter ) ) )
welche restaurants dienen gruppen und akzeptieren kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string groups ) ) )
restaurant mit der meisten nachbarschaft	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( string neighborhood ) ) )
küche, die küche der geringsten anzahl von restaurants ist	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string cuisine ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
welche restaurants akzeptieren kreditkarten und sind ein guter ort, um mit kindern zu gehen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string credit ) ) )
welche vorspeisen bietet das café an?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) )
finden sie ein restaurant mit bedienung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) )
welches 3-sterne-restaurant hat einen preis von 2-dollar-zeichen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
restaurant mit einem preis von mindestens 2 dollar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )
was ist die sterne-bewertung des restaurants	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ) ) )
küche, die küche des restaurants, das für gruppen gut ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ) )
listen sie alle restaurants auf, die teurer als 2-dollar-zeichen sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )
welches restaurant ist gut für kinder und nimmt kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string credit ) ) )
restaurants, die kreditkarten akzeptieren und mittagessen servieren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string meals ) ( string = ) en.food.lunch ) )
welche 3 sterne restaurants liefern	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string delivery ) ) )
welches 3-sterne-restaurant bietet kellner-service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string waiter ) ) )
restaurant, das für gruppen gut ist und das lieferung hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string delivery ) ) )
welches restaurant bietet die größte auswahl an gerichten?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( string cuisine ) ) )
kein mittagsrestaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string ! = ) en.food.lunch ) )
restaurant, das reservierungsmöglichkeit bietet und mittagessen serviert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string meals ) ( string = ) en.food.lunch ) )
restaurant, das höchstens zwei mahlzeiten serviert	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
welche mahlzeit ist gut für gruppen serviert werden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ) )
ein restaurant mit mindestens 4 sternen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )
restaurant, das zum mitnehmen hat und das lieferung hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string delivery ) ) )
restaurants, die die gleiche art von essen wie das thai-café servieren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) en.restaurant.thai_cafe ) ) )
restaurants mit einem preis von weniger als 2 dollar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )
restaurant, das gruppengerichte serviert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ) )
restaurants gut für gruppen und kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string kids ) ) )
welche restaurants erhielten 3 sterne und servieren mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
restaurant mit 3 sternen und das ist gut für kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string kids ) ) )
wie lautet die telefonnummer des restaurants?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurant, dessen nachbarschaft midtown west ist und dessen sternebewertung 3 sterne ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
restaurants, die liefern und kellner-service haben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string waiter ) ) )
restaurants mit 3 sternen, für die reservierungen erforderlich sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string reserve ) ) )
restaurant mit weniger nachbarschaft	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( string neighborhood ) ) )
welche nachbarschaft mit den meisten restaurants	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
ein restaurant in midtown west, das kreditkarten akzeptiert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string credit ) ) )
was ist besser eine 3 oder 5 sterne bewertung	( call SW.listValue ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) )
familienfreundliche restaurants in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
restaurant mit 3 oder 5 sternen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) )
hotel, das die sternebewertung des thailändischen cafés hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )
welche restaurants haben eine sternebewertung kleiner als 3 sterne	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )
midtown west restaurant, das zum mittagessen geöffnet ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string meals ) ( string = ) en.food.lunch ) )
welches restaurant bietet zum mitnehmen und hat reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string takeout ) ) )
was sind einige restaurants mit 2-dollar-zeichen oder mehr bewertet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )
restaurant, das gut für gruppen und gut für kinder ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string kids ) ) )
welche restaurants werden gleich oder besser bewertet als das thailändische cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )
welche restaurants nehmen kreditkarten und bieten kellnerservice an	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string credit ) ) )
welche küche wird in nicht mehr als zwei restaurants serviert	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
welche restaurants haben mindestens 30 oder 40 bewertungen	( call SW.listValue ( call SW.concat ( number 30 en.review ) ( number 40 en.review ) ) )
restaurants mit kellnern und essbereichen im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string outdoor ) ) )
welches restaurant in midtown west hat ein rating von zwei dollar-zeichen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
welche art von mahlzeiten servieren restaurants mit kellnerservice?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ) )
die teuersten restaurants	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string price_rating ) ) ) )
in welcher nachbarschaft gibt es zwei oder weniger restaurants?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurant, das mittagessen serviert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) )
restaurant mit 3 sternen und das ist gut für gruppen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string groups ) ) )
welche mahlzeit serviert das restaurant mit einem 2-dollar-preis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ) )
welche restaurants haben eine bewertung besser als 3 oder 5 sterne	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )
welche restaurants haben sowohl sitzgelegenheiten im freien als auch zum mitnehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string outdoor ) ) )
welche restaurants haben die gleiche preisbewertung oder besser als das thailändische cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )
nennen sie ein restaurant, das kein thailändisches essen anbietet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string ! = ) en.cuisine.thai ) )
welche art von essen servieren 3-sterne-restaurants?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ) )
wie viele stadtteile gibt es?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ) )
liste alle restaurants ähnlich der küche von thai cafe auf	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string cuisine ) ) ) )
was sind einige thailändische restaurants in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
welches restaurant bietet zum mitnehmen und ist gut für kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string takeout ) ) )
restaurants im 2- oder 3-dollar-bereich	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) )
welche restaurants haben die gleiche sternebewertung wie das thailändische cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) )
welche restaurants servieren zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
welche küche hat die meisten restaurants	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string cuisine ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
wie viele stadtteile gibt es, die restaurants haben	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ) )
hier finden sie alle thailändischen restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ) )
finden sie ein restaurant, dessen preis mindestens dem thailändischen café entspricht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )
restaurants mit kellnern, die eine preisbewertung von 2 haben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string waiter ) ) )
was ist ein 3-sterne-restaurant, das kinderfreundlich ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
restaurants, die teurer sind als das thailändische café	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )
restaurant mit lieferservice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ) )
restaurants mit 2-dollar-auszeichnung für kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
restaurants mit 3 sternen bewertet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
welches restaurant ist zum mittagessen geöffnet und enthält sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string meals ) ( string = ) en.food.lunch ) )
hotel, das im voraus gebucht werden kann und ein preisrating von 2 dollar aufweist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
welches thailändische restaurant hat eine 2-dollar-bewertung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
welches hotel bietet lieferservices an?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string delivery ) ) )
welche restaurants haben zum mitnehmen und akzeptieren kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string credit ) ) )
hotel mit mindestens 3 sternen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )
welche restaurants haben mahlzeiten im freien und sind kinderfreundlich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string outdoor ) ) )
was ist das beste restaurant für große gruppen in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string groups ) ) )
was für ein gutes kinderrestaurant ist in der midtown west gegend	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
welche mahlzeit serviert das restaurant midtown west?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )
küche, die küche des thailändischen cafés und die küche des thailändischen cafés ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) en.restaurant.thai_cafe ) ( call SW.reverse ( string cuisine ) ) ( string = ) en.restaurant.thai_cafe ) )
familienfreundliche restaurants mit kellnern	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string kids ) ) )
welche küche bieten 3-sterne-restaurants an?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ) )
restaurant in der nachbarschaft von midtown west mit sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string outdoor ) ) )
welche restaurants haben sitzgelegenheiten im freien und akzeptieren kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string credit ) ) )
5 sterne oder 3 sterne	( call SW.listValue ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) )
welche art von mahlzeiten servieren 2-dollar-restaurants?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ) )
gesamtbewertung des restaurants mit sternen	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ) ) )
welches thailändische restaurant hat lieferung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
in welcher nachbarschaft gibt es nicht mehr als zwei restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
was ist eine mahlzeit, die vom thailändischen café serviert wird?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) )
restaurants höher bewertet als thailändisches café	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )
welche restaurants servieren mittagessen?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string meals ) ( string = ) en.food.lunch ) )
welches restaurant ist kinderfreundlich und nimmt kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string credit ) ) )
welches restaurant hat mehr als zwei küchen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string >= ) ( number 2 ) ) )
welche restaurants haben kellner und eine preisbewertung von zwei dollar zeichen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
restaurants, in denen sie draußen sitzen können	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) )
restaurants, die liefern und zum mittagessen geöffnet sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string delivery ) ) )
restaurant mit imbiss in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
welche nachbarschaft hat weniger als zwei restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
welches restaurant ist gut für gruppen und nimmt reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string groups ) ) )
in welchem restaurant kann ich reservieren?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string reserve ) ) )
was ist die durchschnittliche preisbewertung eines restaurants?	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ) ) )
in welcher nachbarschaft gibt es zwei restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
welches restaurant bietet reservierungen und serviert mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string reserve ) ) )
welche restaurants sind gut für kinder und servieren mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string meals ) ( string = ) en.food.lunch ) )
restaurants gut für kinder und hat kellner	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string waiter ) ) )
restaurants in der preiskategorie mit 2-dollar-zeichen, die kreditkarten akzeptieren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string credit ) ) )
thailändisches restaurant mit 3 sternen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
restaurant, dessen nachbarschaft midtown west ist und das reservierungen entgegennimmt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string reserve ) ) )
ein restaurant mit 2-dollar-zeichen zum mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string meals ) ( string = ) en.food.lunch ) )
welche küche ist mindestens zwei restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
welches hotel verfügt über sitzgelegenheiten im freien und bietet einen lieferservice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string outdoor ) ) )
restaurants, die gut für gruppen sind und zum mitnehmen anbieten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string groups ) ) )
welche restaurants haben zum mitnehmen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) )
küche in mindestens 2 restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
midtown west restaurant für viele leute	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string groups ) ) )
restaurant mit mindestens 3 oder 5 sternen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )
thailändische restaurants, die reservierungen annehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
restaurant mit bedienung und reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string reserve ) ) )
was ist das essen in mindestens zwei restaurants serviert	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurants mit 2-dollar-bewertung in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
3-sterne-restaurants für gruppen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
restaurants in midtown west, die zum mitnehmen haben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string takeout ) ) )
restaurants mit einer kleineren sternebewertung als thailändisches café	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )
welche restaurants in midtown west akzeptieren kreditkarten?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
restaurants in der nähe des thai-cafés	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno ) ) )
nachbarschaft, die nachbarschaft des restaurants, das kellner-service hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ) )
restaurant mit lieferung und einem preis von 2 dollar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
was midtown west restaurant ist gut für gruppen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
welches restaurant hat kellner-service und nimmt reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string reserve ) ) )
restaurant, das reservierungen entgegennimmt und das mittagessen serviert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string meals ) ( string = ) en.food.lunch ) )
restaurants im viertel midtown west mit sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string outdoor ) ) )
restaurant, das die geringste anzahl von nachbarschaft hat	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( string neighborhood ) ) )
restaurants, die speisen zum mitnehmen anbieten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string takeout ) ) )
küche, die küche des restaurants, das reservierungen annimmt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ) )
was sind die hotels in midtown west oder chelsea	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.concat en.neighborhood.midtown_west en.neighborhood.chelsea ) ) )
restaurants mit der gleichen preisklasse wie das thailändische café	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) )
restaurant mit weniger als zwei gerichten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string < ) ( number 2 ) ) )
restaurants mit einem preis über 3-dollar-zeichen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )
ein restaurant mit mindestens 3 sternen, das liefert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string delivery ) ) )
durchschnittliche sternebewertung des restaurants	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ) ) )
was ist die küche von restaurants, die kellner haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ) )
welches hotel hat die höchste sternebewertung	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string star_rating ) ) ) )
was ist der preis bewertung von thai-café	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) )
welches restaurant hat 3 sterne?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ) )
welche restaurants bieten mittagessen an?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string meals ) ( string = ) en.food.lunch ) )
restaurants mit der gleichen oder einer niedrigeren preisklasse wie das thailändische café	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )
restaurants mit bedienung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ) )
restaurants mit sitzgelegenheiten im freien, in denen das mittagessen serviert wird	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string meals ) ( string = ) en.food.lunch ) )
restaurant im viertel midtown west mit 3 sternen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
restaurant, das gut für kinder ist und reservierungen annimmt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string reserve ) ) )
thailändisches restaurant mit sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
welche restaurants akzeptieren reservierungen?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string reserve ) ) )
welche nachbarschaften haben 3-sterne-restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ) )
finden sie ein gutes kinderrestaurant, das mittagessen serviert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string kids ) ) )
was 2-dollar-zeichen restaurant hat sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string outdoor ) ) )
welche restaurants haben eine preisbewertung von zwei dollar zeichen und akzeptieren auch kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string credit ) ) )
in welcher nachbarschaft gibt es restaurants, die lieferservice anbieten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ) )
restaurants mit bedienung und take away	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string takeout ) ) )
welches restaurant bietet mittagessen und lieferung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string delivery ) ) )
restaurant, dessen preisklasse 2-dollar-zeichen ist und das kreditkarten akzeptiert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string credit ) ) )
billigste restaurants	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string price_rating ) ) ) )
restaurant, das kreditkarten akzeptiert und dessen preisklasse 2-dollar-zeichen ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
restaurants mit sitzgelegenheiten im freien, die sich gut für große partys eignen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string groups ) ) )
welches restaurant in midtown west hat eine 3-sterne-bewertung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
was ist eine mahlzeit, die von einem restaurant serviert wird, das gruppen beherbergt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ) )
restaurants, die kreditkarten und reservierungen akzeptieren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string reserve ) ) )
welche kulinarischen möglichkeiten gibt es unter den gruppenfreundlichen restaurants?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ) )
restaurants, die speisen zum mitnehmen anbieten und reservierungen annehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string takeout ) ) )
welches restaurant nimmt reservierungen entgegen und ist für gruppen geeignet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string groups ) ) )
thai-restaurants mit sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
welches restaurant bietet einen kellner-service und ist gut für gruppen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string waiter ) ) )
welches restaurant hat die größte speisekarte	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( string meals ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
restaurant mit bedienung durch den kellner und in der nachbarschaft von midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
in welchem thailändischen restaurant wird zu mittag gegessen?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
ein restaurant mit lieferung für eine große gruppe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string groups ) ) )
welche art von küche ist am häufigsten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string meals ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
finden sie ein restaurant mit sitzgelegenheiten im freien, das kreditkarten akzeptiert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string outdoor ) ) )
welche mahlzeit ist gut für gruppen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ) )
für zwei mahlzeiten geöffnet	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
welche restaurants nehmen kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string credit ) ) )
restaurants mit zwei nachbarschaftsstandorten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( number 2 ) ) )
restaurant, das reservierungen entgegennimmt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string reserve ) ) )
welche restaurants bieten kellner-service	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ) )
hotel, das die mindeststernebewertung hat	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string star_rating ) ) ) )
was ist eine mahlzeit von nicht mehr als zwei restaurants serviert	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurant, dessen sternebewertung höchstens der sternebewertung des thailändischen cafés entspricht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )
was sind einige restaurants mit höchstens 3-dollar-zeichen bewertet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )
welche restaurants servieren mittagessen und sind gut für gruppen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string groups ) ) )
thai-restaurants mit 3 sternen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
was für ein restaurant serviert dasselbe essen wie das thai-café?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) ) )
restaurants mit bedienung und sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string outdoor ) ) )
welche mahlzeit wird in einem restaurant mit sitzgelegenheiten im freien serviert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ) )
30 bewertungen oder 40 bewertungen	( call SW.listValue ( call SW.concat ( number 30 en.review ) ( number 40 en.review ) ) )
mahlzeit, die mehr als zwei restaurant serviert	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurants mit ähnlicher küche wie das thai-café	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string cuisine ) ) )
welche restaurants haben ein 2-dollar-zeichen preisklasse und sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
restaurants in midtown west, die zum mitnehmen anbieten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string takeout ) ) )
thailändische restaurants im viertel midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
liste alle thailändischen restaurants in midtown west auf	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
restaurant, das kreditkarten akzeptiert und dessen sternebewertung 3 sterne beträgt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
welche mahlzeiten werden von mehr als zwei restaurants serviert	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
in diesen thailändischen restaurants wird das mittagessen serviert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
welche küche hat das thailändische cafe nicht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string ! = ) en.restaurant.thai_cafe ) )
welche mahlzeit wird in mindestens 2 restaurants serviert	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
was midtown west restaurant bietet sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string outdoor ) ) )
welche nachbarschaft hat weniger als zwei restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
welche nachbarschaften haben restaurants, die mittagessen servieren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ) )
welche restaurants haben sitzgelegenheiten im freien, die kreditkarten akzeptieren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string outdoor ) ) )
welches thailändische restaurant hat eine gute sternebewertung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) )
3-sterne-restaurant, das zum mitnehmen anbietet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
welches restaurant nimmt reservierungen entgegen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string reserve ) ) )
finde ein thailändisches restaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
restaurants mit sitzgelegenheiten im freien, für die reservierungen erforderlich sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string outdoor ) ) )
was ist eine mahlzeit, die von einem restaurant serviert wird, das reservierungen akzeptiert?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ) )
restaurants, die einen höheren preis als das thai-café haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )
restaurant in der gegend um midtown west, das lieferservice anbietet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
nennen sie ein thailändisches restaurant oder café	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string cuisine ) ) ) )
drei sterne restaurants, die liefern	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
in welcher nachbarschaft gibt es die meisten restaurants mit bedienung?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ) )
restaurant nicht im midtown west bereich	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string ! = ) en.neighborhood.midtown_west ) )
restaurant, das gut für kinder ist und kreditkarten akzeptiert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string credit ) ) )
welches restaurant hat 3 sterne und serviert mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string meals ) ( string = ) en.food.lunch ) )
liste alle restaurants mit takeout auf	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) )
welches restaurant hat sitzgelegenheiten im freien und eine 2-dollar-preisklasse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string outdoor ) ) )
was 2-dollar-zeichen restaurant enthält zum mitnehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
restaurants, die das gleiche essen haben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
welches restaurant hat eine drei-sterne-bewertung und nimmt auch reservierungen entgegen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
welche nachbarschaften haben thailändische restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ) )
wie lautet die nummer dieser mahlzeit?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
hotel mit einem preis von 2-dollar-zeichen oder 3-dollar-zeichen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) )
restaurants mit 2 und niedrigeren preisklasse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )
restaurants, die gut für kinder sind und kellner haben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string kids ) ) )
anzahl der restaurants	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurant mit thailändischer küche	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ) )
restaurant mit take-out-möglichkeit und sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string takeout ) ) )
liste alle thailändischen restaurants auf, die takeout anbieten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
was ist eine mahlzeit, die von einem restaurant mit take-away-service serviert wird?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ) )
welche restaurants haben zum mitnehmen und sind kinderfreundlich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string kids ) ) )
kinderfreundliches restaurant mit einem preis von 2 dollar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
mindestens 3 sterne restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )
restaurants in midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
was ist eine mahlzeit aus einem restaurant mit sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ) )
thailändisches restaurant, das liefert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
welche küche bieten mehr als zwei restaurants an?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurants, die zum mitnehmen und liefern	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string takeout ) ) )
welche mahlzeit liefert das restaurant?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ) )
listen sie alle restaurants auf, in denen weniger als zwei mahlzeiten serviert werden	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
drei-sterne-restaurants in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
was ist die preisbewertung des thailändischen cafés	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) )
nennen sie ein restaurant in midtown, das kreditkarten akzeptiert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string credit ) ) )
restaurants, die kreditkarten liefern und akzeptieren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string delivery ) ) )
restaurants namens thai cafe oder pizzeria juno	( call SW.listValue ( call SW.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno ) )
restaurants in midtown west mit sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string outdoor ) ) )
restaurants mit mindestens zwei küchen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string > ) ( number 2 ) ) )
welches restaurant ist kinderfreundlich und hat zum mitnehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string takeout ) ) )
welches gute gruppenrestaurant nimmt reservierungen entgegen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string reserve ) ) )
was 2-dollar-zeichen restaurant nimmt reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
in welchem restaurant kann man draußen zu mittag essen?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string meals ) ( string = ) en.food.lunch ) )
welche thailändischen restaurants haben zum mitnehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
familienfreundliche thailändische restaurants	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string kids ) ) )
welche restaurants bieten mittagessen und ist gut für gruppen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string groups ) ) )
ein thailändisches restaurant, das kreditkarten akzeptiert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string credit ) ) )
was für ein restaurant ist gut für gruppen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ) )
restaurant, das für gruppen geeignet ist und dessen preisklasse 2-dollar-zeichen ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
das hotel verfügt über sitzgelegenheiten im freien und akzeptiert kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string outdoor ) ) )
welche restaurants bieten reservierungen und haben auch durchführung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string takeout ) ) )
welche art von mahlzeit wird in diesem café nicht serviert?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string ! = ) en.restaurant.thai_cafe ) )
ein gruppenfreundliches restaurant mit sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string groups ) ) )
welche küche wird in zwei restaurants serviert	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
welche restaurants haben eine preisbewertung von 2 bis 3 dollar zeichen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )
was für ein thailändisches restaurant hat lieferung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string delivery ) ) )
finden sie 3-sterne- oder 5-sterne-restaurant	( call SW.listValue ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) )
thai cuisine restaurant mit 3 sternen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
welches restaurant hat die geringste anzahl von küchen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( string cuisine ) ) )
thai-cuisine-restaurant, das mittagessen serviert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string meals ) ( string = ) en.food.lunch ) )
restaurants mit einer gemeinsamen mahlzeit	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
welches restaurant serviert küche und nimmt kreditkarten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ) )
wie lautet die sternebewertung des thailändischen cafés?	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) )
welche nachbarschaften haben restaurants, die liefern	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ) )
finden sie ein thailändisches restaurant mit einem preis von 2 dollar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
welches restaurant bietet lieferung und hat kellner-service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string delivery ) ) )
welches restaurant hat lieferung und ist gut für kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string delivery ) ) )
küche wie das thailändische cafe pizzeria juno	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno ) ) )
welche arten von küche gibt es in restaurants mit sitzgelegenheiten im freien?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ) )
nennen sie ein restaurant in mindestens zwei stadtteilen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string >= ) ( number 2 ) ) )
das restaurant serviert mittagessen und ist gut für kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string kids ) ) )
welche 3-sterne-restaurants haben kellner	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string waiter ) ) )
restaurant, dessen nachbarschaft midtown west ist und das mittagessen serviert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string meals ) ( string = ) en.food.lunch ) )
hotel in midtown west, das im voraus gebucht werden kann	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
nachbarschaft, die nachbarschaft des thailändischen cafés ist und die nachbarschaft des thailändischen cafés ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.restaurant.thai_cafe ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.restaurant.thai_cafe ) )
welche nachbarschaft hat restaurants, die mittagessen servieren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ) )
welches restaurant nimmt reservierungen entgegen und ist kinderfreundlich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string kids ) ) )
in welcher nachbarschaft gibt es am wenigsten restaurants?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
was ist der preis bewertung von thai-café	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) )
restaurant, das mittagessen in midtown west serviert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
lieferung ist möglich	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) )
restaurants, die kreditkarten akzeptieren und im freien servieren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string outdoor ) ) )
thailändische restaurants mit 2-dollar-bewertung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
küche wie die des thailändischen cafés	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) en.restaurant.thai_cafe ) )
restaurants mit sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ) )
restaurants, die lieferung haben und kreditkarten annehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string credit ) ) )
wie lautet die sternebewertung des thailändischen cafés?	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) )
restaurants, die kreditkarten mit einem preis von 2 akzeptieren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
thailändisches restaurant in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
restaurants mit lieferung zum mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string meals ) ( string = ) en.food.lunch ) )
welches restaurant bietet nur eine küche	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string < ) ( number 2 ) ) )
restaurants mit mitnahme für gruppen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string takeout ) ) )
restaurant, dessen preisklasse 2-dollar-zeichen ist und das zum mitnehmen hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string takeout ) ) )
welches restaurant hat sitzgelegenheiten im freien und ist gut für kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string kids ) ) )
restaurants mit 3 bis 5 sternen bewertet	( call SW.listValue ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) )
was ist eine mahlzeit im thailändischen café serviert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) )
restaurant in midtown west für kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
restaurant, das mittagessen serviert und dessen küche thailändisch ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
restaurant mit nicht mehr als zwei küchen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string <= ) ( number 2 ) ) )
thai-restaurants mit essbereichen im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string outdoor ) ) )
restaurants zwischen den stadtteilen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( number 2 ) ) )
restaurant in midtown west, das gut für gruppen ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string groups ) ) )
restaurants mit mehr als zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
welche thailändischen restaurants akzeptieren kreditkarten?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string credit ) ) )
finde ein restaurant, bei dem ich reservierungen bekommen kann und das ein 2-dollar-preisrating hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
welches restaurant bietet mittagessen und zum mitnehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string meals ) ( string = ) en.food.lunch ) )
restaurants mit 2 preisklassen, die gruppenfreundlich sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
restaurants mit 2-dollar-bewertung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
in welcher nachbarschaft befindet sich das café nicht?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string ! = ) en.restaurant.thai_cafe ) )
was ist ein 3-sterne-restaurant, das mittagessen serviert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
restaurants mit 3 sternen und sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string outdoor ) ) )
restaurants in der nachbarschaft, die thailändisches café enthalten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.restaurant.thai_cafe ) ) )
was für ein gutes kinderrestaurant hat lieferung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string kids ) ) )
welche nachbarschaft hat ein restaurant, das sitzgelegenheiten im freien enthält	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ) )
welche restaurants haben kellner und akzeptieren reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string reserve ) ) )
welches restaurant serviert diese küche?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurants mit sitzgelegenheiten im freien und einer preisbewertung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
welches restaurant hat 2 oder mehr dollarzeichen als preisklasse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )
restaurant mit take away-service, das kreditkarten akzeptiert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string takeout ) ) )
liste alle restaurants mit bewertungen über 2 auf	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string ! = ) ( number 2 en.dollar_sign ) ) )
in welcher nachbarschaft gibt es restaurants, die kreditkarten akzeptieren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ) )
restaurant, das lieferungen und reservierungen durchführt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string reserve ) ) )
finden sie ein restaurant in der gleichen nachbarschaft wie das thai-café	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.restaurant.thai_cafe ) ) )
welches restaurant serviert mittagessen für gruppen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string groups ) ) )
welche restaurants haben kellner kreditkarten?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string credit ) ) )
gruppenfreundliche restaurants in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
restaurant, dessen preisklasse mehr als 2-dollar-zeichen oder 3-dollar-zeichen hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )
was 2-dollar-zeichen restaurant bietet mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
welches restaurant in der nachbarschaft hat eine 3-sterne-bewertung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ) )
welche restaurants servieren mittagessen und haben kellner-service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string waiter ) ) )
restaurant, das gut für gruppen ist und zum mitnehmen hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string takeout ) ) )
welche restaurants servieren weniger als zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
was thailändisches restaurant nimmt kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
restaurant, das gut für gruppen ist und reservierungen annimmt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string reserve ) ) )
restaurant, das zwei mahlzeiten serviert	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurant mit 3 bis 5 sternen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )
restaurants in midtown west mit bedienung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string waiter ) ) )
liste alle thailändischen oder italienischen restaurants auf	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.concat en.cuisine.thai en.cuisine.italian ) ) )
ein kinderfreundliches restaurant zum mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string meals ) ( string = ) en.food.lunch ) )
welches 3-sterne-restaurant ist gut für kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string kids ) ) )
welches restaurant bietet lieferung und nimmt kreditkarte	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string delivery ) ) )
restaurant in der nachbarschaft von midtown west mit sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string outdoor ) ) )
restaurant in der nachbarschaft von midtown west mit thailändischer küche	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
welches restaurant hat ein 2-dollar-preis rating und sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string outdoor ) ) )
restaurants, die in der geringsten anzahl von stadtteilen ist	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( string neighborhood ) ) )
finden sie ein gutes gruppenrestaurant mit take away	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string takeout ) ) )
welches restaurant heißt kinder willkommen und verfügt über sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string kids ) ) )
was für ein thailändisches restaurant hat eine 3-sterne-bewertung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
restaurant, das reservierungen entgegennimmt und kellnerservice hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string waiter ) ) )
restaurants mit 3 oder 5 sternen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) )
was sind die arten von küche in der midtown west nachbarschaft	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )
restaurants mit kellnern und einem preis von 2 dollar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string waiter ) ) )
restaurant, das weniger als zwei nachbarschaft hat	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string < ) ( number 2 ) ) )
restaurant, das mittagessen serviert und reservierungen annimmt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string reserve ) ) )
restaurants mit mindestens 30 oder 40 bewertungen	( call SW.listValue ( call SW.concat ( number 30 en.review ) ( number 40 en.review ) ) )
drei-sterne-restaurants, die kreditkarten akzeptieren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
restaurants mit sitzgelegenheiten im freien und ist gut für gruppen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string groups ) ) )
was ist eine mahlzeit, die das thailändische café oder die pizzeria juno serviert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno ) ) )
welches restaurant bietet reservierungen und kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string credit ) ) )
welche restaurants bieten kellnerservice an und nehmen kreditkarten entgegen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string waiter ) ) )
restaurants mit lieferung in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string delivery ) ) )
restaurant, dessen sternebewertung größer ist als die sternebewertung des thailändischen cafés	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )
restaurants, die reservierungen annehmen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) )
restaurant mit bedienung und bedienung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string waiter ) ) )
welche restaurants mit einem 2-dollar-preis bieten zum mitnehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
restaurant, dessen sternebewertung kleiner als 3 sterne ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )
welches essen serviert das 3-sterne-restaurant?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ) )
restaurants in midtown west mit essbereichen im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
welches restaurant hat 2 menüpunkte und nimmt kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string credit ) ) )
welches restaurant mit einem preis von zwei dollar ist ein guter ort für eine gruppe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
nachbarschaft mit der geringsten anzahl von restaurants	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
das restaurant serviert mittagessen sowie thailändisches essen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string meals ) ( string = ) en.food.lunch ) )
ein 3-sterne-restaurant, das gut für kinder ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string kids ) ) )
welches restaurant ist in zwei stadtteilen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( number 2 ) ) )
chelsea oder midtown west	( call SW.listValue ( call SW.concat en.neighborhood.midtown_west en.neighborhood.chelsea ) )
welches restaurant ist gut für eine gruppe und hat auch kellner	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string waiter ) ) )
welche mahlzeit kann man entweder im thailändischen cafe oder in der pizzeria juno bekommen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno ) ) )
wie hoch ist der gesamtpreis aller restaurants?	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ) ) )
restaurants, die die gleichen mahlzeiten wie das thai-café servieren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) ) )
welches restaurant bietet sitzgelegenheiten im freien und nimmt reservierungen entgegen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string reserve ) ) )
welches restaurant ist in über zwei stadtteilen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string > ) ( number 2 ) ) )
restaurants, die im voraus gebucht werden können und kreditkarten akzeptieren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string credit ) ) )
welche küche nimmt kreditkarten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ) )
restaurant, das keine 3-sterne-bewertung hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string ! = ) ( number 3 en.star ) ) )
welche restaurants nehmen kreditkarten und haben outdoor-einstellungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string credit ) ) )
welches restaurant ist gut für kinder und hat lieferung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string kids ) ) )
welches restaurant spricht kinder an und ist gut für gruppen geeignet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string kids ) ) )
restaurant mit 3 sternen und einem preis von 2 dollar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
gesamtpreisbewertung des restaurants	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ) ) )
welche art von mahlzeiten serviert das thailändische café?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) )
finden sie ein gutes gruppenrestaurant mit bedienung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string waiter ) ) )
restaurant mit der meisten küche	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( string cuisine ) ) )
was ist die nachbarschaft des restaurants zum mitnehmen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ) )
restaurants mit reservierungen und serviert mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string meals ) ( string = ) en.food.lunch ) )
welche 3-sterne-restaurants akzeptieren reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string reserve ) ) )
welches thailändische restaurant nimmt kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
restaurants mit imbiss, die sich gut für große partys eignen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string groups ) ) )
welche restaurants bieten die wenigsten mahlzeiten an?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( string meals ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
restaurant mit sitzgelegenheiten im freien und in der nachbarschaft von midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
welches restaurant ist gut für gruppen und nimmt kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string groups ) ) )
finden sie ein restaurant zum mitnehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string takeout ) ) )
welches restaurant hat weniger als 5 sterne	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )
restaurant in midtown west, das gut für gruppen ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
hotel, das mittagessen anbietet und am besten für gruppen geeignet ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string meals ) ( string = ) en.food.lunch ) )
restaurant, dessen nachbarschaft midtown west ist und das zum mitnehmen hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string takeout ) ) )
was ist das teuerste restaurant	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string price_rating ) ) ) )
was ist das restaurant, das kein mittagessen serviert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string ! = ) en.food.lunch ) )
restaurant mit imbiss und bedienung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string waiter ) ) )
restaurants, die mittagessen servieren und reservierungen annehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string meals ) ( string = ) en.food.lunch ) )
restaurants in midtown west mit einem essbereich im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string outdoor ) ) )
3-sterne-restaurants, die liefern	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
restaurant, dessen preis mindestens 2-dollar-zeichen oder 3-dollar-zeichen beträgt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )
was sind einige 3-sterne-thai-restaurants	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
welches restaurant hat sowohl sitzgelegenheiten im freien und nimmt reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string reserve ) ) )
gruppenfreundliche thai-restaurants	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
restaurants in der nachbarschaft von midtown west mit sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string outdoor ) ) )
restaurants mit 2 sternen oder weniger	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )
welches restaurant ist für kinder zugänglich und hat lieferung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string delivery ) ) )
listen sie alle restaurants auf, die billiger als 2-dollar-zeichen sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )
in welchem restaurant werden nur zwei oder weniger mahlzeiten serviert?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
restaurant, das zum mitnehmen hat und das mittagessen serviert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string meals ) ( string = ) en.food.lunch ) )
welches restaurant hat kellner und bietet auch zum mitnehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string takeout ) ) )
was ist die nachbarschaft des thailändischen restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ) )
liste alle restaurants auf, die thai cafe nicht ähnlich sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string ! = ) en.restaurant.thai_cafe ) )
welches restaurant verfügt über sitzgelegenheiten im freien und bietet einen kellnerservice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string waiter ) ) )
restaurants mit weniger als zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
3-sterne-restaurants und darunter	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )
restaurant mit bedienung und reservierung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string waiter ) ) )
finden sie ein restaurant, das kreditkarten akzeptiert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) )
welche restaurants mit 2 preisklasse haben auch kellnerservice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string waiter ) ) )
welches restaurant ist gut für kinder und gruppen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string groups ) ) )
welches restaurant nimmt kreditkarten in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
welche 2-dollar-zeichen restaurants sind in der nachbarschaft von midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
restaurants in midtown west, die liefern	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
restaurants mit der höchsten sternebewertung	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string star_rating ) ) ) )
liste alle 2-dollar-zeichen restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
ein thailändisches oder italienisches restaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.concat en.cuisine.thai en.cuisine.italian ) ) )
welche restaurants servieren mindestens zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
restaurant, das gut für gruppen ist und dessen küche thailändisch ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
italienisch oder thailändisch	( call SW.listValue ( call SW.concat en.cuisine.thai en.cuisine.italian ) )
küche, die küche des restaurants ist, dessen küche thailändisch ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ) )
restaurants mit takeout und kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string credit ) ) )
hotel mit mehr als drei sternen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )
thailändisches café oder pizzeria juno	( call SW.listValue ( call SW.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno ) )
restaurant, das reservierungen annimmt und das zum mitnehmen hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string takeout ) ) )
thai-restaurants mit imbiss	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string takeout ) ) )
restaurants, die reservierungen annehmen und mit 2-dollar-zeichen bewertet sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string reserve ) ) )
welche gleichen mahlzeiten werden in allen anderen restaurants serviert?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string meals ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
was für ein restaurant bietet ein outdoot und take away	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string takeout ) ) )
was ist eine mahlzeit, die in einem drei-sterne-restaurant serviert wird?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ) )
in welchem restaurant kann ich zu mittag essen und mit kreditkarte bezahlen?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string meals ) ( string = ) en.food.lunch ) )
thai-restaurants, die kinderfreundlich sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
restaurant, dessen küche thailändisch ist und das zum mitnehmen hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string takeout ) ) )
was 2-dollar-zeichen restaurant bietet lieferung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
restaurants, die kreditkarten und zum mitnehmen anbieten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string takeout ) ) )
welches restaurant ist gut für gruppen und kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string kids ) ) )
was für ein thailändisches restaurant hat sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string outdoor ) ) )
restaurants mit 2-dollar-zeichen, die reservierungen annehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
welches restaurant gibt es nur in zwei stadtteilen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string <= ) ( number 2 ) ) )
welche orte dienen essen, das nicht thailändisch ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string ! = ) en.restaurant.thai_cafe ) )
welches 2-dollar-zeichen restaurant ist gut für kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string kids ) ) )
gruppenfreundliche restaurants mit 3 sternen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string groups ) ) )
welche mahlzeiten serviert das café?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) )
welche küche hat das midtown west restaurant?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )
welche restaurants sind gut für gruppen und akzeptieren reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string reserve ) ) )
welches restaurant hat zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
welches restaurant hat zum mitnehmen und ein 2-dollar-preis-rating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string takeout ) ) )
finden sie ein thailändisches oder italienisches restaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.concat en.cuisine.thai en.cuisine.italian ) ) )
was thailändisches restaurant lieferservice anbietet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
welches restaurant serviert mittagessen und bietet zum mitnehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string takeout ) ) )
ein thailändisches restaurant in der nachbarschaft von midtown	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
restaurant dessen preis bewertung ist preis bewertung von thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) )
restaurant für das mittagessen bewertet 2 dollar-zeichen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
gruppenfreundliche restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) )
restaurant, das für gruppen geeignet ist und dessen sternebewertung 3 sterne beträgt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
welches restaurant liefert und kellner-service hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string waiter ) ) )
restaurant, das liefert und gut für gruppen ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string delivery ) ) )
restaurant, das gut für kinder ist und dessen küche thailändisch ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
wie viele restaurants gibt es?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
was sind die nachbarschaften von restaurants, die reservierungen annehmen?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ) )
was ist die durchschnittliche sternebewertung aller restaurants	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ) ) )
drei-sterne-restaurants, die das mittagessen servieren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
restaurants mit einer lieferung mit 2-dollar-zeichen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string delivery ) ) )
welche restaurants sind zwischen 3 und 5 sternen bewertet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )
nennen sie ein hotel mit drei sternen, das für gruppen geeignet ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string groups ) ) )
welches restaurant hat reservierungen und zum mitnehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string reserve ) ) )
was für ein gutes kinderrestaurant hat sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string kids ) ) )
welche restaurants haben weniger als 3 sterne	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string ! = ) ( number 3 en.star ) ) )
welche mahlzeit wird in den meisten restaurants serviert	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string meals ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurant, das gut für gruppen ist und das mittagessen serviert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string meals ) ( string = ) en.food.lunch ) )
welches restaurant bietet take away und lieferung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string takeout ) ) )
gruppenfreundliche restaurants, die reservierungen annehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string groups ) ) )
welches restaurant in midtown west verfügt über sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
restaurants, die die gleiche küche servieren	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
welche restaurants in midtown west haben ein preisrating von 2 dollar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
was ist der preis bewertung von thai-café	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) )
küche, die küche des restaurants, das kreditkarten akzeptiert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ) )
welche nachbarschaft hat die wenigsten restaurants	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
welche restaurants beherbergen gruppen?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) )
restaurant in der nähe des thailändischen cafés	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string neighborhood ) ) ) )
was für ein restaurant bietet sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ) )
welche restaurants servieren mindestens zwei küchen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string >= ) ( number 2 ) ) )
eine nachbarschaft ähnlich wie thai-cafés	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.restaurant.thai_cafe ) )
welches restaurant hat über zwei küchen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string > ) ( number 2 ) ) )
welches restaurant hat weniger als ein 2-dollar-preis rating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )
ein restaurant mit vielen mahlzeiten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( string meals ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
welche mahlzeit serviert das restaurant zum mittagessen?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ) )
finden sie ein thailändisches restaurant mit sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
restaurant mit bedienung und lieferung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string delivery ) ) )
welches restaurant ist gut für gruppen und hat kellner-service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string groups ) ) )
restaurants mit essen nicht wie thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string ! = ) en.restaurant.thai_cafe ) )
was gibt es für restaurants, in denen außer thai-küche auch andere gerichte serviert werden?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string ! = ) en.cuisine.thai ) )
was midtown west restaurant nimmt kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string credit ) ) )
welche küche wird in nur zwei restaurants gezeigt	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
welche küche gibt es in mehr als zwei restaurants?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurant mit einem preis gleich thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) )
nachbarschaft mit restaurants, die das mittagessen servieren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ) )
was ist die küche des restaurants, das gruppenessen hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ) )
restaurants mit nicht mehr als 2 standorten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string <= ) ( number 2 ) ) )
hat ein rating von 2 oder 3 dollar	( call SW.listValue ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) )
finden sie ein 3-sterne-restaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
welche restaurants kredit nehmen und eine gruppe unterbringen können	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string groups ) ) )
was ist die nachbarschaft des restaurants, das eine preisbewertung von 2 dollar-zeichen hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ) )
restaurants in midtown west, die zum mitnehmen haben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string takeout ) ) )
hotel, das eine höhere sternebewertung als thailändisches café hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )
nennen sie einige thailändische restaurants, die für gruppen geeignet sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
welches restaurant bietet die wenigsten arten von küche	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( string cuisine ) ) )
welches restaurant serviert das gleiche essen wie das thai-café	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) ) )
welche art von mahlzeiten werden in den restaurants in midtown west serviert?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )
welche küche bieten restaurants mit sitzgelegenheiten im freien?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ) )
welche mahlzeit serviert das thailändische restaurant?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ) )
preisgünstige restaurants mit sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string outdoor ) ) )
welche restaurants bieten das essen gut für kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string delivery ) ) )
restaurants zum mittagessen für kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string meals ) ( string = ) en.food.lunch ) )
mahlzeit nicht von thailändischen café serviert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string ! = ) en.restaurant.thai_cafe ) )
restaurants lage	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string > ) ( number 2 ) ) )
restaurants mindestens mit einer 2-dollar-bewertung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )
ein gruppenfreundliches restaurant mit mittleren preisen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string groups ) ) )
welches 3-sterne-restaurant hat zum mitnehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string takeout ) ) )
welche nachbarschaft hat die meisten restaurants, die gut für gruppen sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ) )
was ist eine mahlzeit, die von einem restaurant serviert wird, das kreditkarten akzeptiert?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ) )
welche restaurants haben kellner und bieten zum mitnehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string waiter ) ) )
das drei-sterne-restaurant hat essen zum mitnehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
welche restaurants sind gut für gruppen und kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string groups ) ) )
das 3 sterne restaurant ist gut für gruppen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
restaurants, die sitzgelegenheiten im freien haben und die liefern	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string delivery ) ) )
restaurants, die kreditkarten akzeptieren und zum mitnehmen anbieten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string credit ) ) )
welches restaurant hat ein preis-rating von zwei dollar-zeichen und sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string outdoor ) ) )
restaurants, die reservierungen annehmen und gut für kinder sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string kids ) ) )
listen sie alle restaurants mit mindestens 3 oder 5 sternen auf	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) )
was ist eine mahlzeit, die ein restaurant, das zum mittagessen geöffnet ist, serviert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ) )
restaurants für gruppen mit lieferung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string delivery ) ) )
welche küche bieten restaurants zum mitnehmen an?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ) )
in welcher nachbarschaft befindet sich das thailändische café?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.restaurant.thai_cafe ) )
restaurants öffnen für mindestens zwei mahlzeiten pro tag	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
thailändisches restaurant, das reservierungen entgegennimmt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string reserve ) ) )
drei-sterne-restaurants, die kreditkarten akzeptieren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string credit ) ) )
restaurant mit außenbestuhlung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string outdoor ) ) )
welche küche hat das restaurant mit reservierungen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ) )
restaurant mit sitzgelegenheiten im freien und einem preis von 2 dollar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
welche restaurants nehmen kreditkarten und haben sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string outdoor ) ) )
welche 3 sterne restaurants haben auch kellner	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string waiter ) ) )
finden sie ein 3-sterne-restaurant oder weniger	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )
mittags geöffnete restaurants, in denen kreditkarten akzeptiert werden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string meals ) ( string = ) en.food.lunch ) )
welche restaurants bieten kellner-service und zum mitnehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string waiter ) ) )
restaurants, die gut für kinder sind und zum mitnehmen anbieten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string kids ) ) )
welches restaurant hat ein preis-rating von zwei dollar-zeichen und hat kellner	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string waiter ) ) )
das thailändische restaurant akzeptiert kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string credit ) ) )
welche restaurants akzeptieren kreditkarten zur zahlung und haben auch einen take-out-service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string takeout ) ) )
ein kinderfreundliches restaurant mit sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string outdoor ) ) )
restaurants mit 3 sternen in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
welches restaurant ist gut für gruppen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ) )
welches restaurant zum mitnehmen hat sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string takeout ) ) )
ein restaurant, das kein thai serviert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string ! = ) en.cuisine.thai ) )
was ist die küche der meisten restaurants	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string cuisine ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurant, das einzigartige mahlzeiten serviert	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurants, die das mittagessen anbieten und servieren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string meals ) ( string = ) en.food.lunch ) )
bereich, der die mindestanzahl von restaurants hat	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
in welchen nachbarschaften ist thai cafe nicht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string ! = ) en.restaurant.thai_cafe ) )
welche nachbarschaften haben mindestens zwei restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurants in der nachbarschaft von midtown west mit einem 2-dollar-zeichen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
restaurants mit mindestens 3 sternen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )
restaurant, das gut für kinder ist und das zum mitnehmen hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string takeout ) ) )
restaurants mit 2 preisklassen, die mittagessen servieren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string meals ) ( string = ) en.food.lunch ) )
welche küche wird von mehr als einem restaurant angeboten?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurants mit 3 sternen und sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string outdoor ) ) )
welche restaurants servieren mittagessen und haben eine 2-dollar-preisbewertung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
welche art von küche gibt es in den restaurants, die das mittagessen servieren?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ) )
restaurants, die für gruppen geeignet sind und im voraus gebucht werden können	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string reserve ) ) )
was sind einige restaurants, die nicht thailändisch dienen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string ! = ) en.cuisine.thai ) )
welches restaurant hat die niedrigste sternebewertung?	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string star_rating ) ) ) )
thai-restaurants, die liefern	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string delivery ) ) )
was ist die küche der meisten restaurants	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string cuisine ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
welches 3-sterne-restaurant hat sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string outdoor ) ) )
welche restaurants haben mehr als zwei arten von küche	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string > ) ( number 2 ) ) )
wie hoch ist die gesamtbewertung aller restaurants?	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ) ) )
welche nachbarschaft hat restaurants, die sitzgelegenheiten im freien bieten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ) )
was ist eine mahlzeit, die von einem restaurant in midtown west serviert wird?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )
restaurant, das mittag- oder abendessen serviert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) ( call SW.concat en.food.lunch en.food.dinner ) ) )
welche restaurants haben preiseinstufungen über oder unter zwei dollar-zeichen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string ! = ) ( number 2 en.dollar_sign ) ) )
restaurant, das kreditkarten akzeptiert und das zum mitnehmen hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string takeout ) ) )
was restaurant ist gut für kinder und gruppen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string groups ) ) )
welches restaurant serviert mehr als zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
restaurants, die liefern	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string delivery ) ) )
welche guten kinderrestaurants servieren thailändische küche	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
restaurants mit take away und zustellung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string delivery ) ) )
welche restaurants sind gleich oder niedriger bewertet als das thailändische cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )
welches restaurant in midtown west nimmt reservierungen entgegen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string reserve ) ) )
in welcher nachbarschaft gibt es restaurants, die kreditkarten akzeptieren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ) )
restaurants, die kinderfreundlich und günstig sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string kids ) ) )
was ist die art der küche des thailändischen cafés	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) en.restaurant.thai_cafe ) ) )
dieses restaurant hat die meisten küchen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( string cuisine ) ) )
nachbarschaft, die nachbarschaft des restaurants ist, dessen preisbewertung 2-dollar-zeichen ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ) )
restaurants in der nähe von zwei stadtteilen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
hotel mit einer preisbewertung von 2 dollar und einer 3-sterne-bewertung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
restaurants in weniger als zwei stadtteilen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string < ) ( number 2 ) ) )
welche drei sterne restaurants sind für kinder zugänglich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
nennen sie ein restaurant in der nähe des thailändischen cafés	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.restaurant.thai_cafe ) ) )
ein mittagsrestaurant mit take out	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string meals ) ( string = ) en.food.lunch ) )
welches restaurant hat eine kleinere sternebewertung als das thailändische cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )
welche restaurants sind unter 3 sternen bewertet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )
welches restaurant hat die höchste bewertung?	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string star_rating ) ) ) )
in welcher nachbarschaft ist thai cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.restaurant.thai_cafe ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.restaurant.thai_cafe ) )
welches restaurant ist nicht in midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string ! = ) en.neighborhood.midtown_west ) )
welche restaurants sind in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
ein restaurant in west midtown oder chelsea	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.concat en.neighborhood.midtown_west en.neighborhood.chelsea ) ) )
welche restaurants haben die gleiche sternebewertung wie das thailändische cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) )
restaurant, dessen küche thailändisch ist und das lieferung hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string delivery ) ) )
thailändisches restaurant mit kellnern	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string waiter ) ) )
thailändische küche restaurant, das eine preisbewertung hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
welche restaurants haben höchstens zwei küchen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string <= ) ( number 2 ) ) )
welche restaurants haben eine bewertung von 2 dollar zeichen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ) )
restaurant in der nähe von midtown west, das mittagessen anbietet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string meals ) ( string = ) en.food.lunch ) )
restaurant, das zum mitnehmen hat und das gut für gruppen ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string groups ) ) )
welches restaurant hat ein 2-dollar-preis-rating und take-away-service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string takeout ) ) )
restaurants, die mittag- und abendessen zum mitnehmen anbieten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string takeout ) ) )
welches restaurant ist in mehreren stadtteilen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string >= ) ( number 2 ) ) )
restaurants, die reservierungen annehmen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ) )
restaurant, dessen preisklasse höchstens 2-dollar-zeichen beträgt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )
restaurants mit essbereich im freien	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) )
kinderfreundliche restaurants, die reservierungen annehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string kids ) ) )
hotel, das lieferservice anbietet und ein preisrating von 2-dollar-zeichen hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
welches restaurant bietet mittagessen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) )
welches restaurant nimmt reservierungen entgegen und hat einen kellnerservice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string waiter ) ) )
welches restaurant bietet reservierungen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) )
in welchem restaurant wird eine ähnliche mahlzeit wie im thai-café serviert?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) ) )
nennen sie ein restaurant mit einem niedrigeren preis als das thai-café	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )
restaurants mit der gleichen küche wie das thai-café	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string cuisine ) ) ) )
welche restaurants nehmen reservierungen entgegen und akzeptieren kreditkarten?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string credit ) ) )
ein reservierungsrestaurant mit medium	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string reserve ) ) )
restaurant, das für gruppen geeignet ist und kreditkarten akzeptiert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string credit ) ) )
restaurant, dessen preisklasse 2-dollar-zeichen ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
thailändisches café mit der niedrigsten preisklasse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )
restaurants, die mittagessen servieren und kreditkarten akzeptieren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string credit ) ) )
welche küche wird von weniger als zwei restaurants serviert	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurant, dessen sternebewertung 3 sterne ist und das reservierungen entgegennimmt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string reserve ) ) )
restaurant, das mittagessen serviert und reservierungen entgegennimmt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string reserve ) ) )
thailändische restaurants, die günstig sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
restaurants mit imbiss und bedienung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string waiter ) ) )
restaurants, die gute mahlzeiten für kinder servieren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ) )
welches restaurant akzeptiert kinder und bietet zum mitnehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string takeout ) ) )
von welchem restaurant in midtown west kann ich etwas zum mitnehmen bekommen?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
restaurant mit sitzgelegenheiten im freien und sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string outdoor ) ) )
restaurants mit 3 sternen, die kreditkarten akzeptieren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
was ist ein restaurant, das kinderfreundlich ist und kellner hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string waiter ) ) )
welches restaurant hat die mehr küche als jedes andere	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( string cuisine ) ) )
welche restaurants haben takeout und eine preisbewertung von 2 dollar zeichen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string takeout ) ) )
restaurant mit sitzgelegenheiten im freien, das kreditkarten akzeptiert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string credit ) ) )
welches restaurant hat den niedrigeren preis bewertung	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string price_rating ) ) ) )
welches restaurant ist gruppenfreundlich und nimmt eine kreditkarte entgegen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string credit ) ) )
nachbarschaft des thailändischen cafés	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string neighborhood ) ) )
restaurants mit einem preis von 2 dollar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
restaurants mit kellnern, die gerichte zum mitnehmen anbieten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string takeout ) ) )
restaurant mit mindestens 3 sternen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )
hotel im stadtteil midtown west mit sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
restaurants mit 3-sterne-bewertungen, die kellner haben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string waiter ) ) )
restaurant, das kein mittagessen serviert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string ! = ) en.food.lunch ) )
welche restaurants mit 3 sternen nehmen reservierungen entgegen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string reserve ) ) )
welche restaurants sind kinderfreundlich und haben zum mitnehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string kids ) ) )
das ist das thailändische restaurant in dieser nachbarschaft	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ) )
welche nachbarschaften haben kinderfreundliche restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ) )
welche nachbarschaft hat zwei restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurants ab 3 preisklassen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )
finden sie ein 2-dollar-preisbewertungsrestaurant mit lieferung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
in welcher nachbarschaft gibt es nur ein oder zwei restaurants?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
stadtviertel mit mehr als 2 restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
welches restaurant befindet sich nicht in midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string ! = ) en.neighborhood.midtown_west ) )
was midtown west restaurant hat mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
restaurants, die mahlzeiten servieren	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
ein restaurant, das gruppenfreundlich ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string groups ) ) )
was ist ein restaurant, das gut für gruppen ist und kellner-service hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string waiter ) ) )
liste alle restaurants in der umgebung von midtown west auf	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
was ist eine art von küche von zwei restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurants mit 3 sternen, die reservierungen annehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
welche restaurants haben ein preisrating von höchstens zwei oder drei dollar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )
welches restaurant ist gut für eine gruppe von menschen und dient auch mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string meals ) ( string = ) en.food.lunch ) )
3-sterne-restaurants nach stadtviertel auflisten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ) )
hotel mit kellnerservice und einrichtungen zum mitnehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string takeout ) ) )
welches restaurant serviert mindestens zwei küchen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string >= ) ( number 2 ) ) )
welche restaurants haben eine sternebewertung von weniger als 3 oder 5 sternen?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )
hotels, die im voraus gebucht werden können und mittagessen anbieten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string meals ) ( string = ) en.food.lunch ) )
was ist die durchschnittliche preisbewertung aller restaurants	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ) ) )
welches restaurant bietet reservierungen und ist gut für kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string reserve ) ) )
restaurant, das reservierungen annimmt und gut für gruppen ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string groups ) ) )
restaurant in der nachbarschaft mit sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ) )
finden sie ein restaurant in einer nachbarschaft	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string < ) ( number 2 ) ) )
restaurants, die im voraus gebucht werden können und für gruppen geeignet sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string groups ) ) )
welches restaurant hat kellner-service und serviert mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string meals ) ( string = ) en.food.lunch ) )
welches restaurant enthält die meisten küchen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( string cuisine ) ) )
restaurant mit einem preis von 2 dollar und 3 sternen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
thai-restaurant, das gut für gruppen ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string groups ) ) )
welches restaurant hat eine preisbewertung von 2-dollar-zeichen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
was ist eine mahlzeit, die das thailändische café nicht serviert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string ! = ) en.restaurant.thai_cafe ) )
welches restaurant hat eine preisbewertung nicht höher als thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )
restaurants ähnlich restaurants in midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )
welche restaurants haben die gleiche preisbewertung wie das thailändische cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) )
was sind einige restaurants, die 4 sterne oder besser sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )
welches restaurant hat zum mitnehmen und serviert mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string meals ) ( string = ) en.food.lunch ) )
welche art von mahlzeiten werden von restaurants serviert, die reservierungen annehmen?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ) )
restaurants mit 2 oder 3 preisen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) )
was ist die preisbewertung des hotels	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ) ) )
nachbarschaft, die nachbarschaft des thailändischen cafés oder der pizzeria juno ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno ) ) )
welche restaurants servieren gutes essen für gruppen und haben zum mitnehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string takeout ) ) )
ein 3-sterne-restaurant mit platz für gruppen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string groups ) ) )
welche restaurants servieren mittag- oder abendessen?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) ( call SW.concat en.food.lunch en.food.dinner ) ) )
welche restaurants in der nachbarschaft haben zum mitnehmen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ) )
welches restaurant hat einen niedrigeren preis als das thai-café	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )
was sind einige 3-sterne-restaurants, die das mittagessen servieren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string meals ) ( string = ) en.food.lunch ) )
welche restaurantkette ist in den wenigsten gegenden zu finden?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( string neighborhood ) ) )
restaurant, das mindestens 3 sterne hat und kinderfreundlich ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
restaurant, dessen preisklasse 2-dollar-zeichen ist und das einen kellnerservice hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string waiter ) ) )
hotel mit einem preisrating von mehr als 2 dollar oder 3 dollar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )
was 3-sterne-restaurant hat lieferung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
in welcher nachbarschaft gibt es restaurants, die mittagessen anbieten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ) )
thailändisches restaurant mit bedienung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
in welchen stadtteilen gibt es die wenigsten restaurants?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( string neighborhood ) ) )
restaurant, das mittagessen serviert und kreditkarten akzeptiert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string credit ) ) )
welches restaurant liefert und ist gut für kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string kids ) ) )
welche restaurants sind gut für gruppen und liefern auch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string groups ) ) )
restaurant mit einem preis von 2 oder 3 dollar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) )
restaurant, das zum mitnehmen hat und reservierungen entgegen nimmt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string reserve ) ) )
welches thailändische restaurant hat die höchste sternebewertung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )
welches restaurant hat take away service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string takeout ) ) )
restaurants mit der niedrigsten sternebewertung	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string star_rating ) ) ) )
was ist eine mahlzeit, die ein restaurant mit lieferservice hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ) )
listen sie die arten der küche für restaurants auf, die gerichte zum mitnehmen anbieten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ) )
restaurant mit zwei küchen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string > ) ( number 2 ) ) )
kinderfreundliche restaurants, die mit 3 sternen bewertet sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string kids ) ) )
finden sie ein 3-sterne-restaurant, das für gruppen geeignet ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
welche küche bietet zum mitnehmen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ) )
restaurants mit imbiss, die kellner haben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string waiter ) ) )
restaurant mit bedienung und gut für kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string kids ) ) )
welches restaurant bietet lieferung und nimmt reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string reserve ) ) )
restaurant mit sitzgelegenheiten im freien und bedienung durch den kellner	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string waiter ) ) )
thailändische oder italienische restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.concat en.cuisine.thai en.cuisine.italian ) ) )
restaurant mit imbiss und thailändischer küche	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
restaurant mit höchstens zwei gerichten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string <= ) ( number 2 ) ) )
finden sie ein restaurant mit weniger sternen als das thai-café	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )
das thailändische cafe ist in welcher nachbarschaft	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string neighborhood ) ) )
hotels mit einem mindestpreis von 2 dollar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )
welche restaurants servieren mittagessen und bieten zum mitnehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string meals ) ( string = ) en.food.lunch ) )
welches restaurant serviert nicht nur mittagessen, sondern hat lieferung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string delivery ) ) )
restaurants zum mittagessen geöffnet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) )
restaurants mit sitzgelegenheiten im freien und zum mitnehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string takeout ) ) )
restaurants mit imbiss, die kinderfreundlich sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string kids ) ) )
was für ein gutes gruppenrestaurant hat lieferung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string delivery ) ) )
finden sie ein thailändisches restaurant, das für gruppen geeignet ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
welche restaurants akzeptieren kreditkarten und reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string credit ) ) )
midtown west nachbarschaft, die auch liefert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string delivery ) ) )
welche restaurants mit essbereichen im freien akzeptieren reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string reserve ) ) )
restaurant, dessen küche küche des thailändischen cafés ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) en.restaurant.thai_cafe ) ) )
restaurant, dessen küche thailändisch ist und dessen küche thailändisch ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
welches restaurant nimmt reservierungen und angebote zum mitnehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string reserve ) ) )
restaurant mit der höchsten preisklasse	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string price_rating ) ) ) )
was sind die küchen aller midtown west restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )
welche thailändischen restaurants sind kinderfreundlich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string kids ) ) )
welche restaurants servieren mittagessen und akzeptieren reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string reserve ) ) )
restaurants mit mehreren küchen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( string cuisine ) ) )
hotel, das keine hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string ! = ) ( number 2 en.dollar_sign ) ) )
restaurant, das lieferung hat und das gut für gruppen ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string groups ) ) )
was ist die natur der küche des thailändischen cafés	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string cuisine ) ) )
restaurant, das lieferservice und mittagessen serviert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string meals ) ( string = ) en.food.lunch ) )
welches gruppenrestaurant nimmt kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string groups ) ) )
finden sie ein restaurant für gruppen mit einem preis von 2 dollar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string groups ) ) )
welches restaurant bietet lieferung und sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string delivery ) ) )
restaurant mit der geringsten anzahl an gerichten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( string cuisine ) ) )
was midtown west restaurant bietet mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
restaurants, die liefern und für große parteien gut sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string delivery ) ) )
restaurants in der midtown west nachbarschaft, die kellner haben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
welche nachbarschaften haben restaurants, die zum mitnehmen anbieten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ) )
was sind einige kinderfreundliche restaurants, die kreditkarten akzeptieren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string credit ) ) )
restaurants mit einem preis von 2 oder 3 dollar	( call SW.listValue ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) )
hotel, das eine preisbewertung oder mehr als 2 dollar hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )
restaurant, das für zwei mahlzeiten geöffnet ist	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
welche restaurants befinden sich in midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )
was ist eine mahlzeit aus einem restaurant, das gut für kinder ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ) )
welches restaurant hat zwei verschiedene küchen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string <= ) ( number 2 ) ) )
welches thailändische restaurant hat eine sternebewertung von 3 sternen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
restaurant, das liefert und einen sitzbereich im freien hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string outdoor ) ) )
ein restaurant mit der höchsten sternebewertung	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string star_rating ) ) ) )
in welchen restaurants stehen mindestens 2 mahlzeiten auf der speisekarte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
das thailändische restaurant hat lieferung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string delivery ) ) )
welche restaurants bieten sitzgelegenheiten im freien und nimmt reservierungen entgegen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string outdoor ) ) )
ein lieferungsrestaurant mit mittleren preisen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string delivery ) ) )
restaurant in der gegend von midtown west, das gut für gruppen geeignet ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string groups ) ) )
ein thailändisches café in der nachbarschaft	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.restaurant.thai_cafe ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.restaurant.thai_cafe ) )
welches restaurant hat die gleiche sternebewertung wie das thai-café?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )
welche restaurants haben sitzgelegenheiten im freien und sind gruppenfreundlich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string outdoor ) ) )
welche stadtteile haben die meisten 3-sterne-restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ) )
welche restaurants bieten lieferservice und servieren mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string meals ) ( string = ) en.food.lunch ) )
welches restaurant ist das teuerste?	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string price_rating ) ) ) )
welches restaurant nimmt reservierungen entgegen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) )
restaurant mit lieferung, die eine 2-dollar-bewertung hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
restaurants mit den meisten standorten in der region	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( string neighborhood ) ) )
was ist die sternebewertung des thailändischen cafés?	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) )
restaurants, die weniger als eine mahlzeit servieren	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurant mit 3 sternen und thailändischer küche	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
restaurant serviert mittagessen, das liefern kann	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string meals ) ( string = ) en.food.lunch ) )
restaurant, das thailändisches essen serviert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ) )
ein drei sterne kinderfreundliches restaurant	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string kids ) ) )
von welchem restaurant kann ich reservierungen erhalten und eine lieferung erhalten?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string reserve ) ) )
restaurants mit 30 bis 40 bewertungen	( call SW.listValue ( call SW.concat ( number 30 en.review ) ( number 40 en.review ) ) )
restaurants mit nicht mehr als zwei küchen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string <= ) ( number 2 ) ) )
restaurants, die zum mitnehmen haben und gut für gruppen sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string groups ) ) )
restaurant mit imbiss und sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string outdoor ) ) )
küche, die küche eines restaurants mit einem preis von 2-dollar-zeichen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ) )
was thailändisches restaurant mittagessen anbietet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
welche thailändischen restaurants bieten einen kellnerservice an	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
welche thailändischen restaurants haben sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
thai-restaurants mit optionalen sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string outdoor ) ) )
welches hotel spricht kinder an und akzeptiert kreditkarten?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string credit ) ) )
restaurant, das kreditkarten akzeptiert und das ausgeliefert wird	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string delivery ) ) )
welche thailändischen restaurants nehmen reservierungen entgegen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
restaurant, das reservierungen entgegennimmt und über sitzgelegenheiten im freien verfügt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string outdoor ) ) )
restaurants, die zum mitnehmen anbieten und mit 2-dollar-zeichen bewertet sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string takeout ) ) )
welches restaurant akzeptiert kreditkarten?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string credit ) ) )
restaurant mit take away und kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string credit ) ) )
welches restaurant hat kellner und zum mitnehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string waiter ) ) )
familienfreundliche restaurants mit preisklasse zwei	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string kids ) ) )
welches restaurant ist gut für gruppen und bietet zum mitnehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string groups ) ) )
welche art von küche hat mindestens zwei restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurants in midtown west mit 3 sternen bewertet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
welche restaurants haben speisen im freien	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) )
restaurant, das zum mittag- und abendessen geöffnet ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) ( call SW.concat en.food.lunch en.food.dinner ) ) )
preisbewertung des thailändischen cafés	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) )
welches restaurant ist gut zum mittag- oder abendessen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) ( call SW.concat en.food.lunch en.food.dinner ) ) )
hotel für kinder mit lieferservice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string delivery ) ) )
welche restaurants sind in der preisklasse von zwei dollar zeichen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
in welcher nachbarschaft gibt es mindestens zwei restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
welche restaurantkette ist in den meisten stadtteilen zu finden?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( string neighborhood ) ) )
restaurant mit essbereich im freien, in dem das mittagessen serviert wird	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string outdoor ) ) )
restaurants mit imbiss, die sich gut für große partys eignen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string takeout ) ) )
welches restaurant nimmt gruppenreservierungen entgegen?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string reserve ) ) )
thailändisches café, das pizzeria serviert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno ) ) )
restaurant, das billiger ist als das thai-café	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )
welche restaurants sind nicht in midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string ! = ) en.neighborhood.midtown_west ) )
eine nachbarschaft mit zwei restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
in welcher nachbarschaft befinden sich die meisten restaurants?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
nachbarschaft, die nachbarschaft des restaurants, das lieferung hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ) )
welches restaurant nimmt reservierungen entgegen und hat sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string reserve ) ) )
restaurant mit sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ) )
midtown west restaurants mit 2-dollar-zeichen preisklasse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
welche restaurants servieren mindestens zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
nimmt reservierungen an	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string reserve ) ) )
welches restaurant in midtown west hat kellner-service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
was für ein restaurant in midtown west haben kellner-service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
welche restaurants sind mit 3 oder 5 sternen bewertet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) )
in welchen stadtteilen gibt es restaurants, die sich für große partys eignen?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ) )
welches restaurant hat thailändische küche	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
welche restaurants servieren die gleiche küche wie das thailändische cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) en.restaurant.thai_cafe ) ) )
restaurants, die reservierungen annehmen und zum mitnehmen anbieten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string reserve ) ) )
welches restaurant hat zum mitnehmen und kellner-service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string takeout ) ) )
welche mahlzeit kann man im restaurant einnehmen?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ) )
restaurants mit den meisten optionen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( string meals ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
welche nachbarschaft sind die restaurants, die in midtown west sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )
restaurant, das mittagessen anbietet und eine drei-sterne-bewertung hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string meals ) ( string = ) en.food.lunch ) )
restaurants mit 3 sternen und einem 2-dollar-zeichen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
welche restaurants nehmen reservierungen entgegen und bieten take away an?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string takeout ) ) )
was für ein thailändisches restaurant hat lieferung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string delivery ) ) )
welche nachbarschaft hat die geringste anzahl von restaurants	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
welches restaurant nimmt kreditkarten und ist gut für gruppen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string groups ) ) )
welches restaurant in midtown west ist gut für gruppen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string groups ) ) )
welches restaurant hat kein 2-dollar-zeichen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string ! = ) ( number 2 en.dollar_sign ) ) )
restaurant, dessen nachbarschaft midtown west ist und das lieferung hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string delivery ) ) )
ein restaurant, das mittagessen und lieferservice anbietet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string delivery ) ) )
welches restaurant befindet sich in midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
was ist ein gutes kinderrestaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) )
liste nach art der küche die restaurants, die das mittagessen servieren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ) )
welches restaurant hat die niedrigste sternebewertung	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string star_rating ) ) ) )
restaurants mit 3 bis 5 sternen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )
welches restaurant bietet mittagessen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) )
das restaurant ist kinderfreundlich und verfügt über einen essbereich im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string outdoor ) ) )
welche restaurants haben schlechtere bewertungen als das thailändische cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )
das restaurant akzeptiert kreditkarten und serviert mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string credit ) ) )
finden sie die art des essens aller restaurants, die reservierungen annehmen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ) )
welches restaurant hat zum mitnehmen und ein mittagsmenü	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string takeout ) ) )
ein restaurant zum mitnehmen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) )
restaurant, das zum mitnehmen hat und das gut für gruppen ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string groups ) ) )
welche restaurants servieren mehr als zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
welche restaurants in midtown west servieren mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
liste alle thailändischen restaurants auf, die mittagessen anbieten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string meals ) ( string = ) en.food.lunch ) )
restaurant, das mittagessen serviert und dessen sternebewertung 3 sterne beträgt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
nachbarschaft, die nachbarschaft des restaurants, das das mittagessen serviert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ) )
3-sterne-restaurants, die kreditkarten akzeptieren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string credit ) ) )
welche nachbarschaft ist thai cafe oder pizzeria juno in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno ) ) )
mitarbeiter, der nach alice begann verlassen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie mitarbeiter mit enddaten, die nicht größer sind als mitarbeiter alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist alices arbeitgeber seit 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employer ) ) )
in welcher stadt ist eine person geboren, die mindestens 180 cm groß ist?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
menschen, die am oder nach dem datum geboren wurden, an dem alice zu arbeiten begann	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) )
hier finden sie alle im jahr 2004 geborenen alleinstehenden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
mitarbeiter, deren letzter tag vor alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde freunde von studenten, deren letzter tag vor 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen, die vor alice geboren wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )
welches mitarbeiterstartdatum ist das selbe wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche mitarbeiter am letzten tag waren frühestens am ersten tag von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist alice's enddatum, als sie studentin war?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) )
wer ist mit studenten befreundet, deren startdatum 2004 ist?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welches geschlecht hat der arbeitnehmer, der im jahr 2004 angefangen hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
woher kamen die menschen, die nach 2004 zu arbeiten begannen?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welcher mitarbeiter hat ein enddatum, das vor dem enddatum von alice liegt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die bei mckinsey oder google arbeiten	( call SW.listValue ( call SW.concat en.company.mckinsey en.company.google ) )
in welcher stadt wurden mindestens zwei personen geboren?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
finde mich die freunde des mitarbeiters, der vor 2004 angefangen hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
geschlecht des arbeitnehmers, dessen eintrittstermin nicht 2004 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wann ist alice an die brown university gekommen	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string education_start_date ) ) )
finden sie die geburtsstadt der schüler, deren startdatum nach 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie menschen mit einer höhe von 180 cm, die das gleiche geschlecht wie alice haben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string gender ) ) ( string = ) en.person.alice ) )
alice freunde, die singles sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
mitarbeiter, die vor 2004 angefangen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
2004 absolventen freunde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
ein mitarbeiter endet vor oder nach dem ende von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
geburtsort des arbeitnehmers, dessen enddatum nicht nach 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die in der gleichen stadt wie alice geboren wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) ) )
menschen, die für weniger als zwei arbeitgeber arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist in einer stadt geboren, in der alice geboren ist?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) ) )
wer hat mehr als zwei geschlechter	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string > ) ( number 2 ) ) )
freunde von alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
studenten, die vor 2004 ihren abschluss nicht gemacht haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie geburtsorte von studenten, deren letzter tag im jahr 2004 oder später war	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
alle leute, die gerade online sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) )
geschlecht, das geschlecht von weniger als drei personen ist	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
welche person ist ein 180 cm großer rüde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string gender ) ( string = ) en.gender.male ) )
welche schüler haben ein startdatum, das dem von schüler alice entspricht?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die freunde haben und nach 2004 anfingen zu arbeiten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wer ist mit der person befreundet, die kein software-ingenieur ist?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wo waren arbeitende menschen, die nicht aufgehört haben, im jahr 2004 geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
männer, mit denen alice befreundet ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string gender ) ( string = ) en.gender.male ) )
ein student, der vor 2004 oder 2010 angefangen hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher mitarbeiter früher als 2004 endete	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
hier finden sie alle beziehungsstatus von mitarbeitern, die ihren job nach 2004 begonnen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
geburtsorte von menschen, die nach 2004 ihren arbeitsplatz gekündigt haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter, deren enddatum nach dem startdatum von alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welches geschlecht hat die meisten menschen?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string gender ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
in welcher stadt wurden 180 cm große menschen geboren?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
nennen sie einen mitarbeiter, der gekündigt hat, bevor alice geboren wurde	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welches geschlecht haben die mitarbeiter, die 2004 noch nicht angefangen haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wann hat alice angefangen, die schule zu besuchen?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) )
suche nach schülern, die am oder nach alice's letztem tag beginnen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche studenten vor dem abschluss von alice angefangen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
listen sie den beziehungsstatus von personen auf, die ihre arbeit vor 2005 gekündigt haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was für leute haben ein enddatum von 2004 und eine größe von 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )
welche mitarbeiterin hat den gleichen geburtstag wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie mitarbeiter mit einem startdatum, das mindestens dem enddatum von mitarbeiter alice entspricht	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
leute, die nach alice in die schule kamen, fingen an zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die mit jemandem befreundet sind, der seine arbeit in oder vor 2004 aufgenommen hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
beziehungsstatus des mitarbeiters, dessen startdatum nicht nach 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
geschlecht des studenten, dessen enddatum mindestens 2004 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
mitarbeiter, deren letzter tag vor oder am letzten tag von alice war	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus der studierenden, die vor 2004 geendet haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
studenten, die nicht im jahr 2004 begonnen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde freunde von menschen, die im jahr 2004 geboren wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )
person mit den meisten freunden	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( string friend ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
person, die nach dem abschluss von alice geboren wurde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) )
finde alle freunde von alice, die gerade online sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string friend ) ( string = ) en.person.alice ) )
welcher mitarbeiter zuletzt eingestellt wurde	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
online männliches mitglied	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string gender ) ( string = ) en.gender.male ) )
student, der vor 2004 oder 2010 endet	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
nennen sie eine 2004 geborene person, die mit alice befreundet ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
ist die einzelne person	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )
personen mit der geringsten anzahl von beziehungsstatus	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( string relationship_status ) ) )
welcher mitarbeiter hat ein startdatum, das dem enddatum von alice entspricht?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus von personen, die gerade online sind?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
finden sie mitarbeiter, deren starttag mit dem geburtsdatum von alice übereinstimmt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche personen sind mit mitarbeitern befreundet, die vor 2004 angefangen haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
die person, die angemeldet ist und die im jahr 2004 geboren wurde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string logged_in ) ) )
wie ist der status der mitarbeiterbeziehung, die im jahr 2004 endete?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
alle 180 cm großen menschen, die informatik studiert haben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) )
menschen, die zur braunen universität gingen und ledig sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string university ) ( string = ) en.university.brown ) )
finden sie geburtsorte von studenten ab 2004 und später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finde mich nach dem geschlecht der studenten, die keine braune universität besucht haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
was hat alice studiert, als sie 2004 ihren abschluss gemacht hat?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string field_of_study ) ) )
studenten, die am selben datum wie alice begannen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
person, die einen geburtstag vor alice absolventen hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) )
eine person, die mit studenten befreundet ist, die in und nach 2004 mitgemacht haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
der nach alices kündigung eingestellt wurde	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
ein freund von jemandem, der nach 2004 angestellt war	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die nach 2004 oder nach 2010 aufgehört haben zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
suche nach schülern, deren letzter tag nach dem ersten tag von alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wann hat alice den job angetreten, den sie im jahr 2004 verlassen hat?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_start_date ) ) )
welches geschlecht hat die online-person?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
suche mir den schüler, der die schule vor alice verlassen hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
woher kamen die schüler aller fachrichtungen außer der informatik?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
mitarbeiter, die vor oder gleichzeitig mit alice anfangen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche mitarbeiter haben spätestens am abschlusstag von alice angefangen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist vor 2004 geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
personen, die vor 2004 oder vor 2010 eingeschult wurden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
leute, die vor alice in die schule kamen, hörten auf zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
leute, die aufhörten zu arbeiten, als alice die schule abbrach oder früher	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche mitarbeiter haben ein enddatum, das nach 2004 oder 2010 liegt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
woher kamen menschen, die nach 2004 aufgehört haben zu arbeiten?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche stadt ist der geburtsort der mitarbeiter vor 2004?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was sind die anfangs- und enddaten der anstellung von alice?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist der beziehungsstatus einer person, die nicht bei mckinsey beschäftigt ist?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welcher mitarbeiter hat die meisten berufsbezeichnungen?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie den geburtsort eines studenten, der keine informatik studiert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welches geschlecht haben mindestens zwei personen?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
studenten, die nach 2004 und spätestens 2010 beginnen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche person hat den gleichen beziehungsstatus wie alice?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( call SW.getProperty en.person.alice ( string relationship_status ) ) ) )
welche männer sind 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string gender ) ( string = ) en.gender.male ) )
mitarbeiter, die nicht bei mckinsey beschäftigt sind	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die vor 2004 aufgehört haben zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche personen sind mit studenten befreundet, die ihren abschluss erst 2004 gemacht haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche studenten nach 2004 ihren abschluss machen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
geschlecht des studenten, dessen universität keine braune universität ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie mitarbeiter freunde mit einem letzten tag im jahr 2004 oder früher	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mit welchen menschen alice befreundet ist, sind befreundet mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
welche 2004 geborene person ist 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
was die schüler im selben jahr schulabschluss machten, begann alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
freunde von mitarbeitern, die ihren abschluss in oder nach 2004 haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wer ist mit dem mitarbeiter befreundet, der spätestens 2004 angefangen hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finden sie den beziehungsstatus von mitarbeitern, deren enddatum größer als 2004 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die am oder vor dem schulbeginn die schule abgebrochen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher student hat mindestens 2 universität zu gehen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string university ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
freunde von alice, die 180 cm groß sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
welche leute sind mit alice befreundet und 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
wie ist der beziehungsstatus von menschen, die ab 2004 zu arbeiten begonnen haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was ist das geschlecht des mitarbeiters, der nach 2004 angefangen hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter, die vor oder nach alices ende anfangen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus von menschen, die im oder nach dem schuljahr 2004 eingeschult wurden?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wo ist die person geboren, die 180 cm groß ist?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
mitarbeiter, der am oder nach dem beitritt von alice abgereist ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, deren startdatum vor oder am enddatum von alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
der im jahr 2004 geboren wurde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
wie ist der status der mitarbeiterbeziehung, die spätestens 2004 begonnen hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche mitarbeiter ein enddatum haben, das nicht höher ist als das startdatum von student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welches geschlecht haben schüler, die vor 2004 eingeschult wurden?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
fein mir mitarbeiter, die vor alice geburtstag verlassen werden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, die das unternehmen frühestens zum beginn von alice verlassen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die mit jemandem befreundet sind, der 2004 noch nicht angefangen hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was ist die universität einer person mit einer größe von 180 cm?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.university ) ( string ! type ) ) ( call SW.reverse ( string university ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
mitarbeiter, die nach alice kündigten, verließen die schule	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
schüler, die am selben tag oder vor dem beginn der schulzeit noch am leben waren, fingen an	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
studenten, deren enddatum das enddatum von alice ist oder später	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
leute, die vor alice in die schule kamen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche studenten gehen zur braunen universität oder ucla	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.concat en.university.brown en.university.ucla ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer war der erste, der anfing zu arbeiten?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
studenten, deren startdatum nicht später als das von alice ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
in welcher stadt wurde der angestellte geboren, der kein software-ingenieur ist?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
der geburtsort eines mitarbeiters, der nicht im jahr 2004 endet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
geschlecht der arbeitnehmer, die in oder nach 2004 beginnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welcher student hat am selben tag seinen abschluss gemacht wie alice?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter, die an dem tag angefangen haben, an dem alice ihren abschluss gemacht hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
schüler, die am geburtstag von alice fertig sind	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche von alices freunden wurden in new york geboren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string birthplace ) ( string = ) en.city.new_york ) )
welche leute sind mit alices freunden befreundet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
student, der am selben tag wie alice geburtstag begann	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die mit studenten befreundet sind, die ihren abschluss nicht im jahr 2004 gemacht haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
beziehungsstatus des studenten, dessen startdatum vor 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie die geburtsorte neuer mitarbeiter, die wir ab 2004 haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
der nach 2004 aufgehört hat zu arbeiten und verbindungen zu mir hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finden sie menschen mit einer größe von 180 cm, die auch ein geburtsdatum von 2004 haben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
finde menschen, die mit alice befreundet und ledig sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
finde jemanden, der vor alice geboren wurde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )
welche mitarbeiter haben einen starttermin von 2004 oder 2010?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
geburtsstadt von alice's freundin	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
welche mitarbeiterin hat gleich angefangen, als alice ihren job gekündigt hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus von mitarbeitern, deren letzter tag nicht vor 2004 lag?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
beziehungsstatus aller studenten, deren enddatum 2004 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche studenten haben 2004 oder 2010 ihren abschluss gemacht?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie das studienfeld aller personen mit einer körpergröße von 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.field ) ( string ! type ) ) ( call SW.reverse ( string field_of_study ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
menschen, die entweder mit alice oder bob befreundet sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
ein student, der an dem tag ging, an dem alice es tat oder zuvor	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
person, die vor dem startdatum von alice geboren wurde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )
welche mitarbeiter, die keine software-ingenieure sind	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche menschen haben einen geburtsort in new york, die auch mit alice befreundet sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
leute, die nicht mit alice befreundet sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string ! = ) en.person.alice ) )
leute mit freunden finden, die vor 2004 in die schule gekommen sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
was menschen mit einer körpergröße von 180 cm und einem studienfach haben, das informatik ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) )
welches geschlecht hat die person, die 180 cm groß ist?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
studenten, die ihren abschluss nicht früher als am tag des beginns von alice gemacht haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
geburtsorte von alice's freunden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
nennen sie die stadt, in der ein mitarbeiter geboren wurde, der spätestens 2004 seinen betrieb aufgenommen hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
studenten, deren enddatum vor dem startdatum von alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
ein student, der keine braune universität besucht	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
studierende, die vor oder im jahr 2004 abschließen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche schüler haben ein startdatum von 2004 oder später und wer sind ihre freunde?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen in der gleichen stadt wie alice geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) ) )
suche nach schülern, deren letzter tag 2004 oder später war	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter, die anfingen zu arbeiten bevor alice die schule beendete	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
in welchen städten wurden die einzelnen menschen geboren?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )
mitarbeiter, die am selben tag oder nach dem schuleintritt von alice ihren job gekündigt haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche städte sind der geburtsort von studenten nach 2004?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche von alices freunden sind männlich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string gender ) ( string = ) en.gender.male ) )
nennen sie alle schüler, die vor alice gekündigt haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie den beziehungsstatus von studenten mit einem startdatum nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
geburtsort von nur einer person	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
hier finden sie alle beziehungsstatus der schüler, die im jahr 2004 und früher begonnen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen mit mindestens zwei geschlechtern finden	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string >= ) ( number 2 ) ) )
ein mitarbeiter, der vor 2004 endete	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus von menschen, die nach 2004 in die schule gekommen sind?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wer ist eine person, deren fach informatik ist und deren größe 180 cm beträgt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) )
menschen, die mit alice befreundet sind, deren größe 180 cm beträgt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
welcher mitarbeiter wurde gekündigt, nachdem alice zu arbeiten anfing	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
anzahl der städte, aus denen menschen stammen	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ) )
freunde von menschen finden, die 2004 nicht eingeschult wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
die studenten haben spätestens am letzten arbeitstag von alice ihren abschluss gemacht	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
schüler, die die schule beendet hatten, nachdem alice zu arbeiten begonnen hatte	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche mitarbeiter haben nach 2004 oder 2010 angefangen?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, die ihre arbeit in oder vor 2010 aufgenommen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, die nach alices arbeitsaufnahme anfingen, kündigten ihren job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
nennen sie eine einzelne person, die mit alice befreundet ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string friend ) ( string = ) en.person.alice ) )
wie ist der beziehungsstatus von studierenden, die nicht im jahr 2004 angefangen haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie die geburtsstadt der mitarbeiter mit einem startdatum nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welcher mitarbeiter kündigte zuerst	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde einen von alices freunden, der in new york geboren wurde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string birthplace ) ( string = ) en.city.new_york ) )
freunde von studenten vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
geschlecht eines arbeitnehmers ab 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finde menschen, die den gleichen geburtsort haben wie alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.getProperty en.person.alice ( string birthplace ) ) ) )
welcher student hat weniger als zwei studienfächer	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
der vor alices letztem arbeitstag geboren wurde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) )
wie ist der beziehungsstatus des studenten, der nicht informatik studiert?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
student, dessen enddatum nicht nach dem geburtsdatum von alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
leute, die einen freund haben, der die schule in oder nach 2004 abgebrochen hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
leute, die anfingen zu arbeiten, bevor alice die schule abbrach	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde single-status-leute, die alice's freund sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
menschen, die mit studenten befreundet sind, die 2004 nicht geendet haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen, die nach 2004 anfingen zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche menschen wurden am selben ort wie alice geboren?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.getProperty en.person.alice ( string birthplace ) ) ) )
was ist der geburtsort von studenten, die keine braunen studenten sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finde alices freund, der eingeloggt ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string logged_in ) ) )
mitarbeiter, die so spät wie alice gekündigt haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
person, die mit einem mitarbeiter befreundet ist, der seit 2004 arbeitet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wer ist mit dem mitarbeiter befreundet, der das unternehmen bis 2004 verlässt?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
hier finden sie die namen aller studenten, die zwischen 2004 und 2010 ihren abschluss gemacht haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter, die nicht im jahr 2004 begonnen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche person ist mit einem studenten befreundet, der vor 2004 angefangen hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche stadt ist der geburtsort des schülers, der die schule vor 2004 beendet hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
suche nach personen mit zwei beziehungsstatus	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( number 2 ) ) )
schüler, der am oder vor dem tag kam, als alice ging	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist der geburtsort von mitarbeitern, deren letzter tag nicht im jahr 2004 war	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wann hat alice angefangen, für mckinsey zu arbeiten?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string employment_start_date ) ) )
person namens alice, die informatik an einer universität studiert	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string university ) ) )
wie ist der beziehungsstatus eines mitarbeiters, der 2004 oder später gekündigt hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was ist der geburtsort des studenten, der bis 2004 eingeschrieben wurde?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welcher mitarbeiter hat kürzlich gekündigt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, die einen arbeitsplatz mit lebendig teilen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche studenten sind teil von zwei universitäten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string university ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde mich alle leute mit dem namen alice, die im laufe des jahres 2004 aufgehört haben	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string education_end_date ) ) )
welche schüler haben den frühesten starttermin	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie geburtsorte von angestellten, die keine mckinsey-angestellten sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
stadt, in der am wenigsten menschen geboren wurden	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string birthplace ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
arbeitnehmer, dessen arbeitgeber nicht mckinsey ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde mich alle menschen mit dem gleichen geschlecht wie alice oder bob	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
geschlecht der arbeitnehmer, die vor 2004 ausgeschieden sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
der geborene ist 2004 und ist ein mann	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
wer ist befreundet mit alice und ist männlich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string gender ) ( string = ) en.gender.male ) )
leute, die an dem tag angefangen haben, an dem alice ihren job gekündigt hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer hat die geringste anzahl von freunden	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string friend ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
mitarbeiter, die gekündigt haben, nachdem alice ihren job angefangen hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter nicht ab 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche leute geboren wurden, nachdem alice ihren job verlassen hatte	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) )
was ist das geschlecht, das das geschlecht von höchstens zwei personen ist	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
wer ist mit der einzelnen person befreundet?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )
suche nach mitarbeitern, die am oder nach dem geburtsdatum von alice beginnen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus von studenten mit einem enddatum, das nicht 2004 liegt?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche schüler haben ein enddatum das vor dem startdatum von alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher student ist im selben fach wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen mit freunden, die 2004 oder später mit der universität angefangen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
freund eines mitarbeiters, dessen startdatum vor 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die nicht mit alice befreundet sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string ! = ) en.person.alice ) )
geschlecht der studierenden, die zeitgleich mit oder vor 2004 beginnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie personen, die mitarbeiter mit einem enddatum bis spätestens 2004 sind, und deren freunde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
leute, die die schule abgebrochen haben, nachdem alice in die schule gekommen ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
geschlecht der arbeitnehmer, die vor oder in 2004 beginnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die 180 cm groß und single sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
alleinerziehende, die 2004 geboren wurden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
suche mir alle schüler, die zur selben zeit oder nach dem start von alice beginnen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde eine universität von menschen, die 180cm groß sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.university ) ( string ! type ) ) ( call SW.reverse ( string university ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
person, die bei mckinsey oder google arbeitet	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string = ) ( call SW.concat en.company.mckinsey en.company.google ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher mitarbeiter nach 2004 verstorben ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, die zu ende gehen, wenn oder bevor alice beginnt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist in den meisten beziehungen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string relationship_status ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
wie ist das geschlecht der arbeitnehmer, die nach 2004 angefangen haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mit wem war der mitarbeiter, mit dessen startdatum mindestens 2004 befreundet war?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finden sie mitarbeiter, deren startdatum vor dem enddatum von student alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die am selben tag geboren wurden, sind in die schule gekommen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) )
finden sie die geburtsstädte von schülern mit einem startdatum ab 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
mit wem ist eine person, mit deren universität keine braunen universitätsfreunde sind?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wie ist der beziehungsstatus von mitarbeitern, die ihre arbeit vor 2004 aufgenommen haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die nach 2004 geboren wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
finden sie mitarbeiter freunde mit letzten tag nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wer hat mehr als zwei geschlechter	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string > ) ( number 2 ) ) )
ist alice von mckinsey beschäftigt	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string employer ) ) )
finden sie mitarbeiter, deren enddatum mit dem von student alice übereinstimmt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus von schülern, die vor 2004 eingeschult wurden?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
studenten freund, dessen universität nicht braun universität ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche freunde haben 2004 aufgehört zu arbeiten?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die mit jemandem befreundet sind, der 2004 noch nicht angefangen hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche mitarbeiter haben ein späteres enddatum als mitarbeiter alice?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
geschlecht eines studenten, der keine braune universität besucht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
geschlecht, das weniger als zwei personen hat	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
beziehungsstatus von studenten, die nicht an einer braunen universität studieren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
geschlecht des studenten, dessen startdatum nicht 2004 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
student mit startdatum nicht nach enddatum von student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
ist die person ledig oder verheiratet	( call SW.listValue ( call SW.concat en.relationship_status.single en.relationship_status.married ) )
wann hat alice aufgehört, für mckinsey zu arbeiten?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string employment_end_date ) ) )
finde jeden, der zwei geschlechter hat	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( number 2 ) ) )
was ist das enddatum 2004 von alice?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string education_end_date ) ) )
mit wem sind mitarbeiter mit einem startdatum nicht von 2004 befreundet?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche schüler haben ein enddatum, das nach dem startdatum von schüler alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
geschlecht der mitarbeiter, die nicht als softwareentwickler tätig sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wann hat alice als mitarbeiterin angefangen	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) )
wer ist kleiner als alice?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )
wie ist der beziehungsstatus von menschen, die vor 2004 eingeschult wurden?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wie viele berufsbezeichnungen gibt es?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.job_title ) ( string ! type ) ) ) )
welcher student ist nicht von der braunen universität	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer arbeitet für jemand anderen als mckinsey	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
schüler, die vor oder an alices letztem tag angefangen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer wurde am oder nach alices letztem schultag geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) )
menschen mit weniger als zwei freunden	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
finde mitarbeiter mit dem gleichen letzten tag wie student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche mitarbeiter nach alice angefangen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
studenten, die anfangen, bevor alice fertig ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die an dem tag geboren wurden, als alice mit der arbeit begann	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) )
in welcher stadt wurde der student geboren, der das enddatum 2004 hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche person ist mit einem mitarbeiter befreundet, der 2004 hier war?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
geburtsort von studenten, deren enddatum vor 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche menschen sind 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
finde mich studenten, deren startdatum entweder 2004 oder 2010 ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
such mir den studenten, der vor alice angefangen hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher arbeitnehmer spätestens 2004 ausscheidet	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus eines mitarbeiters, dessen startdatum nach 2004 liegt?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche studenten haben ein enddatum nicht früher als 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wie groß ist alice?	( call SW.listValue ( call SW.getProperty en.person.alice ( string height ) ) )
nenne einen mitarbeiter, der vor alices kündigung angefangen hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche von alices freunden ist 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
arbeitnehmer, dessen enddatum nicht nach 2004 liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche mitarbeiter haben einen starttermin, der dem von schüler alice oder später entspricht?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wo ist der geburtsort des studenten, der vor 2004 angefangen hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche studenten haben nicht mehr als zwei majors	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer ist mit studenten befreundet, die vor 2004 angefangen haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
personen mit einem beziehungsstatus von mindestens zwei personen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
welche studenten ihren abschluss spätestens 2004 oder 2010 machen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie alle menschen, die nicht in einer beziehung sind und im jahr 2004 geboren wurden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
suche nach studenten mit weniger als zwei studienrichtungen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
in welchen städten in new york wurden menschen geboren?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )
freunde von studenten, die vor 2004 angefangen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
student, der 2004 als datum hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
geschlecht der schüler, die 2004 nicht eingeschult wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
freund eines mitarbeiters, dessen berufsbezeichnung nicht softwareingenieur ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
leute, die freunde haben, die gerade online sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
suche mir eine person, die 2004 oder 2010 geboren wurde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) )
geschlecht der studierenden, die kein informatikstudium absolvieren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welcher mitarbeiter hat ein startdatum, das vor dem geburtsdatum von alice liegt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche person wurde früher als die von alice geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )
personen, die vor 2004 geboren wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
welche studenten machen ihren abschluss vor alice?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wie ist der beziehungsstatus von menschen, die in new york geboren sind?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )
wer sind freunde mit verbindung, die vor 2004 in die schule gekommen sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
geschlecht des mitarbeiters, dessen enddatum vor 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welches mitarbeiter startdatum ist nicht 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter ab dem frühesten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
suche nach studenten, die nicht mehr als zwei studienrichtungen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die studieren oder studiert haben, außer an einer braunen universität	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wessen freund ist eingeloggt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
jeder mann, der eingeloggt ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string logged_in ) ) )
welche person ist mit dem mitarbeiter befreundet, der vor 2004 eingestellt wurde?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter, die vor alice fertig sind	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist der beziehungsstatus von mitarbeitern mit einem anderen startdatum als 2004?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
ein freund von alice, der eingeloggt ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string logged_in ) ) )
liste der geburtsorte von personen, die ihr studium vor 2004 abgeschlossen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
studierende mit den wenigsten studienrichtungen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
personen, die vor 2004 geboren wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
welche mitarbeiter am letzten tag waren nach alices letztem tag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
arbeitnehmer, der den gleichen arbeitgeber mit der arbeitnehmerin alice teilt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer arbeitet nicht für mckinsey?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die männlich sind und im jahr 2004 geboren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
finde mich alle mitarbeiter die am selben tag anfangen wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche leute sind mit studenten befreundet, die ein startdatum von 2004 oder später haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
was sind die geburtsorte der angemeldeten personen?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
welche person hat weniger als zwei freunde	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
beziehungsstatus von nicht-software-ingenieuren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wer mit alice befreundet ist, hat auch den beziehungsstatus single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
menschen, die bei mckinsey arbeiten und 180 cm groß sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string employer ) ( string = ) en.company.mckinsey ) )
welcher softwareentwickler ist 180 cm groß?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) )
welche studenten nach alice graduieren, beginnt ihren neuen job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde eingeloggte personen, die alices freunde sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
welche studenten hauptfach informatik oder geschichte	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.concat en.field.computer_science en.field.history ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
studenten, die nach alice fertig werden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher mitarbeiter hat seinen job zuerst gekündigt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
beziehungsstatus des mitarbeiters, der seine tätigkeit vor oder nach 2004 beendet hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mit wem ist der student, mit dessen startdatum mindestens 2004 befreundet ist?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
geschlecht nur einer person	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
arbeitnehmer mit höchstens zwei berufsbezeichnungen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist die durchschnittliche größe von allen	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ) ) )
was ist das geschlecht der arbeitnehmer mit anderen letzten tagen als 2004?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter starten spätestens	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, die ihren job kündigten, bevor alice zu arbeiten anfing	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
suche nach schülern mit einem startdatum von 2004 oder später	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
ein student, der anfängt, bevor alice fertig ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wo sind die menschen geboren, die ihre arbeit im oder nach dem jahr 2004 aufgenommen haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
freunde von menschen finden, die ihre arbeit vor 2004 begonnen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was ist der beziehungsstatus aller, die kein software-ingenieur sind?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die nur in new york geboren wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string ! = ) en.city.new_york ) )
wer ist die person, mit der 180 cm befreundet sind?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
finden sie mitarbeiter, deren enddatum das startdatum von student alice oder später ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist die geburtsstadt eines studenten, der während oder vor 2004 angefangen hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welcher mitarbeiter hat früher als alices geburtsdatum angefangen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
singles, die im jahr 2004 geboren wurden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
der nach der studentin alice zu arbeiten begann	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
das enddatum des schülers ist größer als das startdatum von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die zwei oder weniger geburtsorte haben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string <= ) ( number 2 ) ) )
welche person wurde in new york geboren und ist mit alice befreundet?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string friend ) ( string = ) en.person.alice ) )
ein arbeiter, der ein software-ingenieur oder programm-manager ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.concat en.job_title.software_engineer en.job_title.program_manager ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
kann nicht umschreiben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
arbeitnehmer mit nicht mehr als zwei arbeitgebern	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde alle single-leute, die mit alice befreundet sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
studenten, die am oder nach dem geburtstag von alice ihren abschluss gemacht haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welches geschlecht haben die mitarbeiter, die 2004 nicht gekündigt haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was ist der beziehungsstatus eines mitarbeiters, der kein software-ingenieur ist?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter mit einer berufsbezeichnung	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus von schülern mit einem enddatum ab 2004?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finde die freunde von leuten, die gerade online sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
wer ist ein freund von alice?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string friend ) ( string = ) en.person.alice ) )
beziehungsstatus von mitarbeitern, deren enddatum nicht vor 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
freund von jemandem, der vor 2004 gekündigt hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
der geburtsort eines studenten, der nicht im jahr 2004 begann	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
der 2004 in new york geboren wurde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
finde mich menschen geboren im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
finden sie den beziehungsstatus von 180 cm großen personen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
studierende mit einem oder zwei studienrichtungen finden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
leute mit nur einem freund	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
welcher mitarbeiter hat nicht mehr angefangen als alices	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche schülerin endete spätestens am geburtsdatum von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
beziehungsstatus wie die meisten personen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string relationship_status ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
wie viele geschlechter gibt es?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ) )
wer ist softwareentwickler oder programmmanager?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.concat en.job_title.software_engineer en.job_title.program_manager ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche städte sind der geburtsort von studenten, die 2004 noch nicht angefangen haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
studenten beenden gleichzeitig mit alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die zur selben zeit oder nach alice zu arbeiten begannen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde die leute, die ihren job gekündigt haben, bevor alice zu ihrem arbeitszimmer kam	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche mitarbeiter haben ein enddatum von 2004 oder später und wer sind ihre freunde?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
angestellter, der als software-ingenieur oder manager arbeitet	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.concat en.job_title.software_engineer en.job_title.program_manager ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche schüler haben die schule in den jahren 2004 und 2010 beendet?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welches geschlecht hat die studentin, die ihren abschluss 2004 gemacht hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
mitarbeiter, der am selben tag oder später als alice abreiste	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter mit dem größten enddatum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
entweder alice oder bob	( call SW.listValue ( call SW.concat en.person.alice en.person.bob ) )
welcher mitarbeiter endete am selben tag wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
derzeit angemeldete personen, die in new york geboren wurden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string birthplace ) ( string = ) en.city.new_york ) )
welcher student hat den job angefangen, bevor alice gekündigt hat?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche mitarbeiter haben ein enddatum, das mit dem startdatum von mitarbeiter alice identisch ist?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
student, der nicht weniger als ein studienfach hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
arbeitnehmer, dessen startdatum nach 2004 liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
suche nach schülern mit einem startdatum, das mit dem enddatum der mitarbeiterin alice übereinstimmt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
arbeitnehmer, dessen enddatum nicht 2004 ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
ermitteln sie den beziehungsstatus von mitarbeitern, deren enddatum nicht älter als 2004 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finde menschen, die männlich sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )
suche mitarbeiter, die vor alice 'letztem tag beginnen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, dessen startdatum nicht vor dem startdatum von mitarbeiter alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus von studenten mit einem enddatum vor 2004?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen, die mit mitarbeitern befreundet sind, die keine software-ingenieure sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche schüler haben ein enddatum, das größer ist als das von schüler alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist die nummer einer person?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
was ist das identifizierende geschlecht der transgender-person?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
freunde von studenten, die in jahren außer 2004 beigetreten sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen geboren zwischen 2004 und 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
mit was für einer person ist alice befreundet?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string logged_in ) ) )
was ist der geburtsort von studenten, die ihren abschluss im jahr 2004 nicht gemacht haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welcher student hat einen starttermin bis spätestens 2004?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wie ist der beziehungsstatus von menschen, die die schule vor 2004 beendet haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
geschlecht der studierenden, die 2004 nicht abgeschlossen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
suche nach schülern, die am selben tag beginnen wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wie ist der beziehungsstatus von studierenden ab 2003 oder früher?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen in new york oder peking geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.concat en.city.new_york en.city.bejing ) ) )
welcher beziehungsstatus wird von der geringsten anzahl von personen aufgelistet?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string relationship_status ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
wo sind die leute online geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
leute, die am selben tag aufgehört haben zu arbeiten, sind in die schule gekommen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
das geschlecht eines studenten endet vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie den beziehungsstatus von studenten, deren startdatum nicht später als 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
der männlich ist und mit alice befreundet ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
mitarbeiter, dessen startdatum vor dem startdatum von student alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
ist diese person ledig oder verheiratet?	( call SW.listValue ( call SW.concat en.relationship_status.single en.relationship_status.married ) )
mitarbeiter mit der gleichen berufsbezeichnung wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher mitarbeiter hat zeitgleich mit alice angefangen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche schüler haben ein enddatum, das nicht früher als alices geburtstag ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer ist mit dem studenten befreundet, der 2004 oder später seinen abschluss gemacht hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wie heißt die geburtsstadt aller mitarbeiter, deren enddatum unter 2004 liegt?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
arbeitnehmer mit höchstens zwei arbeitsplätzen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche schülerin ist am letzten tag eingeschult worden alice hat gearbeitet	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher arbeitnehmer hat für die wenigsten arbeitgeber gearbeitet?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde mich freunde von studenten, die vor 2004 ihren abschluss gemacht haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche schüler haben ein enddatum, das nicht höher ist als das startdatum von mitarbeiter alice?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was männlich ist single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string gender ) ( string = ) en.gender.male ) )
wer ist mit einem mitarbeiter befreundet, der nicht für mckinsey arbeitet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche mitarbeiter haben ein startdatum, das nicht später als das geburtsdatum von alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
suche nach schülern mit einem enddatum, das mit dem startdatum der mitarbeiterin alice identisch ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche person hat den beziehungsstatus single?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
welche mitarbeiter am letzten tag sind, ist nicht früher als 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist das geschlecht der menschen, die vor 2004 eingeschult wurden?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
studenten, deren enddatum vor dem geburtsdatum von alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche geschlechter sind die menschen, die vor 2004 in die schule gekommen sind?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finde 180 cm große leute und besuche die braune universität	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string university ) ( string = ) en.university.brown ) )
anfangsdatum der anstellung von alice, die im jahr 2004 endete	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_start_date ) ) )
ermitteln sie das geschlecht der mitarbeiter, die nicht bei mckinsey beschäftigt sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
geschlecht von alices freundin	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ) )
finde einen schüler, dessen letzter tag nach alice's geburtstag liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist das geburtsdatum von 180 cm großen menschen?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
welcher mitarbeiter hat am frühesten angefangen?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde alices freunde geboren im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
unternehmen mit einer größe von 180 cm finden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.company ) ( string ! type ) ) ( call SW.reverse ( string employer ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
finde alle menschen, die geboren wurden, bevor alice anfing	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )
leute, die mit einer arbeitenden person befreundet sind, die kein software-ingenieur ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welcher student hat informatik oder geschichte studiert?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.concat en.field.computer_science en.field.history ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer ist mit dem studenten befreundet, der nicht informatik studiert?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
geschlecht der personen mit einer körpergröße von 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
personen, die nach 2003 zum studium gekommen sind	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
personen, die am oder nach dem studienbeginn von alice geboren wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )
personen, die größer als 200 cm sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) ) ) )
leute, die in new york geboren sind und gerade online sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string logged_in ) ) )
zeig mir alle studenten, die 2004 oder 2010 gehen werden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie mitarbeiter ab 2004 und später	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die mit jemandem befreundet sind, der nach 2004 aufgehört hat zu arbeiten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter, die mit oder nach alice beginnen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie mitarbeiter, deren enddatum nach 2004 liegt, und deren freunde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was ist alice und bob geschlecht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
welche leute sind mit studenten befreundet, die nicht früher als 2004 angefangen haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
mitarbeiter, die nicht im jahr 2004 begonnen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist das geschlecht eines individuums?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
woher kommen meine freunde die 180 cm studieren für die universität	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.university ) ( string ! type ) ) ( call SW.reverse ( string university ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
was sind alice und bob beziehungsstatus	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
menschen, die 2004 oder 2010 die schule abgebrochen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter, die 2004 nicht fertig sind	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus des mitarbeiters, der nicht im jahr 2004 angefangen hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welcher mitarbeiter hat das gleiche oder ein größeres enddatum von mitarbeiter alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie lautet die telefonnummer eines unternehmens?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.company ) ( string ! type ) ) ) )
suche mir einen angestellten, der an zwei oder weniger arbeitsplätzen gearbeitet hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die seit 2004 in der schule sind	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
person, deren geburtsort der 180 cm großen person entspricht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
welcher student hat die gleiche beziehung wie der student, der nach 2004 angefangen hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche mitarbeiter haben ein startdatum nach dem startdatum von mitarbeiter alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist alice's geschlecht?	( call SW.listValue ( call SW.getProperty en.person.alice ( string gender ) ) )
was ist der geburtsort von studenten, die nach 2004 begannen?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
was leute mit denen befreundet sind, die mit alice befreundet sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ) )
der an zwei orten geboren wurde	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( number 2 ) ) )
menschen, die am selben ort wie alice geboren wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.getProperty en.person.alice ( string birthplace ) ) ) )
wann ist das enddatum von alice?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist das geschlecht eines studenten, der nicht im jahr 2004 begann	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
an welche universität gehen die 180 cm großen?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.university ) ( string ! type ) ) ( call SW.reverse ( string university ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
finden sie den beziehungsstatus von studenten, die nicht informatik studieren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
student, dessen enddatum vor dem startdatum von alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer ist mit der person aus new york befreundet?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )
wo waren die arbeiter, die keine softwareingenieure sind?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was ist das letzte date von alice, die an einer braunen universität studiert	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string education_end_date ) ) )
arbeitende person mit den wenigsten berufsbezeichnungen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die ihre ausbildung abgeschlossen haben, bevor alice zur arbeit kam	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde einen schüler, der zuerst angefangen hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie mitarbeiter, die einen anderen arbeitgeber haben als alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
leute mit denen alice befreundet ist wurden auch im jahr 2004 geboren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
welches geschlecht hat die wenigsten menschen?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string gender ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
welche menschen haben eine höhe von 180 cm und den gleichen verwandtschaftsstatus wie alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) en.person.alice ) )
wo sind die menschen geboren, die vor 2004 angefangen haben zu arbeiten?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
geschlecht aller arbeitnehmer, die 2004 nicht gekündigt haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wer ist eine person, mit deren studienbereich die informatik nicht befreundet ist?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
ein student, der nach alices beginn endet	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
ist alice's berufsbezeichnung software engineer	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) ( string job_title ) ) )
menschen, die single sind und gerade online sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
geschlecht des mitarbeiters, der vor 2005 ausgeschieden ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finden sie 180 cm große personen, die das geschlecht von alice haben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string gender ) ) ( string = ) en.person.alice ) )
beziehungsstatus von zwei oder weniger personen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
student, der mit oder nach alice ging	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter, dessen letzter tag auch alices letzter tag war	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
ein freund eines studenten, der im jahr 2004 oder früher beginnt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welcher student hat am frühesten angefangen?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
alices freunde, die eingeloggt sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
singles, die 180 cm groß sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
menschen, die vor 2004 oder vor 2010 angefangen haben zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
in new york geborene menschen, die gerade online sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string birthplace ) ( string = ) en.city.new_york ) )
welche mitarbeiter haben vor 2004 oder 2010 angefangen?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer hat freunde mit einem startdatum nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
die person, die die meisten geschlechter hat	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( string gender ) ) )
welche mitarbeiter am letzten tag waren, war nicht später als 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, die vor alices geburtstag anfangen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
person, die zum ersten mal ihren job gekündigt hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher student hat nach alice's enddatum angefangen?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer ist nicht mit alice befreundet?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string ! = ) en.person.alice ) )
arbeitnehmer, der vor 2004 oder 2010 abgereist ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche mitarbeiter am selben tag oder nach alice ihren job gekündigt haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie das geschlecht von mitarbeitern mit einem enddatum von 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter mit demselben startdatum wie mitarbeiter alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde die größe einer person	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ) ) )
wer hat die geringste anzahl von freunden	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( string friend ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
finde mich alle mitarbeiter hure startdatum ist entweder 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche person ist mit einem studenten befreundet, dessen enddatum 2004 oder später liegt?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
personen, die mindestens 180 cm groß sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )
geburtsort des mitarbeiters, dessen berufsbezeichnung nicht software engineer ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die den gleichen geburtstag haben wie alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) )
mit wem und mit welchen personen sind sie befreundet?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
mitarbeiter, dessen startdatum das geburtsdatum von alice ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche universität hat alice im jahr 2004 absolviert?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string university ) ) )
deren beziehungsstatus eindeutig ist	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string relationship_status ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
wer ist mit der person befreundet, die 2004 mit der arbeit begonnen hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
leute mit drei oder mehr freunden	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
dieser schüler, der die schule fast zeitgleich mit alice beendet	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
freunde von menschen, die ihr studium in einem anderen jahr als 2004 begonnen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
was sind geschlechter von studenten, die kein informatikfach studieren?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
was ist das geschlecht der studierenden, die ihren abschluss im jahr 2004 nicht gemacht haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wer hat die schule am frühesten beendet?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher mitarbeiter endete nicht später als am startdatum von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie personen mit einem startdatum von 2004 und einer größe von 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )
finde mich alle mitarbeiter, die bis zum geburtstag von alice angefangen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie lautet die berufsbezeichnung für 180 cm große personen?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.job_title ) ( string ! type ) ) ( call SW.reverse ( string job_title ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
leute, die ihren job kündigten, bevor alice dazukam	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche mitarbeiter hatten ihre letzten frühestens 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche schüler haben vor 2004 oder 2010 angefangen?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
nennen sie den freund eines mitarbeiters, der 2004 nicht gekündigt hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche leute sind mit alice befreundet und haben eine höhe von 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
der 180 cm misst und 2004 aufhörte	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )
menschen finden 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
finde mich alle mitarbeiter die 2004 oder 2010 angefangen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist mit dem schüler befreundet, der spätestens 2004 die schule begonnen hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
geschlecht der studenten, die vor 2004 beitreten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
dieser mitarbeiter hat ein enddatum, das fast dem von alice entspricht	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
das geschlecht eines studenten, der nicht in der informatik ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wie ist der beziehungsstatus von mitarbeitern, die nach 2004 beginnen?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
suche nach schülern mit dem letzten tag in 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde freunde, die freunde haben, die 180 cm groß sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
studenten, die nach 2004 abschließen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
ein mitarbeiter, der 2004 oder früher abgereist ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus von mitarbeitern, die vor 2004 angefangen haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welcher schüler hat am oder vor alices geburtsdatum angefangen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde mich alle studenten mit einem einzigen hauptfach	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde menschen, die in new york geboren sind und mit alice befreundet sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string friend ) ( string = ) en.person.alice ) )
finde mich alle leute, die einen freund haben, der in new york geboren ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )
nennen sie eine person, die mit alice befreundet ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string friend ) ( string = ) en.person.alice ) )
mitarbeiter, dessen enddatum nicht vor dem enddatum von alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
der am oder vor alices letztem anstellungstag geboren wurde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) )
menschen, die angaben, im jahr 2004 oder danach zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist das geschlecht der arbeitnehmer, deren startdatum vor 2004 liegt?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter, die am geburtstag von alice fertig sind	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist das geschlecht einer person, die vor 2004 begann	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wie ist der beziehungsstatus des vor 2004 ausscheidenden studenten?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
nennen sie jemanden, der 180 cm groß ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
welcher student hat ein startdatum später als das enddatum von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die nach alices arbeit angefangen haben, haben die schule abgebrochen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
studenten, die 2004 noch nicht fertig waren	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die 180 cm groß sind und software-ingenieure	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) )
schüler, die vor alices geburtstag ihren abschluss gemacht haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter, die vor der geburt von alice nicht aufgehört haben zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist mit einem mitarbeiter befreundet, dessen enddatum 2004 ist?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welcher student hat ein enddatum, das vor dem enddatum von alice liegt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde freunde von studenten, die im jahr 2004 und danach angefangen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wie lautet die stadtnummer?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ) )
welche personen sind mit mitarbeitern befreundet, die nach 2004 ihre arbeit aufgenommen haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wer hat die meisten freunde	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( string friend ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
welche mitarbeiter am letzten tag geboren wurden, entspricht alices geburtsdatum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde die person mit den meisten freunden	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string friend ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
welche mitarbeiterin hat ihre arbeit am selben tag wie alices geburtstag beendet	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
zeig mir die schüler, die zur selben zeit oder nach alice anfangen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
nennen sie eine 180 cm große person, die 2004 mit der arbeit begonnen hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )
finde freunde von leuten, die die schule abgeschlossen haben, aber nicht im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche person ist mit einem mitarbeiter befreundet, dessen startdatum nicht später als 2004 liegt?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wer hat maximal 2 freunde	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
menschen mit einem männlichen geschlecht und deren freunde finden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )
leute finden, die nicht mehr als zwei freunde haben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
beziehungsstatus von schülern, die nach 2004 abschließen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
mitarbeiter, dessen startdatum nicht nach dem startdatum von student alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die ihren job vor 2004 gekündigt haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher mitarbeiter hat ein startdatum vor dem startdatum von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher status ist der beziehungsstatus von weniger als zwei personen?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
welche schüler sind nach 2004 oder 2010 eingeschult worden?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wann hat alice angefangen, informatik zu studieren?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string education_start_date ) ) )
schüler, die am selben tag mit der schule begannen, kündigten alice ihren job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher mitarbeiter hat ein früheres enddatum als alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie das geschlecht von nicht mehr als zwei personen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
freunde von menschen, die in anderen jahren als 2004 ihren beruf angetreten haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
alices freunde, die in new york geboren wurden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string birthplace ) ( string = ) en.city.new_york ) )
menschen, die ihre arbeit begonnen haben, bevor alice in die schule kam	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde alices freunde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
was ist die personennummer?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
der 180 cm groß ist und sich in der gleichen beziehungssituation wie alice befindet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) en.person.alice ) )
welcher mitarbeiter hat nach dem mitarbeiter alice angefangen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde jemanden jeden geschlechts	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( call SW.concat en.gender.male en.gender.female ) ) )
wer ist mit studenten befreundet, die 2004 begonnen haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welcher student hat die wenigsten studienfächer?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
ein student, der in oder nach 2004 angefangen hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie die person, die 180 cm groß ist und in new york geboren wurde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthplace ) ( string = ) en.city.new_york ) )
wer hat den gleichen verwandtschaftsstatus wie alice und ist 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) en.person.alice ) )
personen, die mit den mitarbeitern befreundet sind, die das unternehmen nach 2004 verlassen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finde den mitarbeiter, dessen letzter tag auf alices geburtsdatum lag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
freunde von studierenden, die am oder nach dem jahr 2004 beginnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wie ist der beziehungsstatus von studierenden, die nach 2004 ihren abschluss gemacht haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
leute, die nach alice angefangen haben, kündigten ihren job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus eines studenten mit einem enddatum von 2004 oder später?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
nennen sie den freund eines studenten, der vor 2004 begonnen hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche person ist 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
finden sie die geburtsstadt der mitarbeiter, deren startdatum unter 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welches geschlecht haben die schüler, die 2004 noch nicht angefangen haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
180 cm große menschen traten 2004 bei	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )
suche nach schülern, die am letzten tag von alice beginnen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist die berufsbezeichnung von 180 cm großen menschen?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.job_title ) ( string ! type ) ) ( call SW.reverse ( string job_title ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
menschen, die nach alices erstem schultag geboren wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )
ist alice männlich oder weiblich	( call SW.listValue ( call SW.getProperty en.person.alice ( string gender ) ) )
finde alle leute mit freunden, die 2004 die schule beendet haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen mit beziehungsstatus als alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( call SW.getProperty en.person.alice ( string relationship_status ) ) ) )
wann hat alice aufgehört, als software-ingenieur zu arbeiten?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) ( string employment_end_date ) ) )
180 cm große personen, die das geburtsdatum mit alice teilen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string birthdate ) ) ( string = ) en.person.alice ) )
wer hat freunde, die online sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
welche person hat nur zwei freunde	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
in welcher stadt wurde der student geboren, der nach 2004 begann?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
geburtsort für die wenigsten menschen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string birthplace ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
finde mich menschen, die den gleichen beziehungsstatus haben wie menschen, die 180 cm groß sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
was ist das geschlecht der meisten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string gender ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
finden sie den beziehungsstatus von mitarbeitern, die nicht die berufsbezeichnung softwareingenieur haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wo sind die absolventen von 2004 geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welches geschlecht ist mehr als zwei personen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
ein mitarbeiter ab 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher arbeitgeber hat die geringste anzahl von arbeitnehmern?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche schüler sind nach 2004 oder 2010 eingeschult worden?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer ist die person, deren geburtsort new york ist und deren größe 180 cm beträgt?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthplace ) ( string = ) en.city.new_york ) )
finde mich alle leute sind größer als 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) ) ) )
geburtsort des arbeitnehmers, dessen enddatum nicht 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was ist das geschlecht eines studenten, dessen enddatum nicht 2004 ist?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wer ist die älteste person?	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string birthdate ) ) ) )
leute aus new york, die mit alice befreundet sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
welche schüler haben ein enddatum, das niedriger als das startdatum von alice ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
suche nach schülern, die nicht später als 2004 oder 2010 angefangen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
in welcher stadt wurde der mann geboren?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )
freunde von menschen finden, die ihren job im jahr 2004 gekündigt haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
in welcher stadt wurden mindestens zwei menschen geboren?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
wer ist alice freunde mit dem ist 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string friend ) ( string = ) en.person.alice ) )
menschen, die mit mitarbeitern befreundet sind, die ihre arbeit vor 2004 begonnen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
der 2004 in new york geboren wurde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string birthplace ) ( string = ) en.city.new_york ) )
person, die mit einem mitarbeiter befreundet ist, der mindestens 2004 in den ruhestand getreten ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finde mich alle menschen mit einer größe von 180 cm und jahrgang 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )
suche mir den schüler, dessen startdatum an alices geburtstag liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde menschen mit einer höhe von 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
welcher mitarbeiter hat die wenigsten jobs?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie den beziehungsstatus von studenten, die keine informatik studieren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
leute, die am selben tag aufgehört haben zu arbeiten wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher schüler hielt an, bevor schüler alice anfing	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
student, der am geburtstag von alice begann	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist das geschlecht der arbeitnehmer mit einem enddatum größer als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche leute sind mit studenten befreundet, deren startdatum nicht gleich 2004 ist?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen, die das geschlecht von alice freunde sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
menschen, die anfingen zu arbeiten, als alice aufhörte zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus von mitarbeitern, die nicht bei mckinsey beschäftigt sind?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welcher arbeitnehmer hat nicht mehr als zwei arbeitgeber	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die ledig und in new york geboren sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string birthplace ) ( string = ) en.city.new_york ) )
finde eine person, die geboren wurde, bevor alice anfing zu arbeiten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) )
wer ist in der gleichen art von beziehung wie alice und ist 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) en.person.alice ) )
suche nach personen, die vor dem arbeitsende von alice geboren wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) )
finden sie städte, die die geburtsorte von mitarbeitern sind, deren enddatum nicht später als 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
ein student, der gegangen ist, bevor es student alice getan hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wie ist der beziehungsstatus des studenten, der seinen job bis 2004 verlässt?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wie ist der status der beziehung zweier völker?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
wer hat maximal zwei freunde	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
die an nur einer universität studiert haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string university ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen mit weniger als zwei geschlechtern finden	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string < ) ( number 2 ) ) )
finde jemanden, der kürzer als 200 cm ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) ) ) )
suche nach schülern mit einem enddatum in 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welchen beziehungsstatus haben weniger als zwei personen?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
wo wurden zwei menschen geboren?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
was war alices letzter arbeitstag von 2004?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_end_date ) ) )
nennen sie den freund eines mitarbeiters, der nach 2004 gekündigt hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wann hat alice das informatik-studium beendet?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string education_end_date ) ) )
was männlich ist, ist befreundet mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string gender ) ( string = ) en.gender.male ) )
welche leute sind gemeinsame freunde von alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
personen, die mit dem mitarbeiter befreundet sind, der vor 2004 ausscheidet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
suche nach schülern mit dem letzten tag am oder nach dem ersten tag von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wann hat alice ihren job im jahr 2004 verlassen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_end_date ) ) )
welche mitarbeiter am letzten tag sind spätestens am geburtsdatum von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
schüler, die nach 2004 eingeschult wurden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
person, die mit einem studenten befreundet ist, der höchstens bis 2004 beginnt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
mitarbeiter finden, die nicht im jahr 2004 angefangen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde menschen, die nach der beschäftigung von alice geboren wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) )
person, die am oder nach dem ende des arbeitsverhältnisses von alice geboren wurde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) )
welcher mitarbeiter hat das niedrigste startdatum?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche person hat die wenigsten freunde?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( string friend ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
finde leute mit freunden, die spätestens 2004 die schule beendet haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
hier findest du alle 2004 geborenen personen, die mit alice befreundet sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string friend ) ( string = ) en.person.alice ) )
menschen, die am selben tag oder nach alice geboren wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )
geburtsort von zwei oder weniger personen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
welche person, die im jahr 2004 endete, ist 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )
welche schüler haben ein enddatum nach 2004?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mit wem war der student, mit dessen startdatum mindestens 2004 befreundet war?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
leute, die anfingen zu arbeiten, nachdem alice aufgehört hatte zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche person ist mit jemandem befreundet, der nicht nur an eine braune universität geht?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
suche nach schülern, deren letzter tag vor 2010 war	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde mich freunde von singles	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )
person, die mit jemandem befreundet ist, dessen enddatum nach 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
ein freund eines mitarbeiters, der nach 2004 endet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter, die gleichzeitig mit oder vor alice fertig werden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche person ist 180 cm groß und gerade online	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string logged_in ) ) )
welcher mitarbeiter hat frühestens am ende von alice angefangen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde alices freunde, die im jahr 2004 geboren wurden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
finde leute mit nur einem oder zwei freunden	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
wie viele leute sind da	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
welche mitarbeiter nach 2004 ihren job gekündigt haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
180 cm große freunde von alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string friend ) ( string = ) en.person.alice ) )
mitarbeiter, dessen enddatum nicht nach dem startdatum von alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
arbeitnehmer, dessen enddatum vor 2004 oder 2010 liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
die alices freunde aus ihrer heimatstadt sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
ein freund von alice oder bob	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
eine person, deren freund der angestellte im jahr 2004 nicht abgereist ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
ein mitarbeiter, der vor 2004 begann	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist alices chef bei ihrem software engineer job	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) ( string employer ) ) )
finden sie einen mitarbeiter, der nach 2010 abgereist ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie das geschlecht der schüler, die ein startdatum nach 2004 haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie die geschlechter der mitarbeiter, deren enddatum nicht später als 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welcher mitarbeiter hat den gleichen beziehungsstatus wie der mitarbeiter, der vor 2004 angefangen hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finden sie die geschlechter der schüler mit einem enddatum nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
beziehungsstatus von menschen, die mit alice befreundet sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
nennen sie den beziehungsstatus eines mitarbeiters, der spätestens 2004 angefangen hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
schüler, die die schule nach dem tag beendeten, beendeten alice die schule	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer wurde geboren, bevor alice ging	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) )
finden sie menschen, die zwischen 180 cm und 200 cm groß sind	( call SW.listValue ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) )
180 cm große person, die eingeloggt ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
entweder 180cm oder 200cm	( call SW.listValue ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) )
wie ist der beziehungsstatus eines mannes?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )
welcher student hat vor 2004 angefangen?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
studenten, die ihre ausbildung vor 2004 abgeschlossen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wie viele beziehungsstatus gibt es?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ) )
welche person wurde in new york geboren und single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
menschen geboren im jahr 2004, die 180 cm sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
eine freundin von alice, die 180 cm groß ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
welche mitarbeiter haben ein enddatum, das nach dem startdatum von student alice liegt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer hat zwei freunde	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
geburtsorte von arbeitnehmern, die nach 2004 angefangen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
geschlecht der studierenden, die im oder nach dem jahr 2004 begonnen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie mitarbeiter, die am selben tag beginnen wie die studentin alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist mit jemandem befreundet, der in new york geboren wurde?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )
suche nach schülern mit einem startdatum, das gleich oder größer als das von schüler alice ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie geburtsorte von schülern, deren letzter tag 2004 oder früher war	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finde menschen, die im jahr 2004 geboren wurden und 180 cm groß sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
menschen, die mit jemandem befreundet sind, der vor 2004 in die schule gekommen ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
ein student, der nach alice geboren wurde	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
beziehungsstatus, der dem eines 2004 geborenen menschen entspricht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )
geburtsstadt der person mit einer größe von 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
finde freunde von menschen, die frühestens 2004 mit der arbeit begonnen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter, dessen startdatum nicht nach dem enddatum von student alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer hat die meisten freunde	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string friend ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
finden sie den geburtsort von mitarbeitern, deren letzter tag nicht in 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche einzelne person ist mit alice befreundet?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
menschen, die ihr studium vor der geburt von alice abgeschlossen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde menschen, die nach alice geboren wurden, kündige ihren job	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) )
welcher student besucht die gleiche universität wie die studentin alice?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde menschen ohne geburtsort	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( string birthplace ) ) )
an welchem tag im jahr 2004 begann alice zu arbeiten?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_start_date ) ) )
wie ist der beziehungsstatus einer 2004 geborenen person?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )
freunde von menschen, die nach 2003 ihren job gekündigt haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
nennen sie die mitarbeiter, die den job gekündigt haben, als alice geboren wurde	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus von studenten, die nach 2004 beigetreten sind?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welcher mitarbeiter hat ein enddatum nach dem startdatum von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie heißt eine person mit zwei geschlechtern?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( number 2 ) ) )
student, dessen enddatum mit dem der mitarbeiterin alice übereinstimmt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter finden, die ihren job nach 2004 gekündigt haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, dessen startdatum vor dem enddatum von mitarbeiter alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
personen mit einem beschäftigungsende von 2004 finden	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_end_date ) ) )
menschen, die in new york geboren sind und eine größe von 180 cm haben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
freund eines studenten, dessen startdatum nach 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
suche nach schülern, deren enddatum über dem geburtstag von alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
schüler, die nach alices enddatum angefangen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
hat alice informatik studiert	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string field_of_study ) ) )
leute, die die schule abgebrochen haben, bevor alice anfing zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche personen haben weniger als zwei beziehungsstatus?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string < ) ( number 2 ) ) )
welche personen haben 2004 geburtstag?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
geschlecht von alices freunden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
person, die ein freund eines studenten ist, der bis 2004 seinen abschluss machen wird	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
studenten, die mit alice beginnen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
freunde von menschen, die ihre arbeit vor 2005 gekündigt haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finde die leute, die mit männern befreundet sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )
suche nach schülern, deren startdatum unter dem von schüler alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche schüler haben ein startdatum, das entweder 2004 oder 2010 ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche person ist mit einem mitarbeiter befreundet, dessen enddatum nicht später als 2004 liegt?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
studenten, die am oder nach dem enddatum von alice begonnen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist das enddatum von alice's job als software engineer?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) ( string employment_end_date ) ) )
wie ist der beziehungsstatus von weniger als zwei personen?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
welche person mit dem mitarbeiter befreundet ist, dessen enddatum nicht 2004 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
geburtsort von mitarbeitern, die nicht bei mckinsey beschäftigt sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
nennen sie einen freund, der im jahr 2004 geboren wurde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )
leute, die mit jemandem befreundet sind, der die schule in irgendeinem jahr außer 2004 beendet hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wer ist mit bob oder alice befreundet?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
was ist die geburtsstadt der studenten, die 2004 am meisten angefangen hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
person, die an den meisten universitäten ging	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string university ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter, der softwareentwickler oder programmmanager ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.concat en.job_title.software_engineer en.job_title.program_manager ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
eine 180 cm große person, die an der gleichen stelle geboren wurde wie alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) )
person, die am tag der geburt von alice zum studium kam	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
jemand, der an weniger als zwei universitäten studiert hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string university ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
leute, die aufgehört haben zu arbeiten, bevor alice in die schule kam	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
suche nach studenten mit den meisten studienrichtungen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche personenhöhe ist kürzer als 180 bis 200 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) ) ) )
was sind die geschlechter der schüler, die nach 2004 beginnen?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wer hat die meisten beziehungsstatus	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( string relationship_status ) ) )
finde einzelne leute, die mit alice befreundet sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string friend ) ( string = ) en.person.alice ) )
leute, die aufhörten zu arbeiten, nachdem alice in die schule gekommen war	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche schülerin hat den tag begonnen, als alice ihren job verließ	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde die größte person	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string height ) ) ) )
geburtsort von zwei personen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
ist alice's berufsbezeichnung software engineer	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) ( string job_title ) ) )
was ist die geburtsstadt von nicht mehr als zwei menschen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
wie ist der beziehungsstatus eines studenten, dessen enddatum nicht später als 2004 liegt?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
männer, die online sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string gender ) ( string = ) en.gender.male ) )
der 2004 geboren wurde und 180 cm groß ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
menschen, die die schule begonnen haben, als alice angefangen hat zu arbeiten oder früher	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche mitarbeiterin kündigte nach alices geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche jungs sind auch 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
mitarbeiter mit dem letzten letzten tag suchen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie die geburtsorte von menschen, die 180 cm groß sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
finde mich alle rüden die gerade online sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string gender ) ( string = ) en.gender.male ) )
finden sie mitarbeiter mit einem startdatum von 2004 oder später und deren freunde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche person hat zwei freunde	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
leute, die die schule nach alice abgebrochen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer hat zwei oder mehr geschlechter	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string >= ) ( number 2 ) ) )
person, deren name lebt oder bob ist	( call SW.listValue ( call SW.concat en.person.alice en.person.bob ) )
wo sind die menschen geboren, die nach 2004 in die schule gekommen sind?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
freund des mitarbeiters, dessen startdatum höchstens 2004 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
die vor alice in die schule gegangen sind	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche mitarbeiterin hat ihren job an alices geburtstag angefangen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
student mit dem gleichen fach wie student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die am selben tag wie alice geboren wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) )
welche studierenden außerhalb von 2004 gekündigt haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde menschen mit einer höhe von 180 cm und dem gleichen geburtsort wie alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) )
geburtsort des studenten, dessen enddatum nicht nach 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen, die männlich und in new york geboren sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string birthplace ) ( string = ) en.city.new_york ) )
freund eines studenten, dessen startdatum vor 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
schüler, die vor alices startdatum angefangen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche beziehungsstatus werden von alice 'freunden beansprucht?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ) )
wer ist mit einer person befreundet, die mit alice befreundet ist?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
person mit mehr als zwei personen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
freund einer 2004 geborenen person	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )
studenten, deren enddatum mit dem startdatum von student alice übereinstimmt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was hat alice studiert?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ) )
was ist der geburtsort von alice?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.getProperty en.person.alice ( string birthplace ) ) ) )
was ist der geburtsort eines studenten, der vor 2004 beigetreten ist?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finde jemanden, der in derselben stadt wie alice geboren ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) ) )
welches geschlecht haben die beiden menschen?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
freund von mitarbeitern, deren enddatum nach 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter endet vor oder als alice geboren wurde	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die nach alice geboren wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )
mit wem sind einige meiner hauptfreunde in der informatik befreundet?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche schüler sind in die schule gekommen, bevor alice in die schule kam?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was für geschlechter sind die menschen, die nach 2004 die schule beendet haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wer ist mit dem mann befreundet?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )
welcher student hat ein enddatum, das nach dem startdatum von alice liegt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie mitarbeiter mit dem gleichen startdatum wie mitarbeiter alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche firma beschäftigt eine 180 cm große person	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.company ) ( string ! type ) ) ( call SW.reverse ( string employer ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
welche person hat den gleichen beziehungsstatus wie die mehrheit?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string relationship_status ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
ein student, der nach oder zu beginn von alice endet	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie alle menschen, die 180 cm groß sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
welche personen haben zwei beziehungsstatus	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( number 2 ) ) )
finde studenten freunde mit anderen letzten tagen als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
schüler, dessen startdatum nach dem startdatum von mitarbeiter alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
ein angestellter, der gegangen ist, bevor alice geboren wurde	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist das geschlecht der menschen, die nach 2004 eingeschult wurden?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche mitarbeiter haben nicht die berufsbezeichnung software engineer?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
leute, die software-ingenieure oder programm-manager sind	( call SW.listValue ( call SW.concat en.job_title.software_engineer en.job_title.program_manager ) )
mitarbeiter, der vor 2004 eingestiegen ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
nennen sie den schüler, der nach alice geboren wurde	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher mitarbeiter hat nach alices geburtsdatum angefangen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
geschlecht von jemandem, der single ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )
startdatum von alices studie, die im jahr 2004 endete	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string education_start_date ) ) )
menschen, die mit mitarbeitern befreundet sind, die ihre arbeit in oder vor 2004 aufgenommen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finden sie menschen, die studenten mit einem studienfach sind, das nicht informatik ist, und ihre freunde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
person geboren, nachdem alice in die schule kam	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )
finde leute, die kürzer sind als alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )
alices männliche freunde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string friend ) ( string = ) en.person.alice ) )
das geschlecht eines arbeitnehmers, der 2004 oder früher abgereist ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
studenten, die entweder informatik oder geschichte studieren	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.concat en.field.computer_science en.field.history ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wie ist der beziehungsstatus eines mitarbeiters, der kein softwareentwickler ist?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wer hat freunde, die studenten sind, deren startdatum vor 2004 liegt?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
was ist die gesamthöhe aller in meinem netzwerk?	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ) ) )
wie ist der beziehungsstatus eines studenten, der 2004 oder früher begonnen hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche schüler haben den gleichen geburtstag und starttermin von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde freunde von studenten mit einem anderen enddatum als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
das ist die universität von student alice, die im jahr 2004 abgeschlossen hat	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string university ) ) )
wie ist der beziehungsstatus von mitarbeitern, deren berufsbezeichnung nicht softwareingenieur ist?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was ist das geschlecht der arbeitenden menschen, die nicht im jahr 2004 begonnen haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
beziehungsstatus des mitarbeiters, dessen enddatum vor 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finden sie die geburtsstadt für schüler mit einem anderen startdatum als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche leute sind 180 cm an der braunen universität	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string university ) ( string = ) en.university.brown ) )
freund eines studenten, dessen enddatum nicht vor 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finden sie menschen, die mehr als zwei geburtsorte haben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string > ) ( number 2 ) ) )
nennen sie eine freundin von alice, die in new york geboren wurde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
welcher student ist zuletzt abgereist?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
personen, die die studie nach 2004 abgeschlossen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche person hat das gleiche geburtsdatum wie alice?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) )
was ist der beziehungsstatus der person, die 180 cm groß ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
menschen, die 180 cm groß sind und im jahr 2004 gekündigt haben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )
beziehungsstatus von personen mit einer körpergröße von 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
suchen sie nach schülern, deren enddatum vor dem von schüler alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
alle alleinstehenden oder verheirateten personen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( call SW.concat en.relationship_status.single en.relationship_status.married ) ) )
finde mich alle leute die nicht alices freunde sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string ! = ) en.person.alice ) )
wer ist alice arbeitgeber	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string employer ) ) )
finde die älteste person	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string birthdate ) ) ) )
finde schüler mit einem enddatum nach dem startdatum von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche einzelne person ist mit alice befreundet?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
menschen, die vor 2004 eingeschult wurden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
freund von alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string friend ) ( string = ) en.person.alice ) )
ein schüler, der zu der gleichen zeit endet, zu der alice beginnt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
leute, die aufhörten zu arbeiten, als alice es tat oder vorher	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen mit freunden, die single sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )
schüler, die nach alice in die schule kamen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
geburtsort des studenten, dessen startdatum vor 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welcher beziehungsstatus hat höchstens zwei personen?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
wer ist alices männlicher freund?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string gender ) ( string = ) en.gender.male ) )
welches geschlecht haben die mitarbeiter, die das unternehmen vor 2004 verlassen haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finden sie menschen mit einem beziehungsstatus von single und einer gesamthöhe von 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
welche personen sind mit der aktuell angemeldeten person befreundet?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
welcher arbeitnehmer hat die meisten früheren arbeitgeber?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
ucla oder braune universität	( call SW.listValue ( call SW.concat en.university.brown en.university.ucla ) )
mitarbeiter, dessen letzter tag zwischen 2004 und 2010 lag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
nennen sie den mitarbeiter, der den job zum gleichen datum wie mitarbeiter alice gekündigt hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
geburtsorte aller 180 cm großen menschen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
leute, die die schule vor alice abgebrochen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher mitarbeiter hat vor alice angefangen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus von menschen, die 2004 oder später die schule abgebrochen haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
studenten, die gleichzeitig oder vor alice fertig sind	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher student hat ein startdatum, das später als das von student alice ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
freund eines studenten, der vor oder während des jahres 2004 begann	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
geburtsort von mitarbeitern, die vor 2004 angefangen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
person, die in den meisten bereichen studiert hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter ab 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
jemand, der nicht mit alice befreundet ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string ! = ) en.person.alice ) )
mitarbeiter, der ein kleineres startdatum als alice hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde schüler mit dem frühesten letzten tag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer ist ein student, der nach 2004 angefangen hat?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche firma beschäftigt eine 180 cm große person	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.company ) ( string ! type ) ) ( call SW.reverse ( string employer ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
schüler fangen an, bevor alice fertig ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
ein mitarbeiter endet, bevor alice anfängt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter ab alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
studenten, die mit oder nach alice enden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
gibt es ein geschlecht, das weniger als zwei personen haben?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
menschen in new york geboren, die single sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string birthplace ) ( string = ) en.city.new_york ) )
menschen, die 2004 angefangen haben und 180 cm groß sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )
menschen, die aufhörten zu arbeiten, nachdem alice geboren wurde	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
studenten, die das college am längsten besuchten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string university ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
nennen sie eine person, die online ist und 180 cm groß ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
menschen, die zu arbeiten begannen, als alice geboren wurde oder zuvor	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher mitarbeiter startet nachdem alice gegangen ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist der geburtsort derer, die mit alice befreundet sind?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
menschen, die mit alice befreundet und in new york geboren sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string friend ) ( string = ) en.person.alice ) )
arbeitnehmer, dessen enddatum nach dem geburtsdatum von alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welches geschlecht hat die 2004 geborene person?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )
mitarbeiter mit einer berufsbezeichnung	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche person hat eine größe von mindestens 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )
finde mich bei alices kerl freunden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string friend ) ( string = ) en.person.alice ) )
der 2004 aufgehört hat zu arbeiten und 180 cm groß ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )
welcher mitarbeiter hat an dem tag, an dem alice anfing, seine arbeit gekündigt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher mitarbeiter hat ein enddatum, das vor dem enddatum von alice liegt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche mitarbeiter einen starttermin haben, der größer als 2004 oder 2010 ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist die geburtsstadt eines studenten, der 2004 nicht aufgehört hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
freund eines studenten, dessen enddatum nach 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
der mit alice befreundet ist und 180 cm groß ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
mitarbeiter mit freunden finden, deren letzter tag nicht 2004 war	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was ist der geburtsort von mitarbeitern, deren berufsbezeichnung nicht software-ingenieur ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was ist die person, die in new yorks beziehungsstatus geboren wurde?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )
menschen, die vor alice geboren wurden, sind in die schule gekommen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )
wo wurde der mitarbeiter geboren, der nicht für mckinsey arbeitet?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was ist der beziehungsstatus des mitarbeiters mit einem enddatum bis spätestens 2004?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finde jemanden, der 2 geburtsorte auflistet	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string >= ) ( number 2 ) ) )
mitarbeiter, dessen enddatum vor dem enddatum von alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist aus new york und eingeloggt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string birthplace ) ( string = ) en.city.new_york ) )
welche software-ingenieurin hat alice angestellt	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) ( string employer ) ) )
personen, die mit mitarbeitern befreundet sind, deren letzter tag in oder vor 2004 lag	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
arbeitnehmer mit den wenigsten arbeitgebern	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
eine 180 cm große person	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
menschen mit freunden, die spätestens 2004 mit der arbeit begonnen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wer studiert informatik oder geschichte?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.concat en.field.computer_science en.field.history ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer ist mit jemandem befreundet, der nach 2004 seinen abschluss gemacht hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finde einen mitarbeiter mit dem letzten tag wie alice's oder davor	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
leute, die nach alice aufgehört haben zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
leute, die freunde haben, die keine softwareingenieure sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
suche mitarbeiter ab dem ersten tag von alice oder später	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher student geht an eine andere universität als braun?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche von alices freunden ist online	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
finde mich alle mitarbeiter, die bei der firma anfangen, bevor alice geht	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
einzelpersonen, die gerade online sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
wie ist der beziehungsstatus von menschen, die an eine andere universität gehen als braun?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welcher student hat die meisten majors	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer sind menschen, die studenten mit einem enddatum von nicht mehr als 2004 sind, mit denen sie befreundet sind?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
freund von alice, die in new york geboren wurde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string birthplace ) ( string = ) en.city.new_york ) )
finde alle männer, die freunde haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )
wer ist mit dem studenten befreundet, der nach 2004 angefangen hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen, die nach alice beigetreten sind, wurden geboren	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist der beziehungsstatus aller studenten mit ausnahme derjenigen von der braunen universität?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche singles sind 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
student, der vor 2004 beigetreten ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie die freunde von mitarbeitern, die 2004 oder später gekündigt haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wie ist das geschlecht der arbeitnehmer mit dem letzten tag im jahr 2004 oder früher?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter, die ihren neuen job an alices geburtstag beginnen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus von mitarbeitern, die vor 2004 ausgeschieden sind?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
leute, die zur gleichen zeit oder früher in die schule kamen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche mitarbeiter am letzten tag zuletzt waren	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist die durchschnittliche größe aller personen in meinem netzwerk?	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ) ) )
nennen sie einen mitarbeiter, der im jahr 2004, aber vor 2011 begann	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche mitarbeiter haben nach alices geburtsdatum angefangen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist das geschlecht des studenten, der im jahr 2004 begann	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
was ist der beziehungsstatus eines mitarbeiters, der vor 2004 aufgehört hat zu arbeiten?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
leute, die mit studenten befreundet sind, die kein hauptfach informatik haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
person, die die schule abgebrochen hat, bevor alice aufgehört hat zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche personen mit einem enddatum von 2004 sind 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )
wie viele felder gibt es?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.field ) ( string ! type ) ) ) )
finden sie menschen mit der gleichen größe wie alice oder 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string height ) ) ( string = ) en.person.alice ) )
geschlecht der arbeitnehmer, die nach oder in 2004 abschließen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
ein student, der anfängt, wenn alice aufhört	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher student hat ein enddatum vor 2004?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
leute mit den meisten freunden	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( string friend ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
schüler, die 2004 oder 2010 eingeschult wurden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
suche nach schülern, die sich das studienfach von alice teilen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die nach alice geboren wurden, haben die schule abgeschlossen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) )
menschen, die in zwei oder weniger bereichen studiert haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche mitarbeiter vor 2004 ausgeschieden sind	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche freundin von alice wurde in new york geboren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string birthplace ) ( string = ) en.city.new_york ) )
finde mitarbeiter mit letzten tagen an oder nach alices geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welches datum hat alice angefangen, die im jahr 2004 geendet hat?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string education_start_date ) ) )
das startdatum des schülers liegt am oder vor dem enddatum von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
studenten, die spätestens am anfangsdatum von alice angefangen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist der beziehungsstatus von alice oder bob?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
mitarbeiter, dessen startdatum nicht vor dem enddatum von student alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die mit einem studenten befreundet sind, der erst 2004 angefangen hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
personen, die mit einem mitarbeiter befreundet sind, dessen enddatum nicht später als 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wie ist der beziehungsstatus des schülers zum letzten tag vor 2004?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
freund von alices freund, der aus new york kommt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )
freund eines mitarbeiters, dessen enddatum nach 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wer ist befreundet mit mitarbeitern, die ein enddatum von 2004 haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wie ist der beziehungsstatus der arbeitenden menschen, die 2004 nicht aufgehört haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die an dem tag, als alice geboren wurde, die schule abbrachen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist die berufsbezeichnung der person, die 180 cm ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.job_title ) ( string ! type ) ) ( call SW.reverse ( string job_title ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
welche mitarbeiter haben einen starttermin, der nicht später als alices geburtstag ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
studenten, die am enddatum von alice begannen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
der mit alice einen geburtstag hat und 180 cm groß ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string birthdate ) ) ( string = ) en.person.alice ) )
fein mir alle angestellten, die bis 2004 anfangen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus von studierenden, die erst 2004 angefangen haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
was ist das enddatum des studiums 2004 oder 2010?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wann hat mckinsey mitarbeiter alice angefangen	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string employment_start_date ) ) )
welche mitarbeiter haben die wenigsten berufsbezeichnungen?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche mitarbeiterin ihren job nach dem start von alice verlassen hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter ab vor alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
arbeitnehmer, dessen enddatum vor 2004 liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist mit über zwei personen befreundet	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
geschlecht der personen, die nach 2004 an der studie teilgenommen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
was ist alices geburtsort	( call SW.listValue ( call SW.getProperty en.person.alice ( string birthplace ) ) )
ein mitarbeiter, der endet, bevor alice beginnt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher arbeitnehmer hat nicht mehr als zwei arbeitgeber	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die die schule in oder vor 2004 beendet haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
am wenigsten gemeinsamen beziehungsstatus	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string relationship_status ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
finde alle männlichen singles	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
welche studenten beginnen frühestens am abschlusstag von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wo sind die geburtsorte von arbeitnehmern, deren startdatum nicht früher als 2004 liegt?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wie ist der beziehungsstatus von studierenden, die spätestens 2004 begonnen haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welcher mitarbeiter hat früher als 2004 oder 2010 angefangen?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die für mckinsey oder google arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string = ) ( call SW.concat en.company.mckinsey en.company.google ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wo sind die menschen geboren, die vor 2004 die schule beendet haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
jemand mit mehreren beziehungsstatus	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string > ) ( number 2 ) ) )
wer ist der arbeitgeber der person mit einer körpergröße von 180 cm?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.company ) ( string ! type ) ) ( call SW.reverse ( string employer ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
studierende, die 2004 oder früher angefangen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
leute, die aufgehört haben zu arbeiten, als alice die schule abgebrochen hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist mit jemandem befreundet, der nicht zur braunen universität gegangen ist?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wer ist 180 cm und von der gleichen stelle wie alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) )
wer ist alices freundin, die aus new york kommt?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string birthplace ) ( string = ) en.city.new_york ) )
welcher student endete spätestens als alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
nennen sie einen mitarbeiter, dessen enddatum mit dem von alice vergleichbar ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche person hat das geburtsdatum von alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )
finde menschen, die nach alice 'letztem arbeitstag geboren wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) )
welches geschlecht haben die beiden menschen?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
finde schüler mit dem letzten tag zuvor oder dem gleichen wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist das geschlecht des studenten, der keine braune universität besucht hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie mitarbeiter mit einem startdatum, das mit dem von mitarbeiter alice identisch ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde studenten freunde, die nicht informatik studieren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
geburtsort des studenten, dessen studienfach nicht informatik ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
person, die im jahr 2004 oder 2010 geboren wurde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) )
menschen, die freunde haben, mit denen alice befreundet ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
mitarbeiter beginnen, bevor alice fertig ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die nach 2004 ihren beruf angetreten haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was war das abschlussdatum von alice im jahr 2004?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string education_end_date ) ) )
was ist das geschlecht des studenten, dessen enddatum vor 2004 liegt?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finde mich studenten, deren enddatum nicht später als 2004 ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter, die nach alice stießen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche beziehungsstatus sind für weniger als zwei personen gedacht?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
welche studenten 2004 oder 2010 oder früher ihren abschluss machen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
leute, die mit einem studenten befreundet sind, der vor 2004 angefangen hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen, die die schule in oder nach 2004 abgebrochen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die anfingen, an oder nach alice zu arbeiten, wurden geboren	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter mit dem spätesten startdatum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was sind die geschlechter, die nach 2004 aufgehört haben zu arbeiten?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
nennen sie eine person im alter von 180 cm, die 2004 mit der arbeit begonnen hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )
mit welchen geschlechtern sind die menschen befreundet, mit denen alice befreundet ist?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
person, die mit jemandem befreundet ist, dessen startdatum nicht später als 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
der 180 cm groß ist und in der gleichen stadt wie alice geboren wurde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) )
was ist das startdatum eines studenten, der vor alice angefangen hat?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die am oder vor dem tag, an dem alice die schule beendete, in die schule kamen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wann hat mitarbeiter alice angefangen	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) )
welcher student hat das größte enddatum?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die mit jemandem befreundet sind, der vor 2004 aufgehört hat zu arbeiten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
alices freunde geboren im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
welcher student graduiert am frühesten?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
suche nach schülern mit einem startdatum vor 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
angestellter, dessen berufsbezeichnung dieselbe berufsbezeichnung wie die von angestellter alice ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
in welcher stadt wurde alice oder bob geboren?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
die berufsbezeichnung einer 180 cm großen person	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.job_title ) ( string ! type ) ) ( call SW.reverse ( string job_title ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
was ist der geburtsort eines mitarbeiters, der nach 2004 endete?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
geburtsorte von schülern, die die schule in oder nach 2004 beendet haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
studenten, die vor alice fertig sind	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
geschlecht des studenten, dessen enddatum nicht 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
der mit alice befreundet ist und am 2004 geboren wurde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
welcher student hat ein startdatum vor dem geburtsdatum von alice?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde mich alle menschen, die einem geschlecht angehören	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string < ) ( number 2 ) ) )
wer ist mit jemandem befreundet, der während oder vor 2004 mit der arbeit begonnen hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche mitarbeiter am letzten tag zuletzt waren	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist das geschlecht von studenten, die im jahr 2004 und später begonnen haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie personen mit einer körpergröße von 180 cm und anfangsdaten für 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )
welche mitarbeiter einen starttermin haben, der alices geburtstag oder später ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
nennen sie eine 180 cm große person, die im jahr 2004 geboren wurde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
person aus dem gleichen geburtsort wie die von alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.getProperty en.person.alice ( string birthplace ) ) ) )
leute, die anfingen zu arbeiten, bevor alice aufhörte zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die mit studenten befreundet sind, die vor 2004 angefangen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wie ist der beziehungsstatus der 180 cm großen person?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
beziehungsgeschichte einer person	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string < ) ( number 2 ) ) )
menschen, die an anderen universitäten als der braunen universität studiert haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
geburtsort des studenten, dessen universität keine braune universität ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie die geburtsstadt der schüler mit einem enddatum nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
ein mitarbeiter, der nach alices geburt gegangen ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, dessen enddatum vor dem startdatum von student alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde einen schüler, der an alices geburtstag gegangen ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die ihren job in oder nach 2004 gekündigt haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
ermitteln sie den beziehungsstatus eines mitarbeiters mit einem enddatum von 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche person wurde an mehr als 2 orten geboren	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string > ) ( number 2 ) ) )
was ist das geschlecht des studenten, der vor 2004 abreist?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche person ist die größte	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string height ) ) ) )
welcher mitarbeiter hat angefangen nachdem alice gegangen ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer sind die freunde der neuen studenten, die bis 2004 beginnen?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
beziehungsstatus von schülern, die ab 2004 eingeschult wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
ein mitarbeiter ab vor 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
die zuletzt aufgehört haben zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die vor alice geboren wurden, beendeten die schule	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) )
schüler, die die schule am selben tag beendet haben, an dem alice die schule beendet hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher mitarbeiter hat das späteste startdatum?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
student, dessen startdatum nach dem startdatum von student alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche studenten machen ihren abschluss frühestens am ersten arbeitstag von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
eine person, deren freund vor 2004 mit dem studium begonnen hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wer war ein student vor oder im jahr 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
studienfeld von jemandem 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.field ) ( string ! type ) ) ( call SW.reverse ( string field_of_study ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
finden sie mitarbeiter mit weniger als zwei berufsbezeichnungen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die ab 2004 oder ab 2010 zu arbeiten begonnen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
jemand 180 cm groß und gleiches geschlecht wie alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string gender ) ) ( string = ) en.person.alice ) )
wann ist die softwareentwicklerin alice gegangen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) ( string employment_end_date ) ) )
wie lautete die berufsbezeichnung von alice aus dem jahr 2004?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string job_title ) ) )
welche menschen sind mit mitarbeitern befreundet? wie hat es nach 2004 angefangen?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter, die zeitgleich mit oder vor alice anfangen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde mich studenten enddatum gleich student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
der online ist und 180 cm groß ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string logged_in ) ) )
welche person hat zwei oder weniger freunde?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
nennen sie die freundin von alice, deren geburtsort new york ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
menschen, die männlich oder weiblich sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( call SW.concat en.gender.male en.gender.female ) ) )
freunde von alice geboren im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
was für leute sind angestellte eines arbeitgebers, mit dem mckinsey nicht befreundet ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter, die am oder nach alices letztem tag angefangen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie das geschlecht der schüler, die nach 2004 geboren wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
eine freundin von alice, geboren im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
personen, die mit einem studenten befreundet sind, dessen enddatum nach 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche schüler haben ein startdatum, das mit dem enddatum von alice übereinstimmt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer ist mit dem mitarbeiter befreundet, der später als 2004 gekündigt hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was ist das geschlecht des studenten, der bis 2004 abgereist ist?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
was für geschlechter sind die menschen, die die schule in irgendeinem jahr außer 2004 abgebrochen haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
ein 180 cm großer rüde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
wo sind die leute geboren, die die schule in oder vor 2004 beendet haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche person wurde in new york geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) )
was ist das geschlecht von studenten, die vor 2004 ihren abschluss gemacht haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
nennen sie eine 180 cm große person, die mit alice befreundet ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
arbeitnehmer, dessen startdatum vor 2004 liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist mit der person befreundet, die vor 2004 aufgehört hat zu arbeiten?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
freunde von menschen, die nach 2004 ihren job gekündigt haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was ist der studienbereich für menschen, die 180 cm groß sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.field ) ( string ! type ) ) ( call SW.reverse ( string field_of_study ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
was ist der geburtsort von mitarbeitern, deren letzter tag vor 2004 lag?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finden sie mitarbeiter, deren startdatum 2004 oder später ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
beziehungsstatus der mitarbeiter ab 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
schüler, die nicht vor 2004 eingeschult wurden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was studiert alice an der brown university?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string field_of_study ) ) )
finden sie das geschlecht der schüler, deren enddatum nicht später als 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
leute, die aufgehört haben zu arbeiten, nachdem alice angefangen hat zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
transgender-menschen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string >= ) ( number 2 ) ) )
suche nach mitarbeitern, die am oder nach dem letzten tag von alice beginnen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
schüler, die ihren abschluss spätestens am tag der alice gemacht haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter, die gekündigt haben, bevor alice ihren job gekündigt hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter mit dem niedrigsten beschäftigungsstatus	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie mitarbeiter mit dem letzten tag vor oder am letzten tag von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist mit der person befreundet, die 2004 oder früher ihren abschluss gemacht hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
suche nach schülern, die vor alice 'letztem arbeitstag beginnen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche schüler haben ein enddatum, das vor dem geburtstag von alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher mitarbeiter hat das späteste startdatum?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, die zeitgleich mit alice aufgehört haben zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen mit freunden, die keine software-ingenieure sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
personen, die 180 cm oder größer sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )
welcher student von der braunen universität ist 180 cm groß?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string university ) ( string = ) en.university.brown ) )
wer ist befreundet mit dem mitarbeiter ab 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche studenten haben spätestens mit alices geburtsdatum angefangen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was menschen mit einer person befreundet sind, deren größe 180 cm beträgt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
finde die leute, die ihren job angetreten haben, bevor alice zu ihrem studium kam	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
in welcher stadt wurden mehr als zwei personen in meinem sozialen netzwerk geboren?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
welche person behauptet die meisten geschlechter	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( string gender ) ) )
leute, die am tag, an dem alice fertig war, zum studium kamen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
person, die aufgehört hat zu arbeiten, bevor alice die schule abgebrochen hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
alice freunde, die single sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string friend ) ( string = ) en.person.alice ) )
finden sie personen, die mit mitarbeitern befreundet sind, deren enddatum nicht später als 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter fangen an, wenn alice fertig ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
leute finden, die am selben tag geboren wurden, als alice die schule beendete	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) )
was hat alice 2004 aufgehört zu studieren?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string field_of_study ) ) )
arbeitgeber aller personen, die 180 cm groß sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.company ) ( string ! type ) ) ( call SW.reverse ( string employer ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
mitarbeiter, dessen startdatum mindestens dem enddatum von mitarbeiter alice entspricht	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde jemanden, der weiblich ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string ! = ) en.gender.male ) )
wie ist der beziehungsstatus von studenten, die vor 2004 ihren abschluss gemacht haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
was ist alice's geschlecht?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) en.person.alice ) ( call SW.reverse ( string gender ) ) ( string = ) en.person.alice ) )
mitarbeiter, dessen enddatum nicht nach dem enddatum von alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die männlich oder weiblich sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( call SW.concat en.gender.male en.gender.female ) ) )
menschen größer als alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )
welches geschlecht haben menschen, die seit 2004 arbeiten?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
männer, die online sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string logged_in ) ) )
welche studentin hat ihren abschluss gemacht, bevor alice ihren job gekündigt hat?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
der am selben ort wie alice geboren wurde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.getProperty en.person.alice ( string birthplace ) ) ) )
angestellt bis 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche person hat die geringste anzahl von beziehungsstatus	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( string relationship_status ) ) )
menschen in new york geboren und 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthplace ) ( string = ) en.city.new_york ) )
finden sie menschen, die 180 cm groß sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
welche schülerin hat die schule gerade beendet, als alice ihren job angefangen hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
leute finden, die single sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )
welche mitarbeiter den tag beginnen alice fängt an	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde mich den schüler, der vor alices abreise angefangen hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wann ist alice in die schule gekommen?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) )
freunde von männern	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )
personen mit zwei oder weniger aufgeführten arbeitgebern	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
leute, die aufgehört haben zu arbeiten, bevor alice geboren wurde	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus der schüler, die älter als 2004 sind?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welches geschlecht haben mitarbeiter, deren berufsbezeichnung nicht "software engineer" ist?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die nach der geburt von alice ihre arbeit aufgeben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die nach alice zur arbeit kamen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welches geschlecht hat zwei personen?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
personen, die an oder vor dem datum geboren wurden, an dem alice die schule abgebrochen hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) )
nennen sie eine person, die mit einer 180 cm großen person befreundet ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
person nicht in new york geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string ! = ) en.city.new_york ) )
menschen, die am selben ort wie alice geboren wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.getProperty en.person.alice ( string birthplace ) ) ) )
geburtsort des arbeitnehmers, dessen startdatum nicht 2004 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wer ist die person, die mit einem mitarbeiter befreundet ist?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
geschlecht der beschäftigten, die 2004 nicht abgeschlossen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
ein eindeutiger beziehungsstatus	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
finde jemanden, der nach alice 'letztem arbeitstag geboren wurde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) )
personen, die 2004 oder später geboren wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
menschen, die mit einem mitarbeiter befreundet sind, der nach 2004 angefangen hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die mit alice befreundet sind und im jahr 2004 geboren wurden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string friend ) ( string = ) en.person.alice ) )
welcher mitarbeiter hat ein startdatum von 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
alle männer, die im jahr 2004 geboren wurden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
studenten, die nicht im jahr 2004 begonnen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche menschen haben mehr als geschlechter	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string > ) ( number 2 ) ) )
suche nach schülern mit einem startdatum, das nicht höher ist als das startdatum von schüler alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter mit einem enddatum suchen, das nicht 2004 ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
geschlecht eines mitarbeiters, der nicht seit 2004 beschäftigt ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was war alices studienfach als student	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ) )
menschen mit freunden, die nach 2004 die schule abgeschlossen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
schüler, die am oder vor alices geburtstag ihren abschluss gemacht haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
freunde von menschen, die größer als 180 cm sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
menschen, die das gleiche fach wie alice studiert haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
freunde von mitarbeitern, die im jahr 2004 nicht fertig sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was ist das geschlecht von alice oder bob?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
welches geschlecht hat der student, der nach 2004 geendet hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
student, dessen enddatum vor dem enddatum von student alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche schüler haben ein startdatum, das mindestens 2004 oder 2010 ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
person, die zwei geschlechter hat	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string <= ) ( number 2 ) ) )
freunde von mitarbeiter mit enddatum nicht in 2004 finden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
stadt, in der die person, deren beziehungsstatus ledig ist, geboren ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )
ein freund von alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
wo wurde alice geboren?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) )
wie ist der beziehungsstatus von menschen, die im oder vor 2004 eingeschult wurden?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finde eine person, die eingeloggt ist und im jahr 2004 geboren wurde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string logged_in ) ) )
wann hat alice bei mckinsey angefangen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string employment_start_date ) ) )
beziehungsstatus des studenten, dessen startdatum nicht vor 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
geschlecht, das von zwei personen geteilt wird	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
welche leute sind mit studenten befreundet, die ihren abschluss erst 2004 gemacht haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
ein student endet, wenn alice anfängt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
leute, die vor alice in die schule kamen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde heraus, für wen alice im jahr 2004 gearbeitet hat	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employer ) ) )
mitarbeiter, die 2004 oder 2010 eingestellt wurden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie lautet die berufsbezeichnung von alice?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) )
alice, die informatik studiert, studiert an welcher universität	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string university ) ) )
wie ist der beziehungsstatus des schülers, dessen startdatum vor 204 liegt?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
studenten, die starben, bevor alice geboren wurde	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
freund eines studenten, dessen enddatum nicht 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welcher student hat am frühesten angefangen?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer studiert die meisten dinge	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche person hat ein geburtsdatum bis spätestens 2004?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
welche stadt ist der geburtsort eines mitarbeiters, der 2004 noch nicht angefangen hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
woher kamen mitarbeiter, die keine softwareingenieure sind?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
angestellter, der vor dem geburtsdatum von alice gekündigt hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wo sind die menschen geboren, die nach 2004 die schule beendet haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
suchen sie nach schülern mit einem enddatum, das nicht höher ist als das von mitarbeiter alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
leute, die die schule abgebrochen haben, als alice anfing zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die 180 cm groß sind und informatik studieren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) )
mitarbeiter, die ihre arbeit 2004 oder 2010 aufgenommen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
studenten, deren enddatum nach 2004 liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
hier finden sie alle personen, die im jahr 2004 geboren wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
geburtsort des arbeitnehmers, dessen startdatum nicht nach 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
ein freund ist jemand, der nicht bei mckinsey angestellt ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
schüler, die 2004 oder später eingeschult wurden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was studenten abschließen, wenn alice eingestellt wurde	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
student mit nur einem studienfach	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
ein mitarbeiter, der vor alice endet	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, die zeitgleich mit alice oder danach beginnen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
schüler, die nach alices beginn enden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
person mit dem gleichen geschlecht wie die person 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
was sind die geburtsorte der arbeitnehmer ab 2004?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wann hat alice angefangen, die braune universität zu besuchen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string education_start_date ) ) )
finden sie studenten, die die meisten universitäten besucht haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string university ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
das ist die universität, die alice studiert hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde mitarbeiter mit letzten tagen am oder vor alices erstem tag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher mitarbeiter hat ein startdatum, das das geburtsdatum von alice ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche studenten machen ihren abschluss frühestens am ersten arbeitstag von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist die berufsbezeichnung von menschen mit einer körpergröße von 180 cm?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.job_title ) ( string ! type ) ) ( call SW.reverse ( string job_title ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
andere mitarbeiter als softwareingenieure	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist mit einem mitarbeiter befreundet, dessen startdatum nicht 2004 ist?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche person ist mit männern befreundet?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )
welche beziehungsstatus werden von personen beansprucht, die im jahr 2004 geboren wurden?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )
was ist die universität von alice?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ) )
wer ist entweder kleiner als alice oder gleich	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )
mitarbeiter, die nach 2004 beginnen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche mitarbeiter am letzten tag waren jünger als am abschlusstag von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, die am startdatum von alice oder später angefangen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche arbeitnehmer haben nicht mehr als arbeitgeber gehabt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist die berufsbezeichnung von mitarbeiter alice	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) )
welcher student hielt zur selben zeit an, als mitarbeiter alice dies tat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist der beziehungsstatus von menschen, die männlich sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )
welche person ist eingeloggt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) )
mitarbeiter, die ihre arbeit begonnen haben, bevor alice in die schule kam	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche mitarbeiter hatten ein austrittsdatum, das nicht in 2004 lag?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, der den tag verlassen hat alice ist beigetreten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie mitarbeiter mit der geringsten anzahl von berufsbezeichnungen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
student, der seinen abschluss vor alice beginnt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
suche mir eine liste von studenten, deren startdatum 2004 oder 2010 war	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter, die vor alice anfingen, hörten auf, student zu sein	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche schüler haben ein enddatum, das unter dem des startdatums von mitarbeiter alice liegt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
suche mir alle mitarbeiter, die nach 2004 oder 2010 angefangen haben zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
geburtsort des studenten, dessen enddatum vor 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
freunde von alice oder bob finden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
welche mitarbeiter haben die gleiche berufsbezeichnung wie alice?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
freunde von studierenden ab 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wer ist mit der person befreundet, die 180 cm groß ist?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
nennen sie eine person, die mit mehr als zwei anderen personen befreundet ist	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
finde leute, die den gleichen beziehungsstatus haben wie jemand, mit dem alice befreundet ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
den beziehungsstatus eines studenten, der nicht im jahr 2004 begonnen hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
beginn der anstellung bei alice im jahr 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_start_date ) ) )
mitarbeiter finden, die vor 2010 beginnen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
nennen sie die beziehung des schülers, der vor 2004 angefangen hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wer ist online und mit alice befreundet?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string logged_in ) ) )
menschen, die in einer beziehung sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string ! = ) en.relationship_status.single ) )
was war das geschlecht der arbeitnehmer, die vor 2004 abgereist sind?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wie ist der beziehungsstatus des mitarbeiters ab 2004?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
student, der an einer braunen oder ucla universität eingeschrieben ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.concat en.university.brown en.university.ucla ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
arbeitnehmer mit nicht mehr als zwei berufsbezeichnungen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde die person, die 180 cm groß und auch weiblich ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string gender ) ) ( string = ) en.person.alice ) )
menschen, die nach alice geboren wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )
welche personen sind mit mitarbeitern befreundet, deren berufsbezeichnung nicht "software engineer" ist?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
nennen sie einen freund des schülers, der nach 2004 seinen abschluss gemacht hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen, die nicht das gleiche geschlecht wie alice haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string ! = ) en.person.alice ) )
was ist alices berufsbezeichnung von der firma, die sie im jahr 2004 verlassen hat	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string job_title ) ) )
leute, die gerade online sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) )
welche mitarbeiter am letzten tag am selben tag waren, an dem alice in die schule kam	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche personen haben mindestens zwei beziehungsstatus	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string >= ) ( number 2 ) ) )
person, die vor kurzem die schule abgebrochen hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wo wurde alices freundin geboren in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ) )
finde freunde von menschen, die 2004 geboren wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )
finde alle leute die freunde von alice sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string friend ) ( string = ) en.person.alice ) )
wie ist der beziehungsstatus aktueller oder ehemaliger studierender mit ausnahme derjenigen, die im jahr 2004 begonnen haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
zeig mir alle mitarbeiter, die das unternehmen verlassen, bevor alice anfängt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
freunde finden, die nach 2004 eingeschult wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finde menschen, die mit alice befreundet sind und in new york geboren sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string birthplace ) ( string = ) en.city.new_york ) )
wer hat zwei geschlechter	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( number 2 ) ) )
finde einen schüler mit einem anderen letzten tag als 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welches geschlecht haben die meisten menschen mit einer körpergröße von 180 cm?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
studenten, die spätestens mit dem geburtstag von alice angefangen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist mit der person befreundet, die während oder vor 2004 ihren abschluss gemacht hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
mitarbeiter, die vor 2010 begonnen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
geschlecht der studierenden, deren enddatum nach 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen mit zwei geburtsorten finden	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( number 2 ) ) )
wer hat maximal zwei beziehungsstatus	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string <= ) ( number 2 ) ) )
nenne eine freundin von alice, die online ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
finden sie personen mit zwei beziehungsstatus	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( number 2 ) ) )
alices studiengebiet ist die informatik	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string field_of_study ) ) )
nennen sie einen freund des studenten, der spätestens 2004 angefangen hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
der 2004 angefangen hat und 180 cm groß ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )
menschen, die mit anderen mitarbeitern als software-ingenieuren befreundet sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finden sie personen, die mit einer körpergröße von 180 cm eingeloggt sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
menschen, die ab 2004 anfingen zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
hochschulnummer	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.university ) ( string ! type ) ) ) )
wer hat zwei geburtsorte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( number 2 ) ) )
suche nach schülern mit einem enddatum unter 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie alle mitarbeiter, deren startdatum mit dem von alice übereinstimmt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist das geschlecht der menschen, die nach 2004 ihre arbeit aufgenommen haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
student, der nach 2004 seinen abschluss gemacht hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche schüler haben ihr studium bis auf 2004 abgeschlossen?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist der beziehungsstatus von zwei personen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
geschlecht wie alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) en.person.alice ) ( call SW.reverse ( string gender ) ) ( string = ) en.person.alice ) )
menschen, die ihre arbeit beendet haben, als alice angefangen hat oder früher	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
suche nach schülern mit einem startdatum von alice oder höher	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
alices freund, der eingeloggt ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string friend ) ( string = ) en.person.alice ) )
wer ist mit einem studenten befreundet, der keine braune universität besucht?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wer ist der freund des schülers, der 2004 oder später aufgehört hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie menschen mit einer größe von 180 und einem enddatum von 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )
mitarbeiter, die anfingen, als alice ihren job kündigte	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche stadt ist der geburtsort von zwei der menschen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
arbeitnehmer mit den wenigsten berufsbezeichnungen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie die geburtsorte von menschen, die männlich sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )
welche mitarbeiter haben am oder vor alices geburtsdatum angefangen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche leute sind mit alice befreundet?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
studierende ab 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche personen wurden nach 2004 geboren?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
was ist der geburtsort von studenten, die ihren abschluss spätestens 2004 gemacht haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
startdatum von alice bei mckinsey	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string employment_start_date ) ) )
welche schülerin hat nach alices geburtsdatum angefangen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde leute, deren geburtstag mit dem enddatum von alice übereinstimmt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) )
finden sie das geschlecht aller eingeloggten personen mit einer größe von 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
finde menschen, die den gleichen geburtsort haben wie alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) ) )
arbeitnehmer, dessen startdatum nicht 2004 ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist die gleiche höhe wie alice bei 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string height ) ) ( string = ) en.person.alice ) )
finde mich bei freunden von leuten, die vor 2004 ihren job angetreten haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
student, dessen enddatum mit dem startdatum von alice identisch ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer ist online, der ist 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string logged_in ) ) )
was ist der studienbereich der studentin alice, deren universität die braune universität ist?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string field_of_study ) ) )
wer mit der person befreundet ist, wird spätestens 2004 gekündigt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
studenten, die vor 2004 angefangen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wie ist der beziehungsstatus von menschen, die nach 2004 aufgehört haben zu arbeiten?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
student mit nicht mehr als zwei universitäten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string university ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
geburtsort eines studenten ab 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen, die nach alice geboren wurden, fingen an zu arbeiten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) )
in welcher stadt waren menschen, die alleinstehend geboren wurden?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )
menschen in new york geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) )
menschen, die mehr als zwei freunde haben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
nennen sie einen mitarbeiter, der im jahr 2004 oder später begann	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
nennen sie einen studenten, der 2004 oder 2010 angefangen hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die einen anderen beziehungsstatus haben als alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string ! = ) en.person.alice ) )
schüler, die am starttag von alice fertig sind	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer ist mit der person befreundet, die 2004 aufgehört hat zu arbeiten?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter mit dem niedrigsten enddatum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus der männchen?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )
was ist die durchschnittliche größe einer person	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ) ) )
finde männer, mit denen alice befreundet ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string gender ) ( string = ) en.gender.male ) )
finde die männlichen freunde von alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string friend ) ( string = ) en.person.alice ) )
welcher mitarbeiter endete am startdatum von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wo ist der geburtsort des mitarbeiters, der 2004 nicht angefangen hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wann hat alice 2004 aufgehört zu studieren	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string education_start_date ) ) )
welcher student hat aufgehört, bevor alice geboren wurde?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher schüler hat die schule verlassen, bevor alice die schule verlassen hat?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die zwei geburtsorte haben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( number 2 ) ) )
suche nach schülern, deren enddatum über dem startdatum von alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
personen, die mit einem studenten befreundet sind, dessen startdatum vor 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
was ist das geschlecht der person, die im jahr 2004 geboren ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )
geburtsort des arbeitnehmers, dessen arbeitgeber nicht mckinsey ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finden sie mitarbeiter mit einem enddatum, das gleich oder später als das der schüler ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
arbeitnehmer mit der geringsten anzahl von berufsbezeichnungen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche stadt ist der geburtsort des mitarbeiters, der vor 2004 angefangen hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wer ist dieser mitarbeiter, mit dem kein software-ingenieur befreundet ist?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
in welcher stadt wurden alice oder bob geboren?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
student, dessen enddatum vor dem geburtsdatum von alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist der schulbeginn von alice?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) )
wie ist der beziehungsstatus von studenten, die vor 2003 ihren abschluss gemacht haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
geschlecht des studenten, dessen enddatum nicht nach 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wie ist der beziehungsstatus von erwerbstätigen, die 2004 noch nicht angefangen haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
suche nach schülern, die vor alice beginnen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer ist mit alices freund befreundet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ) )
was ist das geschlecht der studenten, die spätestens 2004 begonnen haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche studenten haben die wenigsten majors?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie leute, die mit mitarbeitern befreundet sind, deren startdatum nicht später als 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die mit schülern befreundet sind, die 2005 oder später in die schule gekommen sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
was schüler vor alice angefangen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist das geschlecht der studierenden mit einem startdatum bis spätestens 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wer hat freunde, die nicht mitarbeiter bei mckinsey sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finde alleinstehende menschen, die in new york geboren sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
personen, die mit einem mitarbeiter befreundet sind, der nicht die berufsbezeichnung softwareingenieur hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wo wurden alices freunde geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ) )
welche studenten vor alices geburtsdatum ihren abschluss gemacht haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
freunde finden, die nach 2004 ihren abschluss gemacht haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche von alices freunden wurden im jahr 2004 geboren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
was ist der beziehungsstatus von alice?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) en.person.alice ) ( call SW.reverse ( string relationship_status ) ) ( string = ) en.person.alice ) )
menschen finden, die im jahr 2004 oder später geboren wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
welche schüler haben das gleiche hauptfach wie alice?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher mitarbeiter hat zuletzt gekündigt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer hat die meisten geburtsorte aufgelistet	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( string birthplace ) ) )
der 2004 geboren wurde und 180 cm groß ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
finden sie menschen, die im jahr 2004 geboren sind und 180 cm groß sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
student, dessen startdatum nach dem enddatum von alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
die nach alices geburtstag kündigten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche person hat ein geburtsdatum früher als alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) )
was für geschlechter sind menschen, die vor 2004 aufgehört haben zu arbeiten?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
arbeitnehmer, die ihren arbeitsplatz in oder nach 2004 gekündigt haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
schüler, die am oder nach dem tag, an dem alice geboren wurde, die schule beendeten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
suche nach schülern mit dem letzten tag vor oder am geburtstag von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche leute sind mit studenten befreundet, die nach 2004 angefangen haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
student, dessen enddatum so spät ist wie das von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
nennen sie den freund einer person, die nicht bei mckinsey beschäftigt ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finde menschen mit einer höhe von 180 cm, die auch mit alice befreundet sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
der 180 cm groß ist und 2004 geboren wurde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
mitarbeiter, die vor alices geburtstag fertig sind	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche person hat ihren status als single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
finde menschen mit demselben geburtsort wie alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.getProperty en.person.alice ( string birthplace ) ) ) )
finden sie mitarbeiter mit einem startdatum bis spätestens 2004 und deren freunde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche schüler haben ein enddatum, das dem von schüler alice entspricht?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
eine person 180 cm groß und hat das gleiche geburtsdatum wie alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string birthdate ) ) ( string = ) en.person.alice ) )
freunde von mitarbeitern finden, die den job nach 2004 gekündigt haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die am oder nach dem tag in die schule kamen, hörten auf zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
studenten, die vor alice keinen abschluss hatten, meldeten sich an	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
ein freund von jemandem, der nach 2004 gekündigt hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wie heißt die geburtsstadt eines arbeitnehmers, der im jahr 2004 oder später angefangen hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wer ist am jüngsten	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string birthdate ) ) ) )
studenten, die das studienfach von alice teilen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
die universität von jemandem 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.university ) ( string ! type ) ) ( call SW.reverse ( string university ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
finde mich alle studenten, die nach 2004 ihren abschluss gemacht haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer ist geboren, nachdem student alice angefangen hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )
was ist der beziehungsstatus des freundes von alice?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
welche leute haben zwei oder mehr geschlechter	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string >= ) ( number 2 ) ) )
welcher mann hat den beziehungsstatus single?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string gender ) ( string = ) en.gender.male ) )
geburtsorte von schülern, die nach 2004 eingeschult wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
die studenten begannen spätestens zu dem tag, an dem alice mit der arbeit begann	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die nach alice zu arbeiten begannen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde leute, die mit alice befreundet sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string friend ) ( string = ) en.person.alice ) )
was menschen mit einem geburtsdatum von 2004 auch mit alice befreundet sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string friend ) ( string = ) en.person.alice ) )
nennen sie einen freund der person, die online ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
student, dessen enddatum nicht vor dem enddatum von alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer ist in einer stadt geboren, in der alice geboren wurde?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) )
welcher student hat ein startdatum in der nähe des startdatums von alice?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
student, der nicht nach 2004 angefangen hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
schüler, dessen enddatum auf dem datum liegt, an dem schüler alice angefangen hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
studenten in braun oder ucla	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.concat en.university.brown en.university.ucla ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher mitarbeiter hat den frühesten starttermin?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
suche mir die geburtsstadt aller schüler, deren enddatum 2004 oder später ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wer ist der neueste mitarbeiter?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die nicht in new york geboren sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string ! = ) en.city.new_york ) )
finde den angestellten, der gegangen ist, nachdem alice angefangen hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche studenten besuchen keine braune universität	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wann hat alice nach dem studium der informatik ihren abschluss gemacht?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string education_end_date ) ) )
suche nach schülern mit einem enddatum, das nicht höher ist als das von schüler alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wo wurde alices freund geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
alice ist eine studentin an welcher universität	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ) )
menschen, die mit menschen befreundet sind, die ihren jetzigen job vor 2005 bekommen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
suche mir den geburtsort für alle mitarbeiter ab 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter finden, die nach 2004 beginnen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche person hat zwei beziehungsstatus	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string <= ) ( number 2 ) ) )
welche universität besuchte alice im jahr 2004?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string university ) ) )
die ihren job vor längster zeit verlassen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was hat alice im jahr 2004 studiert?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string field_of_study ) ) )
person, die die ausbildung zuerst abgeschlossen hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist die durchschnittliche größe der menschen	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ) ) )
wie ist der beziehungsstatus des vor 2004 beendeten studenten?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen, die vor alice geboren wurden, kündigten ihren job	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) )
wie ist der beziehungsstatus des mitarbeiters, der im jahr 2004 angefangen hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
personen, die mit einem studenten befreundet sind, dessen startdatum 2004 oder später liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welcher student war der letzte, der fertig wurde?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde alice, eine studentin an der universität	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ) )
welche mitarbeiter starrten am selben tag wie alice in die schule	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
städte von mitarbeitern, die nach 2004 eingestellt wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
ein student, der nach student alice angefangen hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher student begann am selben tag wie alice?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher student hat ein enddatum nicht vor dem enddatum von alice?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welches geschlecht von mindestens zwei personen beansprucht wird	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
mitarbeiter, der geboren wurde, als alice den job kündigte	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
geburtsort des arbeitnehmers, dessen enddatum vor 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
geburtsort von schülern, die ihren abschluss in oder nach 2004 haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welcher student hat ein enddatum vor student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde mitarbeiter mit dem letzten tag am oder vor alices erstem tag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde menschen, die männlich und 180 cm groß sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
welche mitarbeiter haben einen starttermin, der entweder 2004 oder 2010 ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie hoch ist die gesamtzahl der geschlechter?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ) )
wer ist mit einem studenten befreundet, der vor 2004 angefangen hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
was ist das geschlecht von studenten, die nicht an einer braunen universität studieren?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
angestellter, der gekündigt hat, bevor alice seinen abschluss gemacht hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche personen sind mit mitarbeitern befreundet, deren enddatum vor 2004 liegt?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finde freunde von studenten, deren letzter tag 2004 oder später ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
die 180 cm großen menschen haben ein startdatum von 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )
in welcher stadt wurden studenten geboren, die vor 2004 begannen?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welcher mitarbeiter startet, wenn alice das unternehmen verlässt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde mitarbeiter mit einem startdatum nach alice's	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, die nicht im jahr 2004 begonnen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
beziehungsstatus von studierenden, die nicht im jahr 2004 begonnen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
geburtsorte von arbeitnehmern, die ihren arbeitsplatz im jahr 2004 oder später gekündigt haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welcher mitarbeiter hat nach 2004 oder 2010 angefangen?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie diejenigen, die mit schülern befreundet sind, deren startdatum vor 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche person ist kürzer als 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )
wer ist 180 cm groß und hat ein startdatum im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )
nennen sie personen mit einer körpergröße von mehr als 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )
leute mit einem oder zwei geburtsorten finden	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string <= ) ( number 2 ) ) )
studierende mit dem gleichen studienfach wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was die schüler in die schule brachten, bevor alice anfing zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
leute, die vor alice eingeschult wurden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche schüler haben zwischen 2004 und 2010 teilgenommen?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche person ist die kürzeste	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string height ) ) ) )
wer hat die schule abgebrochen, bevor alice angefangen hat?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher mann wurde in new york geboren?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string birthplace ) ( string = ) en.city.new_york ) )
was ist das geschlecht der arbeitnehmer, die am oder nach dem jahr 2004 gekündigt wurden?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
ein schüler, der am oder nach alices geburtstag abreiste	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche leute sind mit studenten befreundet, die 2004 oder später ihren abschluss machen?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welcher mitarbeiter hat ein enddatum vor 2004?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was ist der geburtsort von menschen, die nicht im jahr 2004 begonnen haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
in welchem geburtsort leben mindestens zwei personen?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
freunde von mitarbeitern, die keine softwareingenieure sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
studierende, die nicht mehr als zwei studienrichtungen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
entweder mckinsey oder google	( call SW.listValue ( call SW.concat en.company.mckinsey en.company.google ) )
welche schülerin hat die schule verlassen, nachdem alice ihren job gekündigt hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche mitarbeiter haben ein startdatum das gleiche wie alices enddatum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
studenten, die 2004 oder 2010 angefangen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
leute, die die schule am selben tag wie alice abgebrochen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
freund eines mitarbeiters, dessen startdatum nicht 2004 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
studenten, die 2004 nicht fertig sind	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher arbeitnehmer hat die meisten berufsbezeichnungen?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche schüler begannen am selben tag, als alice es tat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde mich bei freunden von leuten, die nicht an einer braunen universität studieren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen, die seit oder vor 2004 arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
personen, die größer als 180 cm sind, sind eingeloggt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string logged_in ) ) )
welche leute sind mit studenten befreundet, die vor 2004 angefangen haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche personen sind mit einer körpergröße von 180 cm eingeloggt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string logged_in ) ) )
personen in new york geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) )
finden sie die menschen, die 180 cm groß sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string height ) ) ( string = ) en.person.alice ) )
finde eingeloggte personen, die auch mit alice befreundet sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string logged_in ) ) )
finden sie männer, die 180cm groß sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
was ist alices studienfach	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ) )
was ist die nummer der stadt	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ) )
wer wurde am tag der abreise von alice geboren?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) )
finde alices freunde, die 180 cm groß sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
wer ist mit der person befreundet, die ihren abschluss frühestens im jahr 2004 macht?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie menschen, die eingeloggt sind und ihren geburtsort in new york haben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string logged_in ) ) )
welche schüler haben den frühesten starttermin	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welches geschlecht haben menschen, die vor 2004 mit der arbeit begonnen haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finde mich die zwei leute, die in der gleichen stadt geboren sind	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
der das gleiche geschlecht wie alice hat und 180 cm groß ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string gender ) ) ( string = ) en.person.alice ) )
nenne einen angestellten, der gegangen ist, nachdem alice angefangen hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde die jüngste person	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string birthdate ) ) ) )
schüler, dessen startdatum am kleinsten ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie mir den beziehungsstatus von studenten, die ihren abschluss seit 2004 gemacht haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finde mich alle mitarbeiter, die vor 2004 gekündigt haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde leute, die studenten einer universität sind, die nicht braun ist, und ihre freunde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche menschen haben eine höhe von 180 cm und die höhe von alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string height ) ) ( string = ) en.person.alice ) )
finde leute, die nicht alices freunde sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string ! = ) en.person.alice ) )
mitarbeiter, die ihre ausbildung vor 2004 abgeschlossen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
angestellter, der vor alices einschreibung in die schule anfing zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
schüler, die gleichzeitig mit oder nach dem start von alice fertig werden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
ein student, der 2004 nicht aufgehört hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
geburtsort von mitarbeitern, die vor 2004 ihren abschluss gemacht haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche schüler haben ein startdatum, das mit dem enddatum von mitarbeiter alice oder später übereinstimmt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde leute, die zwei freunde haben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
welche schüler am selben tag mit der schule beginnen alice beginnt mit der arbeit	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was sind die geschlechter der in new york geborenen menschen?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )
arbeitnehmer, dessen arbeitgeber mckinsey oder google ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string = ) ( call SW.concat en.company.mckinsey en.company.google ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
personen mit nur einem beziehungsstatus	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string < ) ( number 2 ) ) )
menschen, die ledig sind und im jahr 2004 geboren wurden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
wie ist der beziehungsstatus des schülers, der nach 2004 seinen abschluss gemacht hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
was ist alices berufsbezeichnung bei mckinsey?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string job_title ) ) )
welcher student hat ein enddatum, das kleiner ist als das startdatum von alice?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die mit jemandem befreundet sind, der nach 2004 in die schule gekommen ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
suche nach personen mit nur 1 beziehungsstatus	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( string relationship_status ) ) )
student, dessen enddatum nach dem enddatum von student alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wann hat alice angefangen, die schule zu besuchen, die sie 2004 abgeschlossen hat	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string education_start_date ) ) )
menschen, die zu arbeiten begannen, als alice die schule abbrach oder früher	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
ermitteln sie das geschlecht der schüler mit einem enddatum von 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
beziehungsstatus des studierenden, dessen studienfach nicht informatik ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
was ist das geschlecht eines mitarbeiters mit einem enddatum nach 2004?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
freunde von menschen finden, die ihren job vor 2004 gekündigt haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
der ist 180 cm groß und hat den gleichen geburtsort wie alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) )
finden sie mitarbeiter, deren enddatum mindestens dem geburtstag von alice entspricht	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die mit jemandem befreundet sind, der vor 2004 angefangen hat zu arbeiten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
suche nach beziehungsstatus für mitarbeiter mit einem startdatum nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
schüler, die an alices geburtstag angefangen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche studierenden haben starttermine nach 2004?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
student, dessen startdatum nicht 2004 ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie die schüler des gleichen geschlechts, die mindestens 2004 geboren wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche stadt ist der geburtsort eines mitarbeiters, dessen enddatum nicht im jahr 2004 liegt?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finden sie mitarbeiter mit den neuesten enddaten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
personen mit weniger als zwei aufgeführten geschlechtern	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string < ) ( number 2 ) ) )
leute, die gerade online sind und mit alice befreundet sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string friend ) ( string = ) en.person.alice ) )
jemand mit über zwei freunden	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
finde einen schüler, dessen letzter tag mit dem startdatum von alice übereinstimmt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
personen mit zwei oder mehr beziehungsstatus	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string >= ) ( number 2 ) ) )
wie ist der beziehungsstatus des neuen studenten, der vor 2004 beginnt?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
ein freund eines mitarbeiters, der kein softwareentwickler ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
der 2004 geboren wurde und mit alice befreundet ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string friend ) ( string = ) en.person.alice ) )
menschen, die mit jemandem befreundet sind, der vor 2005 angefangen hat zu arbeiten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die mit jemandem befreundet sind, der 2004 nicht aufgehört hat zu arbeiten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter suchen, deren enddatum unter 2004 oder 2010 liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
die nach alices abschluss im jahr 2004 in die schule gegangen sind	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string education_start_date ) ) )
finde die freunde von menschen, die nach 2004 studiert haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
geschlecht der schüler, die 2004 oder früher eingeschult wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
der vor alices letztem schultag geboren wurde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) )
finde schüler mit dem letzten tag von 2004 oder früher	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer ist der mitarbeiter mit den meisten berufsbezeichnungen?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
hier finden sie alle beziehungsstatus für mitarbeiter, deren startdatum nicht später als 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
jeder freund von alice, der eingeloggt ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string logged_in ) ) )
finden sie den beziehungsstatus von menschen, die im jahr 2004 geboren wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )
finden sie mitarbeiter mit einer oder zwei berufsbezeichnungen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist das geschlecht der arbeitenden menschen, die nicht für mckinsey arbeiten?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
student, der zuletzt endete	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
person, die älter als alice ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )
finde ich das geschlecht der arbeitnehmer ab 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen mit einer größe von 180 cm und ihrem beziehungsstatus finden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
welches schülerstartdatum am nächsten zu alices geburtstag liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher mitarbeiter hat die längste beschäftigung	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, deren enddatum mit dem von alice übereinstimmt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die freunde haben, die ihre arbeit in oder nach 2004 aufgegeben haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
person, die mit einem studenten befreundet ist, der 2004 keinen abschluss gemacht hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie freunde von menschen, die spätestens im jahr 2004 die arbeit aufgeben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
der 180 cm groß ist und informatik studiert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) )
personen, die vor dem startdatum von alice geboren wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )
welcher mitarbeiter hat das selbe enddatum wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter finden, dessen letzter tag vor 2010 lag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer hat ein kleineres enddatum als 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
geschlecht des studenten, der ein kleineres datum als 2004 hatte	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
mitarbeiter, die am selben tag wie alice angefangen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer mit alice befreundet ist, ist eingeloggt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string logged_in ) ) )
wer hat freunde, die studenten sind und deren enddatum 2004 ist?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
schüler beenden, wenn alice beginnt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde mich alle menschen mit weniger als zwei geburtsorten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string < ) ( number 2 ) ) )
welche mitarbeiterin hat ihren job am selben tag wie alice angefangen?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
ein arbeiter, dessen firma nicht mckinsey ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
leute, die aufhörten zu arbeiten, nachdem alice die schule abgebrochen hatte	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
student, dessen enddatum nicht vor dem enddatum von student alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche leute wurden in new york geboren?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string birthplace ) ( string = ) en.city.new_york ) )
suche nach schülern, deren startdatum unter 2004 liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
schüler, die ihren letzten tag vor alice haben, kündigen ihren job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde menschen, die mindestens so groß sind wie alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )
wer hat mit alice angefangen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wo sind die arbeitenden menschen geboren, die nicht für mckinsey arbeiten?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
suche schüler mit dem letzten tag vor alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die einen freund haben, der im jahr 2004 geboren wurde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )
mitarbeiter, dessen startdatum nach dem enddatum von student alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
freunde von menschen finden, die im jahr 2004 keine arbeit verloren haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
geburtsort für alle nicht-software-ingenieure	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wie lautet die nummer der stadt?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ) )
studenten, die vor 2004 oder 2010 angefangen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche mitarbeiter haben einen starttermin nach 2004 und mit wem sind sie befreundet?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
suche einen studenten, der spätestens 2004 angefangen hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter, die nach alice eingestiegen sind	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer hat einen anderen beziehungsstatus als alice?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string ! = ) en.person.alice ) )
studenten, die nach alice enden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
ein student, der vor alice endet	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer hat die wenigsten freunde	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string friend ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
finden sie personen, die mit mitarbeitern befreundet sind, deren enddatum nicht 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter, die die gleichen berufsbezeichnungen wie alice haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist der beziehungsstatus von zwei personen mit demselben status?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
studenten, die gingen, bevor alice anfing	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die im jahr 2004 oder früher geboren wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
wer ist mit jemandem befreundet, der 2004 nicht aufgehört hat zu arbeiten?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
arbeitnehmer mit der größten anzahl von arbeitgebern	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie mich, die studentin, die am geburtstag von alice ihren abschluss gemacht hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter mit einem enddatum nach 2004 finden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher student hat zuletzt angefangen?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist das geschlecht von alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) en.person.alice ) )
nennen sie eine person, mit der alice befreundet ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
beziehungsstatus von mitarbeitern, die im jahr 2004 nicht abgeschlossen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
ein student, der keine informatik studiert	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie mich nach dem geschlecht der schüler, die 2004 nicht eingeschult wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welcher student hat den tag begonnen? alice hat aufgehört	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
beziehungsstatus von mitarbeitern, die nicht im jahr 2004 angefangen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
woher kamen die menschen, die in einem anderen jahr als 2004 zu arbeiten begannen?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was mitarbeiter nach 2004 angefangen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche person, die online ist, ist mit alice befreundet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string logged_in ) ) )
welches unternehmen beschäftigt die person, die 180 cm groß ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.company ) ( string ! type ) ) ( call SW.reverse ( string employer ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
was ist das geschlecht der arbeitnehmer, die 2004 oder früher angefangen haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
ein freund einer einzelnen person	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )
der ist 180 cm groß und hat das gleiche geburtsdatum wie alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string birthdate ) ) ( string = ) en.person.alice ) )
mitarbeiter, die vor alices geburtstag gekündigt haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
männer, die in new york geboren wurden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string gender ) ( string = ) en.gender.male ) )
beziehungsstatus des mitarbeiters, dessen enddatum nach 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
student mit weniger als zwei universitäten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string university ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist der beziehungsstatus von alice und bob?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
was hat alice an der brown university studiert?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string field_of_study ) ) )
welche personen sind 180 cm groß und haben ein geburtsdatum von 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
wer ist mit einer person befreundet, die im jahr 2004 nicht aufgehört hat zu arbeiten?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wo werden menschen geboren, die 180 cm groß sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
finden sie den beziehungsstatus von mitarbeitern mit einem enddatum vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was ist das geschlecht	( call SW.listValue ( call SW.concat en.gender.male en.gender.female ) )
menschen, die mit alice oder bob befreundet sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
geschlechter von mitarbeitern, die keine software-ingenieure sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
freunde von alice finden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
welche schüler haben ein startdatum, das nicht größer ist als mitarbeiter alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wie ist das geschlecht der arbeitnehmer, deren letzter tag nicht später als 2004 war?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter mit den wenigsten berufsbezeichnungen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
kürzeste person	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string height ) ) ) )
personen unter 200 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) ) ) )
person, die in weniger als 3 beziehungen war	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string <= ) ( number 2 ) ) )
menschen mit einer körpergröße von 180 cm am letzten tag des jahres 2004 finden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )
alice geht zur braunen universität	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string university ) ) )
wer sind einige von alice freunde verbindungen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
menschen, die single sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
geburtsort von studenten, die vor 2004 geboren wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche stadt ist der geburtsort von weniger als zwei menschen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
was ist die berufsbezeichnung der person, die 180 cm groß ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.job_title ) ( string ! type ) ) ( call SW.reverse ( string job_title ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
menschen mit geburtsdatum finden nicht im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string ! = ) ( date 2004 -1 -1 ) ) )
welche schüler haben größere enddaten als alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche personen sind freunde von mitarbeitern, die ein startdatum vor 2004 haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finden sie 180 cm große und eingeloggte personen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string logged_in ) ) )
schüler, die vor alices letztem tag anfangen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche erwerbstätigen haben weniger als zwei berufsbezeichnungen?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde alle menschen mit zwei geschlechtern	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( number 2 ) ) )
welche menschen haben das gleiche geburtsdatum wie diejenigen, deren größe 180 cm beträgt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
geburtsort von mitarbeitern, die vor 2005 beigetreten sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
alle 180 cm großen menschen, die 2004 gekündigt haben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )
welches geschlecht hat die studentin, die 2004 angefangen hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welches datum hat die studentin alice verlassen?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) )
eine person mit einem freund, der kein hauptfach informatik ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen mit zwei oder mehr geburtsorten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string >= ) ( number 2 ) ) )
finden sie mitarbeiter, deren enddatum mit dem startdatum für student alice übereinstimmt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist der beziehungsstatus der schüler, die 2004 noch nicht angefangen haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
leute, die die schule an oder nach dem datum abgebrochen haben, als alice in die schule kam	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
ein mitarbeiter, der anfängt, wenn oder bevor alice endet	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher mitarbeiter hat ein startdatum am geburtsdatum von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde alle leute, die gerade online sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string logged_in ) ) )
welche mitarbeiterin endete zumindest bei alices geburtsdatum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
studenten, die die gleiche universität besuchen wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche schüler haben ein startdatum, das nicht später als das enddatum von mitarbeiter alice ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wie ist der beziehungsstatus von nicht mehr als zwei personen?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
finde studenten, deren enddatum gleich alices geburtstag ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wo sind die leute, die vor 2004 aufgehört haben zu arbeiten?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche person ist mit dem mitarbeiter befreundet, der kein software-ingenieur ist?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche mitarbeiter am oder vor dem startdatum von alice angefangen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde alle leute, die mit leuten befreundet sind, die im jahr 2004 geboren wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )
wann wurde alice geboren?	( call SW.listValue ( call SW.getProperty en.person.alice ( string birthdate ) ) )
welche mitarbeiter haben zwei oder weniger berufsbezeichnungen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus eines mitarbeiters, der seinen job nach 2004 gekündigt hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche mitarbeiter haben nach 2004 angefangen zu arbeiten?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
nennen sie die person mit einer größe von 180 cm, die angemeldet ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
finden sie mitarbeiter, die als software-ingenieure bezeichnet werden und 180 cm groß sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) )
freund eines studenten, dessen enddatum nicht nach 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
was ist das geschlecht der einzelnen menschen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )
der vor 2004 seinen abschluss gemacht hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
leute, die nach alice in die schule gekommen sind, haben die schule abgebrochen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie personen mit einem beziehungsstatus, den mehr als zwei personen haben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
geburtsorte anderer mitarbeiter als softwareingenieure	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die zwei oder weniger freunde haben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
was ist das geschlecht der studenten, die nicht informatik studieren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wer ist nicht 180cm groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string ! = ) ( number 180 en.cm ) ) )
wie ist der beziehungsstatus der mitarbeiter ab 2004 oder später?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
derzeit angemeldete personen, deren beziehungsstatus ledig ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
wann hat alice aufgehört, für mckinsey zu arbeiten?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string employment_end_date ) ) )
nennen sie die einzelnen freunde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )
geburtsort der männchen finden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )
wer geht zur braunen universität oder ucla	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.concat en.university.brown en.university.ucla ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die ihr studium vor alice abgeschlossen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche studenten haben ein enddatum, das nicht später als 2004 ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde leute, die mit nicht mehr als zwei leuten befreundet sind	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
finde freunde, die 180 cm groß sind wie alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string height ) ) ( string = ) en.person.alice ) )
zeig mir alle mitarbeiter, die vor alices letztem tag gehen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen des am wenigsten gemeinsamen geschlechts	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string gender ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
finde jemanden mit zwei oder weniger geburtsorten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string <= ) ( number 2 ) ) )
menschen mit freunden, die seit 2004 nicht mehr arbeiten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche schüler haben ein enddatum, das nicht vor dem startdatum von alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
der geburtsort eines studenten, der vor oder während des jahres 2004 begann	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
nennen sie einen mann, der mit alice befreundet ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string friend ) ( string = ) en.person.alice ) )
person, die zwei oder mehr freunde hat	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
menschen, die ihre arbeit in oder vor 2004 oder in oder vor 2010 begonnen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie mitarbeiter, die im jahr 2004 oder früher begonnen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist die geburtsstadt eines studenten, der 2004 noch nicht angefangen hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie geburtsstädte für studenten, deren startdatum nicht später als 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
nennen sie einen freund der person, die 180 cm groß ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
finden sie mitarbeiter, deren enddatum nicht später als das startdatum von mitarbeiter alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
student, der nach 2004 beigetreten ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher mitarbeiter kündigte vor alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
ein mitarbeiter, der vor der geburt von alice anfing	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist in new york oder peking geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.concat en.city.new_york en.city.bejing ) ) )
was ist das geschlecht der menschen, die eine universität besuchen, aber braun	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche mitarbeiter am letzten tag waren am selben tag wie alices abschlusstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer hat zwei verschiedene beziehungsstatus	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( number 2 ) ) )
wo sind die menschen geboren, die vor 2004 eingeschult wurden?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
für wen hat alice gearbeitet, als sie 2004 ihren job gekündigt hat?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employer ) ) )
welchen beziehungsstatus beanspruchen mehr als zwei personen?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
menschen, die mindestens so groß sind wie alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )
wie ist der beziehungsstatus dieser beiden personen?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
finden sie personen mit dem gleichen geburtsdatum wie das enddatum der beschäftigung von alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) )
freunde von menschen finden, die nach 2004 ihren job gekündigt haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
student, der nach alice begann	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
ein freund eines nicht-informatik-studenten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wer hat freunde, die 180 cm groß sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
wie ist der beziehungsstatus von studierenden ab 2004?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finde mich alle menschen, die 180 cm groß sind und am selben ort geboren wurden wie alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) )
in welcher stadt wurden alices freunde geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
wer ist mit studenten befreundet, die ein enddatum von 2004 haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wo wurde alice nicht geboren?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string ! = ) en.person.alice ) )
welcher student hat nach 2004 angefangen?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was die schüler nach oder zur gleichen zeit wie alice begannen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welches studenten-enddatum ist größer als 2010?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
die mitarbeiterin hat den tag verlassen, an dem alice anfing	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
alices freundin wurde in new york geboren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string birthplace ) ( string = ) en.city.new_york ) )
was studenten zwischen 2004 und 2010 angefangen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche person ist online	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string logged_in ) ) )
welcher student ging zuerst	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
woher kamen menschen, die ihre arbeit vor 2004 begonnen haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welches geschlecht haben personen, die im oder nach dem jahr 2004 eingeschult wurden?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wie ist der beziehungsstatus des mitarbeiters, der im jahr 2004 angefangen hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche person hat zwei freunde	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
freunde von studenten, die in oder nach 2004 beginnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
geburtsort von studenten, die nicht an der braunen universität studieren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen, die mit alice und mann befreundet sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
in welcher stadt wurden die meisten menschen geboren?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string birthplace ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
mitarbeiter mit der gleichen berufsbezeichnung wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
angestellter, dessen berufsbezeichnung nicht softwareingenieur ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was war alices berufsbezeichnung bei mckinsey?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string job_title ) ) )
suche nach schülern, deren letzter tag der gleiche oder ein späterer als der von alice ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist alice kündigungstermin	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) )
in welcher stadt wurden weniger als zwei menschen geboren?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
welchen job hat alice im jahr 2004 verlassen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string job_title ) ) )
person mit gleichem geburtsdatum der person mit 180 cm körpergröße	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
freunde finden, die nicht in der informatik sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
was leute mit studenten befreundet sind, die ein startdatum haben, das nicht später als 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
die größe der person alice oder größer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )
welcher arbeiter am oder vor dem tag, an dem student alice anfing, abgereist ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist am oder nach dem startdatum des mitarbeiters alice geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) )
geburtsstadt von nicht mehr als zwei personen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
finden sie alle personen mit dem gleichen beziehungsstatus wie die 180 cm große person	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
mitarbeiter, die zu ende gehen, wenn alice anfängt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
ein student, der am selben tag wie mitarbeiterin alice angefangen hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde mich alle menschen die 180 cm groß sind und gerade online sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string logged_in ) ) )
wer ist der freund des mitarbeiters, dessen startdatum mindestens 2005 ist?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wie ist der status der mitarbeiterbeziehung, die nicht im jahr 2004 endete?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche mitarbeiter sind nicht bei mckinsey angestellt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
entweder 2004 oder 2010	( call SW.listValue ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) )
finden sie mitarbeiter mit der größten anzahl von arbeitgebern	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die weniger als zwei freunde haben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
menschen, die mit oder vor alice studiert haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
nennen sie einen freund des mitarbeiters, der seine arbeit spätestens 2004 aufgenommen hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welcher student hat nach der geburt von alice angefangen?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde einen schüler mit dem neuesten startdatum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
person geboren in new york im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string birthplace ) ( string = ) en.city.new_york ) )
wer ist ein software-ingenieur, der 180 cm ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) )
menschen, die nicht alice's freund sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string ! = ) en.person.alice ) )
studenten, die vor alice ihren abschluss gemacht hatten, wurden geboren	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was schüler begann, bevor schüler alice tat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
person, die einen befreundeten mitarbeiter hat, der 2004 mit der arbeit beginnt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welches geschlecht hat der arbeitnehmer, dessen enddatum nicht 2004 ist?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wie ist der beziehungsstatus eines mitarbeiters, der seit 2004 beschäftigt ist?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wer ist alice befreundet mit wem ist 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
freunde von menschen, die ihr studium nach 2003 abgeschlossen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finde mich die schülerin, die am selben tag mit alices abreise angefangen hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
stadt, in der die meisten personen geboren wurden	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string birthplace ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
student, dessen studienfach nicht informatik ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde mich alle leute die in new york geboren wurden die gerade online sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string logged_in ) ) )
wie ist der beziehungsstatus von menschen, die nach 2004 ihre arbeit aufgenommen haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wer studiert informatik oder geschichte?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.concat en.field.computer_science en.field.history ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
studentin, die vor alice ihren abschluss gemacht hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde eine person mit weniger als zwei freunden	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
wie viele unternehmen gibt es?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.company ) ( string ! type ) ) ) )
wer sind die mitarbeiter, die vor 2004 gekündigt haben?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist der beziehungsstatus von studenten, die nicht informatik studiert haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen, die freunde von bob oder alice sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
menschen, die die schule abgebrochen haben, als alice geboren wurde oder früher	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist das geschlecht von menschen, die etwas anderes als informatik studieren?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche mitarbeiter waren zuletzt 2004 oder 2010 beschäftigt?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
geburtsorte von arbeitnehmern, die im jahr 2004 nicht abgeschlossen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
leute, die aufhörten zu arbeiten, als alice die schule abbrach oder danach	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus von menschen, die in new york geboren wurden?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )
student, der vor alice endet	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie personen, die mit mitarbeitern befreundet sind, deren startdatum nach 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
der mit alice befreundet ist und 180 cm groß ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
was ist das geschlecht von studenten mit einem startdatum, das nicht dem von 2004 entspricht?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
arbeitnehmer mit einem arbeitgeber finden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
alice, deren studienfach informatik ist, endete an welchem datum	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string education_end_date ) ) )
geschlecht eines mitarbeiters, der während oder vor 2004 endet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche mitarbeiter haben eine andere berufsbezeichnung als softwareingenieur?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie mitarbeiter mit dem gleichen enddatum wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
beziehungsstatus von mindestens zwei personen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
welche person wurde am letzten tag der beschäftigung von alice geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) )
geburtsort von mitarbeitern, die im oder nach dem jahr 2004 angefangen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die vor alice zu arbeiten begannen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist das geschlecht von studenten, die nach 2004 ihren abschluss machen?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
die zur gleichen zeit oder nach alice gekündigt haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist das geschlecht von alice's freundin?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
finden sie menschen, die in new york oder peking geboren sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.concat en.city.new_york en.city.bejing ) ) )
beziehungsstatus des studenten, dessen enddatum vor 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche universität wird alice im jahr 2004 beenden	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string university ) ) )
alices freundin ist 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
menschen, die vor alice angefangen haben zu arbeiten, kündigten ihren job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
schüler, die nach alices erstem arbeitstag ihren abschluss gemacht haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist der beziehungsstatus von studenten mit anderen enddaten als 2004?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
geburtsort des arbeitnehmers, dessen startdatum nach 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
schüler, dessen startdatum nicht nach dem startdatum von mitarbeiter alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher student hat den frühesten starttermin?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
geburtsorte von menschen, die in anderen bereichen als der informatik studiert haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
was ist die geburtsstadt von studenten, deren enddatum unter 2004 liegt?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie geburtsorte von studenten, die keine braune universität besuchen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen, die am selben tag geboren werden, haben ihre arbeit aufgenommen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) )
was ist der geburtsort des mitarbeiters, der nach 2004 gegangen ist?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
leute mit nur zwei freunden	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
finde die studentin, die an alices geburtstag ihren abschluss gemacht hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
jeder freund von jemandem, der in new york geboren wurde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )
wann hat alice angefangen, für mckinsey zu arbeiten?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string employment_start_date ) ) )
beziehungsstatus von studenten, die keine braune universität besuchen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wie viele mitarbeiter teilen die berufsbezeichnung von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
der am ersten schultag von alice geboren wurde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) )
finde freunde von studenten mit einem anderen startdatum als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche person ist mit der eingeloggten person befreundet?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
welche person wurde nicht in new york geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string ! = ) en.city.new_york ) )
finde alle, die entweder ledig oder verheiratet sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( call SW.concat en.relationship_status.single en.relationship_status.married ) ) )
finde menschen, die einen geburtsort in new york haben, und ihre freunde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )
die sind alices männliche freunde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
angestellter mit geringster berufserfahrung	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, der maximal 2 berufsbezeichnungen hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus von mitarbeitern, die vor 2004 gekündigt haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
leute, die die schule abgebrochen haben, als alice aufgehört hat zu arbeiten oder danach	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher mitarbeiter hat einen arbeitgeber, der entweder mckinsey oder google ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string = ) ( call SW.concat en.company.mckinsey en.company.google ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche mitarbeiter am letzten tag waren nicht n 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist alice freund in new york geboren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string birthplace ) ( string = ) en.city.new_york ) )
menschen, die nach alices arbeitsende zu ihrem studium kamen, kündigten ihren job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher student hat am frühesten angefangen?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die 180 cm groß sind und ihren job im jahr 2004 verlassen haben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )
student, dessen startdatum nicht vor dem startdatum von student alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher student besucht keine braune universität?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher mitarbeiter endete nicht größer als alices	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
ein mitarbeiter, der vor der geburt von alice endete	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche person ist 200 cm oder kürzer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) ) ) )
suche nach schülern mit einem startdatum, das dem enddatum von schülerin alice entspricht	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
entweder nummer des feldes	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.field ) ( string ! type ) ) ) )
geburtsort von studenten, die vor 2004 beginnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
geburtsstadt aller studierenden, die vor 2004 angefangen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
mitarbeiter, die softwareentwickler oder programmmanager sind	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.concat en.job_title.software_engineer en.job_title.program_manager ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
leute, die nach alice in die schule kamen, hörten auf zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
die mitarbeiter alice als software-ingenieur	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) ( string employer ) ) )
suche nach schülern mit dem neuesten startdatum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
suche nach schülern mit dem gleichen startdatum wie mitarbeiter alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
beziehungsstatus von alice freunde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
schüler, die die schule am tag des beginns von alice beendet hatten, arbeiteten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer ist befreundet mit dem mitarbeiter, der später als 2004 begann	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welcher mitarbeiter hat ein startdatum nach dem enddatum von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die mit studenten befreundet sind, die keine braune universität besuchen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
geburtsorte von menschen, die vor 2004 studiert haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welcher mitarbeiter hat am oder nach alices geburtsdatum angefangen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher mitarbeiter hat nach alice angefangen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wann hat alice ihren job angefangen	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) )
welche personen sind mit mitarbeitern befreundet, deren letzter tag vor 2004 lag?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wer ist mit jemandem befreundet, dessen geburtstag 2004 ist?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )
studenten, die mit alice abschließen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter, die in oder nach 2004 beginnen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
suche nach studenten, deren universität entweder braun oder ucla ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.concat en.university.brown en.university.ucla ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer ist das gleiche geschlecht wie die 180 cm person	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
mitarbeiter ab alices geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
entweder new york oder peking	( call SW.listValue ( call SW.concat en.city.new_york en.city.bejing ) )
finden sie mitarbeiter, deren enddatum vor dem startdatum von mitarbeiter alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
nennen sie eine person, die 180 cm groß und genauso groß ist wie alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string height ) ) ( string = ) en.person.alice ) )
wer ist der angestellte?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie lautet die berufsbezeichnung von alice?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) )
menschen, die anfingen zu arbeiten, als alice aufhörte zu arbeiten oder danach	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
städte, in denen alice nicht geboren wurde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string ! = ) en.person.alice ) )
was die mitarbeiter übrig hatten, als alice anfing	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
der am selben ort geboren wurde wie die 180 cm große person	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
welche schüler haben startdaten größer als die des enddatums von schüler alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
verbindungen von freunden, die nicht bei mckinsey arbeiten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
der zur schule ging, aber 2004 nicht anfing	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
geschlecht des mitarbeiters, der vor 2005 beigetreten ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
deren beziehungsstatus nicht eindeutig ist	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
wie viele beziehungsstatusoptionen gibt es?	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ) )
180 cm große menschen arbeiteten bei mckinsey	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string employer ) ( string = ) en.company.mckinsey ) )
was ist die berufsbezeichnung von alice, die für mckinsey arbeitet?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string job_title ) ) )
finde freunde von menschen, die in new york geboren sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )
ein student, der vor oder während 2004 endet	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
studierende ab 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist der geburtsort von mitarbeitern, die nicht im jahr 2004 begonnen haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
freunde von menschen mit 180 cm körpergröße	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
was ist der geburtsort der mitarbeiter ab 2004 und danach	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche arbeitnehmer die geringste anzahl von arbeitgebern haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
der geburtsort von jemandem, der nicht bei mckinsey angestellt ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen des zahlreichsten geschlechts	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string gender ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
mitarbeiter, der vor alice kam, kündigte den job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer freunde hat, deren enddatum vor 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche mitarbeiter haben vor alices letztem tag angefangen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
software-ingenieure mit einer höhe von 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) )
finden sie das geschlecht der menschen 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
personen mit einer körpergröße von 180 cm oder mehr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )
geburtsorte von arbeitnehmern, die ihre arbeit im jahr 2004 oder früher aufgenommen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche verbindungen meiner freunde sind jetzt online?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
finde alle menschen, die alice als gemeinsamen freund haben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
geschlecht der beschäftigten, die vor 2004 angefangen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
nennen sie eine person, die mit einem mitarbeiter befreundet ist, der spätestens 2004 angefangen hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter, dessen enddatum nach dem startdatum von student alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher beziehungsstatus wird von mindestens zwei personen beansprucht?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
welcher mitarbeiter zwischen 2004 und 2010 endete	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher arbeitnehmer hat nicht mehr als zwei arbeitgeber	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
leute, die in die schule kamen, als alice es tat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
geschlecht der arbeitnehmer, die nicht seit 2004 beschäftigt sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
schüler, die zeitgleich mit alice in die schule gingen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche studenten zur selben zeit begannen wie die mitarbeiterin alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
in welchen städten wurden die männer in meinem sozialen netzwerk geboren?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )
leute, die nach alice ihren beruf angetreten haben, haben ihr studium begonnen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist mit einer person befreundet, die vor 2004 ihren abschluss gemacht hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
in welcher stadt wurden zwei menschen geboren?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
wer ist single aus new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string birthplace ) ( string = ) en.city.new_york ) )
wer ist jünger als alice?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )
menschen, die am oder nach alices erstem arbeitstag geboren wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) )
menschen finden, die mit mitarbeitern befreundet sind, deren letzter tag nicht im jahr 2004 lag	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
student von nur einer universität	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string university ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wann hat alice den job angefangen, den sie 2004 gekündigt hat	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_start_date ) ) )
leute, die aufgehört haben zu arbeiten, als alice in die schule kam oder danach	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
student, dessen enddatum nicht nach dem startdatum von alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter, die nach alices abschluss angefangen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie mich die geschlechter der mitarbeiter, die nach 2004 begonnen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die einzelne freunde haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )
welches studienfach studiert, ist informatik der geschichte	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.concat en.field.computer_science en.field.history ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welchen beziehungsstatus teilen zwei personen?	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
das geschlecht eines arbeitnehmers, der nicht im jahr 2004 begonnen hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was ist das geschlecht der schüler mit dem letzten tag im jahr 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie menschen mit einer höhe von 180 cm und mckinsey als arbeitgeber	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string employer ) ( string = ) en.company.mckinsey ) )
geburtsort des arbeitnehmers, dessen startdatum höchstens 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wie ist der beziehungsstatus von studierenden, die nach 2004 angefangen haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen, die am oder nach dem tag geboren wurden, kündigten alice ihren job	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) )
ein arbeitnehmer, der im jahr 2004 oder früher begann	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche personen haben mehr als zwei beziehungsstatus	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string > ) ( number 2 ) ) )
leute, die die schule abgebrochen haben, nachdem alice aufgehört hatte zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche universität studierte alice informatik?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string university ) ) )
leute, die zur gleichen zeit wie oder vor alice die schule beendet haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer ist alices freund	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) )
menschen, die gleich groß oder kleiner als alice sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )
studenten, die zu der zeit fertig waren, als alice fertig war	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
student, dessen startdatum nach 2004 liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was sind die geburtsstädte von studenten mit einem startdatum vor 2004?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
suche mir einen programmmanager oder einen softwareingenieur	( call SW.listValue ( call SW.concat en.job_title.software_engineer en.job_title.program_manager ) )
finde die menschen mit dem einzigen geschlecht	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( string gender ) ) )
ein freund eines studenten, der mindestens 2004 angefangen hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
suche nach studenten mit einem studienfach	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
freunde aller im jahr 2004 geborenen menschen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )
welche person ist mit einem angestellten befreundet, der nicht für mckinsey arbeitet?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen geboren im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
schüler, die die schule bis 2004 beendet haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher mitarbeiter hat weniger als zwei vorherige berufsbezeichnungen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen mit dem gleichen beziehungsstatus wie alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( call SW.getProperty en.person.alice ( string relationship_status ) ) ) )
was menschen mit mitarbeitern befreundet sind, deren enddatum nach 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter, die am oder nach dem geburtsdatum von alice angefangen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus einer person mit einer größe von 180 cm?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
suche nach studenten, die 2004 oder 2010 angefangen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die im jahr 2004 geboren wurden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
finde mich mitarbeiter, die nach alices startdatum nicht mehr angestellt waren	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
zeigen sie mir, in welchen städten menschen geboren wurden, die vor oder nach 2004 begannen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wer ist mit einem studenten befreundet, der angefangen hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
geburtsort von studenten, die nicht im jahr 2004 beginnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
nennen sie die studenten der braunen universität	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.concat en.university.brown en.university.ucla ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie menschen, die am selben geburtstag wie alice sind und 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string birthdate ) ) ( string = ) en.person.alice ) )
welcher student hatte ein enddatum, das später als das geburtsdatum von alice ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die vor 2004 angefangen haben zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
leute, die die schule abgebrochen haben, nachdem alice angefangen hat zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie das geschlecht eines studenten, dessen enddatum ungleich 2004 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welcher mitarbeiter hat weniger als zwei berufsbezeichnungen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, der vor alice kündigte, wurde eingestellt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde angestellte freunde, die nicht bei mckinsey beschäftigt sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche studenten gehen an die selbe universität wie student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche person hat die meisten beziehungsstatus?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( string relationship_status ) ) )
welche stadt ist der geburtsort der studenten, der mindestens 2004 endete?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie mitarbeiter mit einem anderen startdatum als 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
eine mitarbeiterin, die nach der geburt von alice anfing	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, die ihren job am selben tag kündigten, begannen alice ihren job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher mitarbeiter ist nicht der software-ingenieur?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
ein freund von jemandem, der vor 2004 angefangen hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welches geschlecht haben die schüler, die ab 2004 aufgehört haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
leute, die anfingen zu arbeiten, als alice die schule abbrach	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher mitarbeiter hat einen starttermin, der mit alice identisch ist?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
beziehungsstatus von mitarbeitern, deren startdatum vor 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
leute, die die meisten freunde haben	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string friend ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
welches geschlecht haben die menschen, die die schule in oder vor 2004 beendet haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wann hat alice die braune universität abgeschlossen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string education_end_date ) ) )
was ist der geburtsort des studenten, der im jahr 2004 begann	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie mitarbeiter mit einem enddatum, das weniger als alice geburtstag ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
person, die die meisten berufsbezeichnungen hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, der vor dem startdatum von mitarbeiter alice gestartet ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde freunde von menschen, die in new york geboren wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )
finden sie das geschlecht, das mehr als zwei personen teilen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
welche schüler haben ein startdatum, das nicht vor dem enddatum von alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche schüler haben mit alices geburtsdatum angefangen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche schüler die vor alice angefangen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher mitarbeiter hat ein startdatum, das nicht früher als das geburtsdatum von alice ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
beziehungsstatus der studierenden nach 2004 beendet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welches geschlecht hat der student, dessen enddatum 2004 oder später ist?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wer ist mit der person befreundet, die vor 2004 mit der arbeit begonnen hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
jeder hat eine ähnliche beziehung wie jeder, der eingeloggt ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
wer studiert weniger als zwei dinge	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wann hat alice angefangen, angestellte zu sein?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_start_date ) ) )
welche menschen haben mehr als zwei geschlechter	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string > ) ( number 2 ) ) )
nennen sie eine person, die 180 cm groß ist und mit alice befreundet ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
welche studenten fingen frühestens am letzten arbeitstag von alice an	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
student, dessen studienfach entweder informatik oder geschichte ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.concat en.field.computer_science en.field.history ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wie ist der beziehungsstatus von menschen, die nach 2004 die schule beendet haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
ein mitarbeiter, der am oder vor dem tag abgereist ist, an dem student alice angefangen hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche beziehungsstatus werden von alice nicht beansprucht?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string ! = ) en.person.alice ) )
menschen, die im jahr 2004 geboren wurden und 180 cm groß sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
mitarbeiter endet nach alice endet	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde mich als eine von alices männlichen freunden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string friend ) ( string = ) en.person.alice ) )
wer ist mit einem mitarbeiter von mindestens 2004 befreundet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wie ist die beziehung des studenten, der keine braune universität besucht hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wer sind die freunde von denen, die nicht bei mckinsey beschäftigt sind?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
fein mir freunde von menschen, die ihre arbeit nach 2003 beigetreten sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
geburtsort der arbeitnehmer ab 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
geschlecht des arbeitnehmers, dessen eintrittstermin mindestens 2004 beträgt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wer hat alice aufgehört zu arbeiten im jahr 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employer ) ) )
finde schüler mit den letzten tagen vor alice's erstem tag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer hat den gleichen beziehungsstatus wie die von alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( call SW.getProperty en.person.alice ( string relationship_status ) ) ) )
wer ist 180 cm groß und hat ein enddatum von 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )
geschlecht des mitarbeiters, dessen berufsbezeichnung nicht software engineer ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finde mich alle menschen, die nicht in einer beziehung mit alice sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string ! = ) en.person.alice ) )
menschen, die einen freund haben, der in einem anderen jahr als 2004 in die schule gekommen ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finde alle in new york geborenen, die 180 cm groß sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
finden sie den mitarbeiter, der am nächsten an dem datum eingestellt wurde, an dem alice eingestellt wurde	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
freunde von mitarbeitern finden, die 2004 oder später angefangen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche studenten gehen an die selbe universität wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter, die nach 2004 angefangen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer informatik studiert ist 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) )
wer ist der geburtsort von studenten ohne hauptfach informatik?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen, die software-ingenieure oder projektmanager sind	( call SW.listValue ( call SW.concat en.job_title.software_engineer en.job_title.program_manager ) )
wer ist mit der person befreundet, die nach 2004 aufgehört hat zu arbeiten?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
leute, die nach alice die schule abgebrochen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche mitarbeiter nach 2004 oder nach 2010 gekündigt haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist das geschlecht des studenten, der 2004 oder früher angefangen hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finde die leute, die sich ihrem studium angeschlossen haben, bevor alice geboren wurde	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher schüler ist am frühesten in die schule gekommen?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
nennen sie eine mitarbeiterin, die vor der schülerin namens alice angefangen hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
ein student, der vor 2004 endet	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die nicht männlich sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string ! = ) en.gender.male ) )
welche person ist jünger als alice?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )
student, der ein kleineres startdatum als alice war	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
schüler, dessen anfangsdatum am größten ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
schüler, der mindestens vor dem ende von alice anfängt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
student, dessen startdatum nicht vor dem startdatum von alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde das datum, an dem alice angefangen hat, informatik zu studieren	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string education_start_date ) ) )
freunde von menschen, die andere bereiche als informatik studiert haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
der 2004 geboren wurde und mit alice befreundet ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string friend ) ( string = ) en.person.alice ) )
mitarbeiter, dessen startdatum mit dem von student alice identisch ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche person ist 180 cm groß und alices freundin	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
freunde von mitarbeiter ohne titel des softwareingenieurs finden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was für leute haben ein geburtsdatum, das 2004 ist und dessen größe 180 cm beträgt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
wer hat eine beziehung, die nach 2004 begann	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen, die 2004 oder 2010 aufgehört haben zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
freunde von menschen, die ihre arbeit vor 2004 gekündigt haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
freunde von menschen, die ihr studium vor 2004 abgeschlossen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche person hat ein geburtsdatum zwischen 2004 und 2010?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
finden sie personen mit einer körpergröße von 180 oder 200 cm	( call SW.listValue ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) )
arbeitende menschen, die nicht im jahr 2004 begonnen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die nach 2004 oder nach 2010 die schule abgebrochen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist der beziehungsstatus des studenten nicht in der informatik	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
personen unter 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )
finde mich 2 leute in einer beziehung	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( number 2 ) ) )
person, deren geburtstag vor alice-absolventen liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) )
schüler, die in die schule kamen, als alice ihren job kündigte	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
person, die noch nicht in 3 beziehungen war	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string < ) ( number 2 ) ) )
finden sie personen des gleichen geschlechts wie die angemeldete person	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
menschen, die single sind und mit alice befreundet sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string friend ) ( string = ) en.person.alice ) )
wer ist die älteste person in meinem netzwerk?	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string birthdate ) ) ) )
was für menschen haben einen geburtsort von new york und eine größe von 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
studenten, die gleichzeitig mit oder nach alice fertig werden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
freunde von schülern, die nach 2004 abschließen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie 180 cm große menschen, die in new york geboren wurden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthplace ) ( string = ) en.city.new_york ) )
studierende mit den wenigsten studienrichtungen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher freund von alice ist online	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string logged_in ) ) )
student, dessen studienfächer am kleinsten sind	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
schüler, die am tag der geburt von alice die schule beendeten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
freunde von alice finden, die single sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
welcher mitarbeiter kündigte bevor alice geboren wurde	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
ein student, der nicht im jahr 2004 endet	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde mich freunde des studenten, der vor 2004 abreist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
jeder, der alice's freund ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
mitarbeiter mit startdaten nach 2004 finden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
leute, die in die schule kamen, als alice aufhörte	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die freunde haben, die in new york geboren wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )
wann hat alice ihren job bei mckinsey gekündigt?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string employment_end_date ) ) )
alices geburtsort	( call SW.listValue ( call SW.getProperty en.person.alice ( string birthplace ) ) )
finde alle freunde, die keine softwareingenieure sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was ist die berufsbezeichnung von alice?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) )
was ist das geschlecht der arbeitnehmer, die nicht im jahr 2004 begonnen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finde freunde von studenten, die keine braune universität besuchen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen, die geboren wurden, bevor alice in die schule kam	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )
finden sie mitarbeiter, deren startdatum vor dem enddatum des mitarbeiters liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
nennen sie eine 180 cm große person, die mit alice befreundet ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string friend ) ( string = ) en.person.alice ) )
was ist das geschlecht eines mitarbeiters, dessen enddatum vor 2004 liegt?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
student mit der meisten anzahl von studienfeldern	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
person mit mindestens zwei beziehungsstatus	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string >= ) ( number 2 ) ) )
nennen sie eine 180 cm große person, die im jahr 2004 aufgehört hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )
wie ist der beziehungsstatus eines mitarbeiters, dessen startdatum nicht 2004 ist?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen mit zwei geburtsorten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( number 2 ) ) )
welches studenten-enddatum passierte zur selben zeit wie alice?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie männer, die single sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
welcher mitarbeiter hat nicht mehr als zwei berufsbezeichnungen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche mitarbeiter haben nicht mehr als 2 berufsbezeichnungen?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
leute, die mit jemandem befreundet sind, der single ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )
wie ist der beziehungsstatus von mitarbeitern, die nach 2004 angefangen haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
gleichgeschlechtliche menschen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string < ) ( number 2 ) ) )
wo wurde alice geboren?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) )
finde leute mit dem gleichen geschlecht wie alice oder bob	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
finden sie das geschlecht der studierenden, deren studienfach nicht informatik ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finde mich bei alices freunden, die gerade online sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string friend ) ( string = ) en.person.alice ) )
menschen, die einen freund haben, der 2004 oder später in die schule kam	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
mitarbeiter, die 2003 oder früher gekündigt haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche person ist mit der online-person befreundet?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
studenten, die am geburtstag von alice beginnen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist der geburtsort einer person mit einer größe von 180 cm?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
was ist das geschlecht der arbeitnehmer, die spätestens 2004 begonnen haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finde menschen, die nicht größer als alice sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )
ein freund von alice's freund	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ) )
nennen sie einen freund eines studenten, der nicht an einer braunen universität studiert hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wer hat die geringste anzahl von beziehungsstatus	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( string relationship_status ) ) )
mitarbeiter, dessen startdatum mindestens 2004 ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist der beziehungsstatus für studenten mit einem startdatum ungleich 2004?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
geburtsort von schülern, die ihre ausbildung zeitgleich mit oder vor 2004 abgeschlossen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welcher student hat ein enddatum, das mindestens 2004 oder 2010 ist?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wie ist der beziehungsstatus von studierenden, die ihren abschluss im jahr 2004 nicht gemacht haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wo wurde alice geboren?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) )
menschen, die mit jemandem befreundet sind, der nach 2004 die schule abgebrochen hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
studenten, die nach alice anfangen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
geburtsort des studenten, dessen startdatum nach 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welcher student hat die wenigsten universitäten besucht?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string university ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
beziehungsstatus einer 180 cm großen person	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
finde die kürzeste person	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string height ) ) ) )
freunde von mitarbeitern mit dem letzten tag im jahr 2004 oder früher finden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finden sie personen, die mit mitarbeitern befreundet sind, deren enddatum nicht später als 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die im jahr 2004 geboren und in new york geboren wurden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string birthplace ) ( string = ) en.city.new_york ) )
mitarbeiter finden, die ihren job vor 2004 oder 2010 gekündigt haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
geschlecht der 180 cm großen personen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
welche schüler haben enddatum namen, die entweder 2004 oder 2010 sind	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche mitarbeiterin hat am selben tag angefangen wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus des schülers, der am oder vor 2004 beginnt?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche person hat ein geburtsdatum mit höchstens dem von alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) )
finden sie mitarbeiter, die für die meisten arbeitgeber arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, die am selben tag wie alice aussteigen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist single und geboren im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
suche nach schülern mit einem anderen startdatum als 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die nach alice in die schule kamen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
jeder freund eines mannes	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )
welche studenten nicht früher als 2004 angefangen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die mit mitarbeitern befreundet sind, die im oder nach dem jahr 2004 angefangen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was ist die berufsbezeichnung von alice, deren arbeitgeber mckinsey ist	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string job_title ) ) )
finden sie das geschlecht der in new york geborenen menschen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )
finde mich freunde von leuten, die eingeloggt sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
freunde von menschen, die gerade online sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
an welcher universität war alice?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ) )
welche personen sind mit mitarbeitern befreundet, die vor 2004 angefangen haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche person hat nicht die höhe von 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string ! = ) ( number 180 en.cm ) ) )
wer ist mit einem mitarbeiter befreundet, der 2004 oder später angefangen hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finde menschen, die mindestens zwei geburtsorte haben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string >= ) ( number 2 ) ) )
mitarbeiter mit dem größten startdatum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde jemanden, der genauso groß oder kleiner ist als alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )
menschen, die genauso groß sind wie alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.getProperty en.person.alice ( string height ) ) ) )
finde mich die person mit den wenigsten freunden	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string friend ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
der in new york geboren ist und mit alice befreundet ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
finden sie mitarbeiter, die vor oder am selben tag wie alice beginnen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche person hat zwei geschlechter	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string <= ) ( number 2 ) ) )
student, dessen startdatum vor dem startdatum von student alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher mitarbeiter hatte einen starttermin schon oder später als alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, die vor alices letztem tag anfangen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist der beziehungsstatus der person, die 180 cm groß ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
personen, die mit dem mitarbeiter befreundet sind, der bis 2004 aus dem unternehmen ausscheiden wird	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die vor alices geburtsdatum die schule abgebrochen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter, die 2004 oder 2010 angefangen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie männer, die im jahr 2004 geboren sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string gender ) ( string = ) en.gender.male ) )
wer ist mit mitarbeitern befreundet, deren enddatum größer als 2004 ist?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
student, dessen startdatum nicht vor 2004 liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter, dessen enddatum vor dem enddatum von alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
suche nach schülern mit dem frühesten enddatum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche mitarbeiter haben erst 2004 oder 2010 angefangen?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher mitarbeiter hat vor 2004 angefangen?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde leute, die mit alice oder bob befreundet sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
beziehungsstatus des studenten, dessen startdatum nach 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
beziehungsstatus aller studierenden, die nach 2004 angefangen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
alices freunde, die 180 cm groß sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
menschen, die nach alice geboren wurden, begannen zu arbeiten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) )
welche mitarbeiter haben ihre anstellung vor alice angetreten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus eines studenten, dessen startdatum nicht im jahr 2004 liegt?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen, die vor 2004 180 cm groß sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )
wer wurde zuletzt geboren	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string birthdate ) ) ) )
mitarbeiter, die vor alices schuleintritt angefangen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen in new york oder peking geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.concat en.city.new_york en.city.bejing ) ) )
menschen, die vor alice in die schule kamen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiterfreund mit startdatum nach 2004 finden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
arbeitende menschen, die keine software-ingenieure sind	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher mitarbeiter beendete die selbe zeit, als alice anfing	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie die freunde von mitarbeitern mit einem enddatum bis spätestens 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finde mich alle online singles	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string logged_in ) ) )
menschen, die mit jemandem befreundet sind, der in oder vor 2004 aufgehört hat zu arbeiten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finden sie mitarbeiter, deren letzter tag nach dem ersten tag der schülerin alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
die beziehungsstatuen eines studenten, die 2004 enden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wo ist der geburtsort des schülers, der die schule vor 2004 verlassen hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
freunde von studierenden ab 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
das geschlecht eines studenten ab 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen, die an oder vor dem tag geboren wurden, als alice in die schule kam	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )
menschen, die nicht informatik studieren	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist das geschlecht eines studenten mit einem enddatum nach 2004?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
personen, die mit dem neuen mitarbeiter bereits vor 1994 befreundet sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welcher schüler hat angefangen, nachdem alice aufgehört hat zur schule zu gehen?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
beziehungsstatus von mitarbeitern, die ihre arbeit in oder vor 2004 aufgenommen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
suche nach schülern mit einem früheren enddatum als dem der mitarbeiterin alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wann ist alice im jahr 2004 gegangen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_end_date ) ) )
finden sie die geburtsstadt für alle mitarbeiter, die im jahr 2004 gekündigt haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
alice hat ihre arbeit im jahr 2004 begonnen, als sie sie verlassen hat	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_end_date ) ) )
geburtsstädte von studenten, die vor 2004 begannen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
180 cm große person mit geburtsdatum im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
schüler, die am selben tag mit der schule begannen, fingen an zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde leute mit mindestens zwei freunden	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
menschen, die nicht single sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string ! = ) en.relationship_status.single ) )
nennen sie städte, wenn sie sie mit mehr als zwei personen als geburtsort teilen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
welche mitarbeiter beschäftigungen haben, deren titel mit mitarbeiter alice identisch ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was für geschlechter sind alice freunde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ) )
leute, die mit leuten befreundet sind, die nicht für mckinsey arbeiten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finde mich alle, die in new york geboren sind und single sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
mitarbeiter, der bei alices geburtsdatum gekündigt hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche schülerin hat ein startdatum vor alices geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welches geburtsdatum einer person entspricht höchstens dem startdatum von alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) )
wie ist der beziehungsstatus von mitarbeitern, die nicht bei mckinsey arbeiten?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche stadt ist der geburtsort von mitarbeitern, deren enddatum nicht später als 2004 liegt?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finden sie männer, die 180 cm groß sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string gender ) ( string = ) en.gender.male ) )
welche personen sind mit mitarbeitern befreundet, die 2004 noch nicht angefangen haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finde studentenfreunde, die im jahr 2004 oder früher geendet haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche mitarbeiter haben die meisten berufsbezeichnungen?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
leute, die in die schule kamen, als alice aufhörte zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mit welchen studenten bin ich befreundet?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
jeder mann, der sich eingeloggt hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string gender ) ( string = ) en.gender.male ) )
finden sie mitarbeiter mit einer berufsbezeichnung und nicht mit einem softwareentwickler	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie alle schüler, die im jahr 2004 und danach begonnen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
student, dessen startdatum vor dem von alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche studenten spätestens am ersten arbeitstag von alice ihren abschluss machen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
an welcher universität haben 180 cm große menschen teilgenommen?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.university ) ( string ! type ) ) ( call SW.reverse ( string university ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
ein freund von jemandem 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
finde das datum, an dem alice ihren job als softwareingenieurin begonnen hat	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) ( string employment_start_date ) ) )
mitarbeiter, die nach 2004 gekündigt haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
studenten, die ihren abschluss vor alice gemacht hatten, begannen zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
ein mitarbeiter, der 2004 oder 2010 endet	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist der freund des mitarbeiters, dessen beschäftigungsende mindestens 2004 ist?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finde alle freunde eines schülers mit einem anderen enddatum als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wie groß ist alice?	( call SW.listValue ( call SW.getProperty en.person.alice ( string height ) ) )
arbeitnehmer, der ein kleineres datum als 2004 und 2010 hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
leute, die anfingen zu arbeiten, als alice in die schule kam	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde die mitarbeiter, die eingestellt wurden, bevor alice ihren job kündigte	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
eine person, deren freund am oder vor 2004 angefangen hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
schüler, die nach alices letztem tag bei der arbeit angefangen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
der 180 cm große arbeitet bei mckinsey	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string employer ) ( string = ) en.company.mckinsey ) )
180 cm große person mit informatik als studienfach	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) )
was ist das geschlecht der menschen, die die schule im oder nach dem jahr 2004 abgebrochen haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welcher student graduierte nach alice graduierte	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
suche nach studenten, die vor 2010 beginnen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
geburtsorte von arbeitnehmern finden, die vor 2004 angefangen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die mit oder nach der arbeit in die schule kamen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wie ist der beziehungsstatus von menschen, die vor 2004 mit der arbeit begonnen haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was mitarbeiter nach mitarbeiter alice angefangen hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher mitarbeiter von mckinsey ist 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string employer ) ( string = ) en.company.mckinsey ) )
geschlecht der schüler, die am oder nach dem jahr 2004 abschließen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
was ist alices erster tag als software-ingenieur	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) ( string employment_start_date ) ) )
mitarbeiter, die nach alice verlassen starten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde eine person, die größer als 180 cm ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) ) ) )
wer hat mindestens zwei freunde	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
studenten, die das gleiche fach wie alice studieren	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie studenten, die nicht teil der braunen universität sind	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie den beziehungsstatus für mitarbeiter, deren enddatum nicht auf 2004 festgelegt ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finden sie das geschlecht von mitarbeitern, deren enddatum nicht 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die aufhörten zu arbeiten, als alice anfing zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
suche nach schülern mit einem startdatum, das größer oder gleich dem von schüler alice ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
suche nach schülern mit einem enddatum, das gleich oder höher als das geburtsdatum von alice ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
leute finden, die mehr als zwei geschlechter haben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string > ) ( number 2 ) ) )
welches enddatum liegt vor 2004?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist die geburtsstadt eines arbeiters, der 2004 noch nicht angefangen hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die mit der geburt von alice in die schule kamen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen mit freunden, die 2004 keine arbeit aufgenommen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die 2004 oder früher aufgehört haben zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
in welchen städten wurden alices freunde geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ) )
finde alle personen, die single sind und gerade online sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
schüler, die vor alices geburtstag fertig sind	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
in welcher stadt wurde alice oder bob geboren?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
personen, die mit einem mitarbeiter befreundet sind, der nach 2004 gegründet wurde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wo sind alle mitarbeiter geboren, die nicht bei mckinsey beschäftigt sind?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die die schule abgebrochen haben, als alice geboren wurde oder danach	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist alice's geburtsdatum?	( call SW.listValue ( call SW.getProperty en.person.alice ( string birthdate ) ) )
alleinstehende geboren im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
freunde von mitarbeitern, die 2004 noch nicht angefangen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
student, dessen enddatum nicht nach dem enddatum von student alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
suche nach mitarbeitern, die am oder vor dem letzten tag von alice beginnen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche informatikstudenten sind 180 cm groß?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) )
wer studiert etwas anderes als informatik	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wie viele männer oder frauen gibt es	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ) )
wer ist der freund eines mitarbeiters, dessen enddatum vor 2004 liegt?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche person ist eingeloggt und wurde in new york geboren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string birthplace ) ( string = ) en.city.new_york ) )
wer ist mit der person online befreundet?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
welche arbeit hat alice im jahr 2004 begonnen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string job_title ) ) )
mitarbeiter finden, die vor 2004 beginnen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist befreundet mit mitarbeitern, deren enddatum nicht 2004 liegt?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
freunde von männern	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )
was ist das geschlecht von ein oder zwei personen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
finden sie die mitarbeiterin, die am nächsten zum tag eingestellt wurde alice kündigte ihren job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie die geschlechter der schüler, deren anfangsdaten vor 2004 liegen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie leute, die mit schülern befreundet sind, deren enddatum nicht 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie den beziehungsstatus für personen mit einer körpergröße von 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
suche schüler mit dem letzten tag nach 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welches geschlecht hatten mehr mitarbeiter nach 2004 zu starten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wann hat ein student der informatik alice beendet?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string education_end_date ) ) )
welche schüler haben ein enddatum, das das gleiche ist wie später als schüler alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer ist single männlich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string gender ) ( string = ) en.gender.male ) )
welche mitarbeiter haben spätestens am tag des schuleintritts von alice angefangen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
suche nach mitarbeitern, die am oder nach dem ersten tag von alice beginnen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
leute, die zur gleichen zeit oder vor alice die schule abgebrochen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
leute, die kleiner sind als alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )
ein arbeiter, der am oder vor dem tag begann, an dem student alice anfing	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche person hat das gleiche geschlecht wie alice?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( call SW.getProperty en.person.alice ( string gender ) ) ) )
welche schüler haben ein enddatum, das das startdatum von mitarbeiter alice oder später ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
der bei mckinsey arbeitet und 180 cm groß ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string employer ) ( string = ) en.company.mckinsey ) )
welcher schüler endete spätestens am startdatum von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die mit oder nach alice zu ihrem studium gekommen sind	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
student, der nicht in braun studiert	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche schüler haben vor 2004 angefangen?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
alices freunde beziehungsstatus	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ) )
menschen, die nach der geburt von alice zu arbeiten begannen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus von mitarbeitern, deren startdatum vor 2004 liegt?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
ein student endet, bevor alice anfängt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche schüler am letzten tag waren ungefähr am selben tag wie alices letzter tag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was mitarbeiter an alices geburtstag anfingen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
freunde von mitarbeitern, die in oder nach 2004 beginnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wer sind die freunde von mitarbeitern, die im jahr 2004 nicht gekündigt haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
in welcher stadt ist der geburtsort des arbeitnehmers, der seine arbeit vor 2004 beendet hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wer hat angefangen an alices geburtsdatum zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche mitarbeiter hatten ein enddatum bevor alice in die schule kam	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, deren geschlecht mit alice identisch ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) en.person.alice ) ) )
menschen, die nach alice geboren wurden, sind in die schule gekommen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )
beziehungsstatus von studenten, deren enddatum vor 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche person ist angemeldet und hat ein geburtsdatum im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string logged_in ) ) )
finde einen schüler, dessen letzter tag vor oder am selben tag liegt wie der erste tag von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter, die nach alice anfangen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
in welchen städten wurden 180 cm große menschen geboren?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
suche nach schülern, deren letzter tag am oder nach dem letzten tag von alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
freunde von mitarbeitern, die vor 2004 fertig waren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
leute, die gerade online sind und single sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string logged_in ) ) )
suche mir eine person, die 2004 in new york geboren wurde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string birthplace ) ( string = ) en.city.new_york ) )
wer wurde am startdatum von alice geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) )
finden sie mitarbeiter mit dem letzten tag im jahr 2004 oder früher	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, die am selben tag zu arbeiten begannen alice wurde geboren	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
studenten, die später als 2004 begannen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die vor 2004 oder vor 2010 eingeschult wurden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist das geburtsdatum der person mit einer größe von 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
mitarbeiter, die am oder nach dem ende von alice beginnen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
ein gemeinsamer freund von alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
personen, die in oder vor 2004 geboren wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
wer hat freunde mit einem enddatum, das vor 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen mit zwei oder weniger freunden	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
person, die zum ersten mal in sein arbeitszimmer kam	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
geburtsort des studenten, dessen enddatum nicht 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
was sind die geburtsstädte von arbeitnehmern, die nicht bei mckinsey beschäftigt sind?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wie ist der beziehungsstatus von menschen, die ihre arbeit in oder nach 2004 gekündigt haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
personen, die sich an oder nach dem datum eingeschrieben haben, an dem alice ihr studium abgeschlossen hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
geburtsorte von mitarbeitern, die 2004 oder früher gekündigt haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welcher student endete nach 2004?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
geschichte oder informatik	( call SW.listValue ( call SW.concat en.field.computer_science en.field.history ) )
mitarbeiter, die ihre ausbildung zeitgleich zu oder nach 2004 abgeschlossen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer alice mit dem befreundet ist, ist single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
geschlechter von personen, die gerade online sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
beziehungsstatus von studierenden, die 2004 nicht abgeschlossen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen, die 180 cm groß sind und eine beziehung zu alice haben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) en.person.alice ) )
alleinstehende, die in new york geboren wurden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string birthplace ) ( string = ) en.city.new_york ) )
finde leute die mit alice befreundet sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
menschen, die vor alices abschluss an ihrem studium teilgenommen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche schülerin hat an alices geburtstag angefangen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
in welchen städten wurden studenten geboren, die vor oder im jahr 2004 begannen?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen, die mit der arbeit angefangen haben, als alice in die schule kam oder früher	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
beliebtester geburtsort	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string birthplace ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
freunde von mitarbeitern mit einem enddatum von 2004 oder später finden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finden sie alle mitarbeiter, die nicht mehr als zwei jobs hatten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche mitarbeiter waren hier weniger zeit als alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher mitarbeiter hat den gleichen chef wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche schüler haben weniger als 2 hauptfächer	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
leute, die am oder vor dem tag in die schule kamen, als alice aufhörte zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
geburtsort von personen, die ihre ausbildung nach 2004 abgeschlossen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche person hat einen freund, der nicht an einer braunen universität studiert?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche geschlechter sind alice und bob	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
finden sie mitarbeiter, deren startdatum vor 2004 liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde menschen mit alices geburtstag, die 180 cm groß sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string birthdate ) ) ( string = ) en.person.alice ) )
personen, die mit dem neuen mitarbeiter befreundet sind, der vor oder nach 2004 beginnt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche mitarbeiterin verlässt das unternehmen an dem tag, an dem alice ihre arbeit aufnimmt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
student, dessen startdatum das enddatum von student alice ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche mitarbeiter haben ein enddatum, das entweder 2004 oder 2010 ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
in welcher stadt wurde die 180 cm große person geboren?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
anzahl der gehaltenen jobs	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.job_title ) ( string ! type ) ) ) )
studenten, deren anfangsdatum kleiner als 2004 und 2010 ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
ort, an dem alice geboren wurde	( call SW.listValue ( call SW.getProperty en.person.alice ( string birthplace ) ) )
finde mich alle mindestens so groß wie alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )
was ist das enddatum von mitarbeiter alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche schüler schlossen die schule ab, als alice anfing	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
studenten, deren startdatum kleiner ist als das enddatum für mitarbeiter alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
ist diese person männlich oder weiblich?	( call SW.listValue ( call SW.concat en.gender.male en.gender.female ) )
student, der vor oder zu beginn des jahres 2004 angefangen hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
die an der geringsten anzahl von universitäten studiert haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string university ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter, die am letzten tag von alice angefangen haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die im jahr 2004 geboren wurden und 180 cm groß sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
welche mitarbeiter sind entweder software-ingenieure oder programm-manager	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.concat en.job_title.software_engineer en.job_title.program_manager ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
suche nach beziehungsstatus für schüler, deren enddatum nicht 2004 liegt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
studenten, die nach alice geburtstag verlassen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
an welchem tag hat alice ihren job im jahr 2004 angefangen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_start_date ) ) )
welche schüler haben die schule zuletzt begonnen?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde menschen mit einem männlichen geschlecht, mit denen alice befreundet ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
was ist der beziehungsstatus von menschen, die etwas anderes als informatik studieren?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
beziehungsstatus von nur einer person	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
menschen, die mit denen befreundet sind, die ihr studium vor 2004 abgeschlossen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
entweder braune universität oder ucla	( call SW.listValue ( call SW.concat en.university.brown en.university.ucla ) )
finden sie die person, die 180 cm groß ist und ein software-ingenieur ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) )
studenten, die nach alice begannen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen mit freunden, die arbeit haben, aber keine software-ingenieure	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche mitarbeiter am letzten tag waren frühestens am ersten tag von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist kürzer als 181cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )
finden sie das geschlecht von menschen, die single sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )
nenne einen schüler, der spätestens nach alice seinen abschluss machen wird	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie studenten mit den wenigsten universitäten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string university ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche personen haben geburtstage zwischen 2004 und 2010?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
nennen sie eine person, die im jahr 2004 geboren wurde und 180 cm groß ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
welche mitarbeiter haben einen starttermin nicht später als der von student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist der häufigste beziehungsstatus?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string relationship_status ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
geschlecht der arbeitnehmer ab 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welcher von alices freunden ist single?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
menschen, die mit jemandem befreundet sind, der nach 2004 angefangen hat zu arbeiten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
geburtsort von mitarbeitern, die vor 2004 angefangen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
ein mitarbeiter, der nach dem ende von alice beginnt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde menschen mit einer höhe von 180 cm und ihre freunde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
finden sie leute, die studenten mit einem startdatum nach 2004 sind, und ihre freunde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche studenten haben ihr fach in der informatik der geschichte	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.concat en.field.computer_science en.field.history ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
schüler, die vor oder zeitgleich mit alices beginn enden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer ist ein arbeiter, der am oder vor dem tag, an dem mitarbeiter alice gegangen ist, abgereist ist?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie menschen mit einem geburtsort, der dem mit einer körpergröße von 180 cm entspricht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
wer ist alices einzige freundin?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
wer hat zwei oder mehr beziehungsstatus	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string >= ) ( number 2 ) ) )
was ist das geschlecht des schülers, der nach 2004 beginnt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
ein arbeitgeber mit mindestens zwei mitarbeitern	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher student begann am selben tag wie die studentin alice?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was war alices studienfach	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ) )
welcher student hat den frühesten starttermin?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie den beziehungsstatus von mitarbeitern, die nicht bei mckinsey beschäftigt sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welcher student kündigte zur gleichen zeit, die die angestellte alice tat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde die freunde von menschen, die vor 2004 studiert haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
arbeitnehmer mit weniger als zwei arbeitgebern	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
personen, die 2004 in new york geboren wurden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
finden sie die geburtsorte der mitarbeiter, deren startdatum nicht gleich 2004 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wie viele studenten in diesem bereich	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.field ) ( string ! type ) ) ) )
welcher mitarbeiter hat nach der anstellung von alice angefangen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
freunde von menschen, die nicht informatik studieren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wer hat den gleichen job wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
studienbereich von alice endete im jahr 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string field_of_study ) ) )
welches datum hat die informatik-studentin alice angefangen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string education_start_date ) ) )
ein mitarbeiter, der kein softwareentwickler ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welches geschlecht wird von mehr als zwei personen beansprucht	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
welche leute sind mit studenten befreundet, die 2004 noch nicht angefangen haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wer ist der freund von alice?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string friend ) ( string = ) en.person.alice ) )
finde menschen, die nicht männlich sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string ! = ) en.gender.male ) )
welche firmen beschäftigen personen mit einer körpergröße von 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.company ) ( string ! type ) ) ( call SW.reverse ( string employer ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
menschen, die alleinstehend sind und im jahr 2004 geboren wurden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
wer ist angemeldet sowie angemeldet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string logged_in ) ) )
wer ist mit der person befreundet, die seit 2004 nicht mehr arbeitet?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
studenten, die am oder nach dem jahr 2004 beginnen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie menschen mit einem geschlecht, das weniger als zwei personen haben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
menschen, die 180 cm groß sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
person, die zuletzt an der studie teilgenommen hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie menschen, die eine größe von 180 cm und einen beziehungsstatus von single haben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
geburtsort von studenten, die nicht braun sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie männer, die single sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string gender ) ( string = ) en.gender.male ) )
student, dessen enddatum nicht nach dem enddatum von alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer ist ein freund exklusiv für alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string friend ) ( string = ) en.person.alice ) )
menschen, die am oder nach alices geburtsdatum eingeschult wurden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
arbeitnehmer, die ihren arbeitsplatz im jahr 2005 oder später gekündigt haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
jeder mann, der in new york geboren ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string gender ) ( string = ) en.gender.male ) )
welcher mitarbeiter im jahr 2004 oder später endete	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie den beziehungsstatus von studenten, deren universität nicht braun ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
beziehungsstatus von mitarbeitern, die 2004 noch nicht angefangen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
leute, die aufhörten zu arbeiten, bevor alice zu arbeiten anfing	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
freunde von alice finden, die 180 cm groß sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
suche mir einen mitarbeiter, dessen enddatum nach dem enddatum von student alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde alices freunde, die in new york geboren wurden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
welche schüler haben in anderen jahren als 2004 angefangen?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wie ist der beziehungsstatus von menschen, die 2004 oder später aufgehört haben zu arbeiten?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
alices freunde, die im jahr 2004 geboren wurden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
wer ist 180cm oder höher	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )
wie lautet die berufsbezeichnung von alice?	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) )
suche nach schülern, deren erster tag nach alice's geburtstag liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer sind die schüler, die zur selben zeit oder vor beginn von alice beginnen?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
suche nach mitarbeitern ab 2010 oder früher	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche leute haben weniger als zwei freunde	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
finde mitarbeiter mit der gleichen berufsbezeichnung wie alice's	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die 2004 oder 2010 geboren wurden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) )
schüler, die die schule 2003 oder früher beendet haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
ein student mit zwei oder weniger universitäten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string university ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
suche nach schülern, deren enddatum größer als 2004 oder 2010 ist	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist das häufigste geschlecht?	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string gender ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
was ist der beziehungsstatus des schülers, der im jahr 2004 geboren wurde?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
mit welchen menschen sind alice nicht befreundet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string ! = ) en.person.alice ) )
finde mir alle enddaten aller mitarbeiter namens alice, die an der brown university studiert haben	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string education_end_date ) ) )
finde leute die zwischen 180cm200cm groß sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) ) ) )
finden sie die geschlechter der mitarbeiter, deren startdatum nicht später als 2004 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche person hat eine größe von höchstens 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )
suche nach schülern, die nach alice 'letztem tag beginnen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer hat den gleichen beziehungsstatus wie die 180 cm große person	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
welcher student hat nur ein studienfach	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
person vor 2004 geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
wer ist ein freund von alice oder bob?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
wer wurde 2004 oder 2010 geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
menschen, die freunde von freunden von alice sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
wer hat den gleichen geburtstag wie die person, die 180 cm groß ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
leute, die die schule abgebrochen haben, als alice angefangen hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
das enddatum des mitarbeiters liegt vor dem startdatum von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
alle 180 cm großen singles	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
geburtsort des studenten, dessen enddatum mindestens 2004 ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
personen, die mit dem mitarbeiter befreundet sind, der nicht im jahr 2004 beginnt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finden sie mitarbeiter, deren letzter tag mit dem ersten schultag von alice übereinstimmt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
personen mit einer körpergröße von 180 cm oder weniger	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )
geschlecht des arbeitnehmers, dessen arbeitgeber nicht mckinsey ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wer ist mit dem mitarbeiter befreundet, der vor 2004 angefangen hat?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wer ist eine person, deren größe 180 cm ist und die mit alice befreundet ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string friend ) ( string = ) en.person.alice ) )
welche studenten haben 2004 oder 2010 ihren abschluss gemacht?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
studenten, die am selben tag ihren abschluss machen, beginnen alice ihren neuen job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
studenten, die keine informatik studieren	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie studenten von der braunen universität	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string university ) ) )
schüler, die nach alice eingeschult wurden, kündigten ihren job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
geschlecht der angestellten, die keine softwareingenieure sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
student, dessen startdatum nach dem enddatum von student alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wo waren schüler, die nicht im jahr 2004 fertig wurden geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wie ist der status der 180 cm großen personenbeziehung?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
wie ist der beziehungsstatus von studenten, die frühestens begonnen haben?	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche mitarbeiter haben einen starttermin, der dem von schüler alice oder höher entspricht?	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
der 2004 beigetreten ist und 180 cm groß ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )
was mitarbeiter zeitgleich mit alice anfingen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist mit alice befreundet?	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
leute mit drei geschlechtern finden	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string > ) ( number 2 ) ) )
welche schüler fingen frühestens an dem tag an, als alice in die schule kam	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist das geschlecht der studenten, die nicht im jahr 2004 begonnen haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welcher student hat ein enddatum nicht später als das enddatum von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
schüler, der vor alice graduiert hat, kündigte ihren job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter, dessen enddatum vor dem startdatum von mitarbeiter alice liegt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wann hat alice aufgehört, die braune universität zu besuchen?	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string education_end_date ) ) )
menschen, die ihren job nach 2004 gekündigt haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde mitarbeiter mit startdatum am oder vor alice's	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie mitarbeiter freunde mit dem letzten arbeitsdatum vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )

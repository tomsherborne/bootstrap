was die spieler in einer saison weniger als drei assists gemacht haben	was spieler weniger als drei assists über eine saison gemacht	was die spieler gemacht, die weniger als drei assists über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte mindestens so viele blöcke in der saison wie kobe bryant	welcher spieler mindestens so viele blöcke in der saison hatte wie kobe bryant	welche spieler hatte mindestens so viele blöcke in der saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
anzahl der punkte in einer saison von spieler kobe bryant aus der saison 2004	anzahl der punkte über eine saison des spielers kobe bryant aus der saison 2004	anzahl der punkte im laufe einer saison spieler kobe bryant aus der saison 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_points ) ) )
wie viele blocks hat kobe bryant in den spielzeiten gemacht, in denen er 3 assists gemacht hat?	wie viele blöcke machte kobe bryant während der saisons, wo er 3 assists machte	wie viele blöcke hast, kobe bryant während der zeiten, wo er machte 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_blocks ) ) )
welcher spieler hatte in dieser saison 3 oder weniger blöcke?	welcher spieler in dieser saison 3 oder weniger blöcke hatte	welche spieler hatten 3 oder weniger blöcke in dieser saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele umsätze macht kobe bryant durchschnittlich über einen grund	wie viele umsätze kobe bryant durchschnitt über einen grund	wie viele umsätze hat kobe bryant durchschnitt über eine grund	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string team ) ) )
spieler mit der geringsten anzahl von vorlagen über eine saison	spieler mit der geringsten anzahl an assists über eine saison	spieler mit der kleinsten anzahl von vorlagen über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat die wenigsten umsätze in der gesamten saison?	welcher spieler die wenigsten umsätze der ganzen saison hat	was spieler mit den wenigsten allseasonumsätze	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche position spielt kobe bryant für die la lakers?	welche position spielt kobe bryant für die la lakers	welche position hat kobe bryant spielen für die la lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string position ) ) )
spieler, der keinen point guard spielt	spieler, der nicht point guard spielt	spieler, die nicht spielen, point guard	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string ! = ) en.position.point_guard ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat nicht mehr als drei steals	welcher spieler nicht mehr als drei steals hat	welcher spieler hat nicht mehr als drei steals	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte mehr fouls als kobe bryant	welcher spieler hatte mehr fouls als kobe bryant	welche spieler hatte mehr fouls als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit weniger blöcken als kobe bryant in allen jahreszeiten	spieler mit weniger blöcken als kobe bryant über alle jahreszeiten	spieler mit weniger blöcke als kobe bryant über alle jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
beachten sie, dass der spieler in einer saison die meisten rebounds auf seinem konto hat	beachten sie, dass der spieler mit der höchsten anzahl von rebounds zu seinem kredit in einer saison	hinweis: der spieler mit der höchsten anzahl von rebounds, um ihre kredit in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat nicht point guard gespielt?	welcher spieler nicht point guard gespielt hat	was die spieler nicht spielen point guard	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string ! = ) en.position.point_guard ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in welchem jahr hatte kobe bryant drei rebounds?	in welchem jahr hatte kobe bryant drei rebounds	in welchem jahr haben kobe bryant haben drei rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string season ) ) )
welche spieler spielten mehr spiele als kobe bryant die jahreszeiten, die er spielte	welche spieler mehr spiele gespielt haben als kobe bryant in den saisons, die er gespielt hat	welcher spieler spielte mehr spiele als kobe bryant die jahreszeiten, er spielte	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
anzahl der saisons, in denen kobe bryant drei fouls hatte	anzahl der jahreszeiten, in denen kobe bryant hatte drei fouls	anzahl der saisons, wo kobe bryant hatte drei fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_fouls ) ) )
von welcher position hat kobe mehr als 3 steals gemacht	welche position kobe mehr als 3 steals aus	welche position hat kobe aus mehr als 3 steals aus	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string position ) ) )
was war die gesamtzahl der rebounds für kobe bryant in der saison, in der er nur 3 steals hatte	was war die gesamtzahl der rebounds für kobe bryant in der saison, wo er nur 3 steals hatte	was war die gesamtzahl der rebounds für kobe bryant in der saison, wo hatte er nur 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_rebounds ) ) )
wie viele fouls wurden von kobe bryant im jahr 2004 gespielt?	wie viele fouls 2004 von kobe bryant gespielt wurden	wie viele fouls wurden gespielt von kobe bryant im jahr 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_fouls ) ) )
saison des spielers kobe bryant, der in einer saison 3 umsätze erzielt	saison des spielers kobe bryant, der 3 umsätze über eine saison hat	saison der spieler kobe bryant, die 3 umsätze über eine saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string season ) ) )
nennen sie einen spieler mit mindestens drei rebounds in der saison	benennen sie einen spieler mit mindestens drei rebounds in der saison	namen der spieler mit mindestens drei rebounds in der saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat die führung für die meisten umsätze in einer saison	der die führung für die meisten umsätze in einer saison hat	whos bekam die führung für die meisten umsätze in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was spieler hatten die gleiche anzahl von umsätzen wie kobe bryant	welche spieler die gleiche anzahl von umsätzen hatten wie kobe bryant	was haben die spieler hatten die gleiche anzahl von umsätzen als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler in den spielzeiten 2004 oder 2010 gespielt haben	welche spieler in der saison 2004 oder 2010 gespielt haben	die spieler spielten im jahr 2004 oder 2010 jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
auf welcher mannschaft hat kobe bryant im jahr 2004 gespielt?	welches team kobe bryant spielte im jahr 2004	das team hat kobe bryant spielen im jahr 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string team ) ) )
wer hat weniger als 4 spiele pro saison gespielt	der weniger als 4 spiele pro saison gespielt hat	wer hat gespielt, der weniger als 4 spiele pro saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche jahreszeit war kobe bryant	welche saison war kobe bryant	die saison war kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ) )
wie viele blöcke wurden von kobe bryant gemacht	wie viele blöcke wurden von kobe bryant gemacht	wie viele blöcke wurden von kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) )
für welches team hat kobe bryant 3 spiele gespielt?	für welches team kobe bryant 3 spiele gespielt hat	welches team hat kobe bryant spielen 3 spiele für	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string team ) ) )
welcher spieler hatte die gleichen oder weniger stiehlt als kobe bryant	welcher spieler die gleichen oder weniger steals hatte als kobe bryant	welche spieler hatten die gleiche oder weniger klaut als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte in einer saison die gleiche anzahl an diebstählen oder weniger als kobe bryant?	welcher spieler die gleiche menge an steals in einer saison oder weniger als kobe bryant hatte	welche spieler hatten die gleiche menge steals in einer saison oder weniger als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was war die gesamtzahl der rebounds von kobe bryant in der saison, in der er nur drei blöcke hatte?	was war die gesamtzahl der rebounds von kobe bryant in der saison, wo er nur drei blöcke hatte	was war die gesamtzahl der rebounds von kobe bryant in der saison, wo hatte er nur drei blocks	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_rebounds ) ) )
spieler mit mehr als 2 rebounds	spieler mit mehr als 2 rebounds	spieler mit mehr als 2 rebounds	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele spiele hat kobe bryant mit drei blöcken gespielt?	wie viele spiele hat kobe bryant mit drei blöcken gespielt	wie viele spiele hast, kobe bryant spielen mit drei blöcken	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_games_played ) ) )
wie viele blöcke hatte kobe bryant in der saison 04?	wie viele blöcke hat kobe bryant während der 04 saison	wie viele blöcke hast, kobe bryant haben während der saison 04	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_blocks ) ) )
nennen sie den spieler mit den meisten blöcken während der saison	benennen sie den spieler mit den meisten blöcken während der saison	namen der spieler, der die meisten blöcke während der saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler hatten 3 oder mehr rebounds?	welche spieler 3 oder mehr rebounds hatten	was haben die spieler hatten 3 oder mehr rebounds	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele spiele hat kobe bryant mehr als 3 vorlagen gemacht	wie viele spiele hat kobe bryant mehr als 3 assists gemacht	wie viele spiele hat kobe bryant mehr als 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_games_played ) ) )
position des spielers kobe bryant, der in einer saison 3 spiele bestritten hat	position des spielers kobe bryant, der 3 spiele über eine saison gespielt hat	position von spieler kobe bryant, spielte 3 spiele in einer saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string position ) ) )
nennen sie einen spieler mit weniger als 3 vorlagen pro saison	benennen sie einen spieler mit weniger als 3 assists pro saison	name, den ein spieler mit weniger als 3 assists pro saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler erhält so viele vorlagen wie kobe bryant, wenn nicht mehr	welcher spieler so viele assists erhält wie kobe bryant, wenn nicht mehr	die bekommt der spieler so viele assists wie kobe bryant, wenn nicht mehr	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit nicht mehr als 3 rebounds pro saison	spieler mit nicht mehr als 3 rebounds in einer saison	spieler mit nicht mehr als 3 rebounds über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, dessen anzahl an diebstählen in einer saison geringer ist als die des spielers kobe bryant in einer saison	spieler, dessen anzahl der steals über eine saison ist weniger als die von spieler kobe bryant über eine saison	spieler, deren anzahl der stiehlt über eine saison weniger, als dass der spieler kobe bryant über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat mehr oder weniger als 3 fouls gehabt	der mehr oder weniger als 3 fouls hatte	wer hat mehr oder weniger als 3 fouls	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string ! = ) ( number 3 foul ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele blöcke kobe bryant in der saison gemacht hat, hat er 3 rebounds gemacht	wie viele blöcke kobe bryant in der saison machte er 3 rebounds	wie viele blöcke kobe bryant machte in der saison machte er 3 rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_blocks ) ) )
spieler mit weniger als 3 stehlen	spieler mit weniger als 3 steals	spieler mit weniger als 3 steals	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele blöcke hatte kobe bryant in drei spielen der saison?	wie viele blöcke hat kobe bryant in drei spielen der saison haben	wie viele blöcke hast, kobe bryant haben in drei spielen der saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_blocks ) ) )
wie viele fouls hatte kobe in der letzten saison?	wie viele fouls hatte kobe in der letzten saison	wie viele fouls hat kobe haben in der letzten saison	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) )
wie viele punkte hatte kobe bryant, als er 3 blöcke hatte?	wie viele punkte hatte kobe bryant, als er 3 blöcke hatte	wie viele punkte hat kobe bryant haben, wenn er hatte 3 blöcke	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_points ) ) )
nennen sie spieler mit umsatzbeträgen in einer beliebigen saison, die unter den umsatzbeträgen liegen, die kobe bryant in einer beliebigen saison zuzuordnen ist	namen von spielern mit umsatzbeträgen in einer saison, die kleiner sind als die umsatzbeträge, die kobe bryant in einer saison zuzurechnen sind	name spieler mit umsatz beläuft sich in einer saison zu weniger als der umsatz beläuft zuzurechnen kobe bryant in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte die gleiche anzahl von umsätzen wie kobe bryant?	welcher spieler die gleiche anzahl von umsätzen wie kobe bryant hatte	die spieler hatten die gleiche anzahl von umsätzen als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte die meisten rebounds in einer saison?	welcher spieler die meisten rebounds in einer saison hatte	welcher spieler hat bisher die meisten rebounds in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, die mehr und weniger als 3 haben, stehlen in allen jahreszeiten	spieler, die mehr und weniger als 3 steals über alle jahreszeiten haben	spieler, die mehr haben und weniger als 3 steals über alle jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_steals ) ( string ! = ) ( number 3 steal ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat über eine saison die gleiche anzahl an umsätzen wie kobe bryant?	welcher spieler die gleiche menge an umsätzen hat wie kobe bryant über eine saison	welche spieler hat die gleiche menge des umsatzes auf wie kobe bryant über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche position hat kobe bryant gespielt, als er drei blocks in einer saison hatte?	welche position spielte kobe bryant, als er 3 blöcke in einer saison hatte	welche position hat kobe bryant spielen, wenn er hatte 3 blöcke in einer saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string position ) ) )
zu welchen jahreszeiten hatte kobe bryant nur drei blöcke?	welche jahreszeiten kobe bryant nur drei blöcke hatten	was seasons hat kobe bryant haben nur drei blocks	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string season ) ) )
welche spieler gehören zum selben team wie kobe bryant?	welche spieler im selben team wie kobe bryant sind	die spieler sind auf dem gleichen team wie kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele blöcke in einer saison hatte kobe bryant?	wie viele blöcke in einer saison haben kobe bryant	wie viele blöcke in einer saison hat kobe bryant haben	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) )
welche position hat kobe bryant im jahr 2004 gespielt?	welche position spielte kobe bryant im jahr 2004	welche position hat kobe bryant spielen im jahr 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string position ) ) )
wie viele steals pro saison hat kobe bryant durchschnittlich, wenn er auch 3 rebounds hat	wie viele steals pro saison kobe bryant durchschnitt, wenn er auch 3 rebounds bekam	wie viele steals pro saison hat kobe bryant durchschnitt, wenn hes bekam auch 3 rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_steals ) ) )
welcher spieler hat mehr oder weniger als 3 spiele gespielt?	welcher spieler mehr oder weniger als 3 spiele gespielt hat	welche spieler gespielt hat, mehr oder weniger als 3 spiele	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_games_played ) ( string ! = ) ( number 3 game ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, der maximal zwei teams hat	spieler, der maximal zwei teams hat	spieler hat maximal zwei team	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string team ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
finden sie die spieler, die eine gesamtanzahl von diebstählen begehen, die größer ist als die gesamtanzahl der diebstähle, die kobe bryant in einer saison begeht	finden sie die spieler, die eine gesamtzahl von steals begehen, die größer ist als die gesamtzahl der steals, die von kobe bryant in einer saison begangen wurden	finden die spieler begehen, eine gesamtzahl der stiehlt, der größer ist als die anzahl der stiehlt, begangen von kobe bryant in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler haben zwei oder weniger positionen gespielt	welche spieler zwei oder weniger positionen gespielt haben	welche spieler gespielt haben, die zwei oder weniger positionen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat in dieser saison mehr punkte als kobe bryant erzielt?	welcher spieler in dieser saison mehr punkte als kobe bryant erzielt hat	was spieler erzielte mehr punkte als kobe bryant in dieser saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche position hat kobe bryant in der saison 2004 gespielt?	welche position spielte kobe bryant in der saison 2004	welche position hat kobe bryant spielen in der saison 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string position ) ) )
in wie vielen spielen hat kobe bryant 3 blocks gemacht	in wie viele spiele hat kobe bryant gemacht 3 blöcke	in wie vielen spielen hat kobe bryant aus 3 blöcken	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_games_played ) ) )
welcher spieler hat so viele steals wie die meisten steals, die kobe bryant in einer saison gemacht hat	welcher spieler hat so viel steals wie die meisten steals kobe bryant über eine saison gemacht	welche spieler hat so viel stiehlt, wie die meisten anzahl der stiehlt kobe bryant in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat kobe bryant gespielt, als er drei rebounds in der ganzen saison hatte?	der kobe bryant spielen, wenn er 3 die ganze saison rebounds hatte	wer hat kobe bryant spielen, wenn er hatte 3 ganze saison rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string team ) ) )
welche spieler haben mindestens so viele blocks gemacht wie kobe bryant	was spieler mindestens so viele blöcke wie kobe bryant gemacht haben	was haben die spieler mindestens so viele blöcke wie kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit mehr als 3 punkten in einer saison	spieler mit mehr als 3 punkten über eine saison	spieler mit mehr als 3 punkte über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welches team war kobe bryant auf, als er 3 blöcke in einer saison hatte	welches team kobe bryant auf, wenn er 3 blöcke in einer saison hatte	das team war kobe bryant auf, wenn er hatte 3 blöcke in einer saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string team ) ) )
wie viele rebounds hatte kobe im jahr 04?	wie viele rebounds hatte kobe in 04	wie viele rebounds hat kobe in 04	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_rebounds ) ) )
anzahl der fouls kobe bryant, der 3 vorlagen hat	anzahl der fouls kobe bryant, die 3 assists hat	anzahl der fouls kobe bryant, die 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_fouls ) ) )
spieler mit der geringsten anzahl von fouls in einer saison	spieler mit der geringsten anzahl von fouls über eine saison	spieler mit der kleinsten anzahl von fouls über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
für welches team hat kobe bryant drei blocks gemacht?	welches team kobe bryant machen drei blöcke für	das team hat kobe bryant drei blöcke für	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string team ) ) )
welcher spieler hatte in dieser saison die wenigsten fouls?	welcher spieler in dieser saison die wenigsten fouls hatte	welche spieler hatten die wenigsten fouls in dieser saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele umsätze hat kobe bryant in allen jahreszeiten gemacht	wie viele umsätze kobe bryant über alle jahreszeiten hatte	wie viele umsätze hat kobe bryant hatte sich über alle jahreszeiten	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) )
wie viele rebounds erzielte kobe bryant in den saisons, in denen er drei fouls begangen hatte?	wie viele rebounds machte kobe bryant in saisons, in denen er 3 fouls machte	wie viele rebounds hat kobe bryant in jahreszeiten, wo er 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_rebounds ) ) )
welcher spieler hat weniger blöcke pro saison als kobe bryant	welcher spieler weniger blöcke pro saison hat als kobe bryant	welche spieler hat weniger blöcke pro saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
nennen sie den spieler mit der gesamtzahl der vorlagen, die weniger als 3 entspricht	benennen sie den spieler mit der gesamtzahl der assists, die weniger als 3 entspricht	namen der spieler, die anzahl der assistsdas entspricht weniger als 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat mehr als 3 punkte in dieser saison gemacht	der in dieser saison mehr als 3 punkte gemacht hat	wer hat mehr als 3 punkte in dieser saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele teams gibt es?	wie viele teams es gibt	wie viele teams gibt es	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.team ) ( string ! type ) ) ) )
welcher spieler hatte in einer saison nicht mehr umsätze als kobe bryant?	welcher spieler in einer saison nicht mehr umsatz hatte als kobe bryant	die spieler hatten nicht mehr die umsätze in einer saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit der geringsten anzahl an vorlagen in einer saison	spieler mit der geringsten anzahl an assists in einer saison	spieler, der die niedrigste zahl von assists in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler haben weniger als zwei positionen gespielt	welche spieler weniger als zwei positionen gespielt haben	was die spieler gespielt haben, weniger als zwei positionen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat die gleichen oder weniger spiele als kobe bryant gespielt	der die gleichen oder weniger spiele als kobe bryant gespielt hat	wer gespielt hat, die gleiche oder weniger spiele als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, dessen anzahl der fouls in einer saison geringer ist als die des spielers kobe bryant in einer saison	spieler, dessen anzahl von fouls über eine saison ist weniger als die von spieler kobe bryant über eine saison	spieler, deren anzahl von fouls über eine saison weniger, als dass der spieler kobe bryant über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, dessen anzahl der umsätze in einer saison der des spielers kobe bryant in einer saison entspricht	spieler, dessen anzahl der umsätze über eine saison ist die gleiche wie die von spieler kobe bryant über eine saison	spieler, deren anzahl von umsätzen über einer saison ist die gleiche wie die der spieler kobe bryant über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele fouls hatte kobe bryant nach 3 spielen?	wie viele fouls hat kobe bryant nach 3 spielen	wie viele fouls hat kobe bryant haben nach 3 games	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_fouls ) ) )
wer hat mehr oder weniger als 3 umsätze gehabt	die mehr oder weniger als 3 umsätze erzielt haben	wer hat mehr oder weniger als 3 umsätze	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string ! = ) ( number 3 turnover ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele fouls hat kobe bryant gehabt	wie viele fouls hat kobe bryant hatte	wie viele fouls hat kobe bryant hatte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_fouls ) ) )
was spieler haben so viele rebounds wie kobe bryant in allen jahreszeiten	welche spieler in allen saisons so viele rebounds wie kobe bryant haben	was haben spieler wie viele rebounds, kobe bryant über alle jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte mehr als 3 blöcke in dieser saison	welcher spieler in dieser saison mehr als 3 blöcke hatte	welche spieler hatte mehr als 3 blöcke in dieser saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
während der saison, in der er 3 umsätze hatte, war das team auf kobe bryant	während der saison, in der er 3 turnover hatte, was team kobe bryant auf	während der saison, in denen er 3 turnovers, was team war kobe bryant auf	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string team ) ) )
welche anderen spieler spielen die gleiche position wie kobe bryant?	welche anderen spieler die gleiche position wie kobe bryant spielen	was andere spieler spielen die gleiche position wie kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
umsätze von kobe bryant in einer saison, in der er 3 vorlagen machte	umsätze von kobe bryant über eine saison, in der er 3 assists machte	umsätze von kobe bryant über eine saison, in der er machte 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_turnovers ) ) )
wie lange hat kobe bryant schon mit mehr als 3 assists pro saison gespielt?	wie lange hat kobe bryant mit mehr als 3 assists pro saison gespielt	wie lange ist kobe bryant spielte mit mehr als 3 assists pro saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string season ) ) )
spieler, dessen diebstahl während einer saison nicht mehr als der diebstahl von spieler kobe bryant während einer saison ist	spieler, dessen steals über eine saison sind nicht mehr als stiehlt spieler kobe bryant über eine saison	spieler, deren stiehlt im laufe einer saison nicht mehr als spieler stiehlt kobe bryant über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele assists hat kobe bryant mit drei steals gehabt	wie viele assists hat kobe bryant mit drei steals gehabt	wie viele assists hat kobe bryant hatte mit drei steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_assists ) ) )
spieler, die die geringsten umsätze in einer saison hatten	spieler, die die geringsten umsätze in einer saison hatten	spieler, der die wenigsten umsätze in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
nenne einen spieler mit weniger als drei stehlen	benennen sie einen spieler mit weniger als drei steals	name, den ein spieler mit weniger als drei steals	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler haben in allen spielzeiten weniger als 3 spiele gespielt?	welche spieler in allen saisons weniger als 3 spiele gespielt haben	was die spieler gespielt haben weniger als 3 spiele, die in allen jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was ist die anzahl der positionen	wie viele positionen	was ist die anzahl der positionen	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.position ) ( string ! type ) ) ) )
welche position hat kobe bryant bekommen 3 steals als	welche position hat kobe bryant bekommen 3 steals als	welche position hat kobe bryant bekommen, 3 steals als	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string position ) ) )
wie viele blöcke hat kobe bryant in der saison mit mindestens 3 gespielten spielen erzielt?	wie viele blöcke hat kobe bryant in saisons mit mindestens 3 gespielten spielen erreicht	wie viele blöcke hat kobe bryant erzielt in den staffeln mit mindestens 3 spiele gespielt	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_blocks ) ) )
welcher spieler hatte die wenigsten rebounds in einer saison?	welcher spieler die wenigsten rebounds in einer saison hatte	die spieler hatten die wenigsten rebounds in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
finden sie einen spieler mit 3 oder mehr stehlen in einer beliebigen saison	finden sie einen spieler mit 3 oder mehr steals in einer saison	finden sie eine spieler mit 3 oder mehr steals in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte mehr fouls als kobe bryant	welcher spieler hatte mehr fouls als kobe bryant	die spieler hatte mehr fouls als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele blöcke hat kobe bryant gehabt	wie viele blöcke hat kobe bryant hatte	wie viele blöcke hat kobe bryant hatte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_blocks ) ) )
entweder kobe bryant oder lebron james	entweder kobe bryant oder lebron james	entweder kobe bryant oder lebron james	( call SW.listValue ( call SW.concat en.player.kobe_bryant en.player.lebron_james ) )
welcher spieler ist es kobe bryant oder lebron james?	welcher spieler ist es kobe bryant oder lebron james	dem spieler ist es kobe bryant oder lebron james	( call SW.listValue ( call SW.concat en.player.kobe_bryant en.player.lebron_james ) )
anzahl der rebounds in einer saison von spieler kobe bryant mit 3 blöcken in einer saison	anzahl der rebounds über eine saison von spieler kobe bryant mit 3 blöcken über eine saison	anzahl der rebounds im laufe einer saison spieler kobe bryant mit 3 blöcken in einer saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_rebounds ) ) )
nennen sie die position von kobe bryant, als er drei rebounds machte	nennen sie die position von kobe bryant, wenn er drei rebounds machte	namen der position von kobe bryant, als er drei rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string position ) ) )
wie viele steals in einer saison hatte kobe bryant für die lakers?	wie viele steals in einer saison hat kobe bryant für die lakers	wie viele steals in einer saison hat kobe bryant für die lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_steals ) ) )
welcher spieler hat nicht 3 vorlagen	welcher spieler hat keine 3 assists	die spieler haben kein 3 assists	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string ! = ) ( number 3 assist ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele spiele hatte kobe bryant in einer saison drei assists?	wie viele spiele haben kobe bryant haben drei assists in über eine saison	wie viele spiele hat kobe bryant haben drei assists in über eine saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_games_played ) ) )
wie viele blöcke kobe bryant in der saison 2004 gemacht	wie viele blöcke kobe bryant in der saison 2004 gemacht	wie viele blöcke kobe bryant machte in der saison 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_rebounds ) ) )
nennen sie die anzahl der umsätze, die kobe bryant im jahr 2004 erzielte	nennen sie die anzahl der von kobe bryant im jahr 2004 erzielten umsätze	nennen sie die anzahl der umsätze erzielt durch kobe bryant 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_turnovers ) ) )
in welcher saison hat kobe bryant 3 punkte erzielt?	in welcher saison erzielte kobe bryant 3 punkte	in der saison hat kobe bryant punktzahl 3 punkte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string season ) ) )
wie viele rebounds hat kobe nach 3 fouls erhalten?	wie viele rebounds bekam kobe nach 3 fouls	wie viele rebounds hat kobe bekommen, nachdem du 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_rebounds ) ) )
welcher spieler hatte mehr oder weniger fouls als 3 in einer saison?	welcher spieler mehr oder weniger fouls als 3 in einer saison hatte	welche spieler hat mehr oder weniger fouls als 3 über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string ! = ) ( number 3 foul ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte die gleiche menge an rebounds wie kobe bryant?	welcher spieler die gleiche anzahl an rebounds hatte wie kobe bryant	welche spieler hatten die gleiche menge an rebounds, kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_rebounds ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler spielen nicht mehr als zwei positionen	welche spieler nicht mehr als zwei positionen spielen	die spieler spielen nicht mehr als zwei positionen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte mehr als 3 stiehlt	welcher spieler mehr als 3 steals hatte	welche spieler hatte mehr als 3 steals	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
mannschaft von spieler kobe bryant 2004 saison	team von spieler kobe bryant 2004 saison	teamspieler kobe bryant saison 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string team ) ) )
mannschaften, für die kobe bryant spielt	teams kobe bryant spielt für	teams, die kobe bryant spielt für	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ) )
während welcher jahreszeiten hat kobe bryant 3 blöcke gemacht	während dieser jahreszeiten machte kobe bryant 3 blöcke	während die seasons hat kobe bryant machen 3 blöcke	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string season ) ) )
wie viele spiele hat kobe bryant gespielt, in denen er mehr als 3 fouls hatte?	wie viele spiele spielte kobe bryant, wo er mehr als 3 fouls hatte	wie viele spiele hast, kobe bryant spielen, wo er mehr als 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_games_played ) ) )
welche spieler hatten die gleichen oder mehr rebounds als kobe bryant in allen jahreszeiten	welche spieler über alle saisons die gleichen oder mehr rebounds hatten als kobe bryant	was die spieler hatten gleiche oder mehr rebounds als kobe bryant über alle jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat die geringste anzahl von blöcken gehabt	der die geringste anzahl von blöcken hatte	wer hat die wenigsten blöcke	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte in einer saison so viele rebounds wie kobe bryant?	welcher spieler hatte so viele rebounds wie kobe bryant in einer saison	welcher spieler hatte so viele rebounds wie kobe bryant in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_rebounds ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit nicht mehr als 3 fouls in einer saison	spieler mit nicht mehr als 3 fouls über eine saison	spieler mit nicht mehr als 3 fouls über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele rebounds in einer saison hatte kobe bryant im jahr 2004?	wie viele rebounds in einer saison hatte kobe bryant im jahr 2004	wie viele rebounds in einer saison hat kobe bryant haben in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_rebounds ) ) )
welcher spieler gibt in jeder saison die gleiche anzahl von umsätzen wie kobe bryant auf?	welcher spieler gibt die gleiche anzahl von umsätzen wie kobe bryant pro saison	welche spieler gibt die gleiche anzahl von umsätzen als kobe bryant pro saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat weniger spiele als kobe bryant gespielt	der weniger spiele gespielt hat als kobe bryant	wer hat weniger spiele gespielt als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was spieler im laufe einer saison mehr rebounds als kobe bryant machten	welche spieler mehr rebounds als kobe bryant über eine saison gemacht haben	was die spieler gemacht, mehr rebounds als kobe bryant über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat durchweg mehr steals pro saison als kobe bryant?	welcher spieler hat konsequent mehr steals pro saison als kobe bryant	die spieler konsequent hat mehr steals pro saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele spiele hat kobe bryant in jeder saison gespielt?	wie viele spiele hat kobe bryant pro saison gespielt	wie viele spiele hat kobe bryant spielte jede saison	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) )
spieler mit mehr als 3 blöcken in einer saison	spieler mit mehr als 3 blöcken über eine saison	spieler mit mehr als 3 blöcke über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte mehr blöcke als kobe bryant, dessen anzahl der blöcke 3 ist	welcher spieler mehr blöcke hatte als kobe bryant, dessen anzahl von blöcken 3 ist	welche spieler hatte mehr blöcke als kobe bryant, dessen anzahl von blöcken ist 3	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string season ) ) )
stiehlt von kobe bryant im jahr 2004	stiehlt von kobe bryant im jahr 2004	stiehlt von kobe bryant im jahr 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_steals ) ) )
was war die gesamtzahl der saison, in der kobe bryant nur drei rebounds hatte?	was war die gesamtzahl der saison, in der kobe bryant nur drei rebounds hatte	was war die gesamtzahl der saison, wo kobe bryant hatte nur drei rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_rebounds ) ) )
wie viele umsätze hat kobe bryant in der saison mit mindestens 3 punkten verloren?	wie viele umsätze in saisons mit mindestens 3 punkten verloren haben	wie viele umsätze hat kobe bryant verloren, in staffeln mit mindestens 3 punkte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_turnovers ) ) )
wie viele spiele hat kobe bryant gespielt?	wie viele spiele hat kobe bryant gespielt	wie viele spiele hat kobe bryant gespielt	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_games_played ) ) )
wie viele blöcke hatte kobe bryant in der saison? er hatte auch drei rebounds	wie viele blöcke kobe bryant haben über die saison hatte er auch drei rebounds	wie viele blöcke hast, kobe bryant haben im laufe der saison hatte er auch drei rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_blocks ) ) )
wie viele fouls wurden von kobe bryant nach 3 rebounds gespielt?	wie viele fouls von kobe bryant nach 3 rebounds gespielt wurden	wie viele fouls wurden gespielt von kobe bryant, nachdem er 3 rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_fouls ) ) )
nennen sie die anzahl der gesamtumsätze von kobe bryant	nennen sie die anzahl der gesamtumsatze von kobe bryant	nennen sie die anzahl der insgesamt umsätze von kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) )
wie viele blöcke als point guard kobe bryant gemacht	wie viele blöcke als point guard kobe bryant gemacht	wie viele blöcke als point guard kobe bryant machte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_blocks ) ) )
wie viele fouls hatte kobe bryant mit drei punkten	wie viele fouls hatte kobe bryant mit drei punkten	wie viele fouls hat kobe bryant mit drei punkten	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_fouls ) ) )
finden sie spieler, deren gesamtzahl der rebounds in einer bestimmten saison größer ist als die anzahl der rebounds, die kobe bryant in einer saison gemacht hat	finden sie spieler, deren gesamtzahl der rebounds in einer bestimmten saison mehr ist als die anzahl der rebounds in einer saison von kobe bryant	finden sie die spieler, deren gesamtanzahl der rebounds in einer saison mehr ist, als die anzahl der rebounds in einer saison von kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler erzielte weniger als 3 punkte in einer saison	welcher spieler weniger als 3 punkte in einer saison erzielt hat	welche der spieler geschossen hat weniger als 3 punkte in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
nennen sie einen spieler, der keine drei vorlagen hatte	benennen sie einen spieler, der nicht über drei assists hatte	name, den ein spieler, der nicht drei assists	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string ! = ) ( number 3 assist ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler weniger als 4 fouls gemacht haben	was spieler weniger als 4 fouls gemacht haben	was die spieler gemacht, die weniger als 4 fouls	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler sind keine point guards?	welche spieler keine point guards sind	die spieler sind nicht point guards	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string ! = ) en.position.point_guard ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte weniger rebounds als kobe bryant?	welcher spieler hatte weniger rebounds als kobe bryant	die spieler hatten weniger rebounds als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele vorlagen hatte spieler kobe bryant in dieser saison, um 3 umsätze zu erzielen?	wie viele assists hat spieler kobe bryant haben in dieser saison, um 3 umsätze zu erhalten	wie viele assists hat spieler kobe bryant haben in dieser saison 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_assists ) ) )
spieler, die in einer saison weniger fouls haben als kobe bryant	spieler, die in einer saison weniger fouls haben als die von kobe bryant	spieler, die weniger fouls über eine saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
nennen sie die spieler, bei denen die gesamtzahl der fouls in einer saison mindestens der von kobe bryant entspricht	nennen sie die spieler, die eine gesamtanzahl von fouls in einer saison haben, die der von kobe bryant entsprechen oder mehr entsprechen	namen jene spieler, die haben eine gesamtzahl von fouls in einer saison, die gleich oder mehr als das von kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit kleineren umsätzen über eine saison als spieler kobe bryant über eine saison	spieler mit kleineren umsätzen über eine saison als spieler kobe bryant über eine saison	spieler mit kleineren umsätzen, die über eine saison als spieler kobe bryant über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in welchem jahr spielte kobe bryant für die la lakers?	welches jahr hat kobe bryant spielen für die la lakers	das jahr hat kobe bryant spielen für die la lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string season ) ) )
für welche mannschaft hat kobe bryant im jahr 2004 gespielt?	für welches team kobe bryant 2004 spielte	das team hat kobe bryant spielen im jahr 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string team ) ) )
in welcher saison hatte kobe bryant nur 3 fouls	welche saison hat kobe bryant nur 3 fouls haben	was saison hat kobe bryant haben nur 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string season ) ) )
wen viele rebounds in der saison machten point guard kobe bryant	die viele rebounds in der saison hat point guard kobe bryant machen	die vielen rebounds in der saison hat point guard kobe bryant machen	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_rebounds ) ) )
welche spieler haben höchstens 2 positionen	welche spieler höchstens 2 positionen haben	die spieler haben höchstens 2 positionen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat weniger als 3 blöcke	wer hat weniger als 3 blöcke	wer hat weniger als 3 blocks	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele blöcke hatte kobe während seines dreipunktegesamtspiels?	wie viele blöcke kobe während seines dreipunktegesamtspiels hatte	wie viele blöcke hat kobe haben, während seine dreipunktspiel insgesamt	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_blocks ) ) )
nennen sie die spieler mit erzielten vorlagen in einer beliebigen saison mit mindestens 3	nennen sie die spieler mit erzielten assists in einer saison, die mindestens 3	namen die spieler mit erzielte assists in einer saison der auszählung mindestens 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat die mindestpunktzahl erreicht?	welcher spieler die mindestpunktzahl erzielt hat	welcher spieler erzielte die minimale anzahl der punkte	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele punkte erzielte kobe, als er für die lakers spielte?	wie viele punkte erzielte kobe beim spielen für die lakers	wie viele punkte hat kobe partitur während der wiedergabe für die lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_points ) ) )
spieler, der in einer saison weniger als 4 blocks gemacht hat	spieler, der weniger als 4 blöcke über eine saison gemacht hat	spieler mit weniger als 4 blöcke über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele rebounds hatte der lakerspieler kobe bryant?	wie viele rebounds hat la laker spieler kobe bryant haben	wie viele rebounds hat la lakerspieler kobe bryant haben	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_rebounds ) ) )
wie viele fouls hatte kobe bryant, als er 3 punkte hatte?	wie viele fouls hatte kobe bryant, als er 3 punkte hatte	wie viele fouls hat kobe bryant haben, wenn er hatte 3 punkte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_fouls ) ) )
welcher spieler hat 3 oder mehr spiele gespielt?	welcher spieler 3 oder mehr spiele gespielt hat	was spieler 3 oder mehr spiele	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat die gleichen oder mehr umsätze als kobe bryant gehabt	der die gleichen oder mehr umsätze als kobe bryant erzielt hat	wer hat das gleiche oder mehr turnovers als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat mehr als 3 punkte bekommen	der mehr als 3 punkte erhalten hat	wer hat mehr bekommen als 3 punkte	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
finden sie die spieler mit umsätzen in einer bestimmten saison, die höchstens 3 entsprechen	finden sie die spieler mit umsatzbeträgen in einer bestimmten saison, die höchstens 3	finden die spieler mit umsatz beläuft sich in einer saison entspricht höchstens 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele steals bekommt kobe in einer saison, in der er mehr als 3 steals hat?	wie viele steals bekommt kobe in jahreszeiten, in denen er mehr als 3 steals bekam	wie viele steals hat kobe bekommen, in zeiten, wo er hat mehr als 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_steals ) ) )
welcher spieler hat weniger vorlagen als kobe bryant	welcher spieler weniger assists als kobe bryant hat	welche spieler hat weniger assists als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele blöcke hat kobe bryant gemacht, nachdem er 3 steals bekommen hatte?	wie viele blöcke machte kobe bryant, nachdem er 3 steals bekommen hatte	wie viele blöcke hast, kobe bryant machen sie nach dem aufstehen 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_blocks ) ) )
wie viele spiele hat kobe bryant gespielt, in denen er drei vorlagen gemacht hat?	wie viele spiele hat kobe bryant spielen, wo er drei assists gemacht	wie viele spiele hast, kobe bryant spielen, wo er drei assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_games_played ) ) )
spieler, der in einer saison keine 3 spiele bestritten hat	spieler, der nicht 3 spiele über eine saison gespielt hat	spieler, die nicht gespielt werden 3 spiele über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_games_played ) ( string ! = ) ( number 3 game ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat eine gesamtanzahl von fouls unter 3 für die saison	wer hat eine gesamtfoulanzahl unter 3 für die saison	wer hat einen total üblen anzahl unter 3 für die saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele rebounds hatte kobe bryant während der gesamten saison, als sein umsatz 3 betrug?	wie viele rebounds in der gesamten saison hatten kobe bryant, als seine umsätze 3 entsprachen	wie viele die ganze saison rebounds hat kobe bryant haben, wenn seine umsätze glich 3	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_rebounds ) ) )
anzahl der umsätze in einer saison von spieler kobe bryant, der 3 rebounds in einer saison hat	anzahl der umsätze über eine saison von spieler kobe bryant, der 3 rebounds über eine saison hat	anzahl der umsätze über eine saison der spieler kobe bryant, die 3 rebounds über eine saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_turnovers ) ) )
welcher spieler hat weniger assists pro saison als point guard kobe bryant	welcher spieler hat weniger pro saison assists als point guard kobe bryant	was spieler weniger pro saison unterstützt als point guard kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele ganzjahresblöcke hatte kobe bryant im jahr 2004?	im jahr 2004 wie viele ganzjahresblöcke haben kobe bryant	im jahr 2004, wie viele allseasonblöcke haben kobe bryant haben	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_blocks ) ) )
spieler, die in einer saison die gleiche anzahl an vorlagen hatten wie die spieler mit der niedrigsten gesamtanzahl an vorlagen von kobe bryants	spieler, die eine gleiche anzahl von assists in einer saison hatten, um die von kobe bryants niedrigste assists insgesamt	spieler, die hatten eine gleiche menge assists in einer saison, die von kobe bryants niedrigsten assists insgesamt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat in dieser saison mehr spiele als kobe bryant gespielt?	welcher spieler in dieser saison mehr spiele als kobe bryant gespielt hat	was spieler spielte mehr spiele als kobe bryant in dieser saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele fouls hat kobe bryant in einer saison?	wie viele fouls hat kobe bryant in einer saison	wie viele fouls hat kobe bryant in einer saison	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) )
welcher spieler hatte 3 oder mehr blöcke	welcher spieler 3 oder mehr blöcke hatte	welche spieler hatten 3 oder mehr blöcke	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat die gleiche anzahl von rebounds in einer saison wie kobe bryant?	welcher spieler die gleiche anzahl an rebounds in einer saison hat wie kobe bryant	welcher spieler hat die gleiche anzahl an rebounds in einer saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_rebounds ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte mehr vorlagen als kobe bryant	welcher spieler hatte mehr assists als kobe bryant	die spieler hatte mehr assists als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele steals hatte kobe bryant?	wie viele steals haben kobe bryant	wie viele steals hat kobe bryant haben	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) )
wie viele punkte machte kobe bryant in der saison, in der er für los angeles lakers spielte?	wie viele punkte kobe bryant in der saison, in der er für los angeles lakers spielte	wie viele punkte kobe bryant machte in der saison, in der er spielte für die los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_points ) ) )
was spieler hatten weniger blöcke als kobe bryant in allen jahreszeiten	welche spieler in allen saisons weniger blöcke als kobe bryant hatten	was die spieler hatten weniger blöcke als kobe bryant über alle jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat die maximale anzahl an diebstählen?	welcher spieler die maximale anzahl von steals hat	welcher spieler hat die maximale anzahl der stiehlt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat die gleiche menge oder weniger von assists als kobe bryant	der die gleiche menge oder weniger von assists wie kobe bryant hatte	wer hat den gleichen betrag oder weniger assists von kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
finden sie die spieler, die in einer bestimmten saison eine gesamtanzahl von diebstählen haben, die geringer ist als die gesamtanzahl der diebstähle, die kobe bryant in einer bestimmten saison erlangt hat	finden sie die spieler, die eine gesamtanzahl von steals in einer bestimmten saison haben, die kleiner ist als die gesamtzahl der steals, die von kobe bryant in einer bestimmten saison erworben wurden	finden jene spieler, die haben eine gesamtzahl von steals in einer saison, die kleiner ist als die gesamtzahl der stiehlt erworben von kobe bryant in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
team von spieler kobe bryant	team von spieler kobe bryant	teamspieler kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ) )
in welcher position hat kobe bryant 3 umsätze erzielt?	in welcher position hat kobe bryant 3 umsätze erhalten	in welcher position waren kobe bryant holen sie sich 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string position ) ) )
welcher spieler hat die meisten positionen gespielt?	welcher spieler die meisten positionen gespielt hat	welcher spieler gespielt hat, die meisten positionen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string position ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte gleiche oder mehr fouls als kobe bryant	welcher spieler hatte gleiche oder mehr fouls wie kobe bryant	welche spieler hatte, die gleich oder mehr fouls von kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
dies gilt als die saison des spielers kobe bryant mit 3 blöcken	dies gilt als die saison des spielers kobe bryant mit 3 blöcken	dies gilt als die jahreszeit der spieler kobe bryant mit 3 blocks	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string season ) ) )
anzahl der gespielten spiele in einer saison von spieler kobe bryant mit 3 punkten in einer saison	anzahl der gespielten spiele über eine saison von spieler kobe bryant mit 3 punkten über eine saison	anzahl der gespielten spiele im laufe einer saison spieler kobe bryant 3 punkte über eine saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_games_played ) ) )
finde die spieler, die für weniger als 3 punkte in einer bestimmten saison verantwortlich sind	finden sie die spieler verantwortlich für weniger als 3 punkte in einer bestimmten saison	finden die verantwortlichen akteure für weniger als 3 punkte in jeder saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele assists hat kobe bryant in einer saison hergestellt?	wie viele assists kobe bryant über eine saison gemacht	wie viele assists kobe bryant in einer saison	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) )
in welchem team hat kobe bryant 3 steals gespielt?	welches team kobe bryant haben 3 steals auf	welches team hat kobe bryant haben 3 steals auf	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string team ) ) )
wie viele positionen	wie viele positionen	wie viele positionen	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.position ) ( string ! type ) ) ) )
wie viele umsätze hatte kobe bryant, als er drei blocks hatte?	wie viele umsätze kobe bryant hatte, als er drei blöcke hatte	wie viele umsätze hat kobe bryant haben, wenn er hatte drei blöcke	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_turnovers ) ) )
wie viele umsätze macht kobe bryant, wenn er 3 assists in der saison hat?	wie viele umsätze macht kobe bryant, wenn er 3 assists in der saison bekam	wie viele umsätze hat kobe bryant machen, wenn er hat 3 assists in der saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_turnovers ) ) )
welche spieler hatten mehr als 3 umsätze in allen jahreszeiten	welche spieler über alle saisons mehr als 3 umsätze hatten	was die spieler hatte mehr als 3 umsätze über alle jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in welcher saison hat kobe bryant 3 rebounds bekommen?	in welcher saison kobe bryant bekam 3 rebounds	in der saison hat kobe bryant 3 rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string season ) ) )
spieler, die im laufe einer saison keine drei steals haben	spieler, die im laufe einer saison nicht über drei steals verfügen	spieler, die nicht über drei steals im laufe der saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_steals ) ( string ! = ) ( number 3 steal ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele umsätze hat kobe bryant gemacht	wie viele umsätze hat kobe bryant	wie viele umsätze hat kobe bryant hatte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_turnovers ) ) )
spieler von los angeles lakers oder cleveland cavaliers	spieler von los angeles lakers oder cleveland cavaliers	spieler von den los angeles lakers oder die cleveland cavaliers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string = ) ( call SW.concat en.team.lakers en.team.cavaliers ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat in einer saison in mehr spielen gespielt als kobe bryant?	welcher spieler in mehr spielen über eine saison als kobe bryant gespielt	welche spieler gespielt mehr spiele im laufe einer saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler 3 oder weniger assists in dieser saison hatte	welcher spieler in dieser saison 3 oder weniger assists hatte	welche spieler hatten 3 oder weniger assists in dieser saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele assists für die gesamte saison hatte kobe bryant zusammen mit drei blocks für die gesamte saison?	wie viele allseason assists haben kobe bryant zusammen mit 3 allseasonblöcken	wie viele allsaison unterstützt hat kobe bryant haben zusammen mit 3 allseasonblöcke	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_assists ) ) )
welcher spieler hat die gleiche position wie kobe bryant?	welcher spieler die gleiche position wie kobe bryant hat	welcher spieler hat die gleiche position wie kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele rebounds erzielte kobe bryant im jahr 2004?	wie viele rebounds von kobe bryant im jahr 2004	wie viele rebounds wurden von kobe bryant im jahr 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_rebounds ) ) )
wer bekommt 3 oder mehr umsätze pro saison	wer 3 oder mehr umsätze pro saison erhält	wer 3 oder mehr umsätze für jede saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer führt das punkterennen in dieser saison bisher an?	wer in dieser saison bisher das punkterennen anführt	wer führt die punkterennen bisher in dieser saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, die in allen jahreszeiten mehr punkte als kobe bryant haben	spieler, die über alle saisons mehr punkte als kobe bryant haben	spieler, die mehr punkte als kobe bryant über alle jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele umsätze kobe bryant in der saison machte, spielte er für los angeles lakers	wie viele umsätze kobe bryant in der saison machte er für los angeles lakers gespielt	wie viele umsätze kobe bryant machte in der saison spielte er für die los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_turnovers ) ) )
für welches team hat kobe in seinen drei steamsaisons gespielt?	für welches team kobe während seiner drei dampfsaisons gespielt hat	welches team hat kobe spielen während seiner drei steam jahreszeiten	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string team ) ) )
welcher spieler hat in der saison so viele blocks gemacht wie kobe bryant	welcher spieler so viele blöcke über die saison wie kobe bryant	die spieler aus, wie viele blöcke, die über die saison von kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
nennen sie einen spieler, dessen punktzahl nicht drei war	benennen sie einen spieler, der eine punktzahl von nicht drei punkten konnte	name, den ein spieler mit einer punktzahl, die war nicht drei	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_points ) ( string ! = ) ( number 3 point ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele blöcke wurden von kobe bryant hergestellt, der zum los angeles lakers team gehörte?	wie viele blöcke wurden von kobe bryant gemacht, die zum los angeles lakers team gehörten	wie viele blöcke wurden von kobe bryant, der gehörte zu den los angeles lakers team	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_blocks ) ) )
anzahl der blöcke in einer saison von spieler kobe bryant, der 3 fouls in einer saison hat	anzahl der blöcke über eine saison von spieler kobe bryant, der 3 fouls über eine saison hat	anzahl der blöcke, die im laufe einer saison spieler kobe bryant, die 3 fouls über eine saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_blocks ) ) )
entweder 2004 oder 2010	entweder 2004 oder 2010	entweder 2004 oder 2010	( call SW.listValue ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) )
spieler, die mehr spiele in einer saison als die von kobe bryant spielen	spieler, die spieler mehr spiele in einer saison als die von kobe bryant	spieler, die spieler mehr spiele in einer saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler von spieler kobe bryants team	spieler aus spieler kobe bryants team	spieler vonspieler kobe bryants team	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat weniger rebound in allen jahreszeiten	welcher spieler in allen saisons weniger rebounds hat	welche spieler hat weniger rückstoß über alle jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler haben in einer saison die gleiche anzahl an fouls begangen wie kobe bryant?	welche spieler die gleiche anzahl von fouls wie kobe bryant in einer saison gemacht haben	die spieler haben die gleiche anzahl an fouls von kobe bryant in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
nenne einen spieler mit weniger als drei fouls	benennen sie einen spieler mit weniger als drei fouls	name, den ein spieler mit weniger als drei fouls	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele vorlagen hat kobe bryant über alle jahreszeiten	wie viele assists hat kobe bryant über alle jahreszeiten	wie viele assists hat kobe bryant haben über alle jahreszeiten	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_assists ) ) )
in welcher saison hat kobe bryant an insgesamt 3 spielen teilgenommen?	in welcher saison war es, dass kobe bryant an insgesamt 3 spielen teilnahm	in die saison war es, dass kobe bryant nahm in 3 spielen insgesamt	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string season ) ) )
welches team hat kobe bryant bekommen 3 rebounds in	welches team hat kobe bryant bekommen 3 rebounds in	welches team hat kobe bryant 3 rebounds in	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string team ) ) )
nennen sie einen spieler mit mindestens drei gespielten spielen	benennen sie einen spieler mit mindestens drei gespielten spielen	namen, die ein spieler mindestens drei spiele gespielt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele umsätze hat kobe bryant gespielt?	wie viele umsätze hat kobe bryant gespielt	wie viele umsätze hat kobe bryant gespielt	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) )
wie viele rebounds hat kobe bryant in dieser saison bisher gemacht?	wie viele rebounds hat kobe bryant in dieser saison gemacht	wie viele rebounds hat kobe bryant machte in dieser saison bisher	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) )
anzahl der fouls in einer saison von spieler kobe bryant, der point guard ist	anzahl der fouls über eine saison von spieler kobe bryant, der am point guard ist	anzahl der fouls über eine saison der spieler kobe bryant, wer das point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_fouls ) ) )
in welcher saison hat kobe 3 punkte erzielt	in welcher saison hat kobe 3 punkte erzielt	in der saison kobe erzielte 3 punkte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string season ) ) )
benenne andere spieler als point guard	nennen sie andere spieler als point guard	name spieler andere als point guard	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string ! = ) en.position.point_guard ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
anzahl der diebstähle in einer saison von spieler kobe bryant mit 3 umsätzen in einer saison	anzahl der steals über eine saison von spieler kobe bryant mit 3 umsätzen über eine saison	anzahl der steals im laufe einer saison spieler kobe bryant mit 3 umsätzen, die über eine saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_steals ) ) )
spieler mit fouls in einer saison nicht mehr als fouls in einer saison von spieler kobe bryant	spieler mit fouls über eine saison nicht mehr als fouls über eine saison von spieler kobe bryant	spieler mit fouls über einer saison nicht mehr als fouls im laufe einer saison spieler kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele fouls während der ganzen saison hatte kobe bryant als lakerer?	wie viele saisonweise fouls haben kobe bryant als la laker	wie viele die ganze saison fouls hat kobe bryant als la laker	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_fouls ) ) )
welche spieler hatten weniger als 3 spiele in allen jahreszeiten gespielt	welche spieler weniger als 3 spiele über alle saisons gespielt hatten	was die spieler weniger als 3 spiele gespielt, die über alle jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
nenne einen spieler mit nicht mehr als drei punkten pro saison	benennen sie einen spieler mit nicht mehr als drei punkten pro saison	name, den ein spieler mit nicht mehr als drei punkte pro saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat nicht weniger als 3 die ganze saison über assists	welcher spieler hat nicht weniger als 3 alle saison assists	welche spieler hat nicht weniger als 3 der ganzen saison unterstützt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
anzahl der diebstähle in einer saison von spieler kobe bryant mit 3 punkten in einer saison	anzahl der steals über eine saison von spieler kobe bryant mit 3 punkten über eine saison	anzahl der steals im laufe einer saison spieler kobe bryant 3 punkte über eine saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_steals ) ) )
welche spieler haben in einer saison 3 oder mehr fouls begangen?	welche spieler 3 oder mehr fouls in einer saison begangen haben	die spieler verpflichtet haben, 3 oder mehr fouls in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele karriereumsätze hat kobe bryant?	wie viele karriereumsätze kobe bryant hat	wie viele karriereumsätze hat kobe bryant hat	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_turnovers ) ) )
nennen sie den spieler, der in einer saison weniger stiehlt als der spieler kobe bryant	nennen sie den spieler mit weniger steals als spieler kobe bryant über eine saison	namen der spieler mit weniger klaut als spieler kobe bryant über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte nicht mehr als drei umsätze	welcher spieler nicht mehr als drei umsätze hatte	die spieler hatten nicht mehr als drei turnovers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit den geringsten umsätzen pro spiel während der saison	spieler mit den wenigsten umsätzen pro spiel während der saison	spieler mit den wenigsten turnovers pro spiel während der saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele rebounds hatte kobe bryant die ganze saison über?	wie viele rebounds in der gesamten saison haben kobe bryant	wie viele die ganze saison rebounds hat kobe bryant haben	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) )
welche position hat kobe bryant für die lakers gespielt?	welche position hat kobe bryant spielen für die lakers	welche position hat kobe bryant spielen für die lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string position ) ) )
spieler, der mehr spiele in einer saison gespielt hat spieler kobe bryant hat in einer saison gespielt	spieler, der mehr spiele über eine saison spieler kobe bryant gespielt hat, hat über eine saison gespielt	spieler, der gespielt hat, mehr spiele im laufe einer saison spieler kobe bryant gespielt hat, über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat die gleiche anzahl oder weniger rebounds als kobe bryant	der die gleiche anzahl oder weniger rebounds hatte als kobe bryant	wer hat die gleiche anzahl oder weniger rebounds als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte in einer saison mehr umsätze als kobe bryant?	welcher spieler in einer saison mehr umsatz als kobe bryant hatte	welche spieler hat mehr turnovers als kobe bryant während einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat mehr als 3 rebounds in jeder saison	welcher spieler mehr als 3 rebounds in jeder saison hat	was hat der spieler mehr als 3 rebounds in jeder saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
kobe bryants anzahl der spiele in der saison hatte er 3 abpraller	kobe bryants anzahl der spiele in der saison gespielt hatte er 3 rebounds	kobe bryants die anzahl der gespielten spiele der saison hatte er 3 rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_games_played ) ) )
für welche mannschaften hat kobe in seiner karriere gespielt?	wofür teams in seiner karriere gespielt haben	welche teams hat kobe spielte in seiner karriere	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string team ) ) )
welcher spieler hatte mehr als 3 rebounds?	welcher spieler mehr als 3 rebounds hatte	welche spieler hatten mehr als 3 rebounds	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat maximal 3 blöcke	welcher spieler hat maximal 3 blöcke	welcher spieler hat maximal 3 blöcke	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele steals während der gesamten saison hatte kobe bryant in 3 spielen?	wie viele die ganze saison steals haben kobe bryant in 3 spielen	wie viele die ganze saison stiehlt, hat kobe bryant haben in 3 spielen	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_steals ) ) )
wer hat weniger umsätze als kobe bryant gehabt	die weniger umsätze erzielt haben als kobe bryant	wer hat weniger turnovers als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler gehört zu kobe bryant steam?	welcher spieler zu kobe bryant steam gehört	die spieler gehört kobe bryant dampf	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in welchem jahr hatte kobe bryant drei steals?	in welchem jahr kobe bryant haben drei steals	in welchem jahr haben kobe bryant haben drei steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string season ) ) )
wer bekommt nicht mehr fouls jedes jahr als kobe bryant	wer bekommt nicht mehr fouls jedes jahr als kobe bryant	wer bekommt keine mehr fouls, die jedes jahr als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
entweder 2004 oder 2010	entweder 2004 oder 2010	entweder 2004 oder 2010	( call SW.listValue ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) )
wie viele umsätze hat kobe bryant in den jahreszeiten mit über 3 stehlen	wie viele umsätze hat kobe bryant in saisons mit über 3 steals	wie viele umsätze hat kobe bryant haben in den staffeln mit über 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_turnovers ) ) )
fouls von kobe bryant im jahr 2004	fouls von kobe bryant im jahr 2004	fouls von kobe bryant im jahr 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_fouls ) ) )
welcher spieler hatte drei oder mehr blöcke	welcher spieler drei oder mehr blöcke hatte	die spieler hatten drei oder mehr blöcke	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was spieler hatten 3 oder mehr vorlagen in allen jahreszeiten	welche spieler 3 oder mehr assists über alle saisons hatten	was die spieler hatten 3 oder mehr assists über alle jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, der mehr spiele in einer saison gespielt hat als spieler kobe bryant in einer saison	spieler, der mehr spiele über eine saison als spieler kobe bryant über eine saison gespielt hat	spieler, der gespielt hat, mehr spiele in einer saison als spieler kobe bryant über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hatte mehr punkte als kobe bryant	der mehr punkte als kobe bryant hatte	wer hatte mehr punkte als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler hatten die gleichen oder mehr blöcke als kobe bryant?	welche spieler die gleichen oder mehr blöcke als kobe bryant hatten	was die spieler hatten das gleiche oder mehr blöcke als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in welchem team ist kobe bryant?	welches team kobe bryant auf	welches team ist kobe bryant auf	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string team ) ) )
welche spieler für die lakerer oder kavaliere spielen	welche spieler für die lakers oder cavaliers spielen	welche spieler spielen für die lakers oder cavaliers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string = ) ( call SW.concat en.team.lakers en.team.cavaliers ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
nennen sie einen point guard oder einen stürmer	benennen sie einen point guard oder einen forward	namen ein point guard oder forward	( call SW.listValue ( call SW.concat en.position.point_guard en.position.forward ) )
welcher spieler hat für die wenigsten mannschaften gespielt?	welcher spieler für die wenigsten teams gespielt hat	welcher spieler spielte für die wenigsten teams	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string team ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele blöcke hatte kobe bryant in der saison?	wie viele blöcke haben kobe bryant über die saison	wie viele blöcke hast, kobe bryant haben im laufe der saison	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) )
welcher spieler hat in einer saison 3 blocks gemacht?	welcher spieler 3 blöcke über eine saison gemacht hat	was spieler aus 3 blöcken über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele rebounds hatte kobe bryant in der saison 2004?	wie viele rebounds hat spieler kobe bryant in der saison 2004	wie viele rebounds hat spieler kobe bryant haben während der saison 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_rebounds ) ) )
wie viele umsätze kobe bryant in der saison gemacht hat, hat er 3 fouls gemacht	wie viele umdrehungen kobe bryant in der saison machte er 3 fouls gemacht	wie viele umsätze kobe bryant machte in der saison machte er 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_turnovers ) ) )
im jahr 2004, wie viele fouls hat kobe gegen ihn bekommen	2004 wie viele fouls bekam kobe gegen ihn	im jahr 2004, wie viele fouls hat kobe gegen ihn bekommen	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_fouls ) ) )
was war die gesamtzahl der blöcke für kobe bryant in den jahreszeiten, in denen er nur drei fouls hatte	was war die gesamtzahl der blöcke für kobe bryant in jahreszeiten, wo er nur drei fouls hatte	was war die gesamtzahl der blöcke, die für kobe bryant in zeiten, wo hatte er nur drei fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_blocks ) ) )
in der saison hatte er 3 blocks kobe bryant spielte für welches team	in der saison hatte er 3 blöcke kobe bryant spielte für welches team	in der saison hatte er 3 blöcke kobe bryant spielte für das, was team	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string position ) ) )
spieler, die stürmer oder point guards sind	spieler, die vorwärts oder point guards sind	spieler, die nach vorne oder point guards	( call SW.listValue ( call SW.concat en.position.point_guard en.position.forward ) )
wie viele rebounds hatte kobe bryant, als er drei fouls begangen hatte?	wie viele rebounds hatte kobe bryant, als er drei fouls machte	wie viele rebounds hat kobe bryant haben, als er aus drei fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_rebounds ) ) )
für welches team kobe bryant in einer saison 3 assists gemacht hat	für welches team kobe bryant machte 3 assists über eine saison	für das team von kobe bryant machte 3 assists über eine saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string team ) ) )
anzahl der punkte in einer saison von spieler kobe bryant, der 3 vorlagen in einer saison hat	anzahl der punkte über eine saison von spieler kobe bryant, der 3 assists über eine saison hat	anzahl der punkte im laufe einer saison spieler kobe bryant, die 3 assists über eine saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_points ) ) )
wie viele umsätze gibt kobe bryant als point guard auf?	wie viele umsätze gibt kobe bryant als point guard auf	wie viele umsätze hat kobe bryant aufgeben als point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_turnovers ) ) )
für welches team hat kobe bryant drei spiele gespielt?	für welches team kobe bryant spielen drei spiele	für welches team hat kobe bryant drei spiele	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string team ) ) )
wie viele blöcke wurden von kobe bryant in 3 spielen gemacht	wie viele blöcke wurden von kobe bryant in 3 spielen gemacht	wie viele blöcke wurden von kobe bryant in 3 spiele	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_blocks ) ) )
wer hat die wenigsten rebounds gehabt	der die wenigsten rebounds hatte	wer hat die wenigsten rebounds	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele fouls hatte kobe bryant als point guard	wie viele fouls hatte kobe bryant als point guard	wie viele fouls hat kobe bryant als point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_fouls ) ) )
nennen sie einen spieler mit den wenigsten umsätzen in einer saison	benennen sie einen spieler mit den wenigsten umsätzen während einer saison	namen der spieler mit den wenigsten umsätzen, die während einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat am anfang der saison die meisten assists gemacht?	wer die meisten assists von beginn der saison gemacht hat	wer die meisten assists aus der saisonstart	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welches team hat kobe bryant als point guard gespielt?	welches team kobe bryant spielen als point guard	das team hat kobe bryant spielen als point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string team ) ) )
wie viele steals hat kobe bryant in seiner karriere bekommen?	wie viele steals hat kobe bryant in seiner karriere bekommen	wie viele steals hat kobe bryant bekam in seiner karriere	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) )
wie viele spiele hat kobe bryant gespielt?	wie viele spiele hat kobe bryant gespielt	wie viele spiele hat kobe bryant gespielt	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_games_played ) ) )
wie viele blöcke hatte kobe bryant in einem spiel, in dem er drei umsätze hatte?	wie viele blöcke hat kobe bryant in einem spiel, wo er drei umsätze hatte	wie viele blöcke hat kobe bryant in einem spiel haben, wo er hatte drei umsätze	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_blocks ) ) )
spieler, der im team am wenigsten punkte erzielt hat	spieler, der am wenigsten im team erzielte	spieler, erzielte die zumindest auf das team	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string team ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in der saison, in der er 3 gemacht hat, stiehlt er, in wie vielen spielen kobe bryant gespielt hat	in der saison, in der er 3 steals machte, wie viele spiele kobe bryant in	in der saison, in dem er 3 steals, wie viele spiele war kobe bryant in	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_games_played ) ) )
wie viele umsätze hatte kobe bryant, als er drei fouls begangen hatte?	wie viele umsätze hatte kobe bryant, als er 3 fouls hatte	wie viele umsätze hat kobe bryant haben wenn hatte er 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_turnovers ) ) )
wie viele punkte hat kobe bryant für die lakers?	wie viele punkte hat kobe bryant für die lakers	wie viele punkte hat kobe bryant für die lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_points ) ) )
welcher spieler hat weniger als 3 fouls gespielt?	welcher spieler weniger als 3 fouls gespielt hat	welcher spieler spielte weniger als 3 fouls	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat weniger umsätze als kobe bryant?	welcher spieler weniger umsätze erzielt als kobe bryant	welcher spieler hat kleinere anzahl von umsätzen als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
für welches team spielt kobe bryant point guard?	für welches team kobe bryant play point guard	welches team hat kobe bryant spielen point guard für	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string team ) ) )
wie viele spiele hatte kobe im laufe der saison drei mal geklaut?	wie viele spiele haben kobe in der saison drei steals gehabt	wie viele spiele hat kobe haben drei steals im laufe der saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_games_played ) ) )
was ist die anzahl der rebounds von kobe bryant im laufe der saison?	wie viele rebounds von kobe bryant über die saison	was ist die anzahl der rebounds von kobe bryant in der saison	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) )
in der saison, in der kobe bryants insgesamt 3 assists hatte, in welcher mannschaft war er?	während der saison, in der kobe bryants gesamtzahl der assists war 3, was team war er auf	während der saison, in der kobe bryants insgesamt anzahl der assists war 3, was team war er auf	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string team ) ) )
wie viele blöcke hat kobe bryant durchschnittlich in einer bestimmten saison	wie viele blöcke kobe bryant durchschnitt in einer bestimmten saison	wie viele blöcke hat kobe bryantdurchschnitt in einer saison	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) )
wie viele rebounds hat kobe bryant gehabt?	wie viele rebounds hat kobe bryant hatte	wie viele rebounds hat kobe bryant hatte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_rebounds ) ) )
in welcher saison hatte kobe bryant 3 umsätze?	in welcher saison kobe bryant haben 3 umsätze	in der saison hat kobe bryant haben die 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string season ) ) )
in der saison, in der kobe bryant drei spiele bestritt, hatte er wie viele umsätze	in der saison, in der kobe bryant 3 spiele spielte, wie viele umsätze er hatte	in der saison, in dem kobe bryant spielte 3 spiele, wie viele umsätze habe er	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_turnovers ) ) )
wie viele rebounds hatte kobe in spielen, in denen er drei punkte erzielte?	wie viele rebounds hatte kobe in spielen, in denen er drei punkte erzielte	wie viele rebounds hat kobe haben in den spielen wo er erzielte drei punkte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_rebounds ) ) )
in der saison, in der er 3 punkte erzielte, gab er die anzahl der abpraller an, für die er kobe bryant verantwortlich war	während der saison, in der er erzielte 3 punkte nennen die anzahl der rebounds, die er verantwortlich war für kobe bryant	während der saison, in der er erzielte 3 punkte nennen sie die anzahl der rebounds war er verantwortlich für kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_rebounds ) ) )
spieler, die die gleiche anzahl von umsätzen in einer saison hatten wie kobe bryant	spieler, die in einer saison die gleiche anzahl von umsätzen hatten wie kobe bryant	die spieler hatten die gleiche anzahl von umsätzen in einer saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte in dieser saison die meisten punkte?	welcher spieler die meisten punkte in dieser saison hatte	welche spieler hatte die meisten punkte in dieser saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit einer gesamtzahl von rebounds in einer saison von nicht mehr als drei	spieler mit einer gesamtanzahl von rebounds in einer saison nicht mehr als drei	spieler mit einer gesamtzahl der rebounds in einer saison, die nicht größer als drei	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler spielte 2004 oder 2010?	welcher spieler in 2004 oder 2010 spielte	was die spieler gespielt, die 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
während seiner saison bei den los angeles lakers hat kobe bryant wie viele punkte gesammelt	während seiner saison mit den los angeles lakers, wie viele punkte hat kobe bryant erworben	während seiner saison bei den los angeles lakers wie viele punkte hat kobe bryant erwerben	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_points ) ) )
in wie vielen spielen hat kobe bryant 3 steals bekommen?	in wie viele spiele hat kobe bryant bekommen 3 steals	in wie vielen spielen hat kobe bryant bekommen, 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_games_played ) ) )
welcher spieler hatte mehr rebounds als kobe bryant?	welcher spieler hatte mehr rebounds als kobe bryant	die spieler hatten mehr rebounds als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
finden sie den spieler mit der höchsten anzahl von blöcken auf ihrem konto in einer saison	finden sie den spieler mit der höchsten anzahl von blöcken zu seinem kredit in einer saison	finden der spieler mit der höchsten anzahl der blöcke, die zu seinem kredit in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
finde die jahreszeit, in der kobe bryant insgesamt 3 steals hatte	finden sie die saison, in der kobe bryant eine gesamtzahl von 3 steals hatte	finden sie die jahreszeit, in der kobe bryant hatte eine gesamtzahl von 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_steals ) ) )
in einer saison hat der spieler die meisten rebounds	über eine saison, in der der spieler die meisten rebounds hat	über eine saison, die spieler mit der größten anzahl von rebounds	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler haben in den gleichen jahreszeiten wie kobe bryant gespielt	was spieler in den gleichen spielzeiten wie kobe bryant gespielt haben	was die spieler haben gespielt während der gleichen jahreszeiten wie kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele blocks macht kobe bryant in der saison mit nur 3 fouls gegen ihn?	wie viele blöcke macht kobe bryant in der saison mit nur 3 fouls gegen ihn	wie viele blöcke hat kobe bryant in jahreszeiten mit nur 3 fouls gegen ihn	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_blocks ) ) )
wie viele fouls hat kobe bryant in der saison, wenn er 3 vorlagen hat?	wie viele fouls wird kobe bryant in den saisons haben, wenn er 3 assists bekam	wie viele fouls wird kobe bryant haben in den jahreszeiten, wenn er hat 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_fouls ) ) )
welcher spieler hat mindestens so viele punkte wie kobe bryant erzielt	welcher spieler mindestens so viele punkte erzielt hat wie kobe bryant	welcher spieler erzielt hat, der mindestens so viele punkte wie kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat mehr spiele in einer saison als kobe bryant gespielt	der mehr spiele in einer saison gespielt hat als kobe bryant	wer hat gespielt, mehr spiele in einer saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit den meisten diebstählen in einer saison	spieler mit den meisten steals in einer saison	spieler mit den meisten steals in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler hatten mehr als 3 blöcke	welche spieler mehr als 3 blöcke hatten	was haben die spieler hatten mehr als 3 blöcke	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele punkte hat kobe bryant in 3 spielen erzielt?	wie viele punkte hat kobe bryant in 3 spielen erzielt	wie viele punkte hat kobe bryant partitur in 3 spiele	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_points ) ) )
nennen sie einen spieler, der keine drei umsätze hatte	benennen sie einen spieler, der nicht über drei umsätze	name spieler, die nicht über drei turnovers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string ! = ) ( number 3 turnover ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele punkte hat kobe bryant durchschnittlich in spiel 3 in einer saison?	wie viele punkte hat kobe bryant im durchschnitt von spiel 3 in einer saison	wie viele punkte hat kobe bryant haben im durchschnitt von spiel 3 in einer saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_points ) ) )
wie viele rebounds erzielte kobe bryant in einer saison, in der er drei fouls begangen hatte?	wie viele rebounds kobe bryant in einer saison gemacht, in der er 3 fouls gemacht	wie viele rebounds, kobe bryant in einer saison, in der er 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_rebounds ) ) )
welcher spieler hat pro saison am meisten gestohlen?	welcher spieler die meisten steals pro saison hatte	welcher spieler hat bisher die meisten steals pro saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat so viele ganzjahressteals wie kobe bryant?	welcher spieler hat so viele allseason steals wie kobe bryant	welche spieler hat als viele allseasonstiehlt kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
hat kobe bryant 2004 gespielt?	hat kobe bryant spielen im jahr 2004	hat kobe bryant spielen im jahr 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string season ) ) )
saison des spielers kobe bryant, der in einer saison 3 punkte hat	saison des spielers kobe bryant, dessen hat 3 punkte über eine saison	saison der spieler kobe bryant, dessen hat 3 punkte über eine saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string season ) ) )
wie viele vorlagen hat kobe bryant nach 3 fouls bekommen?	wie viele assists bekam kobe bryant nach dem spiel 3 fouls	wie viele assists hat kobe bryant zu bekommen, nachdem du 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_assists ) ) )
wie viele umsätze erzielte kobe bryant während der saison?	wie viele umsätze haben kobe bryant während der saison	wie viele umsätze hat kobe bryant haben während der saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_turnovers ) ) )
wer hat die meisten blöcke in einer saison gehabt	der die meisten blöcke in einer saison hatte	wer hat die meisten blöcke in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat mehr als 3 rebounds gehabt	der mehr als 3 rebounds hatte	wer hat mehr als 3 rebounds	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele fouls in einer saison haben die los angeles lakers kobe bryant begangen?	wie viele fouls in einer saison haben die los angeles lakers kobe bryant begehen	wie viele fouls in einer saison haben die los angeles lakers, kobe bryant verpflichten	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_fouls ) ) )
wie viele blöcke wurden 2004 von kobe bryant hergestellt?	wie viele blöcke wurden von kobe bryant im jahr 2004 gemacht	wie viele blöcke wurden von kobe bryant im jahr 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_blocks ) ) )
welcher spieler hat die mindestanzahl an blöcken von kobe bryant?	welcher spieler die minimale anzahl von blöcken von kobe bryant hat	welcher spieler hat die minimale anzahl von blöcken, die von kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler spielen point guard oder forward?	welche spieler point guard oder forward spielen	was die spieler spielen, point guard oder forward	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.concat en.position.point_guard en.position.forward ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele spiele hat kobe bryant gespielt und dabei 3 fouls begangen?	wie viele spiele hat kobe bryant spielen machen 3 fouls	wie viele spiele hast, kobe bryant spielen macht 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_games_played ) ) )
für welche mannschaft hat kobe bryant im jahr 2004 gespielt?	für welches team kobe bryant 2004 spielte	welches team hat kobe bryant spielen im jahr 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string team ) ) )
welcher spieler hat nicht 3 rebounds erzielt?	welcher spieler nicht 3 rebounds erzielt hat	was die spieler nicht punkten 3 rebounds	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_rebounds ) ( string ! = ) ( number 3 rebound ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele fouls hat kobe bryant im jahr 2004 begangen?	wie viele fouls hat kobe bryant im jahr 2004 gemacht	wie viele fouls hat kobe bryant in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_fouls ) ) )
wie viele vorlagen erhielt kobe bryant, der zum los angelesteam gehörte	wie viele assists wurden von kobe bryant, der zum los angeles team gehörte	wie viele assists hat von kobe bryant, der gehörte zu den los angeles team	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_assists ) ) )
wie viele steals hatte kobe bryant mit drei umsätzen?	wie viele steals haben kobe bryant mit drei umsätzen	wie viele steals hat kobe bryant mit drei turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_steals ) ) )
wie viele diebstähle hatte kobe von point guards eines teams?	wie viele steals haben kobe von point guards aus jedem team	wie viele steals hat kobe von point guards aus jedem team	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_steals ) ) )
wie viele punkte erzielte kobe bryant nach 3 spielen?	wie viele punkte hat kobe bryant nach 3 spielen erzielt	wie viele punkte hat kobe bryantscore nach 3 spiele	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_points ) ) )
ein spieler mit mindestens 3 fouls	ein spieler mit mindestens 3 fouls	ein spieler mit mindestens 3 fouls	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
anzahl der vorlagen in einer saison von spieler kobe bryant, der in einer saison 3 spiele gespielt hat	anzahl der assists über eine saison von spieler kobe bryant, die 3 spiele über eine saison gespielt	anzahl der assists über die saison der spieler kobe bryant, die gespielt 3 spiele über eine saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_assists ) ) )
in der saison, in der er für 3 steals verantwortlich war, stand der name des teams auf kobe bryant	während der saison, in der er für 3 steals verantwortlich war, was der name des teams kobe bryant war auf	während der saison, in der er verantwortlich war für 3 steals, was war der name des teams, kobe bryant wurde auf	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string team ) ) )
wie viele saisonspiele hat kobe bryant als la laker gespielt?	wie viele saisonspiele spielte kobe bryant als la laker	wie viele saisonspiele hat kobe bryant spielen als la laker	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_games_played ) ) )
nennen sie die anzahl der assists, die kobe bryant während einer saison zuschreibt	nennen sie die anzahl der assists, die kobe bryant während einer saison zuzurechnen sind	nennen sie die anzahl der assists zuzurechnen kobe bryant während einer saison	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) )
wie viele rebounds während der gesamten saison hatte kobe bryant als los angeles laker	wie viele rebounds in der ganzen saison haben kobe bryant als los angeles laker	wie viele allseasonrebounds hat kobe bryant haben die los angeles laker	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_rebounds ) ) )
in welcher saison hat kobe bryant an 3 spielen teilgenommen?	in welcher saison hat kobe bryant an 3 spielen teilgenommen	in der saison hat kobe bryant teilnahme an 3 spiele	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_games_played ) ) )
welcher spieler hat die wenigsten positionen gespielt?	welcher spieler die wenigsten positionen gespielt hat	welcher spieler gespielt hat, die wenigsten positionen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string position ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele teams sind in der nba	wie viele teams in der nba sind	wie viele teams sind in der nba	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.team ) ( string ! type ) ) ) )
in welcher saison hat kobe bryant 3 vorlagen bekommen?	welche saison hat kobe bryant erhalten 3 assists	was saison hat kobe bryant 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string season ) ) )
finden sie die spieler, die in einer bestimmten saison nicht mehr als 3 spiele gespielt haben	finden sie die spieler, die spielzeit in nicht mehr als 3 spielen in einer bestimmten saison haben	diejenigen spieler, die ein spiel mal nicht mehr als 3 spiele in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, der in einer saison mehr stiehlt als spieler kobe bryant	spieler mit mehr steals über eine saison als die von spieler kobe bryant über eine saison	spieler, der mehr stiehlt über eine saison als spieler kobe bryant über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele punkte hat kobe bryant in jeder saison bei den los angeles lakers erzielt?	wie viele punkte hat kobe bryant in jeder saison mit den los angeles lakers erzielt	wie viele punkte hat kobe bryant erzielte in jeder saison mit den los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_points ) ) )
finden sie die saison, in der kobe bryant 3 fouls begangen hat, und notieren sie die anzahl der umsätze im gleichen zeitraum	finden sie die saison, in der kobe bryant 3 fouls begangen hat, und notieren sie die anzahl der umsätze im gleichen zeitraum	finden sie die jahreszeit, in der kobe bryant begangen, 3 fouls und notieren sie die anzahl der umsätze im gleichen zeitraum	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_turnovers ) ) )
welcher spieler ist nicht in der position eines point guard	welcher spieler nicht in der position des point guards ist	welcher spieler ist nicht in der position des point guard	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string ! = ) en.position.point_guard ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler spielt die position des point guard oder stürmer	welcher spieler die position des point guards oder vorwärts spielt	welcher spieler spielt auf der position des point guard oder forward	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.concat en.position.point_guard en.position.forward ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele steals hat kobe im jahr 04 bekommen?	wie viele steals hat kobe in 04 bekommen	wie viele steals hat kobe bekommen in 04	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_steals ) ) )
welcher spieler hat nicht mehr spiele gespielt als kobe bryant?	welcher spieler hat nicht mehr gespielt als kobe bryant	welcher spieler hat nicht mehr spiele gespielt als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was spieler mehr punkte als kobe bryant in einer saison gemacht	was spieler mehr punkte als kobe bryant über eine saison gemacht	was die spieler, die mehr punkte als kobe bryant über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele spiele hat kobe bryant in dieser saison drei mal gespielt?	wie viele spiele haben kobe bryant haben drei umsätze über die saison	wie viele spiele hat kobe bryant haben drei turnovers in der saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_games_played ) ) )
welche position hatte kobe bryant 3 vorlagen als	welche position hat kobe bryant haben 3 assists als	welche position hat kobe bryant haben 3 assists als	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string position ) ) )
anzahl der rebounds in einer saison von kobe bryant vom los angeles lakers team	anzahl der rebounds über eine saison von spieler kobe bryant von los angeles lakers team	anzahl der rebounds im laufe einer saison spieler kobe bryant von den los angeles lakers team	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_rebounds ) ) )
wie viele rebounds hatte kobe bryant in einer saison?	wie viele rebounds in einer saison hat kobe bryant	wie viele rebounds in einer saison hat kobe bryant haben	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) )
wie viele assists hatte kobe bryant, als er drei blocks hatte?	wie viele assists hat kobe bryant haben, als er 3 blöcke hatte	wie viele assists hat kobe bryant haben, wenn er hatte 3 blöcke	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_assists ) ) )
wie viele blöcke hatte spieler kobe bryant mit 3 vorlagen in dieser saison?	wie viele blöcke hat spieler kobe bryant mit 3 assists in dieser saison haben	wie viele blöcke hast spieler kobe bryant haben mit 3 assists mehr in dieser saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_blocks ) ) )
welche spieler waren in weniger als zwei teams?	welche spieler in weniger als zwei teams waren	die spieler wurden auf weniger als zwei teams	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string team ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit mehr rebounds in einer saison als der spieler kobe bryant in einer saison	spieler mit mehr rebounds über eine saison als die von spieler kobe bryant über eine saison	spieler mit mehr rebounds über eine saison als spieler kobe bryant über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
kobe bryant hat 3 steals bekommen	kobe bryant bekam 3 steals	kobe bryant bekam 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_steals ) ) )
spieler, die 2004 nicht gespielt haben	spieler, die 2004 nicht gespielt haben	spieler, die nicht spielen im jahr 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat 3 oder mehr stiehlt in einer saison	wer hat 3 oder mehr steals in einer saison	wer hat 3 oder mehr steals in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat mehr oder weniger als 3 stiehlt	der mehr oder weniger als 3 steals hatte	wer hat mehr oder weniger als 3 steals	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_steals ) ( string ! = ) ( number 3 steal ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in der gleichen saison, in der er 3 punkte gesammelt hat, wie viele umsätze kobe bryant gemacht hat	in der gleichen saison, die er erwarb 3 punkte, wie viele umsätze kobe bryant haben	während der gleichen saison erreichte er 3 punkte wie viele umsätze hat kobe bryant haben	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_turnovers ) ) )
für welches team hatte kobe bryant 3 steals?	welches team kobe bryant haben 3 steals für	das team hat kobe bryant haben 3 steals für	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string team ) ) )
spieler, die im selben team wie kobe bryant spielten	spieler, die im selben team wie kobe bryant gespielt haben	spieler, gespielt auf dem gleichen team wie kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat 3 oder weniger blöcke bekommen	der 3 oder weniger blöcke erhalten hat	wer hat sie bekommen 3 oder weniger blöcke	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat mindestens 3 spiele in einer saison gespielt	der mindestens 3 spiele in einer saison gespielt hat	wer hat der spieler mindestens 3 spiele in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat die meisten vorlagen	der die meisten assists hat	wer hat die meisten assists	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler 3 oder mehr hatte, stiehlt in dieser saison	welcher spieler in dieser saison 3 oder mehr steals hatte	welche spieler hatten 3 oder mehr steals in dieser saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele blöcke hatte kobe bryant, als er drei vorlagen hatte?	wie viele blöcke hatte kobe bryant, als er 3 assists hatte	wie viele blöcke hast, kobe bryant, als er hatte 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_blocks ) ) )
wer hat den rekord für stiehlt	wer hat den rekord für steals	wer hat den rekord für stiehlt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit vorlagen über eine saison nicht weniger als die des spielers kobe bryant	spieler mit assists über eine saison nicht weniger als die von spieler kobe bryant	spieler mit beiständen im laufe einer saison nicht weniger als, dass der spieler kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele fouls hat kobe bryant bei point guard?	wie viele fouls hat kobe bryant am point guard	wie viele fouls hat kobe bryant haben auf point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_fouls ) ) )
welcher spieler durchschnittlich mehr umsätze pro saison als kobe bryant	welcher spieler durchschnittlich mehr umsätze pro saison als kobe bryant	die spieler durchschnittlich mehr umsätze in jeder saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
saison 2004 von kobe bryant	2004 saison von kobe bryant	2004 die saison von kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string season ) ) )
welche spieler sind point guards oder stürmer	welche spieler point guards oder forwards sind	welche spieler sind point guards oder forwards	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.concat en.position.point_guard en.position.forward ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat so viele fouls wie kobe bryant	welcher spieler so viele fouls hat wie kobe bryant	welcher spieler hat wie viele fouls von kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat die meisten blöcke in einer saison?	welcher spieler die meisten blöcke in einer saison hat	welche spieler hat die meisten blöcke in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wann hat kobe bryant 3 assists in der gesamten saison?	wann hat kobe bryant 3 alle saison assists	wann hat kobe bryant haben die 3 die ganze saison unterstützt	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_assists ) ) )
welche spieler haben so viele rebounds wie kobe bryant in einer saison?	welche spieler so viele rebounds wie kobe bryant über eine saison haben	die spieler haben so viele rebounds wie kobe bryant über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
anzahl der umsätze in einer saison von spieler kobe bryant aus der saison 2004	anzahl der umsätze über eine saison von spieler kobe bryant ab saison 2004	anzahl der umsätze über eine saison der spieler kobe bryant aus der saison 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_turnovers ) ) )
welche position ist kobe bryant	welche position ist kobe bryant	welche position ist kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string position ) ) )
spieler, der in allen spielzeiten die wenigsten fouls hat	spieler, der die wenigsten fouls über alle jahreszeiten hat	spieler, der die wenigsten fouls über alle jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele punkte hat kobe bryant in einer saison bekommen	wie viele punkte hat kobe bryant in einer saison bekommen	wie viele punkte hat kobe bryant bekommen in einer saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_points ) ) )
wie viele spiele hat kobe bryant in der saison 2004 gespielt?	wie viele spiele hat kobe bryant in der saison 2004 gespielt	wie viele spiele hast, kobe bryant spielen in der saison 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_games_played ) ) )
für welches team hat kobe bryant 3 punkte erzielt?	für welches team kobe bryant 3 punkte erzielt hat	welches team hat kobe bryant punktzahl 3 punkte für	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string team ) ) )
welche jahreszeit hatte kobe bryant 3 umsätze?	welche saison hat kobe bryant haben 3 umsätze	was saison hat kobe bryant haben die 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string season ) ) )
wie viele spiele bestritt kobe bryant in der saison, in der er nur drei abpraller hatte?	was war die gesamtzahl der spiele von kobe bryant in der saison gespielt, wo er nur drei rebounds hatte	was war die gesamtzahl der gespielten spiele von kobe bryant in der saison, wo hatte er nur drei rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_games_played ) ) )
wie lautet die nummer der position?	was ist die nummer der position	was ist die nummer der position	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.position ) ( string ! type ) ) ) )
wie viele steals hatte kobe bryant, als er drei punkte erzielte?	wie viele steals hatte kobe bryant, als er drei punkte erzielte	wie viele steals hat kobe bryant haben, wenn er erzielte drei punkte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_steals ) ) )
spieler, der in einer saison die gleichen rebounds hat wie der spieler kobe bryant in einer saison	spieler, der die gleichen rebounds über eine saison wie die von spieler kobe bryant über eine saison hat	spieler, der hat die gleichen rebounds über eine saison als spieler kobe bryant über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_rebounds ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welches jahr 2004 oder 2010	jahr 2004 oder 2010	die im jahr 2004 oder 2010	( call SW.listValue ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) )
wer hat mehr als 3 umsätze in dieser saison	wer in dieser saison mehr als 3 umsätze erzielt hat	wer mehr als 3 umsätze in dieser saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
finden sie die spieler, die für 3 oder weniger fouls in einer bestimmten saison verantwortlich sind	finden sie die spieler verantwortlich für 3 oder weniger fouls in einer bestimmten saison	finden die spieler verantwortlich, für 3 oder weniger fouls in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
während des jahres spielte er für die los angeles lakers, wie viele fouls kobe bryant hatte	im laufe des jahres spielte er für die los angeles lakers, wie viele fouls haben kobe bryant haben	während des jahres spielte er für die los angeles lakers wie viele fouls hat kobe bryant haben	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_fouls ) ) )
wie viele fouls hatte kobe bryant in der saison, in der er point guard spielte?	wie viele fouls hat kobe bryant in der saison, in der er spielte point guard	wie viele fouls hat kobe bryant in der saison, in der er spielte point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_fouls ) ) )
für die saison, in der er für 3 blocks verantwortlich war, wie viele fouls hat kobe bryant begangen	für die saison, in der er für 3 blöcke verantwortlich war, wie viele fouls kobe bryant begehen	für die saison, in der er verantwortlich war für 3 blocks, wie viele fouls hat kobe bryant verpflichten	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_fouls ) ) )
wie viele vorlagen hat kobe bryant in einer saison mit mehr als 3 gestohlen?	wie viele assists hat kobe bryant machen in einer saison mit steals über 3	wie viele assists hat kobe bryant in einer saison mit über 3 stiehlt	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_assists ) ) )
wie viele blöcke hat kobe bryant in der saison mit genau 3 vorlagen gemacht?	wie viele blöcke hat kobe bryant in saisons mit genau 3 assists gemacht	wie viele blöcke hat kobe bryant machte in jahreszeiten mit genau 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_blocks ) ) )
in welcher saison hat kobe bryant 3 fouls begangen?	in welcher saison kobe bryant beging 3 fouls	in der saison hat kobe bryant verpflichten, 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string season ) ) )
kobe bryant prallt über alle jahreszeiten als point guard ab	rebounds von kobe bryant über alle saisons als point guard	rebounds von kobe bryant über alle jahreszeiten als point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_rebounds ) ) )
welcher spieler hat mehr als 3 umsätze in jeder saison, die sie gespielt haben	welcher spieler mehr als 3 umsätze in jeder saison hat, die er gespielt hat	welcher spieler hat mehr als 3 umsätze in jeder saison sie gespielt haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit maximal 3 stiehlt in einer saison	spieler mit maximal 3 steals über eine saison	spieler mit maximal 3 steals über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler hatten mehr blöcke als kobe bryant	was spieler hatten mehr blöcke als kobe bryant	was die spieler haben mehr blöcke als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in welcher position hat kobe bryant während der saison nur drei spiele gespielt?	welche position spielte kobe bryant nur drei spiele während der saison	welche position hat kobe bryant spielen für nur drei spiele während der saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string position ) ) )
team von spieler kobe bryant, der 3 fouls in einer saison hat	team von spieler kobe bryant, der 3 fouls über eine saison hat	teamspieler kobe bryant, die 3 fouls über eine saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string team ) ) )
spieler, dessen fouls in einer saison nicht 3 sind	spieler, dessen fouls nicht 3 über eine saison sind	spieler, deren fouls nicht 3 über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string ! = ) ( number 3 foul ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat 3 oder weniger fouls	wer hat 3 oder weniger fouls	wer hat 3 oder weniger fouls	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
die anzahl der spiele, die die ganze saison über gespielt wurden, entsprach nicht weniger als kobe bryants	welche spieler anzahl der spiele gespielt ganze saison gleich nicht weniger als kobe bryants	was die spieler anzahl der gespielten spiele alle saisonstanden nicht weniger als kobe bryants	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat mehr blöcke pro saison als kobe bryant	wer hat mehr blöcke pro saison als kobe bryant	wer hat mehr blöcke pro saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
anzahl der rebounds in einer saison von spieler kobe bryant mit 3 umsätzen in einer saison	anzahl der rebounds über eine saison von spieler kobe bryant mit 3 umdrehungen über eine saison	anzahl der rebounds im laufe einer saison spieler kobe bryant mit 3 umsätzen, die über eine saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_rebounds ) ) )
spieler, die die gleichen oder weniger fouls haben als kobe bryant	spieler, die die gleichen oder weniger totale fouls wie kobe bryant haben	spieler, die die gleiche oder weniger gesamtzahl der fouls von kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele umsätze erzielte kobe bryant mit drei rebounds während der saison?	wie viele umsätze hat kobe bryant, die drei rebounds hatte während der saison	wie viele umsätze hat kobe bryant, der hatte drei rebounds haben während der saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_turnovers ) ) )
welcher spieler ist auf point guard oder forward position	welcher spieler sich am point guard oder in der vorwärtsposition befindet	welcher spieler ist auf point guard oder forwardposition	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.concat en.position.point_guard en.position.forward ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte maximal 3 vorlagen	welcher spieler maximal 3 assists hatte	welcher spieler hatte maximal 3 assists	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
für welche mannschaft hat kobe bryant gespielt und dabei 3 vorlagen pro saison gemacht?	für welches team kobe bryant spielen, während 3 assists pro saison	welches team hat kobe bryant spielen während 3 assists pro saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string team ) ) )
spieler, der nie 3 spiele in einer saison gespielt hat	spieler, der noch nie 3 spiele über eine saison gespielt hat	spieler, die nie gespielt 3 spiele über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_games_played ) ( string ! = ) ( number 3 game ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in welchem team hat kobe bryant 3 umsätze erzielt?	welches team kobe bryant hat 3 umsätze auf	welches team hat kobe bryant haben 3 umsätze auf	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string team ) ) )
wie viele umsätze hat kobe bryant in der saison mit mehr als 3 spielen im dienst aufgegeben?	wie viele umsätze hat kobe bryant in saisons mit mehr als 3 pflichtspielen aufgegeben	wie viele umsätze hat kobe bryant aufgegeben in jahreszeiten mit mehr als 3 auf dutyspiele	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_turnovers ) ) )
kobe bryant hatte letztes jahr wie viele vorlagen	kobe bryant endete mit wie viele assists in der letzten saison	kobe bryant landete mit, wie viele assists der letzten saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_assists ) ) )
wie viele spiele als kobe bryant für die la lakers gespielt	wie viele spiele als kobe bryant für die la lakers gespielt	wie viele spiele kobe bryant spielte für die la lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_games_played ) ) )
welcher spieler hat die wenigsten fouls pro saison?	welcher spieler die wenigsten fouls pro saison hat	welcher spieler hat die wenigsten fouls pro saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat in dieser saison in den meisten spielen gespielt?	welcher spieler in den meisten spielen in dieser saison gespielt hat	welche spieler spielten in den meisten partien in dieser saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele rebounds hatte kobe bryant für die los angeles lakers?	wie viele rebounds hat kobe bryant für die los angeles lakers	wie viele rebounds hat kobe bryant haben die los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_rebounds ) ) )
wie viele punkte hat kobe bryant in der gesamten saison gesammelt?	wie viele punkte hat kobe bryant über die gesamte saison erworben	wie viele punkte hat kobe bryant erwerben, die über die gesamte saison	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) )
wie viele spiele hat kobe bryant gespielt?	wie viele spiele hat kobe bryant gespielt	wie viele spiele hat kobe bryant gespielt	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_games_played ) ) )
kobe bryant spiel point guard	kobe bryant play point guard	kobe bryant spielen point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string position ) ) )
welcher spieler hat in einer saison mehr als 3 blocks gemacht?	welcher spieler mehr als 3 blöcke über eine saison gemacht hat	was spieler, die mehr als 3 blöcke über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat in einer saison so viel gestohlen wie kobe bryant?	welcher spieler so viel steals hat wie kobe bryant über eine saison gemacht	welche spieler hat so viel stiehlt kobe bryant in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_steals ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
anzahl der blöcke in einer saison von spieler kobe bryant, der 3 punkte in einer saison hat	anzahl der blöcke über eine saison von spieler kobe bryant, die 3 punkte über eine saison hat	anzahl der blöcke, die im laufe einer saison spieler kobe bryant, die 3 punkte über eine saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_blocks ) ) )
welcher spieler führt kobe bryant für rebounds pro saison	welcher spieler kobe bryant für rebounds pro saison führt	welcher spieler führt kobe bryant für rebounds pro saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele assists hatte kobe bryant in einer saison?	wie viele assists hat kobe bryant während einer saison	wie viele assists hat kobe bryant haben während einer saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_assists ) ) )
wie viele blöcke hatte kobe bryant, als er drei assists hatte?	wie viele blöcke hatte kobe bryant, als er drei assists hatte	wie viele blöcke hast, kobe bryant, als er hatte drei assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_blocks ) ) )
wer hat höchstens 3 vorlagen insgesamt in einer saison	wer hat höchstens 3 assists insgesamt in einer saison	wer hat die meisten 3 assists, insgesamt in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, die in einer saison mehr vorlagen hatten als kobe bryant	spieler, die eine größere anzahl von assists in einer saison als kobe bryant hatte	spieler, die hatte eine größere anzahl von assists in einer saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit nicht weniger als 3 punkten in einer saison	spieler mit nicht weniger als 3 punkten über eine saison	spieler mit nicht weniger als 3 punkte über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele steals bekommt kobe bryant in einer saison, in der er 3 punkte hat?	wie viele steals bekommt kobe bryant in einer saison, wenn er 3 punkte bekam	wie viele steals hat kobe bryant in einer saison, wenn hes bekam 3 punkte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_steals ) ) )
wie viele rebounds hat kobe bryant in 3 spielen geschafft?	wie viele rebounds hat kobe bryant in 3 spielen bekommen	wie viele rebounds hat kobe bryant holen in 3 spielen	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_rebounds ) ) )
der in dieser saison bisher weniger als 3 spiele bestritten hat	der in dieser saison bisher weniger als 3 spiele bestritten hat	wer gespielt hat, weniger als 3 spiele in dieser saison bisher	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_games_played ) ( string ! = ) ( number 3 game ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was war das team von kobe bryant im jahr 2004?	was war das team von kobe bryant im jahr 2004	was war das team von kobe bryant im jahr 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string team ) ) )
was spieler hatten gleiche oder mehr vorlagen als kobe bryant in allen jahreszeiten	welche spieler über alle saisons gleich oder mehr assists als kobe bryant hatten	was die spieler hatten, gleich oder mehr assists als kobe bryant über alle jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
kobe bryants erholt sich für die saison	kobe bryants rebounds für die saison	kobe bryants rebounds für die saison	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) )
wie viele all season points hatte kobe bryant als point guard	wie viele alle saisonpunkte hat kobe bryant als point guard	wie viele die ganze saison punkte hat kobe bryant als point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_points ) ) )
spieler, der die gleiche position wie kobe bryant spielt	spieler, der die gleiche position wie kobe bryant spielt	spieler, der spielt die gleiche position wie kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
nennen sie die spieler, die für weniger als 3 blöcke in einer saison verantwortlich sind	nennen sie die spieler, die für weniger als 3 blöcke in einer saison verantwortlich sind	namen sich die verantwortlichen akteure für weniger als 3 blocks in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele rebounds hatte kobe bryant in dieser saison?	wie viele rebounds hat kobe bryant in dieser saison	wie viele rebounds hat kobe bryant in dieser saison	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) )
in welcher jahreszeit hat kobe bryant durchschnittlich 3 blöcke	in welcher saison kobe bryant durchschnittlich 3 blöcke	in der saison hat kobe bryant durchschnittlich 3 blöcke	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string season ) ) )
wie wurden irgendwelche diebstähle von kobe bryant?	wie irgendwelche steals kobe bryant bekommen	wie jeder stiehlt, hat kobe bryant zu bekommen	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) )
wie viele fouls hat kobe bryant nach 3 vorlagen gespielt?	wie viele fouls wurden von kobe bryant gespielt, nachdem er 3 assists bekommen hatte	wie viele fouls wurden gespielt von kobe bryant nach dem aufstehen 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_fouls ) ) )
in welcher position konnte kobe 3 vorlagen bekommen?	in welcher position war kobe in der lage, 3 assists zu erhalten	in welcher position war kobe in der lage zu bekommen, 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string position ) ) )
spieler, dessen anzahl an blöcken in einer saison geringer ist als die des spielers kobe bryant in einer saison	spieler, dessen anzahl von blöcken über eine saison ist weniger als die von spieler kobe bryant über eine saison	spieler, deren anzahl der blöcke, die über eine saison weniger, als dass der spieler kobe bryant über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was die spieler die ganze saison über unterstützen, sind über 3	was spieler die ganze saison assists insgesamt über 3	was die spieler die ganze saison unterstützt beliefen sich auf über 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
gibt es spieler, deren gesamtzahl an vorlagen in einer bestimmten saison höchstens 3 beträgt?	gibt es spieler, deren gesamtzahl der assists in einer bestimmten saison höchstens 3 entspricht	gibt es spieler, deren gesamtanzahl der assists in einer saison entspricht höchstens 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat mehr ganzjährig stiehlt als kobe bryant	welcher spieler hat mehr allseason steals als kobe bryant	was hat der spieler mehr allseasonstiehlt, als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat die gleiche anzahl von spielen wie kobe bryant gespielt	der die gleiche anzahl von spielen gespielt hat wie kobe bryant	wer gespielt hat, die gleiche anzahl von spielen wie kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_games_played ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat weniger als 3 spiele in dieser saison gespielt	der in dieser saison weniger als 3 spiele gespielt hat	wer gespielt hat, weniger als 3 spiele in dieser saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, die in allen jahreszeiten mehr stehlen als kobe bryant	spieler, die über alle saisons mehr steals als kobe bryant haben	spieler, die mehr stiehlt, als kobe bryant über alle jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler hatten 3 oder weniger stiehlt in einer saison	welche spieler 3 oder weniger steals über eine saison hatten	die spieler hatten 3 oder weniger stiehlt über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele umsätze erzielte kobe, als er mit drei fouls in der saison spielte?	wie viele turnovers kobe, wenn mit drei fouls über die saison zu spielen	wie viele umsätze hat kobe beim spiel mit drei fouls in der saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_turnovers ) ) )
namen spieler, die im jahr 2004 nicht gespielt haben	nennen sie spieler, die 2004 nicht gespielt haben	name spieler, die nicht spielen im jahr 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele umsätze hat kobe bryant nach 3 stehlen erzielt	wie viele umsätze hat kobe bryant bekommen, nachdem er 3 steals bekommen hat	wie viele umsätze hat kobe bryant bekommt nach dem aufstehen 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_turnovers ) ) )
spieler, die eine oder zwei verschiedene positionen einnehmen	spieler, die ein oder zwei verschiedene positionen plattieren	spieler, die plat ein oder zwei verschiedenen positionen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
anzahl der punkte in einer saison von spieler kobe bryant, der am point guard ist	anzahl der punkte über eine saison von spieler kobe bryant, der am point guard ist	anzahl der punkte im laufe einer saison spieler kobe bryant, wer das point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_points ) ) )
in welchem jahr hat kobe bryant gespielt?	in welchem jahr spielte kobe bryant	in welchem jahr haben kobe bryant spielen	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ) )
was ist der name eines spielers mit weniger umsätzen pro saison als kobe bryant?	was der name eines spielers mit weniger umsätzen pro saison als kobe bryant	was ist der name von einem spieler mit weniger turnovers pro saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
für den zeitraum, in dem kobe bryant point guard war, nenne die anzahl der abpraller, die er in dieser saison hatte	für den zeitraum, in dem kobe bryant point guard war, nennen sie die anzahl der rebounds, die er in dieser saison hatte	für den zeitraum, in dem kobe bryant war point guard name der menge an rebounds hatte er in dieser saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_rebounds ) ) )
spieler mit nicht mehr blöcken in einer saison als spieler kobe bryant in einer saison	spieler mit nicht mehr blöcken über eine saison als spieler kobe bryant über eine saison	spieler mit nicht mehr blöcke über eine saison als spieler kobe bryant über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele saisons hat kobe bryant gespielt?	wie viele spielzeiten haben kobe bryant gespielt	wie viele jahreszeiten haben kobe bryant gespielt	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ) )
saison des spielers kobe bryant, der über eine saison 3 rebounds hat	saison von spieler kobe bryant, der 3 rebounds über eine saison hat	saison der spieler kobe bryant, die 3 rebounds über eine saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string season ) ) )
wie viele rebounds hatte kobe bryant, als er 3 steals hatte?	wie viele rebounds hatte kobe bryant, als er 3 steals hatte	wie viele rebounds hat kobe bryant haben, wenn er hatte 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_rebounds ) ) )
wie viele rebounds hatte kobe bryant, der in drei spielen spielte?	wie viele rebounds hat kobe bryant haben, die in drei spielen gespielt haben	wie viele rebounds hat kobe bryant haben die gespielt in drei spielen	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_rebounds ) ) )
in welchem jahr hat kobe bryant drei spiele gespielt?	in welchem jahr spielte kobe bryant drei spiele	in welchem jahr haben kobe bryant drei spiele	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_games_played ) ) )
welcher spieler ist der vielseitigste und spielt die meisten positionen	welcher spieler der vielseitigste ist und die meisten positionen spielt	welcher player ist der vielseitigste und, spielt die anzahl der positionen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string position ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat die mindestanzahl an spielen gespielt?	welcher spieler die mindestanzahl von spielen gespielt hat	welcher spieler gespielt hat, die minimale anzahl der spiele	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat maximal 3 umsätze	welcher spieler maximal 3 umsätze erzielt hat	welcher spieler hat maximal 3 turnovers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele fouls hatte kobe bryant, als er drei umsätze hatte?	wie viele fouls hatte kobe bryant, als er 3 umsätze hatte	wie viele fouls hat kobe bryant haben wenn er sich 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_fouls ) ) )
spieler, der eine mannschaft hat	spieler, der ein team hat	spieler, die ein team	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string team ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in welcher saison hatte kobe bryant drei steals?	in welcher saison kobe bryant haben drei steals	in der saison hat kobe bryant haben drei steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string season ) ) )
welcher spieler hatte in dieser saison weniger umsätze als kobe bryant?	welcher spieler in dieser saison weniger umsatz hatte als kobe bryant	welche spieler hatten weniger umsätze als kobe bryant in dieser saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat die mindestanzahl von umsätzen gemacht	welcher spieler die mindestanzahl von umsätzen erzielt hat	welcher spieler hat die minimale anzahl der umsätze	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
finden sie den spieler, der in derselben saison die gleiche oder eine geringere anzahl von vorlagen gemacht hat wie kobe bryant	finden sie den spieler, der die gleiche oder eine geringere anzahl von assists in der gleichen saison wie kobe bryant gemacht	finden die spieler, die aus der gleichen oder einer geringeren anzahl von assists in einer saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was ist die anzahl der umsätze von kobe bryant, die 3 punkte in der saison gemacht	wie viele umsätze von kobe bryant, die 3 punkte über die saison gemacht	was ist die anzahl der umsätze von kobe bryant, die 3 punkte über die saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_turnovers ) ) )
in wie vielen spielen hat kobe bryant 3 fouls begangen?	in wie vielen spielen machte kobe bryant 3 fouls	in wie vielen spielen hat kobe bryant machen 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_games_played ) ) )
wie viele punkte hat kobe bryant in einer saison gemacht, in der er 3 plus rebounds gemacht hat?	wie viele punkte hat kobe bryant in einer saison gemacht, als er 3 plus rebounds gemacht hat	wie viele punkte hat kobe bryant in einer saison, wenn er 3 rebounds plus	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_points ) ) )
welcher spieler hatte die gleiche anzahl von vorlagen wie kobe bryant?	welcher spieler die gleiche anzahl an assists wie kobe bryant hatte	welche spieler hatten die gleiche menge an assists von kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele umsätze hatte kobe während der saison im durchschnitt mit drei assists	wie viele umsätze kobe während der saison hatte er durchschnittlich drei assists	wie viele umsätze hat kobe haben während der saison er durchschnittlich drei assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_turnovers ) ) )
wie viele steals hatte kobe bryant, als er 3 blocks hatte?	wie viele steals hatte kobe bryant, als er 3 blöcke hatte	wie viele steals hat kobe bryant haben, wenn er hatte 3 blöcke	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_steals ) ) )
wie viele vorlagen hat kobe bryant gehabt	wie viele assists hat kobe bryant hatte	wie viele assists hat kobe bryant hatte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_assists ) ) )
hat kobe bryant durchschnittlich 3 fouls und 3 blocks pro spiel über eine saison	hat kobe bryant durchschnittlich 3 fouls und 3 blöcke pro spiel über eine saison	hat kobe bryant durchschnittlich 3 fouls und 3 blocks pro spiel im laufe einer saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_blocks ) ) )
wie viele blöcke hat kobe bryant zum point guard gemacht?	wie viele blöcke hat kobe bryant zum point guard gemacht	wie viele blöcke hat kobe bryant machte point guard spielen	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_blocks ) ) )
welcher spieler hatte die wenigsten umsätze in dieser saison?	welcher spieler die wenigsten umsätze in dieser saison hatte	welche spieler hatten die wenigsten turnovers in dieser saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele fouls hatte kobe bryant in dieser saison?	wie viele fouls hat kobe bryant in dieser saison	wie viele fouls hat kobe bryant in dieser saison	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) )
für welche mannschaft hat kobe bryant gespielt, während er nur 3 fouls in einer saison hatte?	für welches team kobe bryant spielte, während nur 3 fouls in einer saison	welches team hat kobe bryant spielen, während sie mit nur 3 fouls in einer saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string team ) ) )
wie viele blöcke hatte kobe bryant, als er 3 punkte hatte?	wie viele blöcke hatte kobe bryant, als er 3 punkte hatte	wie viele blöcke hast, kobe bryant, als er hatte 3 punkte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_blocks ) ) )
welche spieler mit 13 rebounds im laufe der saison gemacht haben	welche spieler bei 13 rebounds in der saison	die spieler kamen auf 13 rebounds in der saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele spiele bestritt kobe bryant, der im laufe der saison drei rebounds erzielte?	was ist die anzahl der spiele von kobe bryant gespielt, die 3 rebounds über die saison gemacht	was ist die anzahl der gespielten spiele von kobe bryant, der aus 3 rebounds in der saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_games_played ) ) )
wie viele assists hat kobe bryant in einer saison insgesamt für point guard gespielt?	was war die gesamtzahl der assists über eine saison für kobe bryant spielen point guard	was war die gesamtzahl der assists über die saison für kobe bryant zu spielen point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_assists ) ) )
wie viele spiele hat kobe genau 3 umsätze gegeben	wie viele spiele hat kobe genau 3 umsätze aufgegeben	wie viele spiele hat kobe gegeben, bis genau 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_games_played ) ) )
wie viele blöcke macht kobe bryant normalerweise, wenn er bereits 3 hat?	wie viele blöcke macht kobe bryant in der regel, wenn er bereits 3	wie viele blöcke hat kobe bryant in der regel machen, wenn er schon 3	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_blocks ) ) )
wie viele spieler haben weniger oder mehr als 3 umsätze erzielt?	wie viele spieler weniger oder mehr als 3 umsätze erworben haben	wie viele spieler erworben, mehr oder weniger, die 3 umsätze	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string ! = ) ( number 3 turnover ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat in den meisten spielen gespielt?	welcher spieler in den meisten spielen gespielt hat	welcher spieler gespielt hat, die meisten spiele	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler hatten mehr als drei stiehlt in allen jahreszeiten	welche spieler mehr als drei steals über alle jahreszeiten hatten	was die spieler hatte mehr als drei steals über alle jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit der anzahl der blöcke in einer saison als der von spieler kobe bryant	spieler mit anzahl blöcken über eine saison als spieler kobe bryant	spieler mit der anzahl der blöcke, die über eine saison als spieler kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_blocks ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
anzahl der vorlagen in einer saison von spieler kobe bryant, dessen team los angeles lakers ist	anzahl der assists über eine saison von spieler kobe bryant, dessen team ist los angeles lakers	anzahl der assists über die saison der spieler kobe bryant, dessen team los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_assists ) ) )
das ist die mannschaft von kobe bryant, die 3 spiele gespielt hat	das ist das team von kobe bryant, der 3 spiele gespielt hat	das ist das team von kobe bryant, spielte 3 spiele	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string team ) ) )
spieler mit weniger als 3 punkten in einer saison	spieler mit weniger als 3 punkten über eine saison	spieler mit weniger als 3 punkte über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat weniger als drei punkte erzielt?	welcher spieler weniger als drei punkte erzielt hat	welcher spieler erzielt hat, weniger als drei punkte	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
für die saison, die die gleiche anzahl von spielen wie kobe bryant spielte	für die saison, die die gleiche anzahl von spielen wie kobe bryant gespielt	für die saison spielte die gleiche anzahl von spielen wie kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_games_played ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
nennen sie den spieler, der die meisten teams vertreten hat	benennen sie den spieler, der die meisten teams repräsentierte	namen der spieler, der die meisten teams vertreten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string team ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
beachten sie die spieler, die in einer saison insgesamt mehr als 3 punkte gesammelt haben	beachten sie, dass spieler, die in einer saison insgesamt mehr als 3 punkte gesammelt haben,	hinweis: die spieler, die rückstellungen insgesamt von punkten in einer saison insgesamt mehr als 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
kobe bryant hatte 3 umsätze	kobe bryant hatte3 umsätze	kobe bryant had3 umsätze	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_turnovers ) ) )
welcher spieler hat mehr rebounds pro saison als kobe bryant	welcher spieler mehr rebounds pro saison hat als kobe bryant	welcher spieler hat mehr rebounds pro saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat mehr oder weniger als 3 punkte gehabt?	welcher spieler mehr oder weniger punkte hatte,	welche spieler hat punkte mehr oder weniger als 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_points ) ( string ! = ) ( number 3 point ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, die 2004 bis 2010 gespielt haben	fußballspieler	spieler, die von 2004 bis 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, der in dieser saison mehr rebounds als kobe bryant hatte	spieler, der in dieser saison mehr rebounds als kobe bryant hatte	spieler, die hatten mehr rebounds als kobe bryant in dieser saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in welchem jahr spielte kobe bryant point guard?	welches jahr hat kobe bryant play point guard	das jahr hat kobe bryant spielen point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string season ) ) )
wer hat weniger fouls als kobe bryant	der weniger fouls hatte als kobe bryant	wer hat weniger fouls als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
erwähnen sie die punkte des spielers kobe bryant, der in dieser saison drei rebounds hatte	erwähnen sie die punkte von spieler kobe bryant, der 3 rebounds in dieser saison hatte	erwähnen, die erzielten punkte der spieler kobe bryant, die hat 3 rebounds mehr in dieser saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_points ) ) )
wie viele umsätze hat kobe bryant gemacht	wie viele umsätze hat kobe bryant	wie viele umsätze hat kobe bryant hatte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_turnovers ) ) )
wie viele steals hat kobe nach 3 umsätzen bekommen?	wie viele steals hat kobe nach 3 umsätzen bekommen	wie viele steals hat kobe bekommen, nach 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_steals ) ) )
wie viele rebounds hat kobe bryant gehabt?	wie viele rebounds hat kobe bryant hatte	wie viele rebounds hat kobe bryant hatte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_rebounds ) ) )
wie viele vorlagen hat kobe bryant in einer saison gemacht?	wie viele assists hat kobe bryant während einer saison gemacht	wie viele assists hat kobe bryant in einer saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_assists ) ) )
in welcher saison hatte kobe bryant 3 umsätze?	welche saison kobe bryant haben 3 umsätze	die saison hat kobe bryant haben die 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string season ) ) )
wie viele punkte erzielte kobe bryant, als er drei rebounds hatte?	wie viele punkte erzielte kobe bryant, als er drei rebounds hatte	wie viele punkte hat kobe bryant ein tor, wenn er drei rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_points ) ) )
welcher spieler hat in einer saison weniger als 4 spiele gespielt?	welcher spieler weniger als 4 spiele über eine saison gespielt hat	was spieler spielte weniger als 4 spiele im laufe einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
anzahl der mannschaften	anzahl der teams	anzahl der teams	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.team ) ( string ! type ) ) ) )
was spieler mehr als 3 fouls in einer saison gemacht	was spieler mehr als 3 fouls über eine saison gemacht	was die spieler, die mehr als 3 fouls über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
der spieler mit den wenigsten blöcken in einer saison	der spieler mit den wenigsten blöcken über eine saison	der spieler mit den wenigsten blöcken in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele punkte bekommt kobe bryant in der saison mit 3 vorlagen?	wie viele punkte bekommt kobe bryant in saisons mit 3 assists	wie viele punkte hat kobe bryant holen sie sich in den staffeln mit 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_points ) ) )
welcher spieler hat mindestens drei steals	welcher spieler mindestens drei steals hat	welcher spieler hat mindestens drei steals	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, die über alle jahreszeiten die gleiche anzahl von rebounds haben wie kobe bryant	spieler, die über alle saisons die gleiche anzahl an rebounds wie kobe bryant haben	spieler, die die gleiche anzahl von rebounds, kobe bryant über alle jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte die gleichen oder mehr rebounds wie kobe bryant?	welcher spieler die gleichen oder mehr rebounds wie kobe bryant hatte	welche spieler hatten die gleiche oder mehr rebounds als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte in dieser saison die meisten fouls?	welcher spieler die meisten fouls in dieser saison hatte	welche spieler hatte die meisten fouls in dieser saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte weniger als 3 umsätze	welcher spieler weniger als 3 umsätze erzielt hatte	die spieler hatten weniger als 3 umsätze	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte die wenigsten vorlagen?	welcher spieler die wenigsten assists hatte	die spieler hatten die wenigsten hilft	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche position kobe bryant in der saison gespielt hat, hat er 3 rebounds gemacht	welche position kobe bryant spielte in der saison machte er 3 rebounds	welche position kobe bryant spielte in der saison machte er 3 rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string position ) ) )
welche spieler hatten in einer bestimmten saison die geringsten umsätze?	welche spieler in einer bestimmten saison die geringsten umsätze erzielt haben	die spieler hatten die geringsten umsätze in einer bestimmten saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat die wenigsten fouls	wer die wenigsten fouls hat	wer hat die wenigsten fouls	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
finden sie die spieler, die in einer bestimmten saison mehr als 3 steals gemacht haben	finden sie die spieler, die mehr als 3 steals in einer bestimmten saison gemacht haben	finden jene spieler, die aus mehr als 3 steals in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler nicht mit 3 umsätzen in einer saison	spieler nicht mit 3 umsätzen über eine saison	spieler nicht mit 3 umsätzen, die über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string ! = ) ( number 3 turnover ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, der in einer saison die meisten rebounds hat	spieler, der die meisten rebounds über eine saison hat	playerwer hat die meisten rebounds im laufe einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche position ist kobe bryant	welche position ist kobe bryant	welche position ist kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string position ) ) )
welcher spieler macht weniger als 3 rebounds pro karrieredurchschnittssaison?	welcher spieler weniger als 3 rebounds pro karrieredurchschnittssaison macht	welcher spieler macht weniger als 3 rebounds pro karriere durchschnittliche saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit der gleichen unterstützung pro spiel durchschnittlich als kobe bryant über eine saison	spieler mit dem gleichen assist pro spiel durchschnitt wie kobe bryant über eine saison	spieler mit der gleichen assist pro spiel durchschnitt, wie kobe bryant über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat die niedrigsten durchschnittlichen blöcke pro saison	der die niedrigsten durchschnittlichen blöcke pro saison hat	wer hat die niedrigsten durchschnittlichen blöcke pro saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat die meisten abpraller	wer die meisten rebounds hat	wer hat die meisten rebounds	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, dessen anzahl an vorlagen in einer saison der anzahl der vorlagen von kobe bryant in einer saison entspricht	spieler, dessen anzahl der assists über eine saison ist die gleiche wie die von spieler kobe bryant über eine saison	spieler, deren anzahl von assists im laufe einer saison ist das gleiche wie, dass der spieler kobe bryant über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
für welche mannschaft spielte kobe bryant, als er in einer saison nur drei rebounds hatte	für welches team kobe bryant spielte, als er nur drei rebounds in einer saison hatte	das team hat kobe bryant spielen, wenn er nur drei rebounds in einer saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string team ) ) )
spieler mit weniger und mehr als 3 rebounds in allen jahreszeiten	spieler mit weniger und mehr als 3 rebounds in allen saisons	spieler mit weniger und mehr als 3 rebounds über alle jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_rebounds ) ( string ! = ) ( number 3 rebound ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
team von spieler kobe bryant, der über eine saison 3 assists hat	team von spieler kobe bryant, der 3 assists über eine saison hat	teamspieler kobe bryant, die 3 assists über eine saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string team ) ) )
in der saison, in der er insgesamt 3 spiele bestritt, spielte kobe bryant auf welcher position	während der saison, in der er in 3 spielen insgesamt spielte, welche position kobe bryant spielte	während der saison, in der er spielte in 3 spiele, insgesamt, was die position war kobe bryant spielen	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string position ) ) )
wie viele punkte erzielte kobe bryant in einer saison?	wie viele punkte hat kobe bryant in einer saison erzielt	wie viele punkte hat kobe bryant score während einer saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_points ) ) )
spieler, die für ein oder zwei nbateams gespielt haben	spieler, die für ein oder zwei nbateams gespielt haben	die spieler, die gespielt wird, entweder für eine oder zwei nbateams	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string team ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele steals hatte kobe bryant für die los angeles lakers?	wie viele steals haben kobe bryant für die los angeles lakers	wie viele steals hat kobe bryant haben die los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_steals ) ) )
spieler mit den meisten punkten in allen spielzeiten	spieler mit den meisten punkten über alle jahreszeiten	spieler mit den meisten erzielten punkte in allen jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele punkte hatte kobe bryant, als er drei fouls hatte?	wie viele punkte hatte kobe bryant, als er 3 fouls hatte	wie viele punkte hat kobe bryant haben wenn hatte er 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_points ) ) )
welcher spieler durchschnittlich nicht mehr als 3 vorlagen pro spiel hat	welcher spieler nicht durchschnittlich über 3 assists pro spiel	die spieler doesnt durchschnitt über 3 assists pro spiel	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string ! = ) ( number 3 assist ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte nicht 3 vorlagen	welcher spieler nicht über 3 assists hatte	was die spieler nicht haben, 3 assists	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string ! = ) ( number 3 assist ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler nicht mit 3 blöcken über eine saison	spieler nicht mit 3 blöcken über eine saison	spieler nicht mit 3 blöcken in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_blocks ) ( string ! = ) ( number 3 block ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was war die vollständige anzahl der steals in der saison, in der kobe bryant nur drei punkte hatte?	was war die komplette anzahl der steals in der saison, wo kobe bryant hatte nur drei punkte	was war die gesamte anzahl an steals in der saison, wo kobe bryant hatte nur drei punkte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_steals ) ) )
wer hat mehr gestohlen als kobe bryant	der mehr steals als kobe bryant hatte	wer hat mehr steals als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat weniger als 3 vorlagen gehabt	der weniger als 3 assists hatte	wer hat weniger als 3 assists	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
beachten sie die spieler mit einer gesamtanzahl von blöcken in einer beliebigen saison, die mehr als die gesamtanzahl von blöcken in einer von kobe bryant erworbenen saison sind	beachten sie die spieler mit einer gesamtanzahl von blöcken in einer saison, die mehr als die gesamtzahl der blöcke in einer saison von kobe bryant erworben ist	beachten sie die spieler mit einer gesamtzahl von blöcken in einer saison, das ist mehr als die summe der anzahl der blöcke in einer saison erworben, die von kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit nicht mehr als 3 stehlen eine saison	spieler mit nicht mehr als 3 stiehlt eine saison	spieler mit nicht mehr als 3 steals eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele umsätze erzielte kobe bryant, nachdem er drei blocks gemacht hatte?	wie viele umsätze hat kobe bryant bekommen, nachdem er 3 blöcke gemacht	wie viele umsätze hat kobe bryant holen, nachdem er aus 3 blöcken	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_turnovers ) ) )
anzahl der fouls in einer saison von spieler kobe bryant mit 3 blöcken in einer saison	anzahl der fouls über eine saison von spieler kobe bryant mit 3 blöcken über eine saison	anzahl der fouls über eine saison der spieler kobe bryant mit 3 blöcken in einer saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_fouls ) ) )
anzahl der umsätze in einer saison von spieler kobe bryant, der 3 umsätze in einer saison hat	anzahl der umsätze über eine saison von spieler kobe bryant, der 3 umsätze über eine saison hat	anzahl der umsätze über eine saison der spieler kobe bryant, die 3 umsätze über eine saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_turnovers ) ) )
welcher spieler hatte mehr blöcke als kobe bryant in einer saison	welcher spieler hatte mehr blöcke als kobe bryant über eine saison	welche spieler hatte mehr blöcke als kobe bryant über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat die meisten umsätze in allen jahreszeiten gemacht	die die meisten umsätze über alle jahreszeiten	wer hat die meisten umsätze über alle jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte die meisten fouls in einer saison?	welcher spieler die meisten fouls in einer saison hatte	welcher spieler hat bisher die meisten fouls in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler kobe bryant hat in dieser saison 3 fouls begangen	spieler kobe bryant hat 3 fouls in dieser saison gegeben	spieler kobe bryant hat 3 fouls mehr in dieser saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_steals ) ) )
nennen sie die gesamtpunkte von kobe bryant während der saison und notieren sie den vergleich mit dem spieler, dessen gesamtanzahl an blöcken während der saison 3 betrug	nennen sie die gesamtpunkte von kobe bryant über die saison und beachten sie den vergleich mit dem spieler, dessen gesamtzahl der blöcke während der saison 3 betrug	namen die summe der punkte von kobe bryant in der saison, und beachten sie den vergleich zu der spieler, dessen gesamtzahl der blöcke in der gesamten saison war 3	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_points ) ) )
was spieler nicht mehr als drei punkte in einer saison erzielte	was spieler nicht mehr als drei punkte in einer saison erzielt	was die spieler nicht mehr als drei punkte in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat so viele fouls oder mehr gehabt wie kobe bryant?	welcher spieler so viele fouls oder mehr hatte wie kobe bryant	welcher spieler hat wie viele fouls oder mehr als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
nennen sie einen spieler mit weniger umsätzen während der saison als kobe bryant	nennen sie einen spieler mit weniger umsätzen während der saison als kobe bryant	name, den ein spieler mit weniger umsätze während der saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
stiehlt durch kobe bryant in allen jahreszeiten mit 3 oder mehr punkten	stiehlt von kobe bryant über alle jahreszeiten mit 3 oder mehr punkten	stiehlt von kobe bryant, die über alle jahreszeiten mit 3 oder mehr punkte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_steals ) ) )
nenne einen spieler, der in einer saison keine blöcke mehr hat	nennen sie einen spieler ohne blöcke in einer saison, die kobe bryant	namen ein spieler, der keine mehr blöcke in einer saison, kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele spiele hat kobe bryant in einer saison gespielt?	wie viele spiele hat kobe bryant während einer saison gespielt	wie viele spiele hast, kobe bryant spielen während einer saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_games_played ) ) )
wie viele rebounds kobe bryant in der saison gemacht hat, hat er für los angeles lakers gespielt	wie viele rebounds kobe bryant in der saison spielte er für los angeles lakers	wie viele rebounds, kobe bryant machte in der saison spielte er für die los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_rebounds ) ) )
welche spieler spielen nicht für die la lakers	welche spieler nicht für die la lakers spielen	die spieler, die nicht spielen für die la lakers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string ! = ) en.team.lakers ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in welchem jahr hat kobe bryant in drei spielen gespielt?	in welchem jahr kobe bryant in drei spielen gespielt	das jahr hat kobe bryant spielen in drei spielen	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string season ) ) )
anzahl der diebstähle in einer saison von spieler kobe bryant mit 3 blöcken in einer saison	anzahl der steals über eine saison von spieler kobe bryant mit 3 blöcken über eine saison	anzahl der steals im laufe einer saison spieler kobe bryant mit 3 blöcken in einer saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_steals ) ) )
welcher spieler hatte nicht mehr als drei blöcke	welcher spieler hatte nicht mehr als drei blöcke	die spieler hatten nicht mehr als drei blöcke	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler haben mindestens 3 umsätze in einer saison	welche spieler mindestens 3 umsätze in einer saison haben	die spieler müssen mindestens 3 umsätze in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele spiele hat kobe bryant gespielt?	wie viele spiele haben kobe bryant haben 3 steals in	wie viele spiele hat kobe bryant haben 3 stiehlt	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_games_played ) ) )
anzahl der blöcke in einer saison von spieler kobe bryant vom team los angeles lakers	anzahl der blöcke über eine saison von spieler kobe bryant aus team los angeles lakers	anzahl der blöcke, die im laufe einer saison spieler kobe bryant team: los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_blocks ) ) )
wie viele fouls hat kobe bryant in der gleichen saison begangen, in der er insgesamt 3 assists hatte?	wie viele fouls kobe bryant in der gleichen saison, in der seine gesamtzahl der assists war 3	wie viele fouls hat kobe bryant verpflichten, während der gleichen saison, in der seine totale anzahl der assists war 3	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_fouls ) ) )
wie viele steals hatte kobe bryant im jahr 2004?	wie viele steals haben kobe bryant im jahr 2004	wie viele steals hat kobe bryant haben in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_steals ) ) )
anzahl der fouls in einer saison von spieler kobe bryant, der in einer saison 3 spiele bestritten hat	anzahl der fouls über eine saison von spieler kobe bryant, der 3 spiele über eine saison gespielt hat	anzahl der fouls über eine saison der spieler kobe bryant, spielte 3 spiele in einer saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_fouls ) ) )
welcher spieler hatte nicht mehr als die anzahl der diebstähle von kobe bryant	welcher spieler hatte nicht mehr als die anzahl der steals von kobe bryant	die spieler hatten nicht mehr als die anzahl der stiehlt von kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele blöcke hat kobe bryant gemacht, als er drei punkte hatte?	wie viele blöcke machte kobe bryant, als er drei punkte hatte	wie viele blöcke hast, kobe bryant machen, wenn er drei punkte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_blocks ) ) )
welcher spieler hat maximal 3 rebounds in der gesamten saison?	welcher spieler maximal 3 rebounds der ganzen saison hat	welche spieler hat 3 allseasonrebounds maximale	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
nennen sie einen spieler, der die gleiche anzahl von diebstählen hatte wie kobe bryant	nennen sie einen spieler, der die gleiche anzahl von steals wie kobe bryant hatte	name, den ein spieler mit der gleichen anzahl der stiehlt kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_steals ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat die meisten vorlagen in der saison?	welcher spieler die meisten assists in der saison hat	welcher spieler hat die größte anzahl an assists in der saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie lautet die spielernummer für eine bestimmte mannschaft?	was ist die spielernummer für ein bestimmtes team	was ist die spieler anzahl für eine bestimmte mannschaft	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.team ) ( string ! type ) ) ) )
wie viele rebounds hatte kobe bryant, als er drei fouls hatte?	wie viele rebounds hatte kobe bryant, als er 3 fouls hatte	wie viele rebounds hat kobe bryant haben wenn hatte er 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_rebounds ) ) )
was war die gesamtzahl der vorlagen für kobe bryant in einer saison, in der er drei abpraller hatte	was war die gesamtzahl der assists für kobe bryant über eine saison, wo er drei rebounds hatte	was war die gesamtzahl der beistände für kobe bryant über eine saison, wo er drei rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_assists ) ) )
welche spieler haben zeit in mindestens 3 spielen bekommen	was spieler in mindestens 3 spielen zeit bekommen haben	was die spieler bekommen haben, die zeit in mindestens 3 spiele	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte weniger als 3 punkte in einer saison	welcher spieler weniger als 3 punkte in einer saison hatte	die spieler hatten weniger als 3 punkte in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_points ) ( string ! = ) ( number 3 point ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
nenne einen spieler mit weniger blöcken als kobe bryant	benennen sie einen spieler mit weniger blöcken als kobe bryant	name, den ein spieler mit weniger blöcke als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
anzahl der diebstähle in einer saison von spieler kobe bryant, der in einer saison 3 spiele gespielt hat	anzahl der steals über eine saison von spieler kobe bryant, der 3 spiele über eine saison gespielt hat	anzahl der steals im laufe einer saison spieler kobe bryant, die 3 spiele über eine saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_steals ) ) )
wer ist jemand mit weniger als 3 blöcken in einer saison	wer ist jemand mit weniger als 3 blöcke in einer saison	wer ist jemand mit weniger als 3 blocks in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche position spielt kobe bryant, wenn er genau 3 vorlagen in einer saison hat?	welche position spielt kobe bryant, wenn er genau 3 assists in einer saison bekam	welche position hat kobe bryant spielen, wenn hes bekam genau 3 assists in einer saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string position ) ) )
für welches team kobe bryant in einer saison 3 blocks gemacht hat	für welches team kobe bryant machte 3 blöcke über eine saison	für das team von kobe bryant aus 3 blöcken über eine saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string team ) ) )
wie viele punkte erzielte kobe bryant in drei gespielten spielen?	wie viele punkte hat kobe bryant in drei gespielten spielen erzielt	wie viele punkte hat kobe bryant punktzahl in dreispiele gespielt	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_points ) ) )
wer hatte die meisten stiehlt	die meisten steals hatten	wer hatte die meisten steals	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele rebounds hat kobe bryant in den saisons bekommen? er erzielte 3 punkte	wie viele rebounds hat kobe bryant in den saisons bekam er 3 punkte	wie viele rebounds hat kobe bryant holen sie sich in den jahreszeiten, er erzielte 3 punkte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_rebounds ) ) )
wie viele spiele hat kobe bryant gespielt, in denen er drei blocks gemacht hat?	wie viele spiele hat kobe bryant gespielt, wo er drei blöcke gemacht	wie viele spiele hast, kobe bryant spielen, wo er drei blöcke	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_blocks ) ) )
welcher spieler hatte 3 oder weniger umsätze	welcher spieler 3 oder weniger umsätze hatte	welche spieler hatten 3 oder weniger umsätze	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte so viele blöcke wie kobe bryant über als saison	welcher spieler so viele blöcke wie kobe bryant als saison hatte	welche spieler hatte so viele blöcke wie kobe bryant über saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_blocks ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte mehr als 3 vorlagen	welcher spieler mehr als 3 assists hatte	welche spieler hatte mehr als 3 assists	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
dies ist die saison des spielers kobe bryant, der 3 spiele gespielt hat	dies ist die saison des spielers kobe bryant, der 3 spiele gespielt hat	dies ist die saison der spieler kobe bryant, spielte 3 spiele	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string season ) ) )
für welches team hat kobe bryant gespielt, als er 3 blocks hatte?	für welches team kobe bryant spielen, wenn er 3 blöcke hatte	welches team hat kobe bryant spielen, wenn er 3 blöcke	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string team ) ) )
wie viele punkte hatte kobe bryant in allen jahreszeiten?	wie viele punkte hat kobe bryant über alle jahreszeiten	wie viele punkte hat kobe bryant haben über alle jahreszeiten	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_points ) ) )
wie viele punkte erzielte kobe bryant als point guard?	wie viele punkte hat kobe bryant als point guard erzielt	wie viele punkte hat kobe bryant partitur als point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_points ) ) )
wie viele vorlagen hat kobe nach 3 punkten bekommen?	wie viele assists hat kobe nach 3 punkten erhalten	wie viele assists hat kobe bekommen nach der wertung 3 punkte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_assists ) ) )
wie viele umsätze hat kobe bryant in einer saison gemacht?	wie viele umdrehungen kobe bryant über eine saison gemacht	wie viele turnovers kobe bryant in einer saison	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) )
wie viele steals hatte kobe bryant die ganze saison über?	wie viele die ganze saison steals haben kobe bryant haben	wie viele die ganze saison stiehlt, hat kobe bryant haben	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) )
welcher spieler hatte die gleichen oder weniger blöcke wie kobe bryant?	welcher spieler die gleichen oder weniger blöcke wie kobe bryant hatte	welche spieler hatten die gleiche oder weniger blöcke als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele steals hat kobe bryant während einer saison gemacht, als er für die los angeles lakers gespielt hat?	wie viele steals haben kobe bryant während einer saison gemacht, während er für die los angeles lakers spielte	wie viele steals hat kobe bryant in einer saison während spielen für die los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_steals ) ) )
welcher spieler hat nicht mehr als drei ganzjahresblöcke	welcher spieler hat nicht mehr als drei ganzjährige blöcke	welcher player hat nicht mehr als drei allseasonblöcke	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer passt oder schlägt kobe bryant in stiehlt pro saison	wer kobe bryant in steals pro saison streicht oder schlägt	wer spiele oder beats kobe bryant in steals pro saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, dessen anzahl der umsätze in einer saison höher ist als die des spielers kobe bryant in einer saison	spieler, dessen anzahl der umsätze über eine saison ist mehr als die von spieler kobe bryant über eine saison	spieler, deren anzahl der umsätze über eine saison ist mehr als, dass der spieler kobe bryant über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, die 2004 nicht gespielt haben	spieler, die 2004 nicht gespielt haben	spieler, die nicht spielen im jahr 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit mehr als drei blöcken in einer saison	spieler mit mehr als drei blöcken in einer saison	spieler mit mehr als drei blöcke in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche position hat kobe bryant gespielt, als er 3 allseasonsteals gemacht hat?	welche position spielte kobe bryant, wenn er 3 allseason steals machte?	welche position hat kobe bryant spielen, wenn sie machen alle 3saison stiehlt	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string position ) ) )
welcher spieler hat die meisten positionen gespielt?	welcher spieler die meisten positionen gespielt hat	welcher spieler gespielt hat, die meisten positionen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string position ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat die gleichen oder weniger stiehlt als kobe bryant	der die gleichen oder weniger stehlen hatte als kobe bryant	wer hat das gleiche oder weniger klaut als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele fouls hat kobe bryant pro saison als lakrer gemittelt?	wie viele fouls hat kobe bryant gemittelt pro saison als laker	wie viele fouls hat kobe bryant durchschnittlich pro saison ein laker	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_fouls ) ) )
nennen sie die saison, in der kobe bryant drei blocks absolvierte	nennen sie die saison, in der kobe bryant 3 blöcke ausgeführt hat	 name der saison, in dem kobe bryant durchgeführt 3 blöcke	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_blocks ) ) )
welcher spieler hatte in dieser saison weniger fouls als kobe bryant?	welcher spieler hatte weniger fouls als kobe bryant in dieser saison	welche spieler hatten weniger fouls als kobe bryant in dieser saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche position hatte der kobespieler, als er drei vorlagen hatte?	welche position kobe spieler war, wenn er drei assists hatte	welche position war kobe der spieler, wenn er drei assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string position ) ) )
was ist die punkte kobe bryant erzielte in der saison 2004	was sind die punkte, die kobe bryant in der saison 2004 erzielt hat	was ist das punktekobe bryant erzielte in der saison 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_points ) ) )
wie viele vorlagen hatte kobe bryant, als er point guard spielte?	wie viele assists hat kobe bryant haben, während point guard spielen	wie viele assists hat kobe bryant haben zu spielen, während point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_assists ) ) )
wie viele spiele hat kobe bryant mehr als 3 umsätze in allen jahreszeiten gehabt	wie viele spiele hat kobe bryant hatte mehr als 3 umsätze in allen jahreszeiten	wie viele spiele hat kobe bryant hatte mehr als 3 umsätze in allen jahreszeiten	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_turnovers ) ) )
nennen sie einen spieler, der mindestens so viele vorlagen hatte wie kobe bryant	nennen sie einen spieler, der mindestens so viele assists wie kobe bryant hatte	namen ein spieler, der hatte mindestens genauso viele assists von kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, der mindestens 3 vorlagen in einer saison hat	spieler, der mindestens 3 assists über eine saison hat	spieler die mindestens 3 assists über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche jahreszeiten hat kobe bryant gespielt?	welche jahreszeiten spielte kobe bryant	was seasons hat kobe bryant spielen	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ) )
welche spieler haben in einer saison die gleiche anzahl von rebounds gemacht wie kobe bryant?	was spieler die anzahl der rebounds wie kobe bryant über eine saison gemacht	was die spieler gemacht, die anzahl der rebounds gleiche wie kobe bryant über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_rebounds ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele steals hat kobe bryant im jahr 2004 bekommen?	wie viele steals hat kobe bryant im jahr 2004 bekommen	wie viele steals hat kobe bryant zu bekommen in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_steals ) ) )
wer hat die gleichen blöcke pro saison als kobe bryant	der die gleichen pro saison blöcke wie kobe bryant hat	wer hat das gleiche prosaisonblöcke als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_blocks ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele punkte hatte kobe bryant auf den los angeles lakers	wie viele punkte hat kobe bryant auf den los angeles lakers	wie viele punkte hat kobe bryant haben die los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_points ) ) )
was war die anzahl der umsätze für spieler kobe bryant, als er nur drei steals in einer saison hatte	wie viele umsätze für spieler kobe bryant, wenn er nur drei steals in einer saison hatte	was war die anzahl der umsätze für den spieler kobe bryant, als er in nur drei steals in einer saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_turnovers ) ) )
wie viele punkte erzielte kobe bryant, als er drei blocks machte?	wie viele punkte wurde von kobe bryant erzielt, als er 3 blöcke machte	wie viele punkte wurden erzielt, kobe bryant, als er aus 3 blöcken	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_points ) ) )
welcher spieler hatte in einer saison noch keine drei rebounds?	welcher spieler hat nicht drei rebounds in einer saison gehabt	welcher spieler hat nicht schon drei rebounds in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_rebounds ) ( string ! = ) ( number 3 rebound ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer ist ein spieler mit weniger rebounds als kobe bryant	der ein spieler mit weniger rebounds als kobe bryant ist	wer ist ein spieler, der weniger rebounds als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was war die gesamtzahl der fouls in einer saison für kobe bryant, als er nur drei blocks hatte?	was war die gesamtzahl der fouls in einer saison für kobe bryant, wenn er nur drei blöcke hatte	was war die gesamtzahl der fouls in einer saison für kobe bryant, als er in nur drei blocks	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_fouls ) ) )
welcher spieler hatte weniger punkte in der saison als kobe bryant	welcher spieler hatte weniger punkte in der saison als kobe bryant	die spieler hatten weniger punkte in der saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat noch keine 3 blöcke gemacht	welcher spieler hat nicht 3 blöcke gemacht	welcher spieler hat nicht made3 blöcke	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_blocks ) ( string ! = ) ( number 3 block ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele rebounds hat kobe bryant im jahr 2004 gemacht?	wie viele rebounds hat kobe bryant im jahr 2004 gemacht	wie viele rebounds hat kobe bryant in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_rebounds ) ) )
gesamtpunkte von kobe bryant über eine saison	gesamtpunkte von kobe bryant über eine saison	summe der punkte von kobe bryant über eine saison	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) )
wer hat am wenigsten spiele gespielt?	der die geringste anzahl von spielen gespielt hat	wer gespielt hat, die wenigsten spiele	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele punkte hatte kobe bryant, als er 3 steals hatte?	wie viele punkte hatte kobe bryant, als er 3 steals hatte	wie viele punkte hat kobe bryant haben, wenn er hatte 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_points ) ) )
wie viele fouls hat kobe in seinen drei punktespielen in der gesamten saison durchschnittlich begangen?	wie viele fouls kobe durchschnitt in seinen drei punkt insgesamt spiele über die saison	wie viele fouls hat kobe durchschnitt in seinem dreipunktspiele gesamt in der saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_fouls ) ) )
welcher spieler hat nicht mehr als drei spiele gespielt?	welcher spieler hat nicht mehr als drei spiele gespielt	welcher spieler gespielt hat, nicht mehr als drei spiele	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat die meisten umsätze in einer saison?	welcher spieler die meisten umsätze in einer saison hat	welche spieler hat die meisten umsätze in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
kobe bryant gehört zum los angeles lakers team	kobe bryant gehört zum los angeles lakers team	kobe bryant gehört zu den los angeles lakers team	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string team ) ) )
anzahl gespielter spiele in einer saison von spieler kobe bryant, der in einer saison 3 spiele gespielt hat	anzahl der gespielten spiele über eine saison von spieler kobe bryant, der 3 spiele über eine saison gespielt hat	anzahl der gespielten spiele im laufe einer saison spieler kobe bryant, spielte 3 spiele in einer saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_games_played ) ) )
nennen sie einen spieler mit nicht mehr punkten pro saison als kobe bryant	nennen sie einen spieler mit nicht mehr punkten pro saison als kobe bryant	namen ein spieler, der keine punkte mehr pro saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, der kein los angeles laker ist	spieler, der kein los angeles laker ist	spieler, die nicht die los angeles laker	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string ! = ) en.team.lakers ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was ist die anzahl der blöcke von kobe bryant, der im laufe der saison 3 rebounds gemacht hat?	was ist die anzahl der blöcke von kobe bryant, der 3 rebounds über die saison gemacht	was ist die anzahl der blöcke von kobe bryant, der aus 3 rebounds in der saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_blocks ) ) )
anzahl der blöcke in einer saison von spieler kobe bryant mit 3 umsätzen in einer saison	anzahl der blöcke über eine saison von spieler kobe bryant mit 3 umsätzen über eine saison	anzahl der blöcke, die im laufe einer saison spieler kobe bryant mit 3 umsätzen, die über eine saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_blocks ) ) )
statistiken von kobe bryant während der saison 2004	statistiken von kobe bryant während der saison 2004	stats von kobe bryant während der saison 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string season ) ) )
welche nummer hat kobe bryant und wie viele vorlagen hat er?	welche zahl kobe bryant ist und wie viele assists er hat	welche zahl ist kobe bryant und wie viele assists hat er	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string team ) ) )
wie viele fouls hat kobe bryant in der saison, wenn er insgesamt 3 steals macht?	wie viele fouls hat kobe bryant in den jahreszeiten, wenn er insgesamt 3 steals macht	wie viele fouls hat kobe bryant haben in den jahreszeiten, wenn er macht insgesamt 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_fouls ) ) )
welcher spieler spielt point guard oder stürmer?	welcher spieler point guard oder forward spielt	welcher player spielt point guard oder forward	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.concat en.position.point_guard en.position.forward ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele vorlagen werden von kobe bryant im laufe der saison abgegeben?	wie viele assists von spieler kobe bryant über die saison	was ist die anzahl der assists, die von spieler kobe bryant in der saison	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) )
welcher spieler hat die meisten umsätze in einer saison gehabt	welcher spieler die meisten umsätze in einer saison erzielt hat	welcher spieler hat bisher die meisten umsätze in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
finden sie den spieler mit einer gesamtzahl von blöcken, die kleiner ist als die gesamtzahl der von kobe bryant in einer beliebigen saison ausgeführten blöcke	finden sie den spieler mit einer gesamtanzahl von blöcken weniger als die gesamtzahl der blöcke, die von kobe bryant in einer saison ausgeführt werden	finden sie die spieler mit einer gesamtzahl von blöcken weniger als die gesamtzahl der blöcke durchgeführt von kobe bryant in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, der mehr fouls begangen hat als kobe bryant	spieler, der mehr fouls als kobe bryant begangen	spieler, die mehr fouls begangen als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche position hat kobe bryant gespielt, als er drei blocks hatte?	welche position spielte kobe bryant, als er drei blöcke hatte	welche position hat kobe bryant spielen, wenn er drei blöcke	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string position ) ) )
wer ist besser kobe bryant oder lebron james	wer ist besser kobe bryant oder lebron james	wer ist besser als kobe bryant oder lebron james	( call SW.listValue ( call SW.concat en.player.kobe_bryant en.player.lebron_james ) )
welches gespielt hat, hat auf den meisten mannschaften gespielt	die in den meisten teams gespielt hat	die gespielt hat, gespielt auf den meisten teams	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string team ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
zu welchen jahreszeiten hatte kobe bryant nur drei schnäppchen	welche jahreszeiten kobe bryant nur drei steals hatten	was seasons hat kobe bryant nur drei steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string season ) ) )
wer hatte die wenigsten stiehlt	die die wenigsten steals hatten	wer hatte die wenigsten stiehlt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in welchem team ist kobe bryant?	welches team kobe bryant auf	welches team ist kobe bryant auf	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string team ) ) )
wie viele verschiedene positionen gibt es	wie viele verschiedene positionen es gibt	wie viele unterschiedliche positionen gibt es	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.position ) ( string ! type ) ) ) )
welche position hat kobe bryant gespielt, als er 3 rebounds bekam?	welche position spielte kobe bryant, als er 3 rebounds bekam	welche position hat kobe bryant spielen, wenn er 3 rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string position ) ) )
welche position spielte kobe bryant auf den lakern?	welche position hat kobe bryant auf den lakers gespielt	welche position hat kobe bryant spielen die lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string position ) ) )
welcher spieler hat 2004 oder 2010 nicht gespielt?	welcher spieler 2004 oder 2010 nicht gespielt hat	welcher spieler nicht spielen, die 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
namen spieler, die nicht in los angeles lakers sind	nennen sie spieler, die nicht in los angeles lakers sind	name spieler, die nicht in los angeles lakers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string ! = ) en.team.lakers ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte in dieser saison 3 oder weniger punkte?	welcher spieler in dieser saison 3 oder weniger punkte hatte	welche spieler hatten 3 oder weniger punkte in dieser saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
auf welcher mannschaft spielte kobe bryant, als er drei vorlagen hatte?	welche mannschaft kobe bryant spielen auf, wenn er 3 assists hatte	welches team hat kobe bryant spielen auf, wenn er hatte 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string team ) ) )
zu welchen jahreszeiten spielte kobe bryant point guard?	welche jahreszeiten hat kobe bryant play point guard	was seasons hat kobe bryant spielen point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string season ) ) )
welche spieler haben weniger als oder gleich der anzahl der rebounds als kobe bryant	welche spieler weniger als oder gleich die anzahl der rebounds als kobe bryant hatten	was haben die spieler hatten weniger als oder gleich der anzahl der rebounds, kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele steals hatte kobe bryant in der saison, in der er nur drei rebounds hatte?	wie viele steals hatte kobe bryant in der saison, wo er nur drei rebounds hatte	wie viele steals hat kobe bryant haben in der saison, wo hatte er nur drei rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_steals ) ) )
gibt es spieler, deren gesamtes assistenspiel geringer ist als das assistenspiel, das kobe bryant in der gleichen saison erworben hat	gibt es spieler, deren gesamtanzahl der assists ist weniger als die zählung der assists von kobe bryant in der gleichen saison erworben	gibt es spieler, deren gesamt tally von vorlagen ist weniger als die aufzeichnung von vorlagen übernommen von kobe bryant in der gleichen saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
finden sie den spieler mit vorlagen für eine beliebige saison, die mehr als die gesamtzahl der von kobe bryant in einer beliebigen saison durchgeführten vorlagen umfassen	finden sie den spieler mit assists zu seinem kredit für eine saison zählen mehr als die gesamtzahl der assists von kobe bryant in einer saison durchgeführt	finden sie die spieler mit unterstützt, um seinen kredit für eine saison der auszählung mehr als die anzahl der assists durchgeführt von kobe bryant in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
finden sie spieler, die punktzahlen für eine saison von nicht mehr als 3 haben	finden sie spieler, die punkte für eine saison von nicht mehr als 3 haben	finden die spieler, die punktzahlen für eine saison von nicht mehr als 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele spieler haben weniger als 3 diebstähle in einer saison?	wie viele spieler weniger als 3 steals in einer saison haben	wie viele spieler haben weniger als 3 steals, die sie in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit den meisten blöcken in einer saison	spieler mit den meisten blöcken über eine saison	spieler mit den meisten anzahl der blöcke, die über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer sind die spieler mit foulsummen, die in einer beliebigen saison denen von kobe bryant in einer beliebigen saison entsprechen?	die spieler mit foulgesamtsummen in einer saison zu denen von kobe bryant in einer saison	wer sind die spieler mit foul summen äquivalent in einer saison von kobe bryant in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele rebounds hat kobe bryant im jahr 2004 gemacht?	wie viele rebounds hat kobe bryant im jahr 2004 gemacht	wie viele rebounds hat kobe bryant in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_rebounds ) ) )
wie viele steals hatte kobe bryant in der saison 2004?	wie viele steals haben kobe bryant in der saison 2004	wie viele steals hat kobe bryant haben in der saison 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_steals ) ) )
welcher spieler hatte in der letzten saison mindestens drei vorlagen	welcher spieler in der vergangenen saison mindestens drei assists hatte	welcher spieler hatte mindestens drei assists in der letzten saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler sind point guard oder stürmer?	welche spieler point guard oder forward sind	die spieler sind point guard oder forward	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.concat en.position.point_guard en.position.forward ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer machte die gleichen umsätze wie die geringsten umsätze von kobe bryant über eine saison	die umsätze gemacht haben, die mit den geringsten umsätzen von kobe bryant über eine saison	wer hat die umsätze der gleiche wie der am wenigsten umsatz gemacht von kobe bryant über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte mehr saisonpunkte als kobe bryant?	welcher spieler hatte mehr saisonpunkte als kobe bryant	welche spieler hatte mehr die ganze saison punkte als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
während der saison, in der seine punktzahl 3 betrug, war in wie vielen spielen kobe bryant	während der saison, in der seine punkteauszählung 3 wie viele spiele war kobe bryant in	während der saison, in der seine punkt tally war 3 wie viele spiele war kobe bryant in	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_games_played ) ) )
welche spieler haben 3 oder mehr vorlagen während der saison?	welche spieler 3 oder mehr assists im laufe der saison haben	die spieler haben 3 oder mehr assists in der saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler sind keine point guards?	welche spieler keine point guards sind	die spieler arent point guards	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string ! = ) en.position.point_guard ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler hatten mehr als drei fouls pro spiel in der saison	welche spieler mehr als drei fouls pro spiel über die saison hatten	was die spieler hatte mehr als drei fouls pro spiel über die saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele ganzjahresblöcke hatte kobe bryant als la laker	wie viele ganzjährige blöcke haben kobe bryant als la laker	wie viele allseasonblöcke hat kobe bryant als la laker	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_blocks ) ) )
wie viele allseasonpunkte erzielte kobe bryant bei einem rebound von 3?	wie viele allseasonpunkte hat kobe bryant punktzahl, wenn rebounds gleich 3	wie viele allseasonpunkte hat kobe bryant ergebnis bei rebounds glich 3	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_points ) ) )
wie viele punkte machte kobe bryant in einer saison, in der er drei assists erzielte?	wie viele punkte kobe bryant in einer saison gemacht, in der er 3 assists gemacht	wie viele punkte kobe bryant in einer saison, in der er machte 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_points ) ) )
zu welchem team gehört kobe bryant, der 3 punkte erzielt hat?	zu welchem team kobe bryant gehört, der 3 punkte erzielt hat	um welches team hat kobe bryant gehören die erzielte 3 punkte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string team ) ) )
wie viele steals hat kobe bekommen, nachdem er 3 assists bekommen hat?	wie viele steals bekam kobe nach 3 assists	wie viele steals hat kobe bekommen, nach dem aufstehen 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_steals ) ) )
wie viele saisons hat kobe bryant mehr als 3 punkte erzielt?	wie viele saisons hat kobe bryant mehr als 3 punkte erzielt	wie viele jahreszeiten hat kobe bryant erzielte mehr als 3 punkte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string season ) ) )
spieler, dessen anzahl der fouls in einer saison der anzahl der fouls von spieler kobe bryant in einer saison entspricht	spieler, dessen anzahl von fouls über eine saison ist die gleiche wie die von spieler kobe bryant über eine saison	spieler, deren anzahl von fouls im laufe einer saison ist das gleiche wie, dass der spieler kobe bryant über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat nicht weniger die ganze saison über stiehlt als kobe bryant	welcher spieler nicht weniger allsaisonsteals als kobe bryant	welche spieler hat nicht weniger allseasonstiehlt, als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in der gleichen saison, in der er an 3 spielen teilgenommen hat, wurde die anzahl der von kobe bryant begangenen fouls angegeben	während der gleichen saison, in der er an 3 spielen teilgenommen hat, nennen sie die anzahl der fouls, die von kobe bryant begangen wurden	während der gleichen saison, dass er an 3 spiele namen die anzahl der fouls, begangen von kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_fouls ) ) )
welche spieler auf zwei positionen spielen	welche spieler auf zwei positionen spielen	welcher spieler spielt in zwei positionen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit zwei positionen	spieler mit zwei positionen	spieler mit zwei positionen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele steals hat kobe bryant in der saison gemacht?	wie viele steals haben kobe bryant über die saison gemacht	wie viele steals hat kobe bryant über die saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_steals ) ) )
spieler, der auf zwei positionen spielt	spieler, der auf zwei positionen spielt	spieler in zwei positionen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
nennen sie einen spieler mit mehr als drei rebounds in dieser saison	benennen sie einen spieler mit mehr als drei rebounds in dieser saison	name, den ein spieler mit mehr als drei rebounds in dieser saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche position spielt kobe bryant?	welche position spielt kobe bryant	welche position hat kobe bryant spielen	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string position ) ) )
wie viele spiele hat kobe bryant während der saison gespielt? seine gesamtanzahl an blöcken betrug 3	wie viele spiele spielte kobe bryant während der saison seine gesamtzahl der blöcke gleich 3	wie viele spiele hast, kobe bryant spielen während der saison seine gesamtzahl der blöcke glich 3	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_games_played ) ) )
gibt es spieler, deren punktzahl in einer jahreszeit unter der gesamtpunktzahl von kobe bryant liegt	gibt es spieler, deren punktzahlen in einer saison kleiner sind als die gesamtpunktzahlen von kobe bryant	gibt es spieler, deren punktzahlen in einer saison weniger als die summe der punktzahlen von kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, die in einer saison am wenigsten rebounds hatten	spieler, die die geringste anzahl an rebounds in einer saison hatten	spieler, der die wenigsten rebounds in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele umsätze hatte kobe bryant, als er 3 steals hatte	wie viele umsätze kobe bryant hatte, als er 3 steals hatte	wie viele umsätze hat kobe bryant haben, wenn er hatte 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_turnovers ) ) )
anzahl der diebstähle in einer saison von spieler kobe bryant mit 3 diebstählen in einer saison	anzahl der steals über eine saison von spieler kobe bryant wit 3 steals über eine saison	anzahl der steals im laufe einer saison spieler kobe bryant witz 3 steals über eine saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_steals ) ) )
wieviele spieler sind da	wie viele spieler es gibt	wie viele spieler da sind	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.player ) ( string ! type ) ) ) )
spieler, der in einer saison weniger spiele gespielt hat als spieler kobe bryant, hat in einer saison gespielt	spieler, der weniger spiele über eine saison als spieler kobe bryant gespielt hat über eine saison gespielt	spieler, die weniger spiele in einer saison als spieler kobe bryant gespielt hat, über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele spiele in einer saison hatte kobe bryant 3 steals?	wie viele spiele in einer saison hat kobe bryant haben 3 steals	wie viele spiele in einer saison hat kobe bryant haben 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_games_played ) ) )
welcher spieler hat die meisten allseasonfouls?	welcher spieler die größte anzahl von fouls der ganzen saison hat	welcher player hat die größte zahl von allseasonfouls	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat mehr als 3 spiele gespielt	der mehr als 3 spiele gespielt hat	wer gespielt hat, mehr als 3 spiele	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, die mehr als 3 spiele in einer saison gespielt haben	spieler, die mehr als 3 spiele über eine saison gespielt haben	spieler, die mehr als 3 spiele in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was spieler mehr als 3 assists in einer saison gemacht haben	was spieler mehr als 3 assists über eine saison gemacht	was die spieler, die mehr als 3 assists über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele fouls kobe bryant in der saison gemacht hat, in der er 3 rebounds gemacht hat	wie viele fouls kobe bryant in der saison gemacht, in der er 3 rebounds gemacht	wie viele fouls kobe bryant machte in der saison, in dem er 3 rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_fouls ) ) )
welcher spieler erleidet mehr fouls als kobe bryant oder derselbe pro saison?	welcher spieler mehr fouls als kobe bryant oder das gleiche pro saison nimmt	die spieler mehr fouls als kobe bryant oder der gleichen pro saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler gehört nicht zum los angeles lakers team?	welcher spieler nicht zum los angeles lakers team gehört	die spieler gehören nicht zu den los angeles lakers team	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string ! = ) en.team.lakers ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat mehr vorlagen als kobe bryant	welcher spieler hat mehr assists als kobe bryant	welcher spieler hat mehr assists als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele fouls hatte kobe bryant, als er drei umsätze machte?	wie viele fouls hatte kobe bryant, als er drei umsätze machte	wie viele fouls hat kobe bryant haben, als er aus drei turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_fouls ) ) )
wie man fouls hatte kobe bryant in allen jahreszeiten, in denen er drei rebounds hatte	wie mann fouls haben kobe bryant in allen jahreszeiten, wo er drei rebounds hatte	wie man fouls hat kobe bryant haben in allen jahreszeiten, wo er drei rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_fouls ) ) )
wie viele umsätze hatte kobe bryant, als er in drei spielen spielte?	wie viele umsätze hat kobe bryant haben, als er in drei spielen spielte	wie viele umsätze hat kobe bryant haben, wenn er spielte in drei spielen	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_turnovers ) ) )
während seiner saison spielte point guard, für wie viele assists bryant kobe verantwortlich war	während seiner saison spielen point guard, wie viele assists war bryant kobe verantwortlich für	während seiner saison spielen point guard, wie viele assists war kobe bryant verantwortlich für	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_assists ) ) )
spieler, der position point guard oder stürmer spielt	spieler, der position point guard oder vorwärts spielt	spieler, der spielt die position point guard oder forward	( call SW.listValue ( call SW.concat en.position.point_guard en.position.forward ) )
spieler mit weniger punkten in einer saison als der spieler kobe bryant in einer saison	spieler mit weniger punkten über eine saison als die von spieler kobe bryant über eine saison	spieler mit weniger punkte über eine saison als spieler kobe bryant über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
nennen sie einen spieler mit weniger als drei blöcken pro saison	benennen sie einen spieler mit weniger als drei blöcken pro saison	name, den ein spieler mit weniger als drei blocks pro saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele spiele hat kobe gespielt, seit er profi wurde?	wie viele spiele kobe in gewesen ist, seit er profi ging	wie viele spiele hat kobe wurde, da ging er pro	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_games_played ) ) )
nennen sie einen spieler, der in der saison mindestens drei fouls hatte	nennen sie einen spieler, der mindestens drei fouls in der saison hatte	name, den ein spieler hatte mindestens drei fouls in der saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat keine 3 rebounds?	welcher spieler hat keine 3 rebounds	die spieler nicht have3 rebounds	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_rebounds ) ( string ! = ) ( number 3 rebound ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
anzahl der fouls von kobe bryant, der 3 blocks hat	anzahl der fouls von kobe bryant, der 3 blöcke hat	anzahl der fouls von kobe bryant, die 3 blöcke	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_fouls ) ) )
wie viele dreipunkteumsätze hatte kobe bryant?	wie viele dreipunkteumsätze haben kobe bryant	wie viele dreipunktumsätze hat kobe bryant haben	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_turnovers ) ) )
in welcher jahreszeit spielte kobe bryant point guard?	welche saison hat kobe bryant play point guard	was saison hat kobe bryant spielen point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string season ) ) )
wie viele punkte erzielte kobe bryant als point guard?	wie viele punkte hat kobe bryant in der position des point guard erzielt	wie viele punkte hat kobe bryant punktzahl in der position des point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_points ) ) )
welcher spieler hat die wenigsten rebounds überhaupt?	welcher spieler die wenigsten rebounds aller zeiten hat	die spieler mit den wenigsten rebounds je	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele fouls wurden von kobe bryant gespielt?	wie viele fouls wurden von kobe bryant gespielt	wie viele fouls wurden gespielt von kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) )
wie viele kobe bryantkäufe wurden in einer saison getätigt?	wie viele steals kobe bryant über eine saison gemacht	wie viele stiehlt kobe bryant in einer saison	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) )
wie viele saisons hat kobe bryant für die lakers gespielt?	wie viele saisons hat kobe bryant für die lakers gespielt	wie viele jahreszeiten hat kobe bryant gespielt für die lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string season ) ) )
in welcher position spielte kobe, als er drei schüsse blockte?	welche position kobe spielte, als er drei schüsse blockte	welche position war kobe zu spielen, als er drei schüsse blockiert	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string position ) ) )
welcher spieler hat mehr punkte pro saison als kobe bryant	welcher spieler mehr punkte pro saison hat als kobe bryant	welcher spieler hat mehr punkte pro saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler mehr als 3 blocks in der saison gemacht hat	welcher spieler hat über die saison mehr als 3 blöcke gemacht	die spieler, die mehr als 3 blocks über die saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele steals hatte kobe bryant nach 3 spielen?	wie viele steals haben kobe bryant nach 3 spielen	wie viele steals hat kobe bryant haben nach 3 games	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_steals ) ) )
welcher spieler spielt die meisten positionen?	welcher spieler die meisten positionen spielt	welcher player spielt die meisten positionen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string position ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, die in einer saison die gleiche anzahl an fouls hatten wie kobe bryant	spieler, die in einer saison die gleiche anzahl von fouls hatten wie kobe bryant	spieler hatten die gleiche anzahl von fouls in einer saison, kobe bryant hatte	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele fouls hatte kobe bryant an den los angeles lakers?	wie viele fouls hatte kobe bryant auf den los angeles lakers	wie viele fouls hat kobe bryant haben die los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_fouls ) ) )
welcher spieler hat die wenigsten ganzjahresblöcke?	welcher spieler die wenigsten ganzjahresblöcke hat	die spieler mit den wenigsten allseasonblöcke	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele steals hat kobe bryant in den saisons gemacht, in denen er 3 rebounds gemacht hat?	wie viele steals machte kobe bryant in saisons, in denen er 3 rebounds machte	wie viele steals hat kobe bryant in jahreszeiten, wo er 3 rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_steals ) ) )
wie viele steals hatte kobe bryant in dem spiel, in dem er drei blocks hatte?	wie viele steals hatte kobe bryant im spiel, in dem er drei blöcke hatte	wie viele steals hat kobe bryant in dem spiel, in dem er drei blöcke	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_steals ) ) )
spieler mit mindestens 3 stiehlt in einer saison	spieler mit mindestens 3 steals über eine saison	spieler mit mindestens 3 steals über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler erzielte die gleichen oder weniger punkte als kobe bryant	welcher spieler als kobe bryant gleich oder weniger punkte erzielt hat	welche der spieler geschossen hat, gleich oder weniger punkte von kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler haben weniger vorlagen als kobe bryant gemacht	welche spieler weniger assists als kobe bryant gemacht haben	die spieler haben weniger assists als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat in einer saison mindestens so viele spiele gespielt wie kobe bryant?	welcher spieler mindestens so viele spiele wie kobe bryant über eine saison gespielt hat	welche spieler hat mindestens so viele spiele gespielt als kobe bryant über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat nicht 3 steals	welcher spieler nicht 3 steals hat	die spieler nicht 3 steals	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_steals ) ( string ! = ) ( number 3 steal ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte weniger umsätze als drei	welcher spieler weniger umsatz als drei	die spieler hatten weniger umsätze als drei	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was war die gesamtzahl der umsätze in einer saison für kobe bryant bei point guard	was war die gesamtzahl der umsätze in einer saison für kobe bryant am point guard	was war die gesamtzahl der umsätze in einer saison für kobe bryant auf point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_turnovers ) ) )
wie viele rebounds kann kobe bryant in einer saison machen?	wie viele rebounds kann kobe bryant in einer saison machen	wie viele rebounds kann kobe bryant in einer saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_rebounds ) ) )
wer ist ein spieler, der nicht einmal 3 steals pro saison macht	wer ist ein spieler, der nicht einmal 3 steals pro saison macht	wer ist ein spieler, der nicht sogar 3 steals pro saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_steals ) ( string ! = ) ( number 3 steal ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat die führung für fouls in einer saison	wer hat die führung für fouls in einer saison	whos bekam die führung für fouls in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit nicht weniger als 3 fouls in einer saison ist mindestens 3	spieler mit nicht weniger als 3 fouls über eine saison ist mindestens 3	spieler mit nicht weniger als 3 fouls über eine saison mindestens 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele punkte hat kobe bryant in dieser saison erzielt?	wie viele punkte hat kobe bryant in dieser saison erzielt	wie viele punkte hat kobe bryant punktzahl in dieser saison	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) )
gibt es einen spieler mit dem gleichen punktedurchschnitt pro saison wie kobe bryant?	gibt es einen spieler mit dem gleichen prosaisonpunktedurchschnitt wie kobe bryant	gibt es einen spieler mit dem gleichen pro saisondurchschnitt von kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_points ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler die gleichen oder mehr hatten, stiehlt kobe im laufe der saison	welche spieler die gleiche oder mehr steals kobe über die saison hatte	welche spieler hatten die gleichen oder mehr stiehlt kobe im laufe der saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler spielten in der gleichen saison wie kobe bryant?	welche spieler in der gleichen saison wie kobe bryant gespielt haben	die spieler spielten in der gleichen saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche saison hatte kobe bryant 3 assists für die gesamte saison?	welche saison hat kobe bryant haben 3 allseason assists	was saison hat kobe bryant haben 3 allseasonunterstützt	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string season ) ) )
welcher spieler hat nur für eine mannschaft gespielt	welcher spieler nur für ein team gespielt hat	welcher spieler gespielt hat, nur für ein team	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string team ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat weniger unterstützt als kobe bryant	der weniger assists als kobe bryant hatte	wer hat weniger assists als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele rebounds erzielte kobe bryant in einer saison, in der er drei spiele bestritt?	wie viele rebounds von kobe bryant in einer saison, in der er 3 spiele gespielt	wie viele rebounds gemacht von kobe bryant über eine saison, in der er spielte 3 spiele	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_rebounds ) ) )
wie viele assists hatte kobe bryant, als er 3 punkte hatte?	wie viele assists hat kobe bryant haben, als er 3 punkte hatte	wie viele assists hat kobe bryant haben, wenn er hatte 3 punkte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_assists ) ) )
wie viele punkte erzielte kobe bryant in einer einzigen saison, in der er genau drei vorlagen hatte?	wie viele punkte erzielte kobe bryant in einer einzigen saison, in der er genau drei assists hatte	wie viele punkte hat kobe bryant punktzahl in einer saison, wo er hatte genau drei assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_points ) ) )
welcher spieler hatte die gleiche anzahl von fouls wie kobe bryant die ganze saison	welcher spieler die gleiche anzahl von fouls wie kobe bryant die ganze saison hatte	welche spieler hatten die gleiche anzahl an fouls von kobe bryant allsaison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele umsätze macht kobe bryant durchschnittlich in spielen mit mehr als 3 rebounds für ihn?	wie viele umsätze macht kobe bryant durchschnitt in spielen mit mehr als 3 rebounds für ihn	wie viele umsätze hat kobe bryant durchschnitt in spielen mit mehr als 3 rebounds für ihn	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_turnovers ) ) )
welche spieler haben die gleichen spiele gespielt wie die wenigsten spiele, die kobe bryant in einer saison gespielt hat	welche spieler spiele wie die geringste anzahl von spielen von kobe bryant über eine saison gespielt haben	was die spieler gespielt, die spiele gleichen, da die wenigsten spiele von kobe bryant über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler erzielte weniger punkte als kobe bryant	welcher spieler weniger punkte erzielte als kobe bryant	welche der spieler geschossen hat weniger punkte als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat mehr oder die gleiche anzahl von rebounds als kobe bryant	der mehr oder gleich viele rebounds hatte als kobe bryant	wer hat mehr oder die gleiche anzahl von rebounds als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte mehr als 3 umsätze	welcher spieler mehr als 3 umsätze hatte	welche spieler hatten mehr als 3 umsätze	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat so viele fouls wie maximale fouls, die kobe bryant in einer saison gemacht hat	welcher spieler hat so viele fouls wie maximale fouls kobe bryant über eine saison gemacht	welche spieler hat so viel fouls wie maximale fouls kobe bryant in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in wie vielen spielen in einer saison hatte kobe bryant mehr als drei blöcke?	in wie viele spiele während einer einzigen saison haben kobe bryant mehr als drei blöcke	in wie viele spiele in einer saison hat kobe bryant haben mehr als drei blöcke	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_games_played ) ) )
welcher spieler hatte nicht 3 steals	welcher spieler nicht 3 steals hatte	was die spieler nicht haben, 3 steals	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_steals ) ( string ! = ) ( number 3 steal ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele rebounds hatte kobe bryant, als er 3 punkte hatte?	wie viele rebounds hatte kobe bryant, als er 3 punkte hatte	wie viele rebounds hat kobe bryant haben, wenn er hatte 3 punkte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_rebounds ) ) )
welches team spielt kobe bryant für welches weniger als 3 umsätze hat	welches team kobe bryant spielt, für das weniger als 3 umsätze	welches team hat kobe bryant spielen, für die weniger als 3 umsätze	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string team ) ) )
wer spielt für die los angeles lakers oder cleveland cavaliers	wer spielt für die los angeles lakers oder cleveland cavaliers	wer spielt für die los angeles lakers oder die cleveland cavaliers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string = ) ( call SW.concat en.team.lakers en.team.cavaliers ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat in einer saison so viele punkte gemacht wie kobe bryant?	welcher spieler so viele punkte wie kobe bryant über eine saison gemacht	was die spieler gemacht, so viele punkte wie kobe bryant in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_points ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte die meisten karriereblöcke pro saison?	welcher spieler die meisten karriereblöcke pro saison hatte	welcher spieler hatte die meisten karriereblöcke pro saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche position hat kobe bryant im jahr 2004 gespielt?	welche position kobe bryant spielen in 2004	welche position hat kobe bryant spielen im jahr 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string position ) ) )
wie viele blöcke hat kobe bryant während der saison gemacht?	wie viele blöcke hat kobe bryant während der saison gemacht	wie viele blöcke hat kobe bryant in der saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_blocks ) ) )
nennen sie den spieler mit weniger als drei vorlagen	benennen sie den spieler mit weniger als drei assists	namen der spieler, die weniger als drei assists	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
team von spieler kobe bryant, der am point guard ist	team von spieler kobe bryant, der am point guard ist	teamspieler kobe bryant, wer das point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string team ) ) )
in welcher position spielt kobe bryant in seinen besten spielzeiten?	welche position spielt kobe bryant in seinen besten scoringsaisons	welche position hat kobe bryant spielt in seiner besten scoringjahreszeiten	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string position ) ) )
als kobe bryant 3 assists während der gesamten saison hatte, wie viele rebounds hatte er	als kobe bryant hatte 3 allseason assists, wie viele rebounds hatte er	wenn kobe bryant hatte 3 allseasonunterstützt, wie viele rebounds hat er	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_rebounds ) ) )
welcher spieler hatte mehr blöcke als kobe bryant, dessen anzahl von vorlagen 3 ist	welcher spieler hatte mehr blöcke als kobe bryant, dessen anzahl der assists 3 ist	welche spieler hatte mehr blöcke als kobe bryant, deren anzahl von assists ist 3	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_blocks ) ) )
die gesamtanzahl der diebstähle in allen jahreszeiten für point guard kobe bryant	die gesamtzahl der steals in allen jahreszeiten für point guard kobe bryant	die gesamtzahl der stiehlt allen jahreszeiten für point guard kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_steals ) ) )
spieler mit weniger als 3 umsätzen in einer saison	spieler mit weniger als 3 umsätzen in einer saison	spieler mit weniger als 3 umsätze in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele fouls in einer saison hat point guard kobe bryant gehabt	wie viele fouls in einer saison hat point guard kobe bryant	wie viele fouls in einer saison, ist point guard kobe bryant hatte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_fouls ) ) )
wie viele steals hatte kobe bryant in drei gespielten spielen?	wie viele steals haben kobe bryant in drei gespielten spielen	wie viele steals hat kobe bryant haben in drei spielen gespielt	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_steals ) ) )
wie viele steals hat kobe bryant in der saison gemacht, in der er im los angeles lakers team gespielt hat?	wie viele steals kobe bryant in der saison gemacht, in der er in los angeles lakers team spielte	wie viele stiehlt kobe bryant machte in der saison, in der er spielte bei den los angeles lakers team	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_steals ) ) )
wie viele assists hat kobe bryant in der saison gemacht, in der er 3 blocks gemacht hat?	wie viele assists kobe bryant in der saison, in der er 3 blöcke gemacht	wie viele assists kobe bryant machte in der saison, in dem er 3 blöcke	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_assists ) ) )
wie viele punkte erzielte kobe bryant, als er im durchschnitt 3 assists pro spiel über die saison erzielte?	wie viele punkte erzielte kobe bryant, als er im durchschnitt 3 assists pro spiel über die saison erzielte	wie viele punkte hat kobe bryant ein tor, wenn er durchschnittlich 3 assists pro spiel über die saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_points ) ) )
für welches team hat kobe bryant gespielt?	für welches team kobe bryant gespielt hat	welches team hat kobe bryant spielen	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string team ) ) )
wie viele spiele hat kobe bryant in den letzten 3 spielzeiten gespielt?	wie viele spiele hat kobe bryant in den letzten 3 saisons gespielt	wie viele spiele hat kobe bryant spielte in den letzten 3 saisons	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_games_played ) ) )
wie viele rebounds hat kobe bekommen, nachdem er 3 blocks gemacht hat?	wie viele rebounds kobe bekommen hat, nachdem er 3 blöcke gemacht hat	wie viele rebounds hat kobe bekommen, nachdem er 3 blöcke	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_rebounds ) ) )
welche position hat kobe bryant gespielt?	welche position hat kobe bryant gespielt	welche position hat kobe bryant spielen	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string position ) ) )
welche spieler haben im jahr 2004 nicht gespielt	was spieler 2004 nicht gespielt haben	was die spieler nicht spielen 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat die mindestanzahl von umsätzen von kobe bryant	welcher spieler die mindestanzahl von umsätzen von kobe bryant hat	welcher spieler hat die minimale anzahl von umsätzen, die von kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat nicht 3 punkte erzielt	welcher spieler nicht 3 punkte erzielt hat	die spieler nicht punkten 3 punkte	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_points ) ( string ! = ) ( number 3 point ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele blöcke hat kobe bryant in der saison gemacht, in der er 3 spiele gespielt hat?	wie viele blöcke kobe bryant in der saison, in der er 3 spiele gespielt	wie viele blöcke kobe bryant machte in der saison, in der er spielte 3 spiele	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_blocks ) ) )
wie viele spiele hat kobe bryant in dem jahr gespielt, in dem er drei fouls hatte?	wie viele spiele spielte kobe bryant in dem jahr hatte er drei fouls	wie viele spiele hast, kobe bryant spielen in dem jahr hatte er drei fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_games_played ) ) )
wenn kobe bryant drei umsätze in einer saison aufgegeben hat, wie viele fouls hat er in der regel gegeben	wenn kobe bryant 3 umsätze in einer saison aufgegeben hat, wie viele fouls hat er in der regel gegeben	wenn kobe bryant hat aufgegeben 3 umsätze in einer saison, wie viele fouls hat er in der regel gegeben	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_fouls ) ) )
wie viele fouls in einer saison hatte kobe bryant, das sind mehr als drei umsätze	wie viele fouls in einer einzigen saison hat kobe bryant, die größer als drei umsätze ist	wie viele fouls in einer saison hat kobe bryant haben, die größer ist als drei turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_fouls ) ) )
in welcher saison erzielte kobe bryant 3 punkte	welche saison hat kobe bryant 3 punkte erzielt	was saison hat kobe bryant punktzahl 3 punkte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string season ) ) )
welche spieler erzielten in allen jahreszeiten so viele punkte wie kobe bryant	welche spieler so viele punkte wie kobe bryant über alle jahreszeiten erzielt	was spieler erzielte so viele punkte wie kobe bryant über alle jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_points ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele fouls bekam kobe bryant für die saison, für die er 3 assists hatte	wie viele fouls hat kobe bryant für die saison gerufen bekommen hatte er 3 assists	wie viele fouls hat kobe bryant genannt, bekommen für die saison hatte er 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_fouls ) ) )
wie lautet die nummer des teams?	wie ist die anzahl des teams	was ist die nummer des teams	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.team ) ( string ! type ) ) ) )
welche spieler hatten weniger umsätze pro saison als kobe bryant?	welche spieler weniger umsätze pro saison hatten als kobe bryant	die spieler hatten weniger umsätze pro saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, deren punktzahl in einer saison unter 3 liegt	spieler, deren anzahl an punkten weniger als 3 über eine saison beträgt	spieler, deren anzahl von punkten kleiner ist als 3über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte weniger als 3 blöcke	welcher spieler weniger als 3 blöcke hatte	welche spieler hatten weniger als 3 blocks	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche point guard spieler hatten mehr punkte als kobe bryant	welche point guardspieler mehr punkte als kobe bryant hatten	was point guard spieler hatte mehr punkte als kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_points ) ) )
wie viele rebounds hatte kobe bryant nach 3 spielen?	wie viele rebounds hat kobe bryant nach 3 spielen	wie viele rebounds hat kobe bryant haben nach 3 games	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_rebounds ) ) )
finden sie die spieler, die in einer bestimmten saison an weniger oder mehr als 3 spielen teilgenommen haben	finden sie spieler, die an weniger oder mehr als 3 spielen in einer bestimmten saison teilgenommen haben	finden die spieler, die teilgenommen haben, in weniger oder mehr als 3 spiele in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_games_played ) ( string ! = ) ( number 3 game ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte die gleichen oder mehr umsätze als kobe bryant	welcher spieler die gleichen oder mehr umsätze wie kobe bryant hatte	welche spieler hatten die gleichen oder mehr umsatz als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was ist die mannschaft von kobe bryant, die 3 fouls gespielt hat?	was ist das team von kobe bryant, der 3 fouls gespielt hat	was ist das team von kobe bryant spielte 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string team ) ) )
welcher spieler hat in den wenigsten spielen einer saison gespielt?	welcher spieler in den wenigsten spielen in einer saison gespielt hat	welcher spieler gespielt hat, die wenigsten spiele in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler spielt entweder point guard oder forward?	welcher spieler entweder point guard oder vorwärts spielt	welcher player spielt entweder point guard oder forward	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.concat en.position.point_guard en.position.forward ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler gehört zum los angeles lakers team oder zu den cleveland cavaliers?	welcher spieler gehört zum los angeles lakers team oder cleveland cavaliers	welcher spieler gehört zu den los angeles lakers team oder die cleveland cavaliers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string = ) ( call SW.concat en.team.lakers en.team.cavaliers ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat mehr rebounds als kobe bryant?	welcher spieler hat mehr rebounds als kobe bryant	welcher spieler hat mehr rebounds als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
saison des spielers kobe bryant, der am point guard ist	saison des spielers kobe bryant, der am point guard ist	saison der spieler kobe bryant, wer das point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string season ) ) )
spieler mit der niedrigsten trikotnummer	spieler mit niedrigster trikotnummer	der spieler mit der niedrigsten trikotnummer	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string team ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie hat kobe irgendwelche blöcke gemacht, nachdem er 3 rebounds bekommen hat?	wie irgendwelche blöcke kobe nach 3 rebounds gemacht haben	wie alle blöcke haben kobe machen nach dem aufstehen 3 rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_blocks ) ) )
wie viele punkte kobe bryant in der saison machte er 3 umsätze	wie viele punkte kobe bryant in der saison machte er 3 umsätze	wie viele punkte kobe bryant machte in der saison machte er 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_points ) ) )
in welcher saison hat kobe bryant insgesamt 3 assists erzielt?	in welcher saison hat kobe bryant insgesamt 3 assists erzielt	in welcher saison hat kobe bryant score insgesamt 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string season ) ) )
spieler mit mehr punkten in einer saison als der spieler kobe bryant in einer saison	spieler mit mehr punkten über eine saison als die von spieler kobe bryant über eine saison	spieler, der mehr punkte über eine saison als spieler kobe bryant über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in wie vielen spielen erzielte kobe bryant 3 umsätze?	in wie viele spiele hat kobe bryant 3 umsätze erhalten	in wie vielen spielen hat kobe bryant get3 umsätze	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_games_played ) ) )
nennen sie die saison, in der kobe bryant 3 fouls begangen hat	nennen sie die saison, in der kobe bryant 3 fouls begangen hat	nennen sie die saison bei denen kobe bryant begangen, 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_fouls ) ) )
in welcher saison hatte kobe bryant 3 fouls?	welche saison hat kobe bryant haben 3 fouls	was saison hat kobe bryant haben 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string season ) ) )
in welcher position hat kobe 3 punkte erzielt	in welcher position erzielte kobe 3 punkte	in welcher position hast, kobescore 3 punkte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string position ) ) )
wie viele spieler hatten spielzeit in mindestens 3 spielen in der saison	wie viele spieler in mindestens 3 spielen in der saison spielzeit hatten	wie viele spieler hatten spielzeit in mindestens 3 spiele in der saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit einer gesamtanzahl von diebstählen in einer saison, die der niedrigsten anzahl von diebstählen in einer saison für kobe bryant entspricht	spieler mit einer gesamtzahl von steals in einer saison, die der niedrigsten anzahl von steals in einer saison für kobe bryant entspricht	spieler mit einer gesamtzahl von steals in einer saison, das ist gleich der geringsten anzahl an steals in einer saison für kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
als kobe bryant in einer saison drei assists hatte, welche position hatte er?	als kobe bryant hatte 3 assists in einer saison, was war seine position	wenn kobe bryant hatte 3 assists in einer saison, was war seine position	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string position ) ) )
punkte von kobe bryant in einer saison, in der er 3 blöcke machte	punkte von kobe bryant über eine saison, in der er 3 blöcke machte	punkte von kobe bryant über eine saison, in der er aus 3 blöcken	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_points ) ) )
welcher spieler hatte die gleichen oder weniger fouls wie kobe bryant?	welcher spieler die gleichen oder weniger fouls wie kobe bryant hatte	welche spieler hatten die gleiche oder weniger fouls von kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was spieler mehr als 2 punkte in einer saison gemacht	was spieler mehr als 2 punkte in einer saison gemacht haben	was die spieler mehr als 2 punkte über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat am wenigsten punkte gemacht?	welcher spieler am wenigsten punkte gemacht hat	was spieler aus wenigsten punkte	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte in dieser saison die wenigsten vorlagen?	welcher spieler die wenigsten assists in dieser saison hatte	welche spieler hatten die wenigsten assists in dieser saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer waren kobe bryants teamkollegen	die kobe bryants teamkollegen waren	wer waren kobe bryants teamkollegen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
kobe bryant machte 3 blöcke	kobe bryant machte 3 blöcke	kobe bryant machte 3 blöcke	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_blocks ) ) )
welcher spieler hat nicht mehr umsätze pro saison als kobe bryant	welcher spieler nicht mehr umsätze pro saison hat als kobe bryant	welcher player hat nicht mehr die umsätze pro saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
anzahl der umsätze in einer saison von spieler kobe bryant	anzahl der umsätze über eine saison von spieler kobe bryant	anzahl der umsätze über eine saison der spieler kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) )
wie viele fouls erzielte kobe bryant während der saison?	wie viele fouls hat kobe bryant score während der saison	wie viele fouls hat kobe bryant gäste während der saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_fouls ) ) )
wie viele punkte hat kobe bryant in der saison erzielt, in der er drei mal geklaut hat?	wie viele punkte erzielte kobe bryant in der saison, dass er drei steals hatte	wie viele punkte hat kobe bryant ein tor in der saison, er hatte drei steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_points ) ) )
während seiner saison als point guard hat kobe bryant wie viele blocks absolviert	während seiner saison als point guard, wie viele blöcke kobe bryant durchgeführt	während seiner saison als point guard, wie viele blöcke hat kobe bryant führen	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_blocks ) ) )
spieler, die in der saison insgesamt mehr als kobe bryant gespielt haben	spieler, die insgesamt outrebounded kobe bryant während der saison	spieler, die insgesamt outrebounded kobe bryant während der saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele vorlagen hat kobe bryant gehabt	wie viele assists hat kobe bryant hatte	wie viele assists hat kobe bryant hatte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_assists ) ) )
welcher spieler hat die mindestanzahl an fouls?	welcher spieler die mindestanzahl von fouls hat	welcher spieler hat die minimale anzahl von fouls	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler haben eine gesamtzahl von fouls in einer saison, die nicht 3 beträgt?	welche spieler eine gesamtanzahl von fouls über eine saison haben, die nicht 3 ist	was haben die spieler die gesamtanzahl der fouls über eine saison, die nicht 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string ! = ) ( number 3 foul ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat die mindestanzahl an kobe bryant stehlen	welcher spieler die mindestanzahl von steals von kobe bryant hat	welcher spieler hat die minimale anzahl der stiehlt kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte in dieser saison mehr blöcke als kobe bryant?	welcher spieler in dieser saison mehr blöcke als kobe bryant hatte	welche spieler hatte mehr blöcke als kobe bryant in dieser saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele rebounds hatte kobe bryant in der saison, in der er drei spiele bestritt?	wie viele rebounds hat kobe bryant in der saison, in der er 3 spiele gespielt hat	wie viele rebounds hat kobe bryant haben über die saison die er gespielt 3 spiele	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_rebounds ) ) )
in welcher saison hat kobe bryant durchschnittlich über 3 spiele gestohlen?	welche saison kobe bryant durchschnitt über 3 stiehlt ein spiel	die saison hat kobe bryant durchschnitt über 3 steals ein spiel	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string season ) ) )
welcher spieler hatte in dieser saison mehr steals als kobe bryant?	welcher spieler in dieser saison mehr steals als kobe bryant hatte	welche spieler hatte mehr stiehlt, als kobe bryant in dieser saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat in einer saison am wenigsten an spielen teilgenommen?	welcher spieler in der geringsten anzahl von spielen in einer saison war	welcher spieler hat bisher die wenigsten spiele in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler war in den meisten teams?	welcher spieler in den meisten teams war	was spieler wurde auf der den meisten teams	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string team ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
der spieler, der die meisten fouls in einer saison gemacht hat	der spieler, der die meisten fouls über eine saison gemacht hat	der spieler mit den meisten fouls über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte mehr als drei fouls in der saison	welcher spieler mehr als drei fouls in der saison hatte	die spieler hatten mehr als drei fouls in der saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit mindestens so vielen umsätzen wie kobe bryant	spieler mit mindestens so vielen umsätzen wie kobe bryant	spieler mit mindestens so vielen turnovers wie kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in welcher position konnte kobe 3 blocks machen	in welcher position konnte kobe 3 blöcke machen	in welcher position war kobe in der lage zu machen 3 blöcke	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string position ) ) )
wie viele assists hat kobe bryant nach 3 steals bekommen?	wie viele assists bekam kobe bryant nach 3 steals	wie viele assists hat kobe bryant bekommt nach dem aufstehen 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_assists ) ) )
wie viele vorlagen hat kobe bryant im laufe der saison abgegeben?	was ist die anzahl der assists von kobe bryant, die 3 assists über die saison gemacht	was ist die anzahl der assists von kobe bryant, der machte 3 assists in der saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_assists ) ) )
wie viele rebounds bekam kobe bryant als point guard?	wie viele rebounds bekam kobe bryant als point guard	wie viele rebounds hat kobe bryant zu bekommen als point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_rebounds ) ) )
anzahl der gespielten spiele in einer saison von spieler kobe bryant, der auf der hut ist	anzahl der gespielten spiele über eine saison von spieler kobe bryant, der am point guard ist	anzahl der gespielten spiele im laufe einer saison spieler kobe bryant, wer das point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_games_played ) ) )
welcher spieler hat mindestens 3 blöcke gemacht	welcher spieler mindestens 3 blöcke gemacht hat	welcher spieler hat mindestens 3 blöcke	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler mehr oder weniger als 3 punkte in einer saison erzielt haben	welche spieler mehr oder weniger als 3 punkte in einer saison erzielt haben	was spieler erzielte mehr oder weniger als 3 punkte in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_points ) ( string ! = ) ( number 3 point ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
anzahl der gespielten spiele in einer saison des spielers kobe bryant, dessen team los angeles lakers ist	anzahl der gespielten spiele über eine saison von spieler kobe bryant, dessen team ist los angeles lakers	anzahl der gespielten spiele im laufe einer saison spieler kobe bryant, dessen team los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_games_played ) ) )
spieler, der in einer saison weniger stiehlt als kobe bryant	spieler, der weniger steals als kobe bryant über eine saison	spieler, der weniger stiehlt, als kobe bryant über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
als läscher hat kobe bryant wie viele steals pro saison gemittelt	als seeer, wie viele steals hat kobe bryant gemittelt pro saison	als laker, wie viele steals hat kobe bryant durchschnittlich pro saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_steals ) ) )
wer hat weniger stiehlt pro saison im durchschnitt als kobe bryant	der im durchschnitt weniger steals pro saison hat als kobe bryant	wer hat weniger steals pro saison im durchschnitt als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat die meisten fouls gehabt	wer die meisten fouls hatte	wer hat die meisten fouls	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
für die saison, in der er 3 blocks auf seinem konto hatte, wie viele diebstähle waren auf kobe bryant zurückzuführen	für die saison, in der er 3 blöcke zu seinem kredit hatte, wie viele steals auf kobe bryant zurückzuführen waren	für die saison, in denen er 3 blocks auf seinem konto, wie viele steals waren auf kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_steals ) ) )
welcher spieler hat in einer saison nur 1 oder 2 spiele bestritten?	welcher spieler nur 1 oder 2 spiele in einer saison gespielt hat	welcher player wurde nur für 1 oder 2 spiele in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele umsätze hat kobe bryant in einer saison als point guard erzielt?	wie viele umsätze hat kobe bryant über eine saison gemacht, wenn als point guard gespielt	wie viele umsätze hat kobe bryant über eine saison beim spiel als point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_turnovers ) ) )
wie viele fouls hat kobe bryant nach 3 steals gespielt?	wie viele fouls wurden von kobe bryant gespielt, nachdem er 3 steals	wie viele fouls wurden gespielt von kobe bryant nach dem aufstehen 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_fouls ) ) )
wie viele steals kobe bryant in der saison gemacht hat, hat er 3 assists gemacht	wie viele steals kobe bryant in der saison machte er 3 assists	wie viele stiehlt kobe bryant machte in der saison, er machte 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_steals ) ) )
wie viele umsätze gab kobe bryant in der regulären saison 2004 auf?	wie viele umsätze kobe bryant in der regulären saison 2004 aufgegeben hat	wie viele umsätze hat kobe bryant geben, die während der 2004 regulären saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_turnovers ) ) )
welcher spieler hat die wenigsten fouls in der gesamten saison?	welcher spieler die wenigsten fouls der ganzen saison hat	welcher player hat die wenigsten fouls der ganzen saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
saison des spielers kobe bryant vom los angeles lakers team	saison des spielers kobe bryant von los angeles lakers team	saison der spieler kobe bryant von den los angeles lakers team	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string season ) ) )
welche position hat kobe bryant für die los angeles lakers gespielt?	welche position hat kobe bryant spielen für die los angeles lakers	welche position hat kobe bryant spielen für die los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string position ) ) )
wie viele spiele hat kobe bryant in der saison 2004 gespielt?	wie viele spiele hat kobe bryant in der saison 2004 gespielt	wie viele spiele hast, kobe bryant spielen in der saison 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_games_played ) ) )
wie viele steals hatte kobe bryant, als er 3 umsätze hatte?	wie viele steals hatte kobe bryant, als er 3 umsätze hatte	wie viele steals hat kobe bryant haben wenn er sich 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_steals ) ) )
was war die position von kobe bryant, als er 3 fouls spielte?	was war die position von kobe bryant, als er 3 fouls spielte	was war die position von kobe bryant, wenn er spielte 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string position ) ) )
wie viele saisons hat kobe mehr als 3 spiele gespielt und was ist seine karriere insgesamt erholt	wie viele saisons hat kobe mehr als 3 spiele gespielt und was seine karriere rebound insgesamt	wie viele jahreszeiten hat kobe gespielt, mehr als 3 spielen und was ist seine karriere rebound total	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_rebounds ) ) )
welcher spieler hatte höchstens 3 spiele in der gesamten saison?	welcher spieler hatte höchstens 3 spiele die ganze saison	welche spieler hatten höchstens 3 spiele alle saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in jahreszeiten mit mehr als 3 stiehlt, wie viele blöcke kobe bryant hatte	in saisons mit mehr als 3 steals, wie viele blöcke kobe bryant haben	in jahreszeiten mit mehr als 3 steals, wie viele blöcke hat kobe bryant haben	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_blocks ) ) )
nennen sie einen spieler mit nicht mehr als drei rebounds in der saison	benennen sie einen spieler mit nicht mehr als drei rebounds in der saison	name, den ein spieler mit nicht mehr als drei rebounds in der saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele umsätze erzielte kobe bryant?	wie viele umsätze hat kobe bryant bekommen	wie viele umsätze hat kobe bryant zu bekommen	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) )
welches team wird kobe bryant in diesem jahr sein?	welches team in diesem jahr sein wird	welches team wird kobe bryant in diesem jahr	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string team ) ) )
wie viele umsätze erzielte kobe bryant im jahr 2004?	wie viele umsätze hat kobe bryant im jahr 2004 erzielt	wie viele umsätze hat kobe bryant zu bekommen in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_turnovers ) ) )
welche position hatte kobe bryant mit 3 umsätzen?	in welcher position kobe bryant 3 umsätze als	welche position hat kobe bryant haben die 3 turnovers als	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string position ) ) )
wie viele rebounds hatte kobe bryant, der drei blöcke hatte?	wie viele rebounds hat kobe bryant, der drei blöcke hatte	wie viele rebounds hat kobe bryant, der hatte drei blöcke haben	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_rebounds ) ) )
welcher spieler hat für die meisten mannschaften gespielt?	welcher spieler für die meisten teams gespielt hat	welcher spieler spielte für die meisten teams	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string team ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler kobe bryants anzahl der rebounds in einer saison	spieler kobe bryants anzahl der rebounds über eine saison	spieler kobe bryants anzahl von rebounds über eine saison	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) )
welcher spieler hat mehr punkte als kobe bryant?	welcher spieler hat mehr punkte als kobe bryant	welcher spieler hat mehr punkte als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
anzahl der diebstähle in einer saison des spielers kobe bryant vom team los angeles lakers	anzahl der steals über eine saison von spieler kobe bryant aus team los angeles lakers	anzahl der steals im laufe einer saison spieler kobe bryant team: los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_steals ) ) )
welcher spieler hat mehr als 3 ganzjahresblöcke?	welcher spieler hat mehr als 3 allseason blöcke	was hat der spieler mehr als 3 allseasonblöcke	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele rebounds macht kobe bryant, wenn er 3 punkte in einer saison hat?	wie viele rebounds macht kobe bryant, wenn er 3 punkte in einer saison	wie viele rebounds hat kobe bryant machen durch die zeit hes bekam 3 punkte in einer saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_rebounds ) ) )
anzahl der diebstähle in einer saison von spieler kobe bryant mit 3 fouls in einer saison	anzahl der steals über eine saison von spieler kobe bryant mit 3 fouls über eine saison	anzahl der steals im laufe einer saison spieler kobe bryant mit 3 fouls über eine saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_steals ) ) )
wie viele vorlagen hat kobe bryant nach 3 umsätzen erhalten?	wie viele assists hat kobe bryant nach 3 umdrehungen erhalten	wie viele assists hat kobe bryant bekommt nach 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_assists ) ) )
wer hat weniger spiele gespielt als kobe bryant?	wer ist ein spieler mit weniger gespielten spielen als kobe bryant	whos ein spieler, der weniger spiele gespielt als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat die geringste position	welcher spieler die geringste position hat	welcher spieler hat am wenigsten position	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string position ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele umsätze hat kobe bryant in der saison 2004 erzielt	in der saison 2004 wie viele umsätze hat kobe bryant	während der saison 2004, wie viele umsätze hat kobe bryant erwerben	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_turnovers ) ) )
welche position hat kobe gespielt, als sie in dieser saison drei umsätze hatte?	welche position kobe spielen, wenn sie drei umsatz in dieser saison hatte	welche position hat kobe spielen, wenn sie hatte drei turnover in dieser saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string position ) ) )
welche jahreszeiten hat kobe bryant für die la lakers gespielt?	welche jahreszeiten kobe bryant spielen für die la lakers	was seasons hat kobe bryant spielen für die la lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string season ) ) )
was ist die position von kobe bryant im los angeles lakers team?	was ist die position von kobe bryant in los angeles lakers team	was ist die position von kobe bryant bei den los angeles lakers team	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string position ) ) )
was spieler haben weniger als 3 umsätze in dieser saison	welche spieler weniger als 3 umsätze in dieser saison haben	was haben die spieler weniger als 3 umsätze in dieser saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string ! = ) ( number 3 turnover ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat die maximale anzahl von blöcken gemacht	welcher spieler die maximale anzahl von blöcken gemacht hat	welcher spieler hat die maximale anzahl von blöcken	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele umsätze hatte kobe bryant, als er 3 punkte hatte?	wie viele umsätze hatte kobe bryant, als er 3 punkte hatte	wie viele umsätze hat kobe bryant haben, wenn er hatte 3 punkte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_turnovers ) ) )
wie viele positionen gibt es?	wie viele stellen es gibt	wie viele positionen gibt es	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.position ) ( string ! type ) ) ) )
spieler, die in einer saison nicht mehr rebounds hatten als die von kobe bryant	spieler, die nicht mehr rebounds über eine saison als die von kobe bryant hatte	spieler, die hatten keine mehr rebounds über eine saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
position des spielers kobe bryant aus der saison 2004	position des spielers kobe bryant von 2004 saison	position von spieler kobe bryant aus der saison 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string position ) ) )
wie viele rebounds hat kobe bryant gehabt?	wie viele rebounds hat kobe bryant hatte	wie viele rebounds hat kobe bryant hatte	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) )
team von spieler kobe bryant, der über eine saison 3 steals hat	team von spieler kobe bryant, der 3 steals über eine saison hat	teamspieler kobe bryant, die 3 steals über eine saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string team ) ) )
nennen sie einen spieler, der 2004 nicht gespielt hat	nennen sie einen spieler, der 2004 nicht gespielt hat	name, den ein spieler, der nicht spielen 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
nennen sie einen spieler, der in einer einzigen saison assistiert, mindestens so viel wie kobe bryants	name ein spieler, der über eine einzelne saison assistiert, ist mindestens das gleiche wie kobe bryants	namen ein spieler, der unterstützt, über eine einzelne saison ist mindestens das gleiche wie kobe bryants	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
für welches team spielt kobe bryant?	für welches team kobe bryant spielt	welches team hat kobe bryant spielen	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string team ) ) )
wer hat nicht mehr als 3 rebounds pro saison gemittelt	der durchschnittlich nicht mehr als 3 rebounds pro saison	whos durchschnittlich nicht mehr als 3 rebounds pro saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele punkte hat kobe bryant durchschnittlich in der saison mit 3 fouls	wie viele punkte macht kobe bryant durchschnitt in saisons mit 3 fouls	wie viele punkte hat kobe bryant durchschnitt in jahreszeiten mit 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_points ) ) )
was ist kobe bryants team	was ist kobe bryants team	was ist kobe bryants team	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ) )
nennen sie die spieler mit rebounds in einer beliebigen saison, die weniger als 3 entsprechen	nennen sie spieler mit rebounds in einer saison, die weniger als 3 entspricht	namen die spieler mit rebounds in einer saisondas entspricht weniger als 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler halten zwei oder weniger positionen	welche spieler zwei oder weniger positionen halten	was die spieler zwei oder weniger positionen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
für welches team hat kobe in der saison durchschnittlich drei blocks gespielt?	für welches team kobe während der saison spielte er durchschnittlich drei blöcke	welches team hat kobe spielen während der saison er durchschnittlich drei blöcke	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string team ) ) )
was war die gesamtzahl der vorlagen in einer saison für kobe bryant, als er 3 steals hatte	was war die gesamtzahl der assists in einer saison für kobe bryant, wenn er 3 steals hatte	was war die gesamtzahl der assists in einer saison für kobe bryant, als er hatte, 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_assists ) ) )
kobe bryants vorlagen für die saison hatte er 3 vorlagen	kobe bryant assists für die saison hatte er 3 assists	kobe bryant assists für die saison hatte er 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_assists ) ) )
wer hat weniger als oder die gleiche anzahl von umsätzen als kobe bryant gehabt	die weniger als oder die gleiche anzahl von umsätzen wie kobe bryant	wer hat weniger oder die gleiche anzahl von umsätzen als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in der saison, in der kobe bryant es geschafft hat, 3 assistiert, wie viele spiele er gespielt hat	während der saison, in der kobe bryant verwaltet 3 assists, wie viele spiele spielte er in	während der saison, in dem kobe bryant es geschafft 3 assists wie viele spiele hat er in spielen	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_games_played ) ) )
welcher spieler hatte die wenigsten steals in der gesamten saison?	welcher spieler die wenigsten steals die ganze saison hatte	welche spieler hatten die wenigsten stiehlt die ganze saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
nennen sie die spieler mit insgesamt weniger als 3 fouls in einer bestimmten saison	nennen sie die spieler mit einer gesamtfoulzählung von weniger als 3 in einer bestimmten saison	namen die spieler mit insgesamt foul deckt weniger als 3 in einer bestimmten saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele umsätze hatte kobe bryant, als er drei assists hatte?	wie viele umsätze hat kobe bryant haben, als er 3 assists hatte	wie viele umsätze hat kobe bryant haben, wenn er hatte 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_turnovers ) ) )
wer hat das gleiche oder mehr stiehlt als kobe bryant	der die gleichen oder mehr steals wie kobe bryant hatte	wer hat das gleiche oder mehr stiehlt, als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
punkte von kobe bryant in einer saison, in der er in point guard spielte	punkte von kobe bryant über eine saison, in der er in point guard spielte	punkte von kobe bryant über eine saison, in der er spielte in point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_points ) ) )
welche spieler haben in der gleichen menge oder mehr spiele gespielt als kobe in dieser saison	welche spieler in dieser saison in der gleichen menge oder mehr spielen gespielt haben als kobe	was die spieler gespielt haben, in der gleichen menge oder mehr spiele als kobe in dieser saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
hat kobe bryant im durchschnitt 3 rebounds pro saison erzielt, während er für eine beliebige mannschaft gespielt hat?	hat kobe bryant durchschnittlich 3 rebounds pro saison, während für jedes team spielen	hat kobe bryant durchschnittlich 3 rebounds eine saison während spielen für jedes team	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string team ) ) )
wenn kobe bryant 2 blöcke in einer saison hatte, wie viele umsätze hatte er gemacht	wenn kobe bryant hatte 2 blöcke in einer saison, wie viele umsätze hatte er gemacht	wenn kobe bryant hat 2 blöcke in einer saison, wie viele umsätze hatte er gemacht,	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_turnovers ) ) )
was spieler in der saison 2004 nicht gespielt haben	was spieler in der saison 2004 nicht gespielt haben	was die spieler nicht spielen in der saison 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit den meisten umsätzen in einer saison	spieler mit den meisten umsätzen über eine saison	spieler mit den meisten umsätzen, die über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit der meisten anzahl an diebstählen in einer saison	spieler mit den meisten steals über eine saison	spieler mit den meisten steals über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
anzahl der punkte in einer saison von spieler kobe bryant, der 3 blöcke in einer saison hat	anzahl der punkte über eine saison von spieler kobe bryant, der 3 blöcke über eine saison hat	anzahl der punkte im laufe einer saison spieler kobe bryant, die 3 blöcke über eine saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_points ) ) )
spieler, die während der saison die gleichen oder weniger punkte als kobe erzielt haben	spieler, die während der saison die gleichen oder weniger punkte als kobe erzielt haben	spieler, erzielte das gleiche oder weniger punkte als kobe während der saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
als welche position hat kobe bryant 3 spiele gespielt?	welche position hat kobe bryant spielen 3 spiele als	welche position hat kobe bryant spielen 3 spiele als	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string position ) ) )
wie viele steals hat kobe bryant gemacht?	wie viele steals machte kobe bryant	wie viele steals hat kobe bryant machen	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) )
für welche mannschaft hat kobe bryant mit drei vorlagen gespielt?	für welches team kobe bryant mit drei assists spielte	das team hat kobe bryant spielen mit drei assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string team ) ) )
spieler mit mehr als 3 umsätzen in allen jahreszeiten	spieler, die über 3 umsätze über alle saisons verfügen	spieler, die mehr als 3 umsätze über alle jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was ist die position von kobe bryant in der saison spielte er 3 spiele	was ist die position von kobe bryant in der saison spielte er 3 spiele	was ist die position von kobe bryant in der saison spielte er 3 spiele	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string position ) ) )
das ist die saison, in der kobe bryant 3 fouls begangen hat	das ist die saison kobe bryant machte 3 fouls	das ist die jahreszeit, kobe bryant machte 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string season ) ) )
wie viele umsätze erzielte kobe bryant in der saison 2004?	wie viele umsätze kobe bryant in der saison 2004 gemacht	wie viele umsätze kobe bryant machte in der saison 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_turnovers ) ) )
wie viele assists hatte kobe bryant, der drei rebounds hatte?	wie viele assists haben kobe bryant haben, die drei rebounds hatte	wie viele assists hat kobe bryant haben, der hatte drei rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_assists ) ) )
in welcher saison hat kobe 3 steals bekommen?	in welcher saison kobe bekam 3 steals	in der saison hat kobe bekommen, 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string season ) ) )
spieler, der in einer saison nicht mehr spiele als der spieler kobe bryant gespielt hat	spieler, der nicht mehr spiele als spieler kobe bryant über eine saison gespielt hat	spieler, der nicht gespielt hat mehr spiele als spieler kobe bryant über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler spielte 2004 oder 2010?	welcher spieler 2004 oder 2010 spielte	die spieler gespielt, die 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was ist der durchschnitt pro saison für die erzielten punkte, während kobe bryant an der point guard war	was ist der durchschnitt pro saison für punkte erzielt, während kobe bryant war am point guard	was die pro saisondurchschnitt der erzielten punkte, während kobe bryant wurde auf point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_points ) ) )
wie viele blöcke hat kobe bryant in einer saison gemacht, in der er 3 fouls gemacht hat?	wie viele blöcke kobe bryant in einer saison gemacht, in der er 3 fouls gemacht	wie viele blöcke kobe bryant in einer saison, in der er 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_blocks ) ) )
wie lautet die nummer des spielers?	was ist die nummer des spielers	was ist die anzahl der spieler	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.player ) ( string ! type ) ) ) )
wer hat in jeder saison die gleiche anzahl an fouls wie kobe?	wer hat die gleiche anzahl von fouls wie kobe jede saison, die sie gespielt haben	whos bekam die gleiche anzahl an fouls von kobe in jeder saison sie gespielt haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat die mindestpunktzahl von kobe bryant?	welcher spieler die mindestanzahl von punkten von kobe bryant hat	welcher spieler hat die minimale anzahl der punkte von kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
nennen sie die spieler mit punktestand in einer beliebigen saison entweder weniger als oder mehr als 3	nennen sie spieler mit punktzählungen in einer saison entweder kleiner als oder mehr als 3	namen die spieler mit punkt deckt sich in jeder saison entweder weniger als oder mehr als 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_points ) ( string ! = ) ( number 3 point ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele assists bekam kobe bryant, als er in der position eines point guard war?	wie viele assists bekam kobe bryant, als er in der position des point guard war	wie viele assists hat kobe bryant zu bekommen, wenn er in der position des point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_assists ) ) )
wer hat die gleichen oder weniger punkte in dieser saison als kobe bryant	der in dieser saison die gleichen oder weniger punkte hatte wie kobe bryant	wer hat das gleiche oder weniger punkte in dieser saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat kobe bryants die höchste saisonpunktzahl in einer einzigen saison erzielt?	welcher spieler kobe bryants höchste saisonpunktzahl in einer saisonal gebunden	die spieler gebunden kobe bryants höchste saisonale punktzahl in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
finden sie spieler, die in einer beliebigen saison blöcke ausgeführt haben, die dieselbe anzahl von blöcken aufweisen, die von kobe bryant in einer beliebigen saison ausgeführt wurden	finden sie spieler, die blöcke in einer saison durchgeführt haben, die auf die gleiche menge wie die blöcke, die von kobe bryant in einer saison durchgeführt wurden, zählen	spieler finden, die durchgeführt haben, die blöcke in einer saison der auszählung um den gleichen betrag wie diese blöcke durchgeführt von kobe bryant in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele umsätze kobe bryant in der saison machte er 3 punkte	wie viele umsätze kobe bryant in der saison machte er 3 punkte gemacht	wie viele umsätze kobe bryant machte in der saison, er machte 3 punkte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_turnovers ) ) )
wie viele punkte hatte kobe bryant nach 3 rebounds erzielt?	wie viele punkte hatte kobe bryant nach 3 rebounds erzielt	wie viele punkte hatte kobe bryant erzielte nach 3 rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_points ) ) )
welcher spieler hatte die gleiche anzahl von punkten in der saison wie kobe bryant	welcher spieler die gleiche anzahl von punkten in der saison wie kobe bryant hatte	die spieler hatten die gleiche anzahl von punkten in die saison von kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_points ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele rebounds hat kobe bryant eine saison mit 3 umsätzen?	wie viele rebounds hat kobe bryant eine saison mit 3 turnovers	wie viele rebounds hat kobe bryant eine saison mit 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_rebounds ) ) )
wie viele fouls in einer saison hatte kobe bryant, das sind mehr als drei assists	wie viele fouls in einer einzigen saison hat kobe bryant haben, die größer als drei assists ist	wie viele fouls in einer saison hat kobe bryant haben, die größer ist als drei assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_steals ) ) )
welcher spieler hat mehr punkte in einer saison als kobe bryant	welcher spieler in einer saison mehr punkte als kobe bryant hatte	welcher spieler hat mehr punkte in einer saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele rebounds hat kobe bryant gemacht?	wie viele rebounds machte kobe bryant	wie viele rebounds hat kobe bryant machen	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_rebounds ) ) )
spieler mit der gleichen anzahl an gespielten spielen wie kobe bryant über alle jahreszeiten	spieler mit der gleichen anzahl von gespielten spielen wie kobe bryant über alle jahreszeiten	spieler mit der gleichen anzahl von spielen gespielt als kobe bryant über alle jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_games_played ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was war die position von kobe bryant in der saison machte er 3 umsätze	was war die position von kobe bryant in der saison machte er 3 umdrehungen	was war die position von kobe bryant in der saison machte er 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string position ) ) )
welcher spieler hat mehr als 3 fouls gespielt?	welcher spieler mehr als 3 fouls gespielt hat	die spieler spielten mehr als 3 fouls	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler hatten mehr als drei fouls in einer saison	welche spieler mehr als drei fouls in einer saison hatten	was die spieler hatte mehr als drei fouls über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele blöcke hat kobe bryant gehabt	wie viele blöcke hat kobe bryant hatte	wie viele blöcke hat kobe bryant hatte	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) )
wie viele umsätze hat kobe bryant gemacht	wie viele umsätze hat kobe bryant	wie viele umsätze hat kobe bryant hatte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_turnovers ) ) )
welcher spieler hatte nicht mehr als drei vorlagen während der saison	welcher spieler während der saison nicht mehr als drei assists hatte	die spieler hatten nicht mehr als drei assists in der saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat die rekordzahl von spielen in einer saison gespielt	der die rekordzahl von spielen in einer saison gespielt hat	wer gespielt hat, die datensatzanzahl der spiele in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
auf welcher mannschaft war kobe bryant, als er weniger als drei spiele in einer saison bestritt?	welches team war kobe bryant auf, wenn er weniger als drei spiele in einer saison gespielt	das, was team war kobe bryant auf, wenn er spielte weniger als drei spiele in einer saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string team ) ) )
wie viele spiele hat kobe bryant für die los angeles lakers gespielt?	wie viele spiele hat kobe bryant für die los angeles lakers gespielt	wie viele spiele hast, kobe bryant spielen für die los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_games_played ) ) )
in der saison, in der kobe bryant in 3 spielen spielzeit hatte, war er für wie viele vorlagen verantwortlich	während der saison, in der kobe bryant spielzeit in 3 spielen hatte, wie viele assists war er verantwortlich für	während der saison, in dem kobe bryant hatte spiel mal in 3 spielen, wie viele assists war er verantwortlich für	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_assists ) ) )
was ist kobe bryants saison umsatz durchschnitt	whats kobe bryants saisonumsatz durchschnitt	was ist kobe bryants saison umsatz durchschnitt	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) )
welcher spieler stiehlt in einer einzigen saison am meisten?	welcher spieler die meisten steals während einer saison hat	welche spieler hat die meisten steals in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in welchem jahr hat kobe bryants insgesamt drei punkte gesammelt?	in welchem jahr kobe bryants punkte insgesamt drei	in welchem jahr haben sie kobe bryants punkte insgesamt drei	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string season ) ) )
finden sie die spieler, bei denen die anzahl der partien, an denen kobe bryant teilgenommen hat, geringer ist als die anzahl der partien, an denen kobe bryant bereits teilgenommen hat	finden sie die spieler, deren anzahl der spiele teilgenommen hat kleiner als die anzahl der spiele, in denen kobe bryant spielzeit in hatte	diejenigen spieler, deren aufzeichnung der spiele teilgenommen kleiner ist als die anzahl der spiele, in denen kobe bryant hat spiel mal in	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele fouls hat kobe bryant gespielt, als er 3 punkte erzielte?	wie viele fouls von kobe bryant gespielt wurden, als er 3 punkte erzielte	wie viele fouls wurden gespielt von kobe bryant, wenn er erzielte 3 punkte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_fouls ) ) )
wie viele diebstähle hatte point guard kobe bryant im laufe der saison?	wie viele steals haben point guard kobe bryant über die saison	wie viele steals hat point guard kobe bryant haben im laufe der saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_steals ) ) )
nennen sie einen spieler, der mehr blöcke als kobe bryant hatte	nennen sie einen spieler, der mehr blöcke als kobe bryant hatte	name hat ein spieler hatte mehr blöcke als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
position des spielers kobe bryant, der innerhalb einer saison 3 umsätze erzielt	position des spielers kobe bryant, der 3 umsätze über eine saison hat	position von spieler kobe bryant, die 3 umsätze über eine saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string position ) ) )
welcher spieler hatte mehr blöcke als kobe bryant, dessen punktzahl 3 ist	welcher spieler mehr blöcke hatte als kobe bryant, dessen anzahl an punkten 3 ist	welche spieler hatte mehr blöcke als kobe bryant, deren anzahl der punkte ist 3	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_points ) ) )
team von spieler kobe bryant mit 3 punkten über eine saison	team von spieler kobe bryant mit 3 punkten über eine saison	teamspieler kobe bryant 3 punkte über eine saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string team ) ) )
kobe bryants team, als er 3 rebounds für die saison hatte	kobe bryants team, wenn er 3 rebounds für die saison hatte	kobe bryants team hatte, als er 3 rebounds für die saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string team ) ) )
wie viele dreipunktevorlagen hat kobe bryant in einer saison?	wie viele drei punkte assists hat kobe bryant in einer saison	wie viele dreipunkt unterstützt hat kobe bryant in einer saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_assists ) ) )
wie viele assists hat kobe bryant in der saison 2004 hergestellt?	wie viele assists kobe bryant in der saison 2004 gemacht	wie viele assists kobe bryant machte in der saison 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_assists ) ) )
welcher spieler hat die geringste anzahl von positionen gespielt?	welcher spieler die geringste anzahl von positionen gespielt hat	was spieler gespielt hat die geringste anzahl von positionen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string position ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler unter 3 jahren hat, hilft die ganze saison	welcher spieler hat unter 3 assists die ganze saison	was spieler unter 3 assists die ganze saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in welcher position spielte kobe bryant, als er drei vorlagen machte?	welche position hat kobe bryant spielen, wenn er drei assists gemacht	welche position hat kobe bryant spielen, als er drei assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string position ) ) )
in welchen jahreszeiten machte kobe bryant 3 vorlagen	in welchen saisons kobe bryant machte 3 assists	in welchen jahreszeiten kobe bryant machte 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string season ) ) )
wer hat weniger als 3 umsätze gehabt	die weniger als 3 umsätze erzielt haben	wer hat weniger als 3 umsätze	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele punkte hat kobe bryant in dieser saison gesammelt?	wie viele punkte hat kobe bryant in dieser saison bekommen	wie viele punkte hat kobe bryant bekommen in dieser saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_points ) ) )
welche position hat kobe bryant gespielt, als seine gesamtpunktzahl 3 betrug?	welche position spielte kobe bryant, wenn seine allsaisonpunkte gleich 3	welche position hat kobe bryant spielen, wenn seine alle saisonpunkte erreicht 3	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string position ) ) )
wer hat die meisten umsätze gehabt	wer die meisten umsätze erzielt hat	wer hat die meisten umsätze	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler haben in der saison weniger punkte erzielt als kobe bryant	welche spieler im laufe der saison weniger punkte erzielt haben als kobe bryant	welcher spieler erzielte weniger punkte im laufe der saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
finde einen spieler mit 3 oder weniger blöcken in einer bestimmten saison	finden sie einen spieler mit 3 oder weniger blöcken in einer bestimmten saison	finden sie eine spieler mit 3 oder weniger blöcke in einer bestimmten saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
die anzahl der umsätze von kobe bryant in dieser saison beträgt 3	die anzahl der umsätze von spieler kobe bryant in dieser saison ist 3	die anzahl der umsätze des spielers kobe bryant über diese saison 3	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_turnovers ) ) )
welcher spieler hat mindestens so viele saisonpunkte wie kobe bryant?	welcher spieler mindestens so viele saisonpunkte hat wie kobe bryant	welche spieler hat mindestens genauso viele die ganze saison punkte von kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat 3 oder weniger spiele gespielt	der 3 oder weniger spiele gespielt hat	wer hat gespielt 3 oder weniger spiele	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, dessen vorlagen über eine saison höchstens 3 sind	spieler, dessen assists über eine saison höchstens 3	spieler, deren assists über die saison wird bei den meisten 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, die weniger als drei mal in einer saison stehlen	spieler, die weniger als drei steals in einer saison haben	spieler, die weniger als drei steals in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele spiele hat kobe bryant in einer saison in point guard position gespielt?	wie viele spiele kobe bryant in point guard position über eine saison gespielt	wie viele spiele kobe bryant spielte in pointguardposition über eine saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_games_played ) ) )
wie viele spiele hat kobe bryant in einer saison gespielt, in der er 3 punkte gemacht hat?	wie viele spiele kobe bryant spielte über eine saison, in der er 3 punkte gemacht	wie viele spiele kobe bryant spielte über eine saison, in der er gemacht, 3 punkte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_games_played ) ) )
was spieler hatten mehr punkte als kobe bryant im jahr 2004	welche spieler 2004 mehr punkte als kobe bryant hatten	was die spieler hatte mehr punkte als kobe bryant im jahr 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_points ) ) )
wie viele rebounds hat kobe bryant nach 3 umsätzen erhalten?	wie viele rebounds hat kobe bryant nach 3 turnovers bekommen	wie viele rebounds hat kobe bryant bekommt nach 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_rebounds ) ) )
spieler, dessen anzahl an blöcken in einer saison nicht geringer ist als die des spielers kobe bryant in einer saison	spieler, dessen anzahl von blöcken über eine saison nicht weniger als die des spielers kobe bryant über eine saison ist	spieler, dessen anzahl von blöcken in einer saison sind nicht weniger als, dass der spieler kobe bryant über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele steals hat kobe bryant im laufe der saison mit nur 3 umsätzen gemacht?	wie viele steals haben kobe bryant über die saison gemacht, als nur 3 umsätze gemacht	wie viele steals hat kobe bryant machen über die jahreszeit, wenn nur 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_steals ) ) )
was ist kobe bryants allseasonpunkt insgesamt	was ist kobe bryants ganzsaisonpunkt total	was ist kobe bryants allseasonpunkt insgesamt	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) )
welcher plater hat während der saison die geringste anzahl von blöcken erzeugt?	welcher plattenspieler die geringste anzahl von blöcken während der saison	die plater aus der geringsten menge von blöcken während der saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat nicht 3 spiele gespielt?	welcher spieler nicht 3 spiele gespielt hat	was die spieler nicht spielen 3 spiele	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_games_played ) ( string ! = ) ( number 3 game ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat in einer saison weniger als 4 punkte gemacht?	welcher spieler weniger als 4 punkte in einer saison gemacht hat	was die spieler gemacht, die weniger als 4 punkte in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele umsätze hat kobe bryant in 3 spielen gemacht?	wie viele umsätze hat kobe bryant in 3 spielen gemacht	wie viele umsätze hat kobe bryant machte in 3 spielen	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_turnovers ) ) )
nennen sie den spieler mit mehr umsätzen pro saison als kobe bryant	nennen sie den spieler mit mehr umsätzen pro saison als kobe bryant	namen der spieler, der mehr umsätze pro saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele umsätze hat kobe bryant in einer saison? er hat 3 rebounds	wie viele umsätze hat kobe bryant in einer saison hat er 3 rebounds	wie viele umsätze hat kobe bryant in einer saison hat er 3 rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_turnovers ) ) )
wie viele vorlagen hatte kobe bryant in der gesamten saison, wenn er auch 3 punkte hatte?	wie viele assists haben kobe bryant haben die ganze saison, wenn auch 3 punkte hatte	wie viele assists hat kobe bryant allsaison, wenn die ebenfalls schon 3 punkte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_assists ) ) )
wie viele rebounds hatte kobe bryant in seiner saison in los angeles lakers	während seiner los angeles lakers saison, wie viele rebounds haben kobe bryant haben	während seiner los angeles lakerssaison, wie viele rebounds hat kobe bryant haben	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_rebounds ) ) )
wie viele steals hatte kobe bryant während der saison im durchschnitt mit drei assists?	wie viele steals haben kobe bryant während der saison, wenn durchschnittlich drei assists	wie viele steals hat kobe bryant haben während der saison, wenn durchschnittlich drei assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_steals ) ) )
in welchen jahreszeiten machte kobe bryant 3 blöcke	in welchen jahreszeiten kobe bryant machte 3 blöcke	in welchen jahreszeiten kobe bryant aus 3 blöcken	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string season ) ) )
spieler, dessen punktzahl in einer saison der des spielers kobe bryant in einer saison entspricht	spieler, dessen anzahl der punkte über eine saison ist die gleiche wie die von spieler kobe bryant über eine saison	spieler, deren anzahl der punkte im laufe einer saison ist das gleiche wie, dass der spieler kobe bryant über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_points ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
nenne einen spieler mit der gleichen anzahl von blöcken wie kobe bryant	benennen sie einen spieler mit der gleichen anzahl von blöcken wie kobe bryant	name, den ein spieler mit der gleichen anzahl von blöcken, die als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_blocks ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele umsätze hatte kobe bryant in der saison für die la lakers	wie viele umsätze haben kobe bryant über die saison für die la lakers	wie viele umsätze hat kobe bryant haben über die saison für die la lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_turnovers ) ) )
welche spieler haben höchstens zwei positionen gespielt	was spieler auf höchstens zwei positionen gespielt haben	was die spieler gespielt haben, höchstens zwei positionen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte weniger als 3 umsätze	welcher spieler weniger als 3 umsätze hatte	welche spieler hatten weniger als 3 umsätze	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat mehr als 3 vorlagen pro saison	wer hat mehr als 3 assists pro saison	whos bekam mehr als 3 assists pro saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
anzahl der umsätze in einer saison von spieler kobe bryant vom team los angeles lakers	anzahl der umsätze über eine saison von spieler kobe bryant aus team los angeles lakers	anzahl der umsätze über eine saison der spieler kobe bryant team: los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_turnovers ) ) )
wie viele assists gab es in den spielzeiten, in denen kobe bryant nur drei punkte hatte?	was war die gesamtzahl der assists in saisons, in denen kobe bryant hatte nur drei punkte	was war die gesamtzahl der hilft in zeiten, wo kobe bryant hatte nur drei punkte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_assists ) ) )
was ist die nummer des spielers kobe bryant	was ist die nummer des spielers kobe bryant	was ist die anzahl der spieler kobe bryant	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.player ) ( string ! type ) ) ) )
wie viele vorlagen hat kobe bryant in einer saison gemacht, in der er 3 umsätze gemacht hat?	wie viele assists kobe bryant in einer saison gemacht, in der er 3 umsätze gemacht	wie viele assists kobe bryant in einer saison, in der er aus 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_assists ) ) )
wie viele vorlagen hatte kobe bryant nach 3 spielen?	wie viele assists hat kobe bryant nach 3 spielen haben	wie viele assists hat kobe bryant haben nach 3 games	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_assists ) ) )
wer hat gleich oder mehr als 3 umsätze	die gleich oder mehr als 3 umsätze hat	wer hat gleich oder mehr als 3 umsätze	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele steals hatte kobe bryant als point guard?	wie viele steals hatten kobe bryant als point guard	wie viele steals hat kobe bryant als point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_steals ) ) )
auf welcher position spielte kobe bryant, als sein umsatz in der gesamten saison 3 betrug?	welche position spielte kobe bryant, wenn seine allseasonumsätze gleich 3	welche position hat kobe bryant spielen, wenn seine allseasonumsätze erreicht 3	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string position ) ) )
wer hat mehr als 3 stiehlt	der mehr als 3 steals hatte	wer hat mehr als 3 steals	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler hatten eine gesamtzahl von rebounds in einer saison ungleich drei?	welche spieler eine gesamtanzahl von rebounds in einer saison nicht gleich drei hatten	was die spieler hatten insgesamt anzahl der rebounds in einer saison nicht gleich drei	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_rebounds ) ( string ! = ) ( number 3 rebound ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele teams gibt es?	wie viele teams es gibt	wie viele teams gibt es	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.team ) ( string ! type ) ) ) )
wer hat mehr als 3 spiele in einer saison gespielt	der mehr als 3 spiele in einer saison gespielt hat	wer gespielt hat, mehr als 3 spiele in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler spielte in der gleichen saison wie kobe bryant?	welcher spieler in der gleichen saison wie kobe bryant gespielt hat	was spieler in der gleichen saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
kobe bryant hat drei spiele gespielt	kobe bryant spielte drei spiele	kobe bryant spielte drei spiele	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_games_played ) ) )
wer hat 3 oder mehr spiele gespielt	der 3 oder mehr spiele gespielt hat	wer gespielt hat, 3 oder mehr spiele	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, die weniger als 3 spiele in einer saison gespielt haben	spieler, der weniger als 3 spiele in einer saison gespielt hat	spieler, die gespielt haben weniger als 3 spiele in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat die kleinste zahl im team?	welcher spieler die kleinste zahl im team hat	welcher spieler hat die kleinste zahl auf das team	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string team ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat weniger als drei spiele gespielt?	welcher spieler weniger als drei spiele gespielt hat	welcher spieler spielte weniger als drei spiele	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele assists hatte kobe bryant, als er drei umsätze machte?	wie viele assists hat kobe bryant haben, als er drei umsätze machte	wie viele assists hat kobe bryant haben, als er aus drei turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_assists ) ) )
wer hat mehr oder gleich 3 fouls gehabt	der mehr oder gleich 3 fouls hatte	wer hat mehr oder gleich 3 fouls	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele spiele hat kobe bryant gespielt, der umsätze gemacht hat?	wie viele spiele haben kobe bryant gespielt, die umsätze hatten	wie viele spiele hast, kobe bryant spielen die umsätze hatte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_games_played ) ) )
in welcher saison hat kobe bryant 3 spiele gespielt?	welche saison hat kobe bryant spielen 3 spiele	die saison hat kobe bryant spielen 3 spiele	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string season ) ) )
in welchem jahr hatte kobe bryant genau 3 steals?	in welchem jahr hat kobe bryant genau 3 steals	in welchem jahr haben kobe bryant haben genau 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string season ) ) )
spieler mit höchstens 3 umsätzen in einer saison	spieler mit maximal 3 umsätzen über eine saison	spieler mit höchstens 3 umsätze über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte die gleiche anzahl an fouls wie kobe bryant?	welcher spieler die gleiche anzahl von fouls wie kobe bryant hatte	die spieler hatten die gleiche anzahl an fouls von kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
entweder los angeles lakers oder cleveland cavaliers	entweder los angeles lakers oder cleveland cavaliers	entweder die los angeles lakers oder die cleveland cavaliers	( call SW.listValue ( call SW.concat en.team.lakers en.team.cavaliers ) )
wer hat den rekord für die meisten rebounds in einer saison	wer hat den rekord für die meisten rebounds in einer saison	wer holte sich den rekord für die meisten rebounds in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele vorlagen hat kobe bryant gehabt	wie viele assists hat kobe bryant hatte	wie viele assists hat kobe bryant hatte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_assists ) ) )
wann hat kobe bryant gespielt?	wann spielte kobe bryant	wann hat kobe bryant spielen	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ) )
was spieler haben weniger gestohlen als kobe bryant	was spieler hatten weniger steals als kobe bryant	was haben die spieler hatten weniger klaut als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in welcher position war kobe bryant, als er drei fouls in einer saison erzielte?	welche position war kobe bryant in, als er 3 fouls in einer saison machte	welche position war kobe bryant, als er aus 3 fouls in einer saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string position ) ) )
wie viele spieler waren auf den lakern oder kavalieren	wie viele spieler auf den lakers oder kavaliers gewesen sind	wie viele spieler wurden auf die lakers oder cavaliers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string = ) ( call SW.concat en.team.lakers en.team.cavaliers ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat die mindestanzahl an diebstählen?	welcher spieler die mindestanzahl an steals hat	welcher spieler hat die minimale anzahl der stiehlt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler hatten die gleichen spiele gespielt als kobe bryant in allen jahreszeiten	welche spieler die gleichen spiele gespielt hatten wie kobe bryant über alle jahreszeiten	was die spieler hatten, die gleichen spiele gespielt als kobe bryant über alle jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_games_played ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in welcher mannschaft hat kobe bryant in der saison 2004 gespielt?	in dem team kobe bryant spielen in der saison 2004	in dem team hat kobe bryant spielen in der saison 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string team ) ) )
welcher spieler spielt die gleiche position wie kobe bryant?	welcher spieler die gleiche position wie kobe bryant spielt	welcher player spielt die gleiche position wie kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele fouls hatte kobe bryant, als er drei rebounds hatte?	wie viele fouls hatte kobe bryant, als er 3 rebounds hatte	wie viele fouls hat kobe bryant haben, wenn er 3 rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_fouls ) ) )
wie viele umsätze hatte kobe bryant mit den los angeles lakers?	wie viele umsätze hat kobe bryant auf den los angeles lakers	wie viele umsätze hat kobe bryant haben die los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_turnovers ) ) )
wie viele umsätze hatte kobe bryant in einer saison mit 3 assists?	wie viele umsätze hat kobe bryant in einer saison hatte er 3 assists	wie viele umsätze hat kobe bryant in einer saison hatte er 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_turnovers ) ) )
welcher spieler hat mindestens 3 umsätze	welcher spieler mindestens 3 umsätze erzielt hat	welcher spieler hat mindestens 3 turnovers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele vorlagen hat kobe bryant für diese saison bisher?	wie viele assists hat kobe bryant für diese saison bisher bekommen	wie viele assists hat kobe bryant haben in dieser saison so weit	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) )
wie viele saisons hatte kobe bryant nicht mehr als drei vorlagen	wie viele saisons haben kobe bryant nicht mehr als drei assists	wie viele seasons hat kobe bryant nicht mehr als drei assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_assists ) ) )
wie viele vorlagen hatte kobe bryant mit drei blöcken?	wie viele assists hat kobe bryant mit drei blöcken	wie viele assists hat kobe bryant mit drei blöcken	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_assists ) ) )
wie viele blöcke hat kobe bryant in einer saison gemacht, in der er 3 assists gemacht hat?	wie viele blöcke kobe bryant in einer saison gemacht, in der er 3 assists gemacht	wie viele blöcke kobe bryant in einer saison, in der er machte 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_blocks ) ) )
spieler, deren umsatz in einer saison nicht höher ist als der von kobe bryant	spieler, deren anzahl der umsätze in einer saison nicht mehr ist als die von kobe bryant	spieler, deren zahl der umsätze in einer saison ist nicht mehr als das von kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat die maximalen punkte von kobe bryant	welcher spieler die maximalen punkte von kobe bryant hat	welcher spieler hat die maximale anzahl der punkte von kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele spieler	wie viele spieler	wie viele spieler	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.player ) ( string ! type ) ) ) )
was war die gesamtanzahl der einkäufe in den spielzeiten, in denen kobe bryant nur drei spiele bestritten hatte?	was war die gesamtzahl der steals in saisons, in denen kobe bryant nur drei spiele gespielt hatte	was war die gesamtzahl der stiehlt in zeiten, wo kobe bryant hatte, spielte nur drei spiele	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_steals ) ) )
welcher spieler hatte 3 oder mehr vorlagen?	welcher spieler 3 oder mehr assists hatte	welche spieler hatten 3 oder mehr assists	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat die meisten positionen gespielt?	welcher spieler die meisten positionen gespielt hat	welcher spieler gespielt hat, die größte anzahl der positionen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string position ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele spiele bestritt kobe bryant, dessen team im laufe der saison los angeles lakers ist?	was ist die anzahl der spiele von kobe bryant, dessen team los angeles lakers über die saison ist	was ist die anzahl der gespielten spiele von kobe bryant, dessen team los angeles lakers über die saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_games_played ) ) )
spieler, die mehr und weniger als 3 blöcke in der saison haben	spieler, die mehr und weniger als 3 blöcke über saisons haben	spieler, die mehr haben und weniger als 3 blocks über jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_blocks ) ( string ! = ) ( number 3 block ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler mehr fouls begangen haben, die kobe bryant im laufe einer saison	welche spieler mehr fouls begangen haben, die kobe bryant über eine saison	was die spieler mehr fouls begangen, dass kobe bryant über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche position spielt kobe bryant?	welche position spielt kobe bryant	welche position hat kobe bryant spielen	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ) )
welche position hat kobe bryant in der saison 2004 gespielt?	welche position spielte kobe bryant in der saison 2004	welche position hat kobe bryant spielen in der saison 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string position ) ) )
wie viele umsätze hat kobe bryant in allen jahreszeiten?	wie viele umsätze hat kobe bryant über alle jahreszeiten	wie viele umsätze hat kobe bryant haben über alle jahreszeiten	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_turnovers ) ) )
was spieler haben weniger fouls als kobe bryant in allen jahreszeiten	welche spieler in allen saisons weniger fouls als kobe bryant haben	was haben die spieler weniger fouls als kobe bryant über alle jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler bekommt mehr blöcke als kobe bryant oder zumindest die gleichen	welcher spieler mehr blöcke als kobe bryant oder mindestens die gleiche bekommt	was bekommt der spieler mehr blöcke als kobe bryant oder zumindest das gleiche	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat nicht mehr als zwei mannschaften gespielt?	welcher spieler für nicht mehr als zwei teams gespielt hat	welcher spieler gespielt hat, für nicht mehr als zwei teams	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string team ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in wie vielen spielen war kobe bryant in der saison, die er mit den los angeles lakers spielte	wie viele spiele war kobe bryant in während der saison, die er mit den los angeles lakers gespielt	wie viele spiele war kobe bryant im laufe der saison spielte er bei den los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_games_played ) ) )
wie viele fouls wurden von kobe bryant gespielt, als er point guard war?	wie viele fouls wurde von kobe bryant gespielt, als er am point guard war	wie viele fouls wurden gespielt von kobe bryant, als er in der point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_fouls ) ) )
wie viele punkte erzielte kobe bryant in der saison, in der er drei spiele bestritt?	wie viele punkte erzielte kobe bryant in der saison, in der er 3 spiele spielte	wie viele punkte hat kobe bryant tore in der saison, in der er spielte 3 spiele	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_points ) ) )
in wie vielen spielen hat kobe bryant in der saison 2004 gespielt?	wie viele spiele spielte kobe bryant in der saison 2004	wie viele spiele hast, kobe bryant spielen während der saison 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_games_played ) ) )
finden sie die spieler mit einer gesamtanzahl von umsätzen in einer bestimmten saison, die weniger als 3 beträgt	finden sie spieler mit einer gesamtanzahl von umsätzen in einer bestimmten saison, die kleiner als 3 ist	finden die spieler mit insgesamt zahl der umsätze in einer bestimmten saison, die weniger als 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was war die gesamtanzahl der blöcke in einer saison für kobe bryant, als er drei vorlagen hatte?	was war die gesamtzahl der blöcke in einer saison für kobe bryant, wenn er drei assists hatte	was war die gesamtzahl der blöcke in einer saison für kobe bryant hatte, als er drei assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_blocks ) ) )
wie viele rebounds hat kobe bryant gehabt?	wie viele rebounds hat kobe bryant hatte	wie viele rebounds hat kobe bryant hatte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_rebounds ) ) )
wie viele assists hatte kobe bryant von den lakern?	wie viele assists hat kobe bryant der lakers haben	wie viele assists hat kobe bryant von den lakers haben	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_assists ) ) )
welcher spieler hat nicht weniger als 3 rebounds während der gesamten saison?	welcher spieler hat nicht weniger als 3 rebounds der ganzen saison	welche spieler hat keine weniger als 3 allseasonrebounds	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat die meisten spiele gespielt	der die meisten spiele gespielt hat	wer die meisten partien gespielt hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele rebounds hat der spieler, der nicht die 3 hat	wie viele rebounds hat spieler, die nicht die 3 hatten	wie viele rebounds hat spieler, die nicht die 3 hatte	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_rebounds ) ( string ! = ) ( number 3 rebound ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat mehr als 3 spiele gespielt?	welcher spieler mehr als 3 spiele gespielt hat	welche spieler spielten mehr als 3 spiele	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte die wenigsten rebounds?	welcher spieler die wenigsten rebounds hatte	die spieler hatten die wenigsten rebounds	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat mehr als 3 assists zu ihrem kredit pro saison	wer mehr als 3 assists auf ihrem kredit pro saison hat	wer mehr als 3 assists zu ihrem kredit pro saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat die wenigsten punkte gehabt	wer die wenigsten punkte hatte	wer hat die wenigsten punkte	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele vorlagen erhält kobe bryant in einer saison, in der er 3 oder mehr blöcke hat?	was ist die anzahl der assists kobe bryant bekommt in einer saison, wenn er 3 oder mehr blöcke bekam	was die anzahl der assists kobe bryant wird in einer saison, wenn er 3 oder mehr blöcke	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_assists ) ) )
welche saison kobe bryant machte 3 rebounds	welche saison kobe bryant machte 3 rebounds	die saison von kobe bryant aus 3 rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string season ) ) )
was war die position von kobe bryant?	was war die position von kobe bryant	was war die position von kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler spielt weniger als zwei positionen	welcher spieler weniger als zwei positionen spielt	welcher spieler spielt weniger als zwei positionen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte in dieser saison die wenigsten punkte?	welcher spieler in dieser saison die wenigsten punkte hatte	welche spieler hatte die wenigsten punkte in dieser saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in wie vielen spielen erzielte kobe 3 punkte?	in wie vielen spielen erzielte kobe 3 punkte	in wie viele spiele hast, kobescore 3 punkte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_games_played ) ) )
welcher spieler hat die wenigsten positionen gespielt?	welcher spieler die wenigsten positionen gespielt hat	was die spieler gespielt, die wenigsten positionen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string position ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte die gleiche anzahl von umsätzen wie kobe bryant?	welcher spieler die gleiche menge an umsätzen wie kobe bryant hatte	welche spieler hatten die gleiche höhe der umsätze als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat die meisten positionen inne?	welcher spieler die meisten positionen innehatte	welche spieler gehalten hat, die meisten positionen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string position ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele punkte hat kobe bryant die ganze saison über, wenn er auch 3 blöcke hat?	wie viele punkte hat kobe bryant die ganze saison, wenn er auch 3 blöcke hat	wie viele punkte hat kobe bryant allsaison, wenn er auch über 3 blöcke	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_points ) ) )
spieler mit den gleichen oder weniger blöcken pro saison als kobe bryant	spieler mit den gleichen oder weniger blöcken pro saison wie kobe bryant	spieler mit der gleichen oder weniger blöcke pro saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche spieler haben die meisten spiele in einer saison gespielt?	welche spieler die meisten spiele in einer saison gespielt haben	welcher spieler spielte die meisten spiele in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat mit höchstens zwei teams gespielt?	welcher spieler mit höchstens zwei teams gespielt hat	welcher spieler hat gespielt mit zwei teams	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string team ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was spieler hatten mehr stiehlt als kobe bryant in allen jahreszeiten	welche spieler über alle saisons mehr steals als kobe bryant hatten	was die spieler hatte mehr stiehlt, als kobe bryant über alle jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele rebounds hatte kobe bryant die ganze saison über als point guard	wie viele rebounds in der gesamten saison haben kobe bryant als point guard	wie viele die ganze saison rebounds hat kobe bryant als point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_rebounds ) ) )
nennen sie einen spieler mit mindestens so vielen diebstählen wie kobe bryant	nennen sie einen spieler mit mindestens so vielen steals wie kobe bryant	namen, die ein spieler mindestens so viele steals wie kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele spiele hat kobe bryant in einer saison gespielt, in der seine anzahl an blöcken über 3 lag?	wie viele spiele spielte kobe bryant in einer saison, in der seine anzahl von blöcken über 3 war	wie viele spiele hast, kobe bryant spielen in einer saison, wo seine anzahl der blöcke wurden über 3	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_games_played ) ) )
wie viele punkte hat kobe bryant in der saison erzielt?	wie viele punkte hat kobe bryant in der saison erzielt	wie viele punkte hat kobe bryant punktzahl in der saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_points ) ) )
nennen sie die saison, in der kobe bryants insgesamt 3 punkte erzielt hat	nennen sie die saison, in der kobe bryants gesamtpunktzahl 3 war	 name der saison, in der kobe bryants gesamtpunktzahl war 3	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_points ) ) )
was spieler haben mindestens so viele umsätze, die kobe bryant während einer saison hat	was spieler mindestens so viele umsätze haben, die kobe bryant während einer saison hat	was die spieler mindestens genauso viele umsätze, die kobe bryant hat während einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welche position hat kobe bryant mit 3 punkten bewertet?	in welcher position kobe bryant 3 punkte als	welche position hat kobe bryant 3 punkte wie	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string position ) ) )
spieler mit vorlagen ungleich drei in einer saison	spieler mit assists nicht gleich drei in einer saison	spieler mit beiständen nicht gleich drei in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string ! = ) ( number 3 assist ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele vorlagen hat kobe bryant in der saison gemacht, in der er drei punkte erzielte?	wie viele assists hat kobe bryant machen in der saison, in der er drei punkte erzielte	wie viele assists hat kobe bryant in der saison, in der er erzielte drei punkte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_assists ) ) )
wie viele fouls begeht kobe bryant durchschnittlich in einer saison?	wie viele fouls macht kobe bryant durchschnitt über eine saison	wie viele fouls hat kobe bryant im schnitt über eine saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string season ) ) )
was spieler weniger als 4 assists in einer saison gemacht haben	was spieler weniger als 4 assists in einer saison gemacht	was die spieler gemacht, die weniger als 4 assists in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string ! = ) ( number 3 assist ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was ist die position von kobe bryant in der saison 2004?	was ist die position von kobe bryant in der saison 2004	was ist die position von kobe bryant in der saison 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string position ) ) )
für welche mannschaft hat kobe bryant in der saison 2004 gespielt?	für welches team kobe bryant in der saison 2004 spielte	welches team hat kobe bryant spielen in der saison 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string team ) ) )
nennen sie kobe bryants position, als er drei umsätze hatte	name kobe bryants position, wenn er drei umsätze hatte	name kobe bryants position, wo er hatte drei umsätze	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string position ) ) )
spieler mit mehr fouls in einer saison als spieler kobe bryant	spieler mit mehr fouls über eine saison als spieler kobe bryant	spieler mit mehr fouls über eine saison als spieler kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit einer mindestanzahl von mannschaften	spieler mit minimaler anzahl von teams	spieler hat, die minimale anzahl von teams	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string team ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat in dieser saison die geringste punktzahl?	welcher spieler die wenigsten punkte in dieser saison hat	welcher spieler hat die wenigsten punkte in dieser saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
anzahl der blöcke in einer saison von spieler kobe bryant, der in einer saison 3 spiele gespielt hat	anzahl der blöcke über eine saison von spieler kobe bryant, der 3 spiele über eine saison gespielt hat	anzahl der blöcke, die im laufe einer saison spieler kobe bryant, spielte 3 spiele in einer saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_blocks ) ) )
in welcher position spielte kobe bryant, als er die saison hatte, in der er 3 steals hatte?	welche position war kobe bryant spielen, wenn er die saison hatte, in der er 3 steals hatte	welche position war kobe bryant spielen, wenn er die saison, in der er hatte 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string position ) ) )
wer hat weniger punkte als kobe bryant in einer saison	der in einer saison weniger punkte als kobe bryant hatte	wer hat weniger punkte als kobe bryant in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
während der saison erzielte er 3 punkte, wofür die anzahl der fouls von kobe bryant verantwortlich war	während der saison erzielte er 3 punkte, was war die anzahl der fouls kobe bryant war verantwortlich für	während der saison erzielte er er 3 punkte, was die anzahl der fouls von kobe bryant verantwortlich war für	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_fouls ) ) )
spieler, die in allen spielzeiten die gleiche anzahl an fouls wie kobe bryant haben	spieler, die die gleiche anzahl von fouls wie kobe bryant über alle jahreszeiten haben	spieler, die die gleiche anzahl von fouls von kobe bryant über alle jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele fouls hat kobe bryant durchschnittlich in der saison auf 3 rebounds begrenzt	wie viele fouls macht kobe bryant durchschnitt in saisons begrenzt auf 3 rebounds	wie viele fouls hat kobe bryant durchschnitt in den staffeln nur 3 rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_assists ) ) )
das ist das team von kobe bryant, das 3 umsätze hatte	das ist das team von kobe bryant, der 3 umsätze hatte	das ist das team von kobe bryant, der hatte 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string team ) ) )
wer hat die gleiche anzahl von vorlagen als kobe bryant gehabt	der die gleiche anzahl von assists wie kobe bryant hatte	wer hat die gleiche menge an assists von kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
als kobe bryant 3 allseasonumsätze hatte, wie viele allseasonpunkte hatte er	als kobe bryant 3 allseasonumsätze hatte, wie viele allseasonpunkte hatte er	wenn kobe bryant hatte 3 allseasonumsätze wie viele allseasonpunkte hatte er	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_points ) ) )
welche spieler hatten 3 oder weniger rebounds?	welche spieler 3 oder weniger rebounds hatten	was haben die spieler hatten 3 oder weniger rebounds	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
anzahl der punkte in einer saison von spieler kobe bryant, der 3 umsätze in einer saison hat	anzahl der punkte über eine saison von spieler kobe bryant, der 3 umsätze über eine saison hat	anzahl der punkte im laufe einer saison spieler kobe bryant, die 3 umsätze über eine saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_points ) ) )
was spieler über eine saison mehr steals als kobe bryant gemacht haben	was spieler mehr steals als kobe bryant gemacht über eine saison gemacht	was die spieler aus mehr stiehlt, als kobe bryant in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hatte wenige stiehlt im laufe der saison als kobe bryant	die nur wenige steals über die saison als kobe bryant hatte	wer hatte einige steals im laufe der saison als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat weniger als 3 punkte in dieser saison	der in dieser saison weniger als 3 punkte hatte	wer hat weniger als 3 punkte in dieser saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit einer gesamtanzahl von blöcken in einer saison, die den meisten blöcken in einer saison für kobe bryant entspricht	spieler mit einer gesamtanzahl von blöcken in einer saison gleich den meisten blöcken in einer saison für kobe bryant	spieler mit einem gesamtbetrag von blöcken in einer saison gleich um die meisten blöcke in einer saison für kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele punkte hat kobe bryant in dem spiel erzielt, in dem er in der letzten saison drei mal gestohlen hat?	wie viele punkte erzielte kobe bryant im spiel, dass er drei steals in der letzten saison hatte	wie viele punkte hat kobe bryant punktzahl im spiel, er hatte drei steals in der letzten saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_points ) ) )
wie viele assists hatte kobe bryant, als er 3 steals hatte?	wie viele assists hat kobe bryant haben, als er 3 steals hatte	wie viele assists hat kobe bryant haben, wenn er hatte 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_assists ) ) )
wie viele steals hatte kobe bryant in der saison 2004?	wie viele steals haben kobe bryant in der saison 2004	wie viele steals hat kobe bryant haben in der saison 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_steals ) ) )
wer hat die meisten punkte	wer die meisten punkte hat	wer die meisten punkte hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, die durch überholt waren	spieler, die von	spieler, die hatten outrebounded durch	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was ist die position des spielers kobe bryant mit 3 rebounds in dieser saison	was ist die position des spielers kobe bryant mit 3 rebounds in dieser saison	was ist die position des spielers kobe bryant mit 3 rebounds im laufe dieser saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string position ) ) )
spieler mit weniger als drei fouls pro spiel im laufe der saison spieler mit den wenigsten	spieler mit weniger als drei fouls pro spiel über die saison spieler mit den wenigsten	spieler mit weniger als drei fouls pro spiel über die saison die spieler mit den wenigsten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit den am wenigsten gespielten spielen in einer saison	spieler mit den am wenigsten gespielten spielen in einer saison	spieler mit den wenigsten gespielten spiele in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele umsätze hat point guard kobe bryant in einer saison?	wie viele umsätze hat point guard kobe bryant in einer saison	wie viele umsätze macht point guard kobe bryant in einer saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_turnovers ) ) )
finden sie die anzahl der blöcke in der saison, in der kobe bryant auch 3 steals erworben hat	finden sie die anzahl der blöcke in der saison, in der kobe bryant auch 3 steals erworben	finden sie die anzahl der blöcke in der saison, in dem kobe bryant auch erworben, 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_blocks ) ) )
wie viele rebounds und assists hat kobe bryant in einer saison?	wie viele rebounds und assists hat kobe bryant über eine saison	wie viele rebounds und assists hat kobe bryant haben über eine saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_rebounds ) ) )
wie viele ganzjahresblöcke hatte kobe bryant in 3 ganzjahresspielen?	wie viele allseasonblöcke haben kobe bryant in 3 allseasonspiele	wie viele allseasonblöcke haben kobe bryant haben in 3 allseasonspiele	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_blocks ) ) )
wie viele punkte hatte kobe bryant, der drei umsätze hatte	wie viele punkte hat kobe bryant, der drei umsätze hatte,	wie viele punkte hat kobe bryant, der hatte drei umsätze haben	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_points ) ) )
spieler mit weniger als 3 blöcken in allen jahreszeiten	spieler mit weniger als 3 blöcken über alle saisons	spieler mit weniger als 3 blocks über alle jahreszeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte weniger als 3 stiehlt	welcher spieler weniger als 3 steals hatte	welche spieler hatten weniger als 3 steals	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler, die im durchschnitt mindestens drei vorlagen pro spiel in einer saison haben	spieler, die durchschnittlich mindestens drei assists pro spiel über eine saison	spieler, die im durchschnitt mindestens drei assists pro spiel über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler in dieser saison am wenigsten gestohlen hat	welcher spieler in dieser saison am wenigsten stiehlt	welche spieler hatten die wenigsten steals in dieser saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer spielt für la lakers oder cleveland cavaliers	der für la lakers oder cleveland cavaliers spielt	wer spielt entweder la lakers oder die cleveland cavaliers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string = ) ( call SW.concat en.team.lakers en.team.cavaliers ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
was spieler weniger punkte als kobe bryant in einer saison gemacht	was spieler weniger punkte als kobe bryant über eine saison gemacht	was die spieler gemacht, die weniger punkte als kobe bryant über eine saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele blöcke hatte kobe bryant in einer saison? er hatte 3 punkte	wie viele blöcke hat kobe bryant in einer saison hatte er 3 punkte	wie viele blöcke hat kobe bryant in einer saison, er hatte 3 punkte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_blocks ) ) )
kobe bryant spielte in der saison 2004	kobe bryant spielte in der saison 2004	kobe bryant spielte in der saison 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string season ) ) )
nennen sie einen spieler, der so viele spiele wie kobe bryant gespielt hat	nennen sie einen spieler, der so viele spiele gespielt hat wie kobe bryant	name, den ein spieler gespielt hat, wie viele spiele kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_games_played ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit weniger als drei fouls in einer saison	spieler mit weniger als drei fouls in einer saison	spieler mit weniger als drei fouls in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele fouls hat kobe bryant gehabt	wie viele fouls hat kobe bryant hatte	wie viele fouls hat kobe bryant hatte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_fouls ) ) )
in welcher saison erzielte kobe bryant 3 punkte	welche saison hat kobe bryant 3 punkte erzielt	was saison hat kobe bryant punktzahl 3 punkte	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string season ) ) )
wie viele punkte wurden von kobe bryant erzielt?	wie viele punkte wurden von kobe bryant erzielt	wie viele punkte wurden erzielt, kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) )
in welcher saison gab kobe nur 3 fouls auf?	in welcher saison gab kobe nur 3 fouls auf	in welcher saison hat kobe nur bis 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string season ) ) )
was war die gesamtzahl der vorlagen in allen spielzeiten für den spieler kobe bryant, als er bei den los angeles lakers war?	was war die gesamtzahl der assists in allen jahreszeiten für spieler kobe bryant, als er mit den los angeles lakers war	was war die gesamtzahl der hilft in allen jahreszeiten für den spieler kobe bryant, als er mit den los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_assists ) ) )
wer hat die gleichen oder mehr fouls als kobe bryant gehabt	der die gleichen oder mehr fouls wie kobe bryant hatte	wer hat das gleiche oder mehr fouls von kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat die gleiche anzahl von ganzjahresvorlagen wie kobe bryant?	welcher spieler hat die gleiche anzahl von allseasonassists wie kobe bryant	welche spieler hat die gleiche anzahl von allsaisonassists von kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wer hat mehr als 3 vorlagen	der mehr als 3 assists hatte	wer hat mehr als 3 assists	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat weniger punkte erzielt als kobe bryant?	welcher spieler weniger punkte erzielt hat als kobe bryant	welcher spieler erzielt hat weniger punkte als kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
spieler mit drei oder mehr fouls in einer saison	spieler mit drei oder mehr fouls in einer saison	spieler mit drei oder mehr fouls in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hatte weniger als 3 blöcke die ganze saison über	welcher spieler hatte weniger als 3 blöcke die ganze saison	welche spieler hatten weniger als 3 blocks allesaison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
welcher spieler hat die meisten zweien pro position?	welcher spieler die meisten zweien nach position hat	welcher spieler hat die meisten zu zweit durch die position	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele blöcke hatte kobe bryant in einer saison?	wie viele blöcke haben kobe bryant während einer saison	wie viele blöcke hast, kobe bryant haben während einer saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_blocks ) ) )
für welche mannschaft hat kobe bryant gespielt, als er drei fouls in einer saison hatte?	für welches team kobe bryant spielen, wenn er 3 fouls in einer saison hatte	das team hat kobe bryant spielen, wenn er 3 fouls in einer saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string team ) ) )
was spieler allseason blocks sind nicht mehr als kobe bryants allseason blocks	was spieler ganzsaison blöcke sind nicht mehr als kobe bryants ganzsaison blöcke	was die spieler allseasonblöcke sind nicht mehr als kobe bryants allseasonblöcke	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele steals hat kobe bryant gehabt	wie viele steals hat kobe bryant hatte	wie viele steals hat kobe bryant hatte	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) )
nenne spieler mit einer einzigen position	namen von spielern mit einer einzigen position	name spieler mit einer einzigen position	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
anzahl der fouls in einer saison von spieler kobe bryant mit 3 vorlagen in einer saison	anzahl der fouls über eine saison von spieler kobe bryant mit 3 assists über eine saison	anzahl der fouls über eine saison der spieler kobe bryant, der mit 3 assists über eine saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_fouls ) ) )
was war die gesamtzahl der blöcke für kobe bryant in der saison 2004	was war die gesamtzahl der blöcke für kobe bryant in der saison 2004	was war die gesamtzahl der blöcke, die für kobe bryant in der saison 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_blocks ) ) )
wie viele blöcke mit einem diebstahl von mehr als 3 hat kobe bryant in einer saison gespielt?	wie viele blöcke mit steal über 3 kobe bryant spielen in einer saison	wie viele blöcke mit stehlen über 3 hast, kobe bryant spielen in einer saison	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_blocks ) ) )
in der saison, in der er 3 umsätze erzielt hat, gibt er die anzahl der spiele an, an denen kobe bryant teilgenommen hat	während der saison, in der er 3 umsätze hatte, nennen sie die anzahl der spiele, an denen kobe bryant teilnahm	während der saison, in denen er 3 turnovers namen die anzahl der spiele, in denen kobe bryant nahmen an	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_games_played ) ) )
gibt es spieler, die in einer saison mehr punkte erzielt haben als in der gleichen saison von kobe bryant?	gibt es spieler, die eine gesamtanzahl von punkten in einer saison größer als die gesamtzahl der punkte in der gleichen saison von kobe bryant erzielt haben	gibt es spieler, die erzielte gesamtzahl der punkte in einer saison, die größer als die gesamtzahl der erzielten punkte in der gleichen saison von kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
nennen sie den spieler, der die meisten punkte in einer saison erzielt hat	nennen sie den spieler, der die meisten punkte in einer saison erzielt hat	namen der spieler, erzielte die meisten punkte in einer saison	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
wie viele saisons hat kobe bryant für die los angeles lakers gespielt?	wie viele saisons hat kobe bryant für die los angeles lakers gespielt	wie viele jahreszeiten hat kobe bryant spielte für die los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string season ) ) )
kobe bryant mit drei assists hatte wie viele rebounds	kobe bryant mit drei assists hatte wie viele rebounds	kobe bryant mit drei assists hatte wie viele rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_rebounds ) ) )
welcher block ist rechts von block 1 und hat eine länge von 3 zoll	welcher block rechts von block 1 ist und eine länge von 3 zoll hat	was block ist auf der rechten seite von block 1 und hat eine länge von 3 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
wählen sie den block mit der gleichen breite wie block 1 mit der höhe	wählen sie den block, der die gleiche breite wie block 1 hat höhe	wählen sie den block, der die gleiche breite hat wie block 1 hat die höhe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( call SW.getProperty en.block.block1 ( string height ) ) ) )
3zollblock rechts von block 1	3 zoll block rechts von block 1	3zollblock rechts, block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
finde den block über den kleinsten blöcken	finden sie den block über den kleinsten blöcken	finden sie den block über die beine blockiert	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string below ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wählen sie einen block mit der gleichen breite wie block 1	wählen sie einen block aus, der die gleiche breite wie block 1 hat	wählen sie einen block, das ist die gleiche breite wie block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
wählen sie blöcke mit einer länge von 3 icnhes rechts von block 1 aus	wählen sie blöcke mit einer länge von 3 icnhes und rechts von block 1	wählen sie blöcke, die eine länge von 3 icnhes und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
block, dessen länge höchstens der höhe von block 1 entspricht	block, dessen länge bei maximaler höhe des blocks 1 ist	block, dessen länge höchstens höhe von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
block auf der linken seite von block 1, der 3 cm breit ist	block links von block 1, der 3 zoll breit ist	block links, block 1, das ist 3 cm breit	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
finde mich alle blöcke mit einer kleineren breite als die länge von block 1	finden sie mich alle blöcke mit einer kleineren breite als die länge von block 1	mich finden alle blöcke mit einer kleineren breite als die länge des block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
block, dessen höhe kleiner als die länge von block 1 ist	block, dessen höhe kleiner als die länge des blocks 1 ist	block, dessen höhe kleiner ist als die länge des block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
suchen sie einen block über block 1	suchen sie einen block, der sich über block 1 befindet	finden sie einen block, der über dem block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
welcher pyramidenförmige block ist von block 1 übrig geblieben?	welcher pyramidenförmige block von block 1 links ist	was pyramidenförmigen block links block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string left ) ( string = ) en.block.block1 ) )
finde mich alle blöcke kürzer als block 1	finden sie mich alle blöcke kürzer als block 1	mich finden alle blöcke kürzer als der block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
finde einen block, der höchstens so groß ist wie der block 1s breite	finden sie einen block höchstens so hoch wie block 1s breite	finden sie einen block höchstens so groß wie block 1s breite	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
oberhalb und links von block 1	oben und links von block 1	oberhalb und links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )
suchen sie einen block, der sich auf der linken seite von zwei anderen blöcken befindet	suchen sie einen block, der sich auf der linken seite von zwei anderen blöcken befindet	finden sie einen block, der auf der linken seite der beiden anderen blöcke	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block nach rechts und unter block 1	block rechts und unten block 1	block nach rechts und unten, block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )
nicht mehr als 3 cm breiter block	nicht mehr als 3 zoll breiter block	nicht mehr als 3 cm breiten block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
wählen sie den block rechts neben einem block mit einer länge von 3 zoll aus	wählen sie den block rechts von einem block mit einer länge von 3 zoll	wählen sie den block, der rechts von einem block mit einer länge von 3 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
suchen sie einen block mit einer breite, die kleiner als die höhe von block 1 ist	suchen sie nach einem block mit einer breite, die kleiner als die höhe von block 1 ist	finden sie einen block mit einer breite, die kleiner ist als die höhe des block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
finde mich alle 3 oder 6 zoll breiten blöcke	finden sie mich alle 3 oder 6 zoll breiten blöcke	mich finden alle 3 oder 6 zoll breite blöcke	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )
3zollblock in der nähe von oben	3zollblock in der nähe von oben	3zollblock in der nähe von top	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
suchen sie block 1 oder block 2	suchen von block eins oder block 2	suchen sie einem block oder block 2	( call SW.listValue ( call SW.concat en.block.block1 en.block.block2 ) )
links vom sonderblock	links von spezialblock	links von speziellen block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
finde mir den block, der eine länge von 3 zoll hat	finden sie mich den block, der eine länge von 3 zoll hat	finden mich der block hat eine länge von 3 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
welcher pyramidenförmige block über block 1 liegt	welcher pyramidenförmige block über block 1 liegt	was pyramidenförmigen block oben block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
welcher block ist einzigartig und wie eine pyramide geformt	welcher block einzigartig ist und wie eine pyramide geformt ist	was block ist einzigartig und geformt wie eine pyramide	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string shape ) ( string = ) en.shape.pyramid ) )
finde den block rechts von zwei oder mehr blöcken	finden sie mich den block, der sich rechts von zwei oder mehr blöcken befindet	finden sie mir den block, der rechts von zwei oder mehr blöcke	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wähle den längsten stein	wählen sie den längsten ziegel	wählen sie die längste ziegel	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string length ) ) ) )
suchen sie einen block rechts von einem block mit einer höhe von 3	finden sie einen block rechts von einem block 3 in der höhe	finden sie einen block auf der rechten seite von block 3 in der höhe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
welcher block ist zwei blöcke links von block 1	welcher block ist zwei blöcke links von block 1	was block ist in zwei blöcke links von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )
wählen sie die 3 zoll breiten blöcke aus	wählen sie die blöcke aus, die 3 zoll breit sind	wählen sie die blöcke, die sind 3 cm breit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )
finde mich alle blöcke länger als 3 zoll	finden sie mich alle blöcke länger als 3 zoll	mich finden alle blöcke, die länger als 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
block, der unter block ist, dessen breite 3 zoll ist	block, der unter block ist, dessen breite 3 zoll beträgt	block unten block, deren breite 3 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )
finden sie den block mit der gleichen länge wie block 1	finden sie den block mit der gleichen länge wie block 1	finden sie den block mit der gleichen länge wie block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string length ) ) ) )
finde mich alle blöcke mit mehr als 2 blöcken links davon	finden sie mich alle blöcke mit mehr als 2 blöcken links davon	mich finden alle blöcke mit mehr als 2 blocks auf der linken seite ist es	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher block ist rechts von block 1	welcher block rechts von block 1 ist	was block ist auf der rechten seite von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )
block über und links von block 1	block oberhalb und links von block 1	block oberhalb und links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
suchen sie den block rechts neben dem block links von block 1	finden sie den block rechts neben dem block, der sich links von block 1 befindet	finden sie den block auf der rechten seite des blocks, der sich links von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )
wie breit ist block 1?	wie breit ist block 1	wie breit ist block 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string width ) ) )
wähle die blöcke rechts und links von block 1 aus	wählen sie die blöcke rechts und links von block 1	wählen sie die blöcke links und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
befinden sich 3zolllange blöcke rechts von block 1?	gibt es irgendwelche 3 zoll langen blöcke rechts von block 1	gibt es irgendwelche 3inch langen blocks nach rechts block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
gibt es irgendwelche blöcke, deren höhe entweder 3 zoll oder höchstens 6 zoll beträgt?	gibt es blöcke, deren höhe die von mindestens 3 zoll oder 6 zoll ist	gibt es blöcke, deren höhe von entweder 3 cm oder 6 cm am meisten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
wähle den ziegel aus, der sich ganz links befindet	wählen sie den ziegel, der sich am weitesten links befindet	wählen sie die ziegel, die auf der am weitesten links	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string right ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wählen sie den block aus, über dem sich block 1 mit einer breite von 3 zoll befindet	wählen sie den block aus, der sich über block 1 mit einer breite von 3 zoll befindet	wählen sie den block, der block 1 ist oben mit einer breite von 3 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
finde mich alle 3 zoll hohen blöcke	finden sie mich alle 3 zoll hohen blöcke	mich finden alle 3 zoll hoch ist blockiert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
finde mich alle blöcke, die über 3 zoll hohen blöcken sind	finden sie mich alle blöcke, die über 3 zoll hohen blöcken ist	mich finden alle blöcke, die über 3 zoll hoch ist blockiert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
welcher stein ist kürzer als 3 zoll	welcher ziegel ist kürzer als 3 zoll	die ziegel, die kürzer als 3 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
suchen sie den block, der die form einer pyramide hat und sich rechts von block 1 befindet	finden sie den block, der eine form einer pyramide hat und sich rechts von block 1 befindet	finden sie den block, der hat die form einer pyramide und ist nach rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
links von block 3	links von block 3	links von block 3	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
block über sonderblock	block über sonderblock	block oberhalb speziellen block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
suchen sie einen block unterhalb und rechts von block 1	finden sie einen block unten und rechts von block 1	finden sie einen block unterhalb und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )
finde den 3 zoll langen block	finden sie den 3 zoll langen block	finden sie die 3zolllangen block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
block unter drei zoll block	block unter drei zoll block	block unten drei zoll block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
3 zoll hohen block rechts von block 1	3 zoll hoher block rechts von block 1	3 cm hohen block auf der rechten seite des block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string right ) ( string = ) en.block.block1 ) )
finde mir einen pyramidenförmigen block	finden sie mir jede pyramide geformten block	mich finden alle pyramidenförmigen block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) )
welcher stein ist 3 cm breit	welcher ziegel 3 zoll breit ist	die backstein ist 3 cm breit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
welcher block hat die größte anzahl von blöcken auf der linken seite	welcher block die größte anzahl von blöcken links hat	der block hat die größte anzahl von blöcken auf der linken seite	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string left ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle blöcke, die block 1 ist rechts und unterhalb von	finden sie mich alle blöcke, die block 1 ist rechts und unten von	mich finden alle blöcke, block 1 ist rechts und unten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )
wähle den block mit den meisten formen aus	wählen sie den block mit den meisten formen	wählen sie den block mit den meisten formen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string shape ) ) )
block rechts von block 1, der 3 cm hoch ist	block rechts von block 1, der 3 zoll hoch ist	block rechts, block 1, das ist 3 cm hoch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
block, dessen länge die länge von block 1 ist	block, dessen länge die länge des blocks 1 ist	block, dessen länge der länge des block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string length ) ) ) )
finde mich alle 3 zoll langen steine links von block 1	finden sie mich alle 3 zoll langen ziegel links von block 1	mich finden alle die 3 zoll lange steine links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string left ) ( string = ) en.block.block1 ) )
wählen sie den block links vom spezialblock aus	wählen sie den block links vom sonderblock	wählen sie den block auf der linken seite der spezielle block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
welcher block ist block 1 oder 2 rechts von	welcher block block 1 oder 2 rechts von	block ist block 1 oder 2 rechts neben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
ein pyramidenförmiger block	ein pyramidenförmiger block	einem pyramidenförmigen block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string shape ) ( string = ) en.shape.pyramid ) )
finde alle blöcke, die über und unter block 1 liegen	finden sie mich alle blöcke, die oben und unten block 1	mich finden alle blöcke, die oberhalb und unterhalb von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
welcher stein eine länge hat, die kürzer als die länge von stein 1 ist	welcher ziegel hat eine kürzere als die länge des ziegels 1	die backsteinhat eine länge kürzer als die länge der ziegel 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
nennen sie einen block, der zwei oder mehr formen hat	benennen eines blocks mit zwei oder mehr shapes	name ablock, der zwei oder mehr formen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string >= ) ( number 2 ) ) )
welcher stein von stein 1 oder 2 übrig ist	welcher ziegel von ziegel 1 oder 2 übrig ist	die ziegel ist links von ziegel 1 oder 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
welcher stein über weniger als zwei steinen liegt	welcher ziegel über weniger als zwei ziegeln ist	die backstein ist vor weniger als zwei ziegelsteine	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle blöcke mit der gleichen form wie block 1	finden sie mich alle blöcke mit der gleichen form wie block 1	mich finden alle blöcke mit der gleichen form wie der block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) ( call SW.getProperty en.block.block1 ( string shape ) ) ) )
block mit block 1 rechts und links	block, der block 1 rechts und links hat	block, dass block 1 in der rechten und linken	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
welcher block ist über einem block, der drei zoll hoch ist	welcher block über einem block liegt, der drei zoll hoch ist	was block ist oben ein block, der drei zoll in der höhe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
wähle alle blöcke aus, die die form einer pyramide haben	wählen sie alle blöcke aus, die in form einer pyramide sind	wählen sie alle blöcke, die in der form einer pyramide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
suchen sie den block, der die gleiche höhe wie block 1 hat	suchen sie den block, der die gleiche höhe wie block 1 hat	finden sie den block, der die gleiche höhe wie block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.getProperty en.block.block1 ( string height ) ) ) )
finde mich einen block rechts von block 1 oder block 2	finden sie mir einen block rechts von block 1 oder block 2	finden sie mir einen block auf der rechten seite von entweder block 1 oder block 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
block größer oder gleich hoch wie die breite von block 1	block höher oder gleich hoch wie die breite des blocks 1	block höher oder gleiche höhe wie breite block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
wählen sie einen stein, der mindestens so breit ist, wie der stein 1 lang ist	wählen sie einen ziegel, der mindestens so breit ist wie ziegel 1 lang ist	wählen sie einen ziegel, der mindestens so breit ist wie die ziegel 1 ist lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
holen sie sich den zweiten block über block 1	den zweiten block über block 1	den zweiten block oben block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
finde mich alle blöcke mit höchstens 2 farben	finden sie mich alle blöcke mit höchstens 2 farben	mich finden alle blöcke mit höchstens 2 farben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string <= ) ( number 2 ) ) )
block, der nicht block 1 oben hat	block, der block 1 oben nicht hat	block nichtblock 1 oben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string ! = ) en.block.block1 ) )
finde mich alle steine mit 2 blöcken darüber	finden sie mich alle ziegel mit 2 blöcken darüber	mich finden alle steine mit 2 blocks oben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block, der mehr als zwei block ist rechts von	block, dass mehr als zwei block rechts von	block, der mehr als zwei block rechts	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
was ziegel so breit ist wie ziegel 1, ist lang	welcher ziegel so breit ist wie ziegel 1 ist lang	was brick ist so breit wie ziegel 1 ist lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( call SW.getProperty en.block.block1 ( string length ) ) ) )
finde mich alle blöcke mit weniger als 2 blöcken rechts davon	finden sie mich alle blöcke mit weniger als 2 blöcken auf der rechten seite davon	mich finden alle blöcke mit weniger als 2 blocks auf der rechten seite	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welche farbe hat block 1?	welche farbe ist block 1	welche farbe ist block 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string color ) ) )
suchen sie den block über dem 3 zoll hohen block	finden sie den block auf der oberseite des blocks, der 3 zoll hoch ist	finden sie den block oben am block, der ist 3 cm hoch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
finde mich alle blöcke 2 unter block 1	finden sie mich alle blöcke 2 unter block 1	mich finden alle 2 blöcke unterhalb von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )
block unter zwei anderen blöcken	block unter zwei anderen blöcken	block unterhalb der beiden anderen blöcke	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle blöcke, die block 1 unten ist	finden sie mich alle blöcke, die block 1 ist unten	mich finden alle blöcke, block 1 ist unten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
finde blöcke, die breiter als 5 cm sind	finden sie blöcke breiter als 3 zoll	finden blocks breiter als 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
block, der von block links ist, dessen höhe 3 zoll beträgt	block, der links von block ist, dessen höhe 3 zoll beträgt	block, links block, dessen höhe 3 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
welcher ziegelstein ist unter einem ziegelstein, der 3 zoll lang ist	welcher ziegel ist unter einem ziegel, der 3 zoll lang ist	was ziegel unter ziegel, der ist 3 cm lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
2 blöcke rechts von block 1	2 blöcke rechts von block 1	2 blöcke rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )
finde mich alle blöcke unter mindestens 2 blöcken	finden sie mich alle blöcke unter mindestens 2 blöcken	mich finden alle blöcke unter sich mindestens 2 blöcke	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle blöcke mindestens 3 cm breit	finden sie mich alle blöcke mindestens 3 zoll in der breite	mich finden alle blöcke mindestens 3 cm in der breite	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
welcher block ist rechts von block 1	welcher block rechts von block 1 ist	was block ist auf der rechten seite von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )
block breiter als blocklänge 1	block breiter als länge des blocks 1	blockieren mehr breiter als die länge des block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
finde mich den 3 zoll breiten pyramidenförmigen block	finden sie mir die 3 zoll breite pyramide geformten block	finden mir die 3 zoll breit pyramidenförmigen block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string shape ) ( string = ) en.shape.pyramid ) )
welcher spezialstein ist pyramidenförmig?	welcher spezielle ziegel pyramidenförmig ist	die besonderen ziegelpyramide geformt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string is_special ) ) )
finde mich alle blöcke links und unter block 1	finden sie mich alle blöcke links und unten block 1	mich finden alle blöcke links und untenblock 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )
finde mich alle blöcke, die block 1 unten und oben ist	finden sie mich alle blöcke, die block 1 ist unten und oben	mich finden alle blöcke, block 1 ist unten und oben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
welcher block ist 3 oder weniger zoll breit	welcher block ist 3 oder weniger zoll breit	was block 3 oder weniger zoll breit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
finde alle blöcke über und rechts von block 1	finden sie mich alle blöcke, die oben und rechts von block 1 ist	mich finden alle blöcke, die oberhalb und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )
finde alle pyramidenblöcke links oder rechts von block 1	finden sie mich alle pyramidenblöcke, die links oder rechts von block 1 ist	mich finden alle pyramidenblöcke, die links oder rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
welche farbe hat ziegel 1?	welche farbe ist ziegel 1	welche farbe ist ziegel 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string color ) ) )
welcher block ist auf der linken seite des 3zollhohen blocks	welcher block ist auf der linken seite des 3 zoll hohen blocks	was block ist auf der linken seite der 3 zoll hohen block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
finden sie alle blöcke, die sich unter blöcken mit einer höhe von 3 zoll befinden	finden sie alle blöcke, die sich unter blöcken befinden und eine höhe von 3 zoll aufweisen	finde alle blöcke unterhalb des blocks mit der höhe 3 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
finde mich alle blöcke nicht richtig von block 1	finden sie mich alle blöcke nicht rechts von block 1	mich finden alle blöcke nicht direkt von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string ! = ) en.block.block1 ) )
block, dessen höhe mindestens der höhe von block 1 entspricht	block, dessen höhe mindestens die höhe des blocks 1 beträgt	block, dessen höhe mindestens der höhe von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
welcher block hat die meisten blöcke darüber	welcher block die meisten blöcke darüber hat	was block hat die meisten blöcke oben	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string below ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde den 3 zoll langen block links von block 1	finden sie den 3 zoll langen block links von block 1	finden sie die 3zolllangen block links block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
links und über block 1	links und oben block 1	links und oben block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )
welcher block hat block 1 links und rechts	welcher block block 1 links und rechts hat	was block block 1 links und rechts	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )
welche form hat block 1?	welche form block 1 ist	welche form block 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string shape ) ) )
ein ziegelstein, dessen länge zwischen 3 und 6 zoll liegt	ein ziegel, der zwischen 3 und 6 zoll ist	ein backstein, die länge liegt zwischen 3 und 6 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
suchen sie einen block auf der linken seite der kleinsten anzahl von blöcken	suchen eines blocks auf der linken seite der kleinsten anzahl von blöcken	suchen sie einen block, der auf der linken seite die kleinste anzahl von blöcken	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string left ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wählen sie den 3 oder 6 zoll breiten block	wählen sie den 3 oder 6 zoll breiten block	wählen sie den 3oder 6zollbreiten block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )
block, dessen breite mindestens der höhe von block 1 entspricht	block, dessen breite mindestens die höhe des blocks 1 beträgt	block, deren breite zumindest der höhe des block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
welcher block sich unter block 1 befindet, der mindestens 3 zoll hoch ist	welcher block unter block 1 ist, der mindestens 3 zoll hoch ist	welcher block unten block 1, der mindestens 3 cm hoch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
welcher block ist links und rechts von block 1	welcher block links und rechts von block 1 ist	was block ist links und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
welche speziellen blöcke stehen über block 1?	welche spezialblöcke über block 1 liegen	was spezielle blöcke sind oben block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string above ) ( string = ) en.block.block1 ) )
wähle den baustein unten und rechts von block 1 aus	wählen sie den ziegel unten und rechts von block 1	wählen sie die ziegel von unten und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )
3 zoll langer block	3 zoll langer block	3 cm langer block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
wählen sie den stein mit der geringsten breite	wählen sie den ziegel mit der kleinsten breite	wählen sie die ziegel mit der kleinsten breite	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string width ) ) ) )
welcher spezialziegel rechts von ziegel 1 ist	welcher spezielle ziegel rechts von ziegel 1 ist	die besonderen ziegel ist auf der rechten seite der ziegel 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string right ) ( string = ) en.block.block1 ) )
finde mich alle blöcke von mehr als 2 blöcken	finden sie mich alle blöcke links von mehr als 2 blöcke	mich finden alle blöcke links von mehr als 2 blöcke	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wähle den ziegelstein rechts neben dem 3zollblock aus	wählen sie den ziegel rechts vom 3zollblock	wählen sie die ziegel auf der rechten seite der 3zollblock	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
block, dessen länge der breite von block 1 entspricht	block, dessen länge die breite des blocks 1 ist	block, dessen länge breite block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )
wie hoch sind die blöcke?	was ist die blockhöhe	was die blöcke höhe	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ) ) )
block nach links von zwei oder mehr blöcken	block links von zwei oder mehr blöcken	block auf der linken von zwei oder mehr blöcke	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wähle ziegel 1 oder ziegel 2	wählen sie ziegel 1 oder ziegel 2	wählen sie ziegel 1 oder brick 2	( call SW.listValue ( call SW.concat en.block.block1 en.block.block2 ) )
finde mich alle blöcke höchstens 3 cm lang	finden sie mich alle blöcke höchstens 3 zoll lang	mich finden alle blöcke höchstens 3 cm lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
welche blöcke sind etwas besonderes und liegen unter block 1?	welche blöcke sind speziell und befinden sich unter block 1	was blöcke sind spezielle und unter block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
finde mich alle blöcke nicht unter block 1	finden sie mich alle blöcke nicht unter block 1	mich finden alle blöcke, die nicht unterhalb von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string ! = ) en.block.block1 ) )
finde mich alle blöcke, die nicht von block 1 übrig sind	finden sie mich alle blöcke nicht links von block 1	mich finden alle blöcke die nicht links von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string ! = ) en.block.block1 ) )
wähle den kürzesten block	wählen sie den kürzesten block	wählen sie den kürzesten block	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string length ) ) ) )
finde alle spezialblöcke, über denen block 1 liegt	finden sie mich alle speziellen blöcke, die block 1 ist oben	mich finden alle speziellen blöcken, block 1 ist oben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string is_special ) ) )
wählen sie den block aus, der sich rechts von block 1 befindet und 3 zoll hoch ist	wählen sie den block rechts von block 1 und hat eine höhe von 3 zoll	wählen sie den block, der rechts von block 1 und hat eine höhe von 3 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
finde mich einen block mindestens 3 cm breit	finden sie mir einen block mindestens 3 zoll breit	mich finden einen block von mindestens 3 cm breit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
welcher block ist übrig und unter block 1	welcher block links und unten ist block 1	was block ist links und untenblock 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )
finde die gesamthöhe der blöcke	finden sie die gesamthöhe der blöcke	finden sie die höhe des blocks	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ) ) )
block rechts von zwei oder mehr blöcken	block rechts von zwei oder mehr blöcken	block nach rechts von zwei oder mehr blöcke	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher block hat die gleiche farbe wie block 1?	welcher block die gleiche farbe wie block 1 hat	in welchem block die gleiche farbe wie block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string = ) ( call SW.getProperty en.block.block1 ( string color ) ) ) )
finde mich einen block kleiner als 6 zoll	finden sie mich einen block kleiner als 6 zoll	finden sie mir einen block kleiner als 6 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
welcher ziegelstein links von dem 3 zoll hohen ziegelstein ist	welcher ziegel ist auf der linken seite des ziegels, der 3 zoll hoch ist	die ziegel auf der linken seite der ziegel, der ist 3 zoll groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
suchen sie den block links von block 1	finden sie den block, der sich links von block 1 befindet	finden sie den block, der sich links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
wählen sie den sonderblock rechts von block 1 aus	wählen sie den sonderblock rechts von block 1	wählen sie die speziellen block auf der rechten seite von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string is_special ) ) )
wählen sie einen block, der größer als block 1 ist	wählen sie einen block, der größer als block 1 ist	wählen sie einen block, der größer ist als der block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
3zollblock links von block 1	3zollblock links von block 1	3zollblock links block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
welcher block hat eine breite von weniger als 3 zoll	welcher block hat eine breite von weniger als 3 zoll	der block hat eine breite von weniger als 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
suchen sie einen block, dessen breite drei zoll beträgt, und block 1 befindet sich rechts von	finden sie einen block, dessen breite drei zoll beträgt, dass block 1 rechts von	finden sie einen block, dessen breite drei zentimeter, der block 1 ist auf der rechten seite von	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
finde alle sonderblöcke, unter denen block 1 liegt	finden sie mich alle speziellen blöcke, die block 1 ist unter	mich finden alle speziellen blöcken, block 1 ist unter	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
finde mich alle blöcke rechts von 3 zoll hohen blöcken	finden sie mich alle blöcke rechts von 3 zoll hohen blöcken	mich finden alle blöcke rechts 3 zoll hoch ist blockiert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
finde den speziellen block links von block 1	finden sie den speziellen block links von block 1	finden sie die speziellen block links block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string is_special ) ) )
welcher stein nicht breiter als stein 1 ist, ist lang	welcher ziegel nicht breiter als ziegel 1 ist lang	die backstein ist nicht breiter als ziegel 1 ist lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
block, der unter block ist, dessen höhe 3 zoll ist	block, der unter block ist, dessen höhe 3 zoll beträgt	block unten block, dessen höhe 3 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
wählen sie den block unter block 1, der 5 cm lang ist	wählen sie den block unter block 1, der 3 zoll lang ist	wählen sie den block unter den block 1, der ist 3 cm lang	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
gibt es einen block unter zwei anderen blöcken?	gibt es einen block unter zwei anderen blöcken	gibt es einen block, die unter zwei andere blöcke	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
nennen sie einen block, auf dessen linker seite sich block 1 befindet	benennen sie einen block mit block 1 auf der linken seite	namen einem block, dass block 1 auf der linken	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
welcher block ist über zwei blöcken	welcher block über zwei blöcken liegt	was block wird über zwei blöcke	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block, der höchstens einem block entspricht	block, der höchstens einen block hat	block, der rechts von höchstens einem block	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde alle blöcke, die unten in block 1 oder 2 stehen	finden sie mich alle blöcke, die blöcke 1 oder 2 ist unten	mich finden alle blöcke, die blöcke 1 oder 2 ist unten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
finde mir alle blöcke, die etwas besonderes sind	finden sie mich alle blöcke, die speziell sind	mich finden alle bausteine, sind spezielle	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
suchen sie den block links von der größten anzahl von blöcken	finden sie den block links von der größten anzahl von blöcken	finden sie den block nach links von der größten anzahl von blöcken	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string left ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finden sie den block links neben dem block, über dem sich block 1 befindet	finden sie mich den block, der sich links neben dem block befindet, der block 1 oben ist	finden sie mir den block links von dem block, der block 1 ist oben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )
finde alle blöcke, die rechts von dem block sind, zu dem block 1 gehört	finden sie mich alle blöcke, die rechts von dem block ist, der block 1 ist rechts von	mich finden alle blöcke rechts der block, der block 1 ist richtig, der	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )
wählen sie den block mit der größten breite	wählen sie den block mit der größten breite	wählen sie den block mit der größten breite	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string width ) ) ) )
welcher block ist links von nicht mehr als zwei blöcken	welcher block sich links von nicht mehr als zwei blöcken befindet	der block ist auf der linken seite nicht mehr als zwei blöcke	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block, der unter der geringsten anzahl von blöcken liegt	block, der unter der geringsten anzahl von block ist	block, der unter der geringsten anzahl von block	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string below ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher ziegelstein über einem 3 zoll breiten ziegelstein liegt	welcher ziegel über einem ziegel steinist, der 3 zoll breit ist	die ziegel über ziegel, der ist 3 cm breit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )
finde mich alle 3 oder 6 zoll hohen blöcke	finden sie mich alle 3 oder 6 zoll hohen blöcke	mich finden alle 3 oder 6zollhighblöcke	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )
finde mich einen block über mindestens zwei blöcken	finden sie mich einen block über mindestens zwei blöcken	finden sie mir einen block über mindestens zwei blöcke	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wähle den block auf der rechten seite von block 1 aus	wählen sie den block auf der rechten seite von block 1	wählen sie den block auf der rechten seite von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
finden sie die blöcke mit längen, die entweder 3 oder 6 zoll überschreiten	finden sie blöcke mit längen, die entweder 3 oder 6 zoll überschreiten	finden sie die blöcke mit längen überschreiten, entweder 3 oder 6 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
blockhöhe 1	höhe des blocks 1	höhe block 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string height ) ) )
block, der kürzer als block 1 ist	block, der kürzer als block 1 ist	block, der kleiner ist als der block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
block, der kürzer als block eins ist	block, der kürzer als block eins ist	block, der kleiner ist als der block ein	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
wählen sie die blöcke links unterhalb von block 1 aus	wählen sie blöcke aus, die sich unterhalb und links von block 1 befinden	wählen sie blöcke, die unterhalb und links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )
welcher stein hat nicht mehr als zwei steine zu seiner linken	welcher ziegel hat nicht mehr als zwei steine zu seiner linken	was brick hat nicht mehr als zwei steine auf der linken seite	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wählen sie den block rechts neben der geringsten anzahl von blöcken aus	wählen sie den block rechts von der geringsten anzahl von blöcken	wählen sie den block auf der rechten seite der geringsten menge von blöcken	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string right ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wählen sie einen block, der nicht 3 zoll ist	wählen sie einen block, der nicht 3 zoll groß ist	wählen sie einen block, der nicht 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string ! = ) ( number 3 en.inch ) ) )
gibt es einen block mit einer länge, deren maß dem der blockhöhe entspricht?	gibt es einen block mit einer länge, deren messung der des blocks 1s höhe entspricht	gibt es einen block mit einer länge, deren messung entspricht, dass der block1s höhe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
wähle einen block links von dem speziellen stein	wählen sie einen block links vom speziellen ziegel	wählen sie einen block auf der linken seite der spezielle ziegel	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
suchen sie den block, der über block 1 liegt	finden sie den block, der sich auf block 1 befindet	finden sie den block, der auf der oberseite des block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )
finde mich alle blöcke so hoch wie block 1	finden sie mich alle blöcke so hoch wie block 1	mich finden alle blöcke so hoch wie block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.getProperty en.block.block1 ( string height ) ) ) )
wählen sie einen stein, der mindestens 3 cm breit ist	wählen sie einen ziegel, der mindestens 3 zoll breit ist	wählen sie einen ziegel, der mindestens 3 cm breit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
welcher block hat die größte höhe	welcher block die größte höhe hat	was der block mit der größten höhe	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string height ) ) ) )
block innerhalb von 2 blocks nach links	block innerhalb von 2 blöcken nach links	block in 2 blöcke auf der linken seite	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher stein hat mindestens 2 steine rechts von ihm	welcher ziegel mindestens 2 steine zu seiner rechten hat	was brick hat mindestens 2 steine zu seiner rechten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher ziegelstein ist links vom speziellen ziegelstein	welcher ziegel links vom speziellen ziegel steinist	die ziegel auf der linken seite der spezielle ziegel	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
suche mir einen block mit der gleichen oder einer geringeren breite als block 1	finden sie mir einen block mit gleicher oder weniger breite als block 1	finden sie mir einen block mit gleich oder weniger breite als der block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
block rechts und ab block 1	block rechts und oben von block 1	block rechts und von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )
wählen sie einen block mit der gleichen breite und höhe	wählen sie einen block mit der gleichen breite und höhe aus	wählen sie einen block, der die gleiche breite und höhe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )
finde mich alle 3 zoll breiten blöcke unter block 1	finden sie mich alle 3 zoll breiten blöcke unter block 1	mich finden alle die 3 cm breite blöcke unterhalb von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string below ) ( string = ) en.block.block1 ) )
suchen sie den block, der von block 1 oder block 2 übrig ist	finden sie den block, der von block 1 oder block 2 übrig ist	finden sie den block, links block 1 oder block 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
finde mich alle blöcke, die block 1 unten und rechts von	finden sie mich alle blöcke, die block 1 ist unten und rechts von	mich finden alle blöcke, block 1 ist unten und rechts	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
suchen sie den block mit der geringsten anzahl von blöcken links daneben	suchen sie den block mit der geringsten anzahl von blöcken daneben auf der linken seite	suchen sie den block mit der geringsten menge von blöcken, die neben ihm auf der linken seite	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string left ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wählen sie den baustein mit den wenigsten blöcken rechts davon aus	wählen sie den ziegel, der die wenigsten blöcke auf der rechten seite hat	wählen sie die ziegel, das hat die wenigsten blöcke auf der rechten seite	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string left ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finden sie den block mit 3 zoll breite	finden sie den block mit 3 zoll breite	finden sie den block mit 3 cm breite	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
welcher block ist block 1 unten und links von	welcher block ist block 1 unter und links von	block ist block 1 unten und auf der linken seite	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
wählen sie den speziellen 3zollhohen block	wählen sie den speziellen 3 zoll hohen block	wählen sie die spezielle 3zollhohen block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string is_special ) ) )
finden sie einen block, der 3 cm lang ist	finden sie einen block, der 3 zoll lang ist	finden sie einen block, der ist 3 cm lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
welcher ziegelstein ist so lange wie ziegelstein 1 breit ist	welcher ziegel ist so lang wie ziegel 1 breit ist	was brick ist so lang wie ziegel 1 ist breit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )
block, dessen höhe 3 zoll und dessen breite 3 zoll beträgt	block, dessen höhe 3 zoll beträgt und dessen breite 3 zoll beträgt	block, dessen höhe 3 cm und dessen breite 3 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
welcher block ist größer als block 1?	welcher block größer ist als block 1	was block ist größer als der block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
wählen sie unter block 1 einen block mit pyramidenform	block mit pyramidenform unter block 1 wählen	wählen sie block mit pyramidenform unter block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string below ) ( string = ) en.block.block1 ) )
finde den block, den block 1 auf der rechten seite und darüber hat	finden sie mich den block, der block 1 ist auf der rechten seite und oben	finden mich der block, der block 1 ist auf der rechten seite und oben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )
finde mich alle blöcke rechts von block 1 ist oben	finden sie mich alle blöcke rechts von diesem block 1 ist oben	mich finden alle blöcke rechts von block 1 ist oben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )
finde mich alle blöcke so hoch wie block 1 lang ist	finden sie mich alle blöcke so hoch wie block 1 ist lang	mich finden alle blöcke so hoch wie block 1 ist lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
finde mich alle sonderblöcke über block 1	finden sie mir alle speziellen blöcke über block 1	mich finden alle das besondere blöcke über block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string is_special ) ) )
finde alle blöcke unter dem block 1, der darüber liegt	finden sie mich alle blöcke unter diesem block 1 ist oben	mich finden alle blöcke unterhalb von block 1 ist oben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
bring mir einen block rechts von einem 3zollblock	holen sie mir einen block auf der rechten seite eines 3zollblocks	hole mir einen block auf der rechten seite einer 3inch block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
finden sie einen block mindestens 3 cm lang	finden sie einen block mindestens 3 zoll lang	finden sie einen block von mindestens 3 cm lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
sonderblock rechts von block 1	spezielle blockrechte s.a. block 1	spezielle block rechts, block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string is_special ) ) )
finden sie einen block mindestens 3 cm breit	finden sie einen block mindestens 3 zoll breit	finden sie einen block von mindestens 3 cm breit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
block, der über höchstens zwei block ist	block, der über höchstens zwei blocks ist	block, der oben bei den meisten zweiblock	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher stein ist nicht breiter als 3 oder 6 zoll	welcher ziegel nicht breiter als 3 oder 6 zoll ist	die backstein ist nicht breiter als 3 oder 6 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
welcher block hat die meisten blöcke darunter?	welcher block die meisten blöcke darunter hat	was block hat die meisten blöcke unten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string above ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mir einen block, der entweder 3 oder 6 zoll groß ist	finden sie mir einen block, der entweder 3 oder 6 zoll groß ist	finden sie mich ein block, der entweder 3 oder 6 zoll groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )
finde mich in allen blöcken über höchstens 2 blöcken	finden sie mich alle blöcke über höchstens 2 blöcke	mich finden alle blöcke oberhalb höchstens 2 blöcke	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
2. block rechts von block 1	2. block rechts von block 1	2. block rechter block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )
wählen sie einen block, der höchstens 2 blocks links liegt	wählen sie einen block, der höchstens 2 block links ist	wählen sie einen block, der bei den meisten 2block auf der linken seite	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher block ist unter dem 3 zoll langen block	welcher block sich unterhalb des 3 zoll langen blocks befindet	was block unter der 3zolllangen block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
block, dessen länge 3 zoll oder 6 zoll ist	block, dessen länge 3 zoll oder 6 zoll ist	block, dessen länge von 3 zoll oder 6 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )
block, dessen länge mindestens der höhe von block 1 entspricht	block, dessen länge die höhe des blocks 1 minimal ist	block, dessen länge mindestens der höhe von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
finde mich alle blöcke rechts vom pyramidenblock	finden sie mich alle blöcke rechts vom pyramidenblock	mich finden alle blöcke, die rechts von der pyramide block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
finde mich alle blöcke breiter als 3 zoll	finden sie mich alle blöcke als breiter als 3 zoll	mich finden alle blöcke, die breiter als 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
welcher block ist rechts und über block 1	welcher block rechts und oben block 1 ist	was block nach rechts und oben block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
suchen sie einen speziellen block unter block 1	finden sie einen speziellen block unter block 1	finden sie einen speziellen block unten block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
suchen sie den block rechts neben dem block, unter dem sich block 1 befindet	finden sie den block rechts neben dem block, der block 1 unten ist	finden sie den block, der rechts neben dem block, der block 1 ist unten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )
block links von block links von block 1	block, der vom block links von block 1 übrig ist	block, links block, links block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )
finde einen block, der breiter als block 1 ist	finden sie einen block breiter als block 1 ist hoch	finden sie einen block, breiter als der block 1 ist groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
welcher stein ist nicht höher als 3 oder 6 zoll	welcher ziegel nicht höher als 3 oder 6 zoll ist	die ziegel nicht höher als 3 oder 6 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
finde mich alle blöcke mit mindestens 2 blöcken darüber	finden sie mich alle blöcke mit mindestens 2 blöcken darüber	mich finden alle blöcke mit mindestens 2 blöcke oben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher block ist unter dem block unter block 1	welcher block sich unterhalb des blocks unter block 1 befindet	welcher block unter dem block unten block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )
finde mich alle blöcke mit weniger als 2 blöcken darüber	finden sie mich alle blöcke mit weniger als 2 blöcke n. b.	mich finden alle blöcke mit weniger als 2 blocks oben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher stein ist höher als 3 oder 6 zoll	welcher ziegel höher als 3 oder 6 zoll ist	die ziegel höher ist als 3 oder 6 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
welcher block hat eine höhe, die kleiner oder gleich der länge von block 1 ist?	welcher block eine höhe hat, die kleiner oder gleich der länge des blocks 1 ist	was block hat eine höhe weniger als oder gleich der länge des block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
finden sie blöcke, die mindestens 3 cm breit oder 6 cm breit sind	finden sie blöcke, die mindestens 3 zoll breit oder 6 zoll breit sind	finden sie blöcke von mindestens 3 cm oder 6 cm breit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
suchen sie den speziellen block	suchen sie den speziellen block	suchen sie den block, der besondere	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) )
gibt es einen block mit einer breite von 3 oder 6 zoll	gibt es einen block mit einer breite von 3 oder 6 zoll	ist es ein block mit einer breite gleich entweder 3 oder 6 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )
finde mich alle blöcke so lange wie block 1	finden sie mich alle blöcke, solange block 1	mich finden alle blöcke so lange wie block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
block, der rechts von block ist, der speziell ist	block, der ein recht auf block ist, der speziell ist	block, dass ist richtig, der block, das ist das besondere	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
wählen sie einen block, dessen breite der länge des blocks 1 entspricht	wählen sie einen block aus, der die gleiche breite wie block 1s länge hat	wählen sie einen block, der die gleiche breite wie block 1s länge	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( call SW.getProperty en.block.block1 ( string length ) ) ) )
suchen sie den block unter block 1, der ebenfalls 3 zoll lang ist	finden sie den block unter block 1, der auch 3 zoll lang ist	finden sie den block unter den block 1, die ist auch 3 cm lang	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
wählen sie den 3 zoll langen block aus, der sich über block 1 befindet	wählen sie den block aus, der 3 zoll lang ist und über block 1 liegt	wählen sie den block, der 3 zoll in der länge und ist oben block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
finde mich alle blöcke mit der form von block 1	finden sie mich alle blöcke mit der form von block 1	mich finden alle blöcke mit der form von block 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string shape ) ) )
block, dessen länge mindestens der breite von block 1 entspricht	block, dessen länge mindestens die breite des blocks 1 beträgt	block, dessen länge mindestens der breite des block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
befindet sich links von block 1 ein block?	befindet sich ein block links von block 1	gibt es einen block, der sich links auf block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string ! = ) en.block.block1 ) )
finde den block, der unter zwei oder mehr blöcken liegt	finden sie mich den block, der unter zwei oder mehr blöcken ist	finden sie mir den block an, unter zwei oder mehr blöcke	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher block ist links von block 1 und hat eine breite von 3 zoll	welcher block ist auf der linken seite von block 1 und hat eine breite von 3 zoll	was block ist auf der linken seite von block 1 und hat eine breite von 3 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
welcher block sich links neben dem block befindet, unter dem sich block 1 befindet	welcher block sich links neben dem block befindet, der block 1 unten ist	welcher block links von dem block, der block 1 ist unten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )
wählen sie den block unter dem block 2 aus	wählen sie den block unter dem 2block	wählen sie den block unter den block 2	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block, dessen breite kleiner als die länge von block 1 ist	block, dessen breite kleiner als die länge des blocks 1 ist	block, dessen breite kleiner ist als die länge des block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
finden sie mich den block, der block 1 ist unten und links von	finden sie mich den block, der block 1 ist unten und auf der linken seite von	finden mich der block, der block 1 ist unten und an der linken seite	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )
welcher stein hat die meisten farben?	welcher ziegel die meisten farben hat	die backsteinhat die meisten farben	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string color ) ) )
block rechts von block über block 1	block, der rechts von block ist, der über block 1 ist	block, dass ist richtig, der block oben block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
ein block, der 3 cm lang ist	ein block, der 3 zoll lang ist	ein block, der ist 3 cm lang	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
finde mich alle blöcke unter den speziellen blöcken	finden sie mich alle blöcke unter den speziellen blöcken	mich finden alle blöcke unterhalb der spezielle blöcke	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
wählen sie den speziellen block unter block 1 aus	wählen sie den speziellen block und unter block 1	wählen sie den block, sonderund unterhalb von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string is_special ) ) )
block nicht rechts von block 1	block nicht rechts von block 1	blockieren sie nicht direkt von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string ! = ) en.block.block1 ) )
durchschnittliche blockhöhe	durchschnittliche höhe des blocks	die durchschnittliche höhe block	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ) ) )
welcher block ist über und links von block 1	welcher block sich oben und links von block 1 befindet	der block ist oben und auf der linken block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )
finde mich alle blöcke über block 1	finden sie mich alle blöcke über block 1	mich finden alle blöcke oben block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )
finde alle blöcke, für die block 1 nicht richtig ist	finden sie mich alle blöcke, die block 1 ist nicht recht von	mich finden alle blöcke, block 1 ist nicht recht,	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string ! = ) en.block.block1 ) )
welcher block ist über und links von block 1	welcher block sich oberhalb und links von block 1 befindet	was block ist oben und links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
pyramidenblock rechts von block 1	pyramidenblock rechts von block 1	pyramideblock rechts, block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string right ) ( string = ) en.block.block1 ) )
wählen sie einen block mit weniger als zwei farben	wählen sie einen block mit weniger als zwei farben	wählen sie einen block mit weniger als zwei farben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string < ) ( number 2 ) ) )
block unter 2 blöcken	block unter 2 blöcken	block unten 2 blöcke	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block über einem block, der 3 cm breit ist	block über einem block, der 3 zoll breit ist	block oben einen block, der ist 3 cm breit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )
die blöcke unter block 2 sind kleiner	die blöcke unter block 2 sind kleiner	der block unter den block 2 sind kleiner	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde den block, der über dem block liegt, der über block 1 liegt	finden sie mich den block, der sich über dem block befindet, der sich über block 1 befindet	finden sie mir den block über dem block, über block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )
welcher block befindet sich rechts von und unter block 1?	welcher block rechts von und nach block 1 ist	was block ist auf der rechten seite und unten, block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )
finde mich alle 3 zoll langen blöcke, von denen block 1 übrig ist	finden sie mich alle 3 zoll langen blöcke, die block 1 links von	mich finden alle 3zolllange blöcke, block 1 ist links	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
welcher block hat höchstens zwei blöcke darüber	welcher block höchstens zwei blöcke darüber hat	was block hat höchstens zwei blöcke oben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher block so hoch ist wie block 1, ist breit	welcher block so hoch ist wie block 1 ist breit	was block ist so groß, wie der block 1 ist breit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )
block mit mehr als zwei formen	block mit mehr als zwei formen	block mit mehr als zwei formen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string > ) ( number 2 ) ) )
block über zwei oder mehr blöcken	block über zwei oder mehr blöcken	block über zwei oder mehr blöcke	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle blöcke über pyramidenblöcken	finden sie mich alle blöcke über pyramidenblöcken	mich finden alle blöcke oberhalb pyramide blöcke	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
block, dessen höhe mindestens 3 zoll beträgt	block, dessen höhe mindestens 3 zoll beträgt	block, dessen höhe mindestens 3 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
welcher block hat die meisten blöcke rechts davon?	welcher block die meisten blöcke rechts davon hat	was block hat die meisten blöcke auf der rechten seite	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string left ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle 3 zoll breiten blöcke, die rechts von block 1 sind	finden sie mich alle 3 zoll breiten blöcke, die rechts von block 1 ist	mich finden alle 3 cm breite blöcke, dass ist richtig, der block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
welcher block hat die kürzeste länge	welcher block die kürzeste länge hat	der block hat die kürzeste länge	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string length ) ) ) )
finde einen block über höchstens zwei blöcken	finden sie einen block über höchstens zwei blöcken	finden sie einen block über zwei blöcke	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle 3 zoll hohen blöcke, über denen block 1 liegt	finden sie mich alle 3 zoll hohen blöcke, die block 1 ist oben	mich finden alle 3 zoll groß die blöcke, die den block 1 ist oben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
links von block unter block 1	links vom block unter block 1	links der block unten block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )
block, dessen höhe kleiner als 3 zoll ist	block, dessen höhe kleiner als 3 zoll ist	block ist, dessen höhe kleiner als 3 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
finde blöcke über block 1 oder block 2	finden sie blöcke über block 1 oder block 2	finden sie blöcke über block 1 oder block 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
finde mich alle blöcke links und unter block 1	finden sie mich alle blöcke links und unten block 1	mich finden alle blöcke links und untenblock 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )
welcher ziegelstein mindestens so hoch ist wie ziegelstein 1	welcher ziegel mindestens so hoch ist wie ziegel 1	was brick ist mindestens so hoch wie ziegel 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
blöcke von zwei oder mehr farben	blöcke mit zwei oder mehr farben	blöcke von zwei oder mehr farben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string >= ) ( number 2 ) ) )
welcher block drei zoll breit ist, bleibt von block 1 übrig	welcher block drei zoll in der breite ist links von block 1	was block drei zoll in der breite ist links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
block, der rechts von block 1 ist, und der rechts von block 1 ist	block, der recht von block 1 ist und das recht von block 1 ist	block, der rechts von block 1 und das ist richtig, der block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )
über block mindestens 3 cm lang	über block mindestens 3 zoll lang	oben block mindestens 3 cm lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
block oben und rechts von block 1	block oben und rigth aus block 1	block oben und rechte von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
welcher stein befindet sich rechts neben dem pyramidenförmigen stein?	welcher ziegel rechts vom pyramidenförmigen ziegel ist	die ziegel ist auf der rechten seite der pyramide geformten ziegel	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
block oben mindestens zwei blöcke	block oben bei leat zwei blöcke	block über mindestens zwei blöcke	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wählen sie einen block über dem block aus, der 5 cm lang ist	wählen sie einen block über block eins, der 3 zoll lang ist	wählen sie einen block über block ein, der ist 3 cm lang	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
wählen sie den breitesten block aus	wählen sie den breitesten block	wählen sie die breiteste block	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string width ) ) ) )
welcher block ist rechts und über block 1	welcher block rechts und oben block 1 ist	was block nach rechts und oben block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
finde mir alle blöcke, die höchstens unter 2 blöcken liegen	finden sie mich alle blöcke, die höchstens unter 2 blöcken ist	mich finden alle bausteine, die ist bei den meisten unter 2 blöcke	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle blöcke kürzer als 3 zoll	finden sie mich alle blöcke kürzer als 3 zoll	mich finden alle blöcke, die kürzer als 3 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
suchen sie einen block, der unter nicht mehr als zwei blöcken liegt	suchen sie einen block, der sich unter nicht mehr als zwei blöcken befindet	finden sie einen block, der unten nicht mehr als zwei blöcke	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block mit block 1 rechts und darunter	block, der block 1 rechts und unten hat	block, dass block 1 rechts und unten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )
welcher block ist links von mehr als zwei blöcken	welcher block links von mehr als zwei blöcken ist	was block ist auf der linken seite von mehr als zwei blöcke	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block mit einer höhe von entweder 3 zoll oder 6 zoll	block mit einer höhe von 3 zoll oder 6 zoll	block mit einer höhe von entweder 3 cm oder 6 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )
finde mich alle blöcke höchstens so lange wie block 1	finden sie mich alle blöcke höchstens so lange wie block 1	mich finden alle blöcke höchstens so lange, wie block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
block unter block, der über block 1 liegt	block unter block, der über block 1 liegt	block unten block oben block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
der 3x3 zoll block	der 3x3zollblock	die 3 x 3zollblock	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
finde alle blöcke, unter denen block 1 liegt	finden sie mich alle blöcke unter dem block 1 ist oben	mich finden alle blöcke unter dem block 1 ist oben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )
block in block 1	block in block 1	block in block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
sonderblock rechts von block 1	sonderblock rechts von block 1	spezielle blockzu rechtblock 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
finde mich alle blöcke breiter als die höhe von block 1	finden sie mich alle blöcke breiter als die höhe von block 1	mich finden alle blöcke breiter als die höhe des block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
wähle den stein ganz links aus	wählen sie den ziegel ganz links	wählen sie die ziegel an der linken	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string left ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle blöcke rechts von pyramidenblöcken	finden sie mich alle blöcke rechts von pyramidenblöcken	mich finden alle blöcke rechts der pyramide blöcke	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
welcher block mindestens so hoch ist, wie block 1 breit ist	welcher block mindestens so hoch ist wie block 1 breit	welcher block ist mindestens so hoch wie block 1 ist breit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
kann nicht paraphieren	kann nicht paraphase	nicht paraphase	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )
wählen sie die blöcke unter block 2 aus	wählen sie die blöcke unter block 2	wählen sie die blöcke unter block 2	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle blöcke mit weniger als 2 formen	finden sie mich alle blöcke mit weniger als 2 formen	mich finden alle blöcke mit weniger als 2 formen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string < ) ( number 2 ) ) )
wähle die blöcke links von block 1 aus	wählen sie die blöcke links von block 1	wählen sie die blöcke auf der linken seite von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) )
finde mich alle sonderblöcke unter block 1	finden sie mich alle spezialbausteine unter block 1	mich finden alle spezielle blöcke unterhalb von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
block links von zwei blöcken auswählen	block links von zwei blöcken auswählen	wählen sie " block auf der linken der beiden blöcke	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde den block links von block 1, dessen form eine pyramide ist	finden sie mich den block, der sich links von block 1 befindet, dessen form eine pyramide ist	finden sie mir den block, links block 1, dessen form eine pyramide	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
block unten und zwei links von block 1	block unten und zwei links von block 1	block unten, und zwei links von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )
finde mich alle 3 oder 6 zoll langen blöcke	finden sie mich alle 3 oder 6 zoll langen blöcke	mich finden alle 3 oder 6zolllange blöcke	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )
such mir einen speziellen pyramidenförmigen block	finden sie mir einen speziellen pyramidenförmigen block	finden sie mir einen speziellen pyramidenförmigen block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string is_special ) ) )
finde mich alle blöcke so hoch wie block 1 lang ist	finden sie mich alle blöcke so hoch wie block 1 ist lang	mich finden alle blöcke so hoch wie block 1 ist lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.getProperty en.block.block1 ( string length ) ) ) )
finde mich alle blöcke mit der gleichen breite wie block 1	finden sie mich alle blöcke mit der gleichen breite wie block 1	mich finden alle blöcke mit der gleichen breite wie block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )
links von block 1	links von block 1	links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
welcher block ist unter weniger als zwei blöcken	welcher block unter weniger als zwei blöcken liegt	was block ist unten weniger als zwei blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle blöcke unter pyramidenblöcken	finden sie mich alle blöcke unter pyramidenblöcken	mich finden alle blöcke unterhalb der pyramide blöcke	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
wähle alle aus, die 3 zoll breit und pyramidenförmig sind	wählen sie alle, die 3 zoll in der breite und pyramide in form ist	wählen sie alle, das 3 zoll in der breite und pyramide in form	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string shape ) ( string = ) en.shape.pyramid ) )
finde alle blöcke, die sich links von einem pyramidenblock befinden	finden sie alle blöcke, die sich links von einem pyramidenblock befinden	finden sie alle blöcke, die links von einer pyramide zu blockieren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
wählen sie den speziellen block rechts von block 1 aus	wählen sie den speziellen block rechts von block 1	wählen sie die speziellen block, der rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string is_special ) ) )
finde einen block mit einem speziellen block rechts von mir	finden sie mich einen block, der einen speziellen block zu seiner rechten hat	finden sie mir einen block, einen speziellen block zu ihrer rechten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
block, der sich unter dem block befindet, der sich unter dem block 1 befindet	block, der sich unter block befindet, der sich unter block 1 befindet	block unten block unten block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )
suche mir den block rechts über block 1	finden sie mich den block, der sich rechts und oben block 1 befindet	finden sie mir den block nach rechts und oben block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )
finden sie einen block, der 3 cm groß ist	finden sie einen block, der 3 zoll hoch ist	finden sie einen block, der 3 zoll groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
bock rechts von block, der rechts von block 1 ist	bock recht auf block, der recht von block 1 ist	bockrechtsblock, der rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )
finde mich alle blöcke mit mehr als 2 blöcken darüber	finden sie mich alle blöcke mit mehr als 2 blöcken darüber	mich finden alle blöcke mit mehr als 2 blöcke oben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
gibt es einen block mit einem maß von 3 zoll oder 6 zoll	gibt es einen block mit einer messung von 3 zoll oder 6 zoll	ist es ein block mit einer messung von 3 zoll oder 6 zoll	( call SW.listValue ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) )
3 zoll langer block über block 1	3 zoll langer block über block 1	3zolllangenblock oben block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string above ) ( string = ) en.block.block1 ) )
finde einen block größer als block 1 breit ist	finden sie einen block größer als block 1 ist breit	finden sie einen block größer als der block 1 ist breit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
suchen sie den block rechts von mindestens zwei anderen blöcken	finden sie den block rechts von mindestens zwei anderen blöcken	finden sie den block auf der rechten seite von mindestens zwei weiteren blöcken	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle blöcke mit weniger als 2 blöcken darunter	finden sie mich alle blöcke mit weniger als 2 blöcke n. b.	mich finden alle blöcke mit weniger als 2 blocks unten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mir einen speziellen 3 zoll langen block	finden sie mir einen speziellen 3 zoll langen block	suche mir eine spezielle 3zolllangen block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string is_special ) ) )
sonderblock rechts von block 1	sonderblock rechts von block 1	spezielle blockzu rechtblock 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string is_special ) ) )
3 zoll hoher block unter block 1	3 zoll hoher block unter block 1	3 cm hohen block unten block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string below ) ( string = ) en.block.block1 ) )
welche blöcke sind von block 1 und 3 zoll in der höhe übrig	welche blöcke von block 1 und 3 zoll in der höhe übrig sind	was blöcke sind links von block 1 und 3 cm in der höhe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string left ) ( string = ) en.block.block1 ) )
block, der speziell ist und der rechts von block 1 ist	block, der besonders ist und das recht auf block 1 ist	block, dass ist das besondere und das ist richtig, der block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string right ) ( string = ) en.block.block1 ) )
welcher block von dem block links ist, von dem block 1 rechts ist	welcher block links vom block ist, der block 1 rechts von	was block links von dem block, der block 1 ist auf der rechten seite von	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )
block breiter als block 1	block breiter als block 1	block, breiter als der block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
3zollblock rechts von block 1	3 zoll block rechts von block 1	3zollblock rechts, block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
suchen sie den block, der sich über der höchsten anzahl anderer blöcke befindet	suchen sie den block, der sich auf der höchsten anzahl anderer blöcke befindet	finden der block befindet sich auf dem gipfel des höchsten anzahl von anderen blöcken	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string above ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher stein ist unter weniger als zwei steinen	welcher ziegel unter weniger als zwei ziegeln ist	die backstein ist unten weniger als zwei ziegelsteine	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher block länger als block 1 ist, ist breit	welcher block länger als block 1 ist breit	der block ist länger als der block 1 ist breit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
finde mich alle blöcke unter 3 zoll breiten blöcken	finden sie mich alle blöcke unter 3 zoll breiten blöcken	mich finden alle blöcke unterhalb von 3 zoll breite blöcke	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )
finden sie mich den block, der unter block 1 ist	finden sie mich den block, der unter block 1 ist	finden sie mir den block unter den block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
welche blöcke haben eine höhe ungleich 3 zoll	welche blöcke eine höhe von nicht gleich 3 zoll haben	welche blöcke haben eine höhe, die nicht gleich in 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string ! = ) ( number 3 en.inch ) ) )
suchen sie den block, unter dem sich block 1 befindet	finden sie den block, der block 1 unten ist	finden sie den block, der block 1 ist unten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )
finden sie mich den block, der über block 1 ist	finden sie mich den block, der über block 1 ist	finden sie mir den block oben block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
block 3 cm hoch und lang	block 3 zoll hoch und lang	block 3 zoll hoch und lang	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
befindet sich links von einem anderen block ein 3 zoll langer block?	gibt es einen block links von einem anderen block, der 3 zoll lang ist	gibt es einen block, der sich links von einem anderen block, der ist 3 cm lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
wähle den pyramidenförmigen block unter block 1 aus	wählen sie den pyramidenförmigen block unter block 1	wählen sie die pyramidenförmigen block unten block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
links von block 1	links von block 1	links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
finde mich alle blöcke über block 1	finden sie mich alle blöcke über block 1	mich finden alle blöcke oberhalb block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
finden sie einen block kürzer als 6 zoll	finden sie einen block kürzer als 6 zoll	finden sie einen block kürzer als 6 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
welcher block hat die form einer pyramide und befindet sich über block 1?	welcher block in formeiner pyramide ist und sich über block 1 befindet	was block ist in der form einer pyramide und ist vor block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string above ) ( string = ) en.block.block1 ) )
finde mir den block, der eine höhe von 3 zoll hat	finden sie mich den block, der eine höhe von 3 zoll hat	finden mich der block hat eine höhe von 3 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
welcher block über mehr als zwei blöcken liegt	welcher block über mehr als zwei blöcken liegt	was block über mehr als zwei blöcke	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finden sie einen block größer als 3 zoll	finden sie einen block größer als 3 zoll	finden sie einen block höher als 3 zentimeter	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
welcher block ist weniger als 3 cm lang	welcher block kleiner als 3 zoll ist	was block ist weniger als 3 cm lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
suchen sie den block rechts von block 1, dessen form ebenfalls eine pyramide ist	finden sie den block rechts neben block 1, dessen form ebenfalls eine pyramide ist	finden sie den block, der rechts von block 1, dessen form ist auch eine pyramide	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
suchen sie den block, über dem sich block 1 befindet	finden sie den block, der block 1 oben ist	finden sie den block, der block 1 ist oben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )
welcher ziegelstein hat eine breite von weniger als 3 zoll	welcher ziegel hat eine breite kleiner als 3 zoll	die backsteinhat eine breite, die kleiner als 3 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
rechts von block 1	recht auf block 1	rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
finde einen block links von block 1	finden sie einen block links von block 1	finden sie einen block links block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )
wähle alle steine rechts von block 1 oder 2 aus	wählen sie alle steine rechts von block 1 oder 2	wählen sie alle steine rechts von block 1 oder 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
finde mich alle blöcke und und über block 1	finden sie mich alle blöcke und über block 1	mich finden alle blöcke und und über block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
was backstein ist 3 cm breit und 3 cm hoch	welcher ziegel ist 3 zoll breit und 3 zoll hoch	was stein ist 3 cm breit und 3 cm hoch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
finde mich einen block breiter als 3 zoll	finden sie mich einen block breiter als 3 zoll	finden sie mir einen block breiter als 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
block, der höchstens zwei block ist rechts von	block, dass höchstens zwei block ist recht von	block, dass bei den meisten zweiblock rechts	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
such mir einen block, der links von block 1 liegt	finden sie mir einen block, der block 1 ist auf der linken seite von	finden sie mir einen block, der block 1 ist auf der linken seite	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )
finde mich alle blöcke so breit oder breiter als block 1	finden sie mich alle blöcke so breit oder breiter als block 1	mich finden alle blöcke so breit oder breiter als der block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
wählen sie einen 3zollblock rechts von block 1	wählen sie einen 3zollblock rechts neben block 1	wählen sie ein 3zollblock auf der rechten seite von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string right ) ( string = ) en.block.block1 ) )
finde mir einen block, der höchstens zwei blöcke tiefer liegt	finden sie mir einen block, der unten ist höchstens zwei blöcke	finden sie mir einen block, der unten zwei blöcke	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wähle einen stein, der mehr als 2 blöcke auf der linken seite hat	wählen sie einen ziegel, der mehr als 2 blöcke links hat	wählen sie einen ziegel, die mehr als 2 blocks auf der linken seite	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wie lang ist block 1?	was ist die länge des blocks 1	was ist die länge von block 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string length ) ) )
wählen sie alle blöcke mit der geringsten anzahl an formen aus	wählen sie alle blöcke mit der geringsten anzahl von formen aus	wählen sie alle blöcke die kleinste zahl der form	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string shape ) ) )
welcher stein ist breiter als 3 zoll	welcher ziegel breiter als 3 zoll ist	die backstein ist breiter als 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
finde mich alle 3 zoll hohen spezialblöcke	finden sie mich alle 3 zoll hohen spezialblöcke	mich finden alle 3zollhighspezielle blöcke	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
block unter sonderblock	block unter spezialblock	block unterhalb speziellen block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
finde den block, unter dem sich block 1 befindet und der 3 zoll lang ist	finden sie mich den block, dass block 1 unten ist und das hat eine länge von 3 zoll	finden mich der block, der block 1 ist unten und hat eine länge von 3 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
wählen sie einen block über einem 3zollblock	wählen sie einen block über einem 3zollblock	wählen sie einen block über einen 3zollblock	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
suchen sie den einzelnen block, der sich rechts von der größten anzahl von blöcken befindet	suchen sie den einzelnen block, der sich rechts neben der größten anzahl von blöcken befindet	finden sie die einzigen block, der rechts von der größten anzahl von blöcken	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string left ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block links und unter block 1	block links und unten block 1	block nach links und unten, block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )
suchen sie einen 3zollbreiten block	suchen eines 3inch lwide blocks	suchen sie eine 3inch lwide block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
welcher stein ist wie eine pyramide geformt	welcher ziegel wie eine pyramide geformt ist	die ziegel geformt wie eine pyramide	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string shape ) ( string = ) en.shape.pyramid ) )
block zwei über block 1	block zwei über block 1	block zwei oben block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )
welche blöcke befinden sich links und unter block 1?	welche blöcke links und unten block 1 sind	was blöcke sind auf der linken seite und unten, block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )
wählen sie den baustein mit den wenigsten blöcken links davon aus	wählen sie den ziegel aus, der die wenigsten blöcke links davon hat	wählen sie die ziegel, das hat die wenigsten blöcke auf der linken seite ist es	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string right ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher block ist 3 zoll hoch und über block 1	welcher block ist von 3 zoll höhe und über block 1	was block 3 cm höhe und oben block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
welcher block ist 3 zoll oder weniger lang	welcher block ist 3 zoll oder weniger lang	was block ist 3 zoll oder weniger lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
entweder block 1 oder 2	entweder block 1 oder 2	entweder block 1 oder 2	( call SW.listValue ( call SW.concat en.block.block1 en.block.block2 ) )
welcher stein ist mindestens 3 oder 6 zoll	welcher ziegel mindestens 3 oder 6 zoll ist	was stein ist mindestens 3 oder 6 zoll	( call SW.listValue ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) )
finde mich alle blöcke rechts von block 1, der darüber liegt	finden sie mich alle blöcke rechts von block 1, die darüber ist	mich finden alle blöcke rechts von block 1, der über sie	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
wähle einen stein, der nicht höher als stein 1 ist	wählen sie einen ziegel, der nicht höher als ziegel 1 ist	wählen sie einen ziegel, der nicht höher ist als ziegel 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
finde mich alle 3 zoll breiten blöcke über block 1	finden sie mich alle 3 zoll breiten blöcke über block 1	mich finden alle 3 cm breite blöcke über block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
block zwei über block 1	block zwei über block 1	block zwei oben block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )
siehe block über block 1 und erhalte den block links von diesem	siehe block über block 1 und block links von diesem	siehe block oben block 1 und block bekommen links, dass man	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )
was 3 zoll ziegel ist links von ziegel 1	was 3 zoll ziegel ist auf der linken seite von ziegel 1	was sie 3zollziegel ist auf der linken seite der ziegel 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
suchen sie einen block, der sich unter block 1 oder block 2 befindet	suchen sie einen block, der sich unter block 1 oder block 2 befindet	finden sie einen block, der unter entweder block 1 oder block 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
welcher stein hat eine länge von weniger als 3 oder 6 zoll	welcher ziegel hat eine länge kleiner als 3 oder 6 zoll	die backsteinhat eine länge kleiner als 3 oder 6 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
das ist der block rechts vom sonderblock	das ist der block rechts vom sonderblock	das ist der block auf der rechten seite des speziellen block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
welcher block ist rechts von block 1	welcher block rechts von block 1 ist	was block ist auf der rechten seite von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )
nummer des blocks	anzahl der blocke	anzahl von block 	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wählen sie den block aus, der sich auf der rechten seite von block 1 befindet	wählen sie den block auf der rechten seite von block 1	wählen sie den block, der auf der rechten seite von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )
finde mich alle blöcke 2 blöcke unter block 1	finden sie mich alle blöcke 2 blöcke unter block 1	mich finden alle blöcke 2 blöcke unterhalb von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )
wählen sie den block, der mindestens 5 cm hoch ist	wählen sie den block aus, der mindestens 3 zoll hoch ist	wählen sie den block, der ist mindestens 3 cm groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
wählen sie den block aus, der unter block 1 liegt	wählen sie den block aus, der sich unter block 1 befindet	wählen sie den block, der unter block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
3 zoll block unter block 1	3zollblock unter block 1	3zollblock unten block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
2. block links von block 1	2. block links von block 1	2. block links block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )
welcher block hat eine breite von 3 zoll und ist über block 1	welcher block hat eine breite von 3 zoll und ist über block 1	was block hat eine breite von 3 cm und ist oben block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string above ) ( string = ) en.block.block1 ) )
block, der rechts von block 1 ist und dessen länge 3 zoll beträgt	block, der rechts von block 1 ist und dessen länge 3 zoll beträgt	block, der rechts von block 1 und deren länge ist 3 zoll	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
wählen sie einen block, der unterhalb eines 3zollblocks liegt	wählen sie einen block, der sich unterhalb eines 3zollblocks befindet	wählen sie einen block, der unter einer 3zollblock	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )
block mit 3 zoll höhe und 3 zoll breite	block mit 3 zoll höhe und 3 zoll breit	block mit 3 zoll höhe und 3 zoll breit	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
suchen sie den block, der nicht größer als die breite von block 1 ist	suchen sie den block, der in zoll nicht höher ist als die breite von block 1	suchen sie den block, der nicht höher in zoll als die breite des blocks 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
rechts und unter block 1	rechts und unten block 1	rechts und untenblock 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
finde einen block mit zwei oder weniger blöcken links	finden sie einen block mit zwei oder weniger blöcken auf der linken seite	finden sie einen block mit zwei oder weniger blöcke auf der linken seite	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wähle den block rechts von block 2 aus	wählen sie den block rechts von block 2	wählen sie den block rechts, block 2	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mir alle pyramidenblöcke	finden sie mich alle pyramidenblöcke	mich finden alle die pyramide blöcke	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) )
finden sie mich alle blöcke unten und links von block 1	finden sie mich alle blöcke unten und links von block 1	mich finden alle blöcke unterhalb und links von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )
finde mir einen block mit der gleichen breite wie block 1s länge	finden sie mir einen block mit der gleichen breite wie block 1s länge	finden sie mir einen block mit der gleichen breite wie block 1s länge	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( call SW.getProperty en.block.block1 ( string length ) ) ) )
wählen sie den block aus, unter dem sich block 1 nicht befindet	wählen sie den block aus, der block 1 nicht darunter ist	wählen sie den block, der block 1 ist nicht unten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string ! = ) en.block.block1 ) )
finde alle pyramidenblöcke, die rechts von block 1 liegen	finden sie mich alle pyramidenblöcke, die recht von block 1 ist	mich finden alle pyramideblöcke, die rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string right ) ( string = ) en.block.block1 ) )
finde mich alle blöcke von 3zollblöcken links	finden sie mich alle blöcke links von 3 zoll blöcke	mich finden alle blöcke links der 3zollblöcke	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
block, dessen breite kleiner als die höhe von block 1 ist	block, dessen breite kleiner als die höhe des blocks 1 ist	block, dessen breite kleiner als die höhe des block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
welcher block hat die form einer pyramide und befindet sich links von block 1	welcher block hat die form einer pyramide und befindet sich links von block 1	was block hat die form einer pyramide und ist auf die linke seite von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string left ) ( string = ) en.block.block1 ) )
finden sie mich alle blöcke unten und rechts von block 1	finden sie mich alle blöcke unten und rechts von block 1	mich finden alle blöcke unterhalb und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
block, der unter block 1 oder block 2 liegt	block, der sich unter block 1 oder block 2 befindet	block unten block 1 oder block 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
3zollblock links von block 1	3zollblock links von block 1	3zollblock links block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
wählen sie den baustein aus, der über der geringsten anzahl von blöcken liegt	wählen sie den stein aus, der über der geringsten anzahl von blöcken liegt	wählen sie die ziegel, der über die geringste anzahl von blöcken	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string above ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich entweder block 1 oder block 2	finden sie mich entweder block 1 oder block 2	sie finden mich entweder block 1 oder block 2	( call SW.listValue ( call SW.concat en.block.block1 en.block.block2 ) )
finde die blöcke rechts und links von block 1	finden sie die blöcke rechts und links von block 1	finden sie die blöcke links und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
welcher block hat block 1 rechts und links	welcher block block 1 rechts und links hat	was block block 1 rechts und links	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )
finden sie den block, der nicht weniger als 3 cm hoch ist	finden sie den block, der nicht weniger als 3 zoll hoch ist	finden sie den block, der nicht weniger als 3 zoll groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
welcher block ist nicht länger als jeder andere	welcher block nicht länger ist als jeder andere	was der block nicht mehr als jeder andere	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string length ) ) ) )
wählen sie den ziegel unterhalb von ziegel 1, der 5 cm lang ist	wählen sie den ziegel unter ziegel 1, der 3 zoll lang ist	wählen sie die ziegel unter ziegel 1 ist 3 cm lang	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string below ) ( string = ) en.block.block1 ) )
welcher stein ist links von weniger als zwei steinen	welcher ziegel ist auf der linken seite von weniger als zwei ziegel	die ziegel auf der linken seite von weniger als zwei ziegelsteine	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
ein drei zoll großer block links von block 1	ein dreizollblock links von block 1	ein dreizollblock an der linken seite von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string left ) ( string = ) en.block.block1 ) )
welcher spezialziegel über dem ziegel 1 liegt	welcher spezielle ziegel über ziegel 1 ist	die besonderen ziegel über ziegel 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string above ) ( string = ) en.block.block1 ) )
finde mich einen block höchstens 6 cm breit	finden sie mich einen block höchstens 6 zoll breit	finden sie mir einen block mit maximal 6 cm breit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
such mir einen 3 zoll langen spezialblock	finden sie mir einen 3 zoll langen spezialblock	suche mir eine 3 zoll lange speziellen block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
unterhalb und links von block 1	unten und links von block 1	links unterhalb von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )
befindet sich rechts neben dem block ein block unter block 1?	befindet sich ein block rechts neben dem block, der sich unter block 1 befindet	gibt es einen block auf der rechten seite des blocks, ist unter block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )
was ist die durchschnittliche breite der blöcke	was ist die durchschnittliche breite der blöcke	was ist die durchschnittliche breite der blöcke	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ) ) )
finde mir alle sonderblöcke, zu denen block 1 gehört	finden sie mir alle speziellen blöcke, die block 1 ist recht von	mich finden alle speziellen blöcken, block 1 ist richtig, der	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
block rechts vom 3 zoll hohen block	block rechts vom 3 zoll hohen block	block auf der rechten seite der 3zollhighblock	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
wählen sie den baustein mit der geringsten anzahl von blöcken links davon aus	wählen sie den stein mit der geringsten anzahl von blöcken links davon	wählen sie die ziegel mit der geringsten anzahl von blöcken auf der linken seite ist es	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string left ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block über und rechts von block 1	block oben und rechts von block 1	block oberhalb und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )
block, dessen breite mindestens der länge von block 1 entspricht	block, dessen breite mindestens die länge des blocks 1 beträgt	block, deren breite mindestens der länge des block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
wähle den speziellen block links von block 1	wählen sie den speziellen block links von block 1	wählen sie die speziellen block links block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string is_special ) ) )
welcher block sich über dem block befindet, der sich über block 1 befindet	welcher block sich über dem block befindet, der sich über block 1 befindet	was block über dem block, über block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
finde den kürzesten block	finden sie den kürzesten block	finden sie den kürzesten block	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string height ) ) ) )
finde den block 1 und rechts 1 von block 1	finden sie den block bis 1 und rechts 1 von block 1	finden sie den block 1 und rechts 1 block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )
welcher sonderblock befindet sich links von ziegel 1?	welcher spezielle block links von ziegel 1 ist	die speziellen block ist auf der linken seite der ziegel 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string left ) ( string = ) en.block.block1 ) )
wie hoch ist der ziegel 1	was ist die höhe von ziegel 1	was die höhe der ziegel 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string height ) ) )
wähle die blöcke rechts von den pyramidenblöcken aus	wählen sie die blöcke rechts von pyramidenblöcken aus	wählen sie die blöcke auf der rechten seite der pyramide blöcke	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
welcher block ist nicht links von block 1	welcher block nicht links von block 1 ist	was block ist nicht links von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string ! = ) en.block.block1 ) )
ein beliebiger block mit einer breite von 3 zoll oder 6 zoll	jeder block mit einer breite von 3 zoll oder 6 zoll	jeder block mit einer breite von entweder 3 cm oder 6 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )
welcher block mindestens so hoch ist wie block 1, ist lang	welcher block mindestens so hoch ist wie block 1, ist lang	was block ist mindestens so groß, wie der block 1 ist lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
finde die durchschnittliche höhe eines blocks	finden sie die durchschnittliche höhe eines blocks	finden sie die durchschnittliche höhe eines blocks	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ) ) )
finde mich alle blöcke, die zwei formen haben	finden sie mich alle blöcke, die zwei formen haben	mich finden alle blöcke, die zwei formen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) ( number 2 ) ) )
finde mich alle blöcke, deren breite kleiner als 6 zoll ist	finden sie mich alle blöcke, deren breite kleiner als 6 zoll ist	mich finden alle blöcke, deren breite kleiner als 6 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
wählen sie den block links neben dem block aus, über dem sich block 1 befindet	wählen sie den block links neben dem block aus, der sich über block 1 befindet	wählen sie den block, der sich links von dem block, der block 1 ist oben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
welcher stein ist länger als der stein 1?	welcher ziegel ist länger als ziegel 1	die backstein ist mehr als ziegel 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
finde alle pyramidenblöcke, zu denen block 1 gehört	finden sie mich alle pyramidenblöcke, die block 1 ist recht von	mich finden alle pyramidenblöcke, die den block 1 ist richtig, der	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
wählen sie blöcke aus, die 3 zoll hoch sind und sich rechts von block 1 befinden	wählen sie blöcke aus, die eine höhe von 3 zoll haben und sich rechts von block 1 befinden	wählen sie blöcke, die eine höhe von 3 cm und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string right ) ( string = ) en.block.block1 ) )
3 zoll langer block und das ist über block 1	3 zoll langer block und das ist über block 1	3 cm langer block, und das ist oben block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
finden sie den block, der zum block von 3 zoll übrig bleibt	finden sie den block, der dem block von 3 zoll links	finden sie den block, links block von 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )
finde mich alle blöcke mit der gleichen breite wie die länge von block 1	finden sie mir alle blöcke mit der gleichen breite wie die länge des blocks 1	mich finden alle blöcke mit der gleichen breite wie die länge des block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( call SW.getProperty en.block.block1 ( string length ) ) ) )
2 blöcke unter block 1	2 blöcke unter block 1	2 blocks unterhalb von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )
welcher block ist rechts von mehr als zwei blöcken	welcher block rechts von mehr als zwei blöcken ist	was block ist auf der rechten seite mehr als zwei blöcke	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
hol mir einen block unter und über block 1	holen sie mir einen block unter und über block 1	hole mir einen block oberhalb und unterhalb von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )
block zwei unter block 1	block zwei unter block 1	block folgenden block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )
suchen sie den block, der shorer als block 1 ist	finden sie den block, der shorer als block 1 ist	finden sie die block, ist shorer als block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
welcher stein hat nicht mehr als 2 farben	welcher ziegel hat nicht mehr als 2 farben	die backsteinhat nicht mehr als 2 farben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string <= ) ( number 2 ) ) )
welcher block ist 3 zoll oder größer	welcher block 3 zoll oder größer ist	was block ist 3 zoll oder größer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
suchen sie einen block rechts von zwei blöcken	finden sie einen block, der sich rechts von zwei blöcken befindet	finden sie einen block, der rechts von zwei blöcken	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle steine länger als die breite von block 1	finden sie mich alle steine länger als die breite von block 1	finden, die mir all die steine, die länger als die breite des blocks 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
welcher block unter block 1 ist 3 zoll breit	welcher block unter block 1 ist 3 zoll breit	was block unten block 1 ist 3 cm breit	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string below ) ( string = ) en.block.block1 ) )
finde mich einen block so breit wie block 1 oder breiter	finden sie mich einen block so breit wie block 1 oder breiter	finden sie mir einen block so weit wie block 1 oder breiter	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
zwei blocks rechts von block 1	zwei blöcke rechts von block 1	zwei blocks rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )
gibt es einen block mit der gleichen farbe wie block 1?	gibt es einen block mit der gleichen farbe wie block 1	gibt es einen block mit der gleichen farbe wie block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string = ) ( call SW.getProperty en.block.block1 ( string color ) ) ) )
finden sie den block, der rechts und unter block 1 ist	finden sie den block, der rechts und unten block 1 ist	finden sie den block, der rechts und untenblock 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )
welcher block ist links von den meisten blöcken	welcher block links von den meisten blöcken ist	was block ist auf der linken seite der meisten blöcke	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string right ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
was ist die breite des blocks	was ist die breite des blocks	was ist die breite des blocks	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ) ) )
block, dessen länge höchstens der länge von block 1 entspricht	block, dessen länge höchstens länge von block 1 ist	block, dessen länge höchstens die länge des block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
wähle einen stein rechts neben dem stein direkt unter dem stein 1 aus	wählen sie einen ziegel auf der rechten seite des ziegels direkt unter ziegel 1	wählen sie ein backstein auf der rechten seite der ziegel direkt unterhalb der ziegel 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )
wählen sie einen stein, der nicht länger als 5 cm ist	wählen sie einen ziegel, der nicht größer als 3 zoll lang ist	wählen sie einen ziegel, der nicht größer als 3 cm lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
welcher block befindet sich links vom block über block 1?	welcher block links vom block über block 1 ist	was block links von dem block oben block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
2. links von block 1	2. links von block 1	2. links von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )
welcher block ist der höchste?	welcher block der höchste ist	welcher block ist das höchste	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string height ) ) ) )
block mit der geringsten anzahl von farben	block mit der geringsten anzahl von farben	block mit der geringsten anzahl von farbe	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string color ) ) )
wähle einen block rechts von block 2	wählen sie einen block rechts neben block 2	wählen sie einen block auf der rechten seite von block 2	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block links vom pyramidenförmigen block	block links vom pyramidenförmigen block	block auf der linken seite der pyramidenförmigen block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
rechts und unter block 1	rechts und unten block 1	rechts und untenblock 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
wie groß ist block 1?	wie hoch ist block 1	wie groß ist block 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string height ) ) )
welches ist ein 3zollspezialblock	welcher ein 3zollspezialblock ist	die eine ist eine 3zollspezialblock	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
finde den block mit der geringsten anzahl von blöcken darunter	finden sie mir den block mit der geringsten anzahl von blöcken darunter	finden sie mir den block mit der geringsten anzahl von blöcken darunter	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string below ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle blöcke links von block 1 oder 2	finden sie mich alle blöcke links von block 1 oder 2	mich finden alle blöcke links von block 1 oder 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
finde mich alle pyramidenblöcke	finden sie mich alle pyramidenblöcke	mich finden alle blocks pyramide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
das ist der 3 zoll große block links von block 1	das ist der 3 zoll hohe block auf der linken seite von block 1	das ist die 3 cm hohen block links block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
wählen sie einen block mit der gleichen breite wie block 1	wählen sie einen block mit der entsprechenden breite zu block 1	wählen sie einen block mit äquivalenten breite zu block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )
block um block 1	block um block 1	block um block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )
block über mehr als 2 blöcke	block über mehr als 2 blöcken	block über mehr als 2 blöcke	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block rechts von zwei anderen	block nach rechts von zwei anderen	block nach rechts zwei andere	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block über block 1	block über block 1	block oben block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
finden sie einen block ohne eine länge von 3 zoll	finden sie einen block ohne eine länge von 3 zoll	finden sie einen block, ohne die eine länge von 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string ! = ) ( number 3 en.inch ) ) )
finde den 3 zoll breiten spezialblock	finden sie den 3 zoll breiten spezialblock	finden sie die 3zollbreit speziellen block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string is_special ) ) )
finde mich alle 3 zoll langen blöcke	finden sie mich alle 3 zoll langen blöcke	mich finden alle die 3zolllange blöcke	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
block links von einem block links von block 1	block links von einem block, der von block 1 links ist	block links von einem block, links block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )
finde mich alle blöcke mit 2 blöcken darunter	finden sie mich alle blöcke mit 2 blöcken darunter	mich finden alle blöcke 2 blöcke unten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher spezialstein ist 3 zoll breit	welcher spezielle ziegel ist 3 zoll breit	die besondere stein ist 3 cm breit	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string is_special ) ) )
finde einen block mit den kleinsten blöcken links von	finden sie einen block mit den kleinsten blöcken links von	finden sie einen block mit der geringsten blöcke auf der linken seite	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string left ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block unter block 1	block unter block 1	block unten block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
suchen sie den speziellen block rechts von block 1	finden sie den block, der speziell ist und rechts von block 1	finden sie den block, dass ist das besondere und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string is_special ) ) )
wählen sie den block über dem besonders aussehenden block 1	wählen sie den block über dem sondersonderigen sablock 1	wählen sie den block über das besondere suchenblock 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string is_special ) ) )
block, dessen breite kleiner als 3 zoll oder 6 zoll ist	block, dessen breite kleiner als 3 zoll oder 6 zoll ist	block, dessen breite kleiner als 3 cm oder 6 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
welcher block hat zwei oder weniger formen	welcher block hat zwei oder weniger formen	was block hat zwei oder weniger formen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string <= ) ( number 2 ) ) )
finde einen block mit einer länge größer als block 1 ist groß	finden sie einen block mit einer länge größer als block 1 ist hoch	finden sie einen block mit einer länge größer als der block 1 ist groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
finde einen block mit einem pyramidenförmigen block darunter	finden sie einen block mit einem pyramidenförmigen block darunter	finden sie einen block mit einem pyramidenförmigen block unter ihm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
welcher ziegel ist höchstens 3 oder 6 zoll lang	welcher ziegel höchstens 3 oder 6 zoll lang ist	die backstein ist bei den meisten 3 oder 6 cm lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
welcher stein hat nicht mehr als zwei blöcke zu seiner linken	welcher ziegel hat nicht mehr als zwei blöcke zu seiner linken	die backsteinhat nicht mehr als zwei blocks auf der linken seite	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wählen sie die blöcke aus, deren höhe kleiner oder gleich der länge von block 1 ist	wählen sie die blöcke aus, deren höhe kleiner oder gleich block 1s länge ist	wählen sie die blöcke mit einer größe von weniger als oder gleich "  block 1s länge	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
finde den block, den block 1 rechts davon hat und der die form einer pyramide hat	finden sie mich den block, der block 1 ist, rechts von und das hat eine form einer pyramide	finden mich der block, der block 1 ist auf ihrer rechten seite und hat die form einer pyramide	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
block links von zwei anderen	block links von zwei anderen	block links von zwei anderen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block, dessen form eine pyramide ist und dessen breite 3 zoll beträgt	block, dessen form eine pyramide ist und deren breite 3 zoll beträgt	block, dessen form einer pyramide, deren breite 3 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
was ist der block darüber, der seine länge als 3 zoll hat	was ist der block oben, der seine länge als 3 zoll hat	was ist der block oben, der hat seine länge als 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
finde mich alle blöcke über und rechts von block 1	finden sie mich alle blöcke oben und rechts von block 1	mich finden alle blöcke oberhalb und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
block, der speziell ist und dessen länge 3 zoll beträgt	block, der speziell ist und dessen länge 3 zoll beträgt	block, sonderund deren länge ist 3 zoll	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
welche blöcke sind rechts von den blöcken 1 oder 2	welche blöcke rechts von den blöcken 1 oder 2 sind	die blöcke werden rechts von den blöcken 1 oder 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
was ist die anzahl der steine	wie viele steine ist	was ist die anzahl der ziegel	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
was ist die durchschnittliche breite der steine	was ist die durchschnittliche breite der ziegel	was ist die durchschnittliche breite der steine	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ) ) )
links von block 1	links von block 1	links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
gibt es einen block links von mehr als zwei blöcken?	gibt es einen block auf der linken seite von mehr als zwei blöcken	gibt es einen block auf der linken seite von mehr als zwei blöcke	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
gibt es einen block, dessen höhe kürzer als die breite von block 1 ist?	ist ein block kürzer in der höhe als block 1 ist breit	gibt es einen block kürzer in der höhe als der block 1 ist breit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
welcher stein befindet sich unter dem stein rechts von stein 1?	welcher ziegel unter dem ziegel auf der rechten seite des ziegels 1 ist	die ziegel unter die ziegel auf der rechten seite der ziegel 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )
finde einen block, dessen block 1 länger ist als	finden sie einen block, der länger als block 1 ist	finden sie einen block, der block 1 ist länger als	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
finde mich alle blöcke, die mindestens 2 blöcke auf der linken seite haben	finden sie mich alle blöcke, die mindestens 2 blöcke auf der linken seite hat	mich finden alle bausteine, die mindestens 2 blöcke auf der linken seite	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
was ist die gesamtlänge der blöcke	was ist die gesamtlänge der blöcke	was ist die gesamtlänge des blocks	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ) ) )
wählen sie den block unter block 1 und block 2 aus	wählen sie den block unter block 1 und block 2	wählen sie den block unten block 1 und block 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
welcher block länger als block 1 ist, ist breit	welcher block länger als block 1 ist breit	was block ist länger als der block 1 ist breit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
block über pyramidenblock	block über pyramidenblock	block oben block pyramide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
suchen sie den block, der eine breite von 3 zoll hat und sich über block 1 befindet	finden sie den block, der eine breite von 3 zoll hat und über block 1 liegt	finden sie den block, hat eine breite von 3 cm und ist oben block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
welcher ziegel höher ist als ziegel 1, ist lang	welcher ziegel höher ist als ziegel 1 ist lang	die ziegel höher ist als ziegel1 ist lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
wählen sie den block mit einer länge von 5 cm über einem anderen block aus	wählen sie den block mit einer länge von zwei zoll über einem anderen block aus	wählen sie den block aus, der eine länge von zwei zoll über den anderen block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
block über der geringsten anzahl von blöcken	block über der geringsten anzahl von blöcken	block über mindestens anzahl der blöcke	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string above ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block, der über dem speziellen block liegt	block, der sich über dem block befindet, der speziell ist	block oben block, spezielle	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
finde mich alle blöcke unter 3 zoll langen blöcken	finden sie mich alle blöcke unter 3 zoll langen blöcken	mich finden alle blöcke unterhalb von 3zolllange blöcke	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
finde mir einen block mit einer breite von drei zoll, unter dem block 1 liegt	finden sie mir einen block mit einer breite von drei zoll, dass block 1 unten ist	finden sie mir einen block mit einer breite von drei zoll, der block 1 ist unten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
welcher ziegel über ziegel 1 oder 2 liegt	welcher ziegel über ziegel 1 oder 2 ist	die ziegel über ziegel 1 oder 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
welche blockbreite kleiner oder gleich der blockhöhe ist	welche blockbreite kleiner oder gleich block 1s höhe ist	was blockiert breite ist kleiner als oder gleich "  block 1s höhe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
3 zoll langer block unter block 1	3 zoll langer block unter block 1	3zolllangenblock unten block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
finde mir einen block mit einer pyramidenform und hat eine länge von 3 zoll	finden sie mir einen block mit einer pyramidenform und hat eine länge von 3 zoll	finden sie mir einen block mit einer pyramidenförmig und hat eine länge von 3 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
welcher ziegel breiter als ziegel 1 ist, ist breit	welcher ziegel breiter als ziegel 1 ist breit	die backstein ist breiter als ziegel 1 ist breit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
finde mich in allen blöcken unterhalb von block 1	finden sie mich alle blöcke unter diesem block 1 ist rechts	mich finden alle blöcke unterhalb von block 1 ist richtig, der	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )
wählen sie den block links und über block 1 aus	wählen sie den block links und oben block 1	wählen sie den block, der sich links und oberhalb von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )
finde einen block, der unter mindestens zwei anderen blöcken begraben ist	finden sie einen block, der unter mindestens zwei anderen blöcken vergraben ist	finden sie einen block unter sich begraben, mindestens zwei andere blöcke	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle blöcke so breit wie block 1 lang ist	finden sie mich alle blöcke so breit wie block 1 ist lang	mich finden alle blöcke so weit wie block 1 ist lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
wähle den stein ganz rechts aus	wählen sie den ziegel ganz rechts	wählen sie die ziegel auf der rechten seite	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string left ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle blöcke kürzer als die breite von block 1	finden sie mich alle blöcke kürzer als die breite von block 1	mich finden alle blöcke kürzer sind als die breite des blocks 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
was ist die durchschnittliche länge der steine	was ist die durchschnittliche länge der ziegel	was ist die durchschnittliche länge der ziegel	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ) ) )
finde mich alle blöcke über block 1	finden sie mich alle blöcke über block 1	mich finden alle blöcke oberhalb block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) )
finde mich alle blöcke mit weniger als 2 blöcken auf der linken seite	finden sie mich alle blöcke mit weniger als 2 blöcken auf der linken seite	mich finden alle blöcke mit weniger als 2 blocks auf der linken seite	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde alle blöcke mit mindestens 2 blöcken darunter	finden sie mich alle blöcke mit mindestens 2 blöcken unten	mich finden alle blöcke mit mindestens 2 blöcke unten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
such mir einen block, der weniger als zwei blöcke darunter hat	finden sie mir einen block, der weniger als zwei blöcke darunter hat	finden sie mir einen block mit weniger als zwei blöcken darunter	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block, der block 1s unten und rechts hat	block, der block 1s unten und rechts hat	block die block1s unten und rechts	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )
gibt es einen block, der auf einen anderen block gestapelt ist, aber nur einen?	ist ein block auf einem anderen block gestapelt, aber nur ein	ist es ein block gestapelt auf einem beliebigen anderen block aber nur eine	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wählen sie alle blöcke mit einer höhe aus, die der länge von block 1 entspricht	wählen sie alle blöcke mit einer höhe, die der länge des blocks 1 entspricht	wählen sie alle blöcke mit in der höhe gleich der länge des block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.getProperty en.block.block1 ( string length ) ) ) )
welcher stein mindestens so lang ist, wie der stein 1 breit ist	welcher ziegel mindestens so lang ist, wie ziegel 1 breit ist	die ziegel wird zumindest so lange, wie ziegel 1 ist breit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
welcher block mit 3 breiten ist rechts von block 1	welcher block mit 3 breite rechts von block 1 ist	die block3 breite ist auf der rechten seite von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
suchen sie einen block, der von block zwei übrig ist	suchen eines blocks, der sich von block 2 links befindet	finden sie einen block, der links von block zwei	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle blöcke von 3 zoll hohen blöcken übrig	finden sie mich alle blöcke links von 3 zoll hohen blöcken	mich finden alle blöcke links von 3 zoll hoch ist blockiert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
rechts vom block über block 1	rechts des blocks über block 1	rechts von block über block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )
wählen sie blöcke, die breiter als die höhe von block 1 sind	wählen sie blöcke breiter als block 1s höhe	wählen sie blöcke breiter als die block1s höhe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
finde einen block mit der gleichen höhe wie block 1	finden sie einen block mit der gleichen höhe wie block 1	finden sie einen block mit der gleichen höhe wie block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.getProperty en.block.block1 ( string height ) ) ) )
wählen sie den speziellen block und den block 1 darüber	wählen sie den speziellen block aus, und dieser block 1 befindet sich oben	wählen sie den block, dass ist das besondere und dass block 1 ist oben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string is_special ) ) )
block, der sich links neben dem block unter block 1 befindet	block, der sich links vom block unter block 1 befindet	block, der links von dem block unten block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )
schauen sie rechts von block 1 und finden sie 3zollblock	blick nach rechts von block 1 und finden 3 zoll block	schauen sie nach rechts von block 1 und 3zollblock	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
block, der nicht rechts von block 1 ist	block, der nicht rechts von block 1 ist	block, der nicht direkt von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string ! = ) en.block.block1 ) )
suche mir einen block mit zwei blöcken links davon	finden sie mir einen block mit zwei blöcken links davon	finden sie mir einen block mit zwei blöcken auf der linken seite ist es	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle blöcke größer als block 1	finden sie mich alle blöcke größer als block 1	mich finden alle blöcke, die größer als der block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
welcher block ist links von block eins	welcher block links von block eins ist	was block ist auf der linken seite des blocks ein	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )
wählen sie einen block, der größer als 5 cm ist	wählen sie einen block, der größer als 3 zoll ist	wählen sie einen block, der größer als 3 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
block mit pyramidenform rechts vom block	block mit pyramidenform rechts vom block	block mit pyramideform an der rechten seite des blocks	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
block, der von höchstens zwei blöcken rechts ist	block, der von höchstens zwei blocks	block, der rechts von zwei block	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
beschreiben sie die form von block 1	beschreiben sie die form von block 1	beschreiben sie die form von block 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string shape ) ) )
welcher ziegelstein ist einzigartig und 3 zoll	welcher ziegel ist einzigartig und 3 zoll	was stein ist einzigartig und 3 zoll	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string is_special ) ) )
suchen sie einen block, der nicht breiter als die höhe von block 1 ist	suchen eines blocks, der nicht breiter als die höhe von block 1 ist	suchen sie ein block, der nicht breiter ist, als die höhe von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
welcher block sich rechts neben dem block befindet, über dem sich block 1 befindet	welcher block rechts neben dem block ist, der block 1 oben ist	was block ist auf der rechten seite der block, der block 1 ist oben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )
wählen sie einen stein, der mindestens 3 cm breit ist	wählen sie einen ziegel, der mindestens 3 zoll breit ist	wählen sie einen ziegel, der mindestens 3 cm breit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
finde den pyramidenförmigen block	den pyramidenförmigen block lokalisieren	suchen sie den pyramidenförmigen block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string shape ) ( string = ) en.shape.pyramid ) )
welcher block hat zwei blöcke oder weniger darunter	welcher block zwei blöcke oder weniger darunter hat	was block hat zwei blöcke oder weniger darunter	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block nicht rechts von block 1	block nicht rechts von block 1	block nicht zu rechtblock 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string ! = ) en.block.block1 ) )
sieh unten und rechts von block 1 nach	siehe unten und rechts von block 1	schauen sie unten, und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )
finde mich alle blöcke 3 zoll lang rechts von block 1	finden sie mich alle blöcke 3 zoll lang rechts von block 1	mich finden alle blöcke 3zolllangen rechten block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string right ) ( string = ) en.block.block1 ) )
welcher block hat eine breite von 3 zoll und block 1 ist auf der rechten seite von	welcher block hat eine breite von 3 zoll und block 1 ist auf der rechten seite	was block hat eine breite von 3 zoll und block 1 ist auf der rechten seite von	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
block, dessen länge kleiner als 3 zoll ist	block, dessen länge kleiner als 3 zoll ist	block, dessen länge kleiner ist als 3 zentimeter	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
welche blocklänge kleiner ist als die blockbreite 1s	welche blöcke länge ist kleiner als block 1s breite	was blockiert länge kleiner ist als der block 1s breite	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
3 zoll breiter block rechts von block 1	3 zoll breiter block rechts von block 1	3zollwideblock auf der rechten seite von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string right ) ( string = ) en.block.block1 ) )
finde mich alle blöcke größer als block 1	finden sie mich alle blöcke größer als block 1	mich finden alle blöcke größer als der block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
pyramidenblock über block 1	pyramidenblock über block 1	pyramideblock oben block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
block, dessen höhe höchstens 3 zoll beträgt	block, dessen höhe höchstens 3 zoll beträgt	block, dessen höhe höchstens 3 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
welcher block ist kürzer als block 1?	welcher block kürzer als block 1 ist	was block ist kürzer als der block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
suchen sie den block unter block 1 mit einem durchmesser von 3 zoll	finden sie den block unter block 1, der einen durchmesser von 3 zoll hat	finden sie den block unter den block 1, der hat einen 3zolldurchmesser	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string below ) ( string = ) en.block.block1 ) )
finde mir einen block mit durchschnittlicher länge	finden sie mir einen block mit durchschnittlicher länge	finden sie mir einen block mit einer durchschnittlichen länge	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ) ) )
block, der die kleinste breite hat	block mit der kleinsten breite	block, dass die kleinste breite	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string width ) ) ) )
block über 3 zoll block	block über 3 zoll block	block oben 3zollblock	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
finde mich alle blöcke rechts von 3 zoll hohen blöcken	finden sie mich alle blöcke rechts von 3 zoll hohen blöcken	mich finden alle blöcke rechts 3zollhighblöcke	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
suchen sie den block in der form einer pyramide, von der sich block 1 rechts befindet	finden sie den block in form einer pyramide, der block 1 rechts von	finden sie den block, der in der form einer pyramide, dass block 1 ist auf der rechten seite von	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
welcher block von und über block 1 übrig bleibt	welcher block von und über block 1 bleibt	was block ist links und oben block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )
block, dessen höhe die höhe von block 1 ist	block, dessen höhe die höhe des blocks 1 ist	block, deren höhe von der höhe von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.getProperty en.block.block1 ( string height ) ) ) )
finde den block mit den wenigsten blöcken darunter	finden sie mir den block mit den wenigsten blöcken darunter	finden sie mir den block mit den wenigsten blöcken darunter	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string above ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block über dem block rechts von block 1	block über dem block rechts von block 1	block über den block an der rechten block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )
finden sie einen pyramidenförmigen block mit einer höhe von 3 zoll	finden sie einen pyramidenförmigen block mit einer höhe von 3 zoll	finden ein pyramidenförmigen block mit einem 3zollhöhe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
finden sie einen block 6 zoll oder kürzer	finden sie einen block 6 zoll oder kürzer	finden einen block von 6 zoll oder kürzer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
wählen sie einen block, der so dick ist, wie block 1 lang ist	wählen sie einen block, der so dick ist wie block 1 lang ist	wählen sie einen block, der ist so dick wie block 1 ist lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
wählen sie einen block, der genau wie block 1 aussieht	wählen sie einen block, der wie block 1 aussieht	wählen sie einen block, der genauso aussieht wie der block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) ( call SW.getProperty en.block.block1 ( string shape ) ) ) )
finde mich in allen blöcken darunter, die über block 1 liegen	finden sie mich alle blöcke unten, von denen oben block 1 ist	mich finden alle blöcke unten von denen oben block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )
finde mich alle 3 zoll breiten blöcke	finden sie mich alle 3 zoll breiten blöcke	mich finden alle die 3 cm breite blöcke	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
block, dessen länge mindestens der länge von block 1 entspricht	block, dessen länge mindestens länge des blocks 1 ist	block, dessen länge mindestens der länge des block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
finde alle pyramidenblöcke unter block 1	finden sie alle pyramidenblöcke unter block 1	finden sie alle pyramide blöcke unterhalb von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
welcher stein ist links von stein 1	welcher ziegel ist auf der linken seite von ziegel 1	die ziegel auf der linken seite der ziegel 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) )
oberhalb und links von block 1	oben und links von block 1	oberhalb und links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
block, der die kleinste höhe hat	block mit der kleinsten höhe	block, dass die kleinste höhe	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string height ) ) ) )
wie lang ist block 1?	was ist die länge des blocks 1	was ist die länge von block 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string length ) ) )
finde mir alle blöcke mit höchstens 2 formen	finden sie mich alle blöcke mit höchstens 2 formen	mich finden alle blöcke mit höchstens 2 formen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string <= ) ( number 2 ) ) )
welcher block breiter als block 1 ist, ist lang	welcher block breiter als block 1 ist lang	der block ist breiter als der block 1 ist lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
welcher block hat eine breite von entweder 3 oder 6 zoll	welcher block eine breite von 3 oder 6 zoll hat	der block hat eine breite von entweder 3 oder 6 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )
wählen sie einen block mit einer länge von 3 oder 6 zoll	block der länge 3 oder 6 zoll auswählen	wählen sie block der länge 3 oder 6 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )
finde den dünnsten block	finden sie den dünnsten block	finden sie die dünnste block	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string width ) ) ) )
wie breit ist block 1?	was ist die breite von block 1	was ist die breite des block 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string width ) ) )
finde alle sonderblöcke, die unter block 1 liegen	finden sie mich alle speziellen blöcke, die unter block 1 sind	mich finden alle speziellen blöcken, die unter block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
finden sie den block, den block 1 links von und über befindet	finden sie den block, der sich links von und oben befindet	finden sie den block, der block 1 ist auf der linken seite und oben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
finde mich alle blöcke rechts von 3 zoll langen blöcken	finden sie mich alle blöcke rechts von 3 zoll langen blöcken	mich finden alle blöcke rechts 3zolllange blöcke	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
bloch länger als die länge von block 1	bloch länger als die länge des blocks 1	bloch länger als die länge des block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
finde mich alle blöcke mit 2 blöcken davon übrig	finden sie mich alle blöcke mit 2 blöckelinks davon	mich finden alle blöcke 2 blöcke übrig	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle speziellen blöcke von etwas übrig	finden sie mir alle speziellen blöcke links von etwas	mich finden alle spezielle blöcke, links etwas	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
finde mich alle blöcke unter 3 zoll hohen blöcken	finden sie mich alle blöcke unter 3 zoll hohen blöcken	mich finden alle blöcke unter dem 3zollhighblöcke	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
finde den block, der wie eine pyramide oder ein würfel geformt ist	suchen sie den block, der wie eine pyramide oder einen würfel geformt ist	finden sie den block, der geformt ist wie eine pyramide oder ein würfel	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) ( call SW.concat en.shape.pyramid en.shape.cube ) ) )
such mir den speziellen block oben auf dem block	finden sie mir den speziellen block auf dem block	mich finden die speziellen block auf dem block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
block ein über block, der über block 1 ist	blockieren eines obigen blocks, der sich über block 1 befindet	block oben block oben block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
finden sie einen block kürzer als 3 zoll	finden sie einen block kürzer als 3 zoll	finden sie einen block kürzer als 3 zentimeter	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
wählen sie den block über block 1 mit einer länge von 3 zoll	wählen sie den block über block 1 mit einer länge von 3 zoll	wählen sie den block, der über dem block 1 mit einer länge von 3 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
pyramide rechts von block 1	pyramide rechts von block 1	pyramidenzu rechtblock 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string right ) ( string = ) en.block.block1 ) )
welcher block ist der kleinste?	welcher block der kleinste ist	in welchem block ist die kleinste	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string height ) ) ) )
welcher stein ist am weitesten links?	welcher ziegel am weitesten links ist	die backstein ist das am weitesten links	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string left ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
gibt es einen block, der über der geringsten anzahl anderer blöcke liegt?	gibt es einen block, der sich auf der geringsten anzahl anderer blöcke befindet	ist es ein block, der oben von der geringsten anzahl von anderen blöcken	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string above ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
3 zoll breiter block unter block 1	3 zoll breiter block unter block 1	3zollwideblock unten block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
welcher block sich unter dem block befindet, unter dem sich block 1 befindet	welcher block befindet sich unterhalb des blocks, der block 1 befindet sich unter	was block ist unten der block, der block 1 ist unten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )
block, von dem die meiste anzahl von blöcken übrig ist	block, dass die meisten blocks von	block, dass die anzahl der block ist links	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string left ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mir einen block mit zwei oder weniger farben	finden sie mir einen block mit zwei oder weniger farben	finden sie mir einen block mit zwei oder weniger farben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string <= ) ( number 2 ) ) )
welcher stein hat mehr als 2 steine darunter	welcher ziegel mehr als 2 steine darunter hat	was ziegelstein hat mehr als 2 steine unten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finden sie den block mit der geringsten länge	finden sie den block, der die kleinste länge hat	finden sie den block, dass die kleinste länge	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string length ) ) ) )
block rechts von einem speziellen block	block rechts von einem speziellen block	block auf der rechten seite einen speziellen block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
wählen sie den block über block 1	wählen sie den block über block 1	wählen sie den block oben block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )
finde mich alle blöcke mit weniger als 2 farben	finden sie mich alle blöcke mit weniger als 2 farben	mich finden alle blöcke mit weniger als 2 farben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string < ) ( number 2 ) ) )
finde den block über und links von block 1	finden sie mich den block, der sich oben und links von block 1 befindet	finden mich der block, der oberhalb und links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
finde alle blöcke, die links und rechts von block 1 liegen	finden sie mich alle blöcke, die links und rechts von block 1 ist	mich finden alle blöcke, die links und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )
was ist der block über sonderblock	was ist der block über dem sonderblock	was ist der block oberhalb speziellen block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
finde alle blöcke, die mindestens so lang sind wie block 1	finden sie mich alle blöcke, die mindestens so lang ist, wie block 1 hoch ist	mich finden alle bausteine, die mindestens so lang ist wie block 1 ist groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
finde mich alle 3 zoll hohen blöcke links von block 1	finden sie mich alle 3 zoll hohen blöcke links von block 1	mich finden alle 3 zoll groß die blöcke links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string left ) ( string = ) en.block.block1 ) )
wählen sie den block rechts neben dem block über block 1 aus	wählen sie den block rechts neben dem block über block 1	wählen sie den block auf der rechten seite der block oben block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )
wählen sie einen block, der die form eines würfels oder einer pyramide hat	wählen sie einen block aus, der wie ein würfel oder eine pyramide geformt ist	wählen sie einen block, der die form wie ein würfel oder pyramide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) ( call SW.concat en.shape.pyramid en.shape.cube ) ) )
block, der höchstens zwei form hat	block, der höchstens zwei formen hat	block, dass bei den meisten zweiform	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string <= ) ( number 2 ) ) )
block auf und links von block 1	block nach oben und links von block 1	block oben und links aus dem block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )
pyramidenblock links von block 1	pyramidenblock links von block 1	pyramideblock links block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
finde mich alle steine mindestens 3 cm lang	finden sie mich alle ziegel mindestens 3 zoll lang	finden, die mir all die steine, die mindestens 3 cm lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
3zollblock rechts von block 1	3zollblock rechts von block 1	3zollblockzu rechtblock 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
blockhöhe nicht mehr als die breite von block 1	höhenblock nicht mehr als breite des blocks 1	block von der höhe nicht mehr als die breite der block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
welcher block ist block 1 unten und rechts von	welcher block ist block 1 unten und rechts von	block ist block 1 unten und auf der rechten seite	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )
wählen sie einen baustein, dessen länge größer als die breite von block 1 ist	wählen sie ziegel aus, dessen länge größer als die breite von block 1 ist	wählen sie ziegel, dessen länge mehr als die breite des blocks 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
wähle den block oben rechts aus	wählen sie den block über der rechten	wählen sie den block über dem rechten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
zweite links von block 1	zweite linke seite von block 1	zweite links von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )
block über block eins und rechts	block über block eins und rechts	block oben block eins und rechts	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
was ist die gesamtbreite der blöcke	was ist die gesamtbreite der blöcke	was ist die gesamtbreite des blocks	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ) ) )
block, von dem mindestens zwei übrig sind	block, dass mindestens zwei blocks von	block, der mindestens zwei block ist links	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
suchen sie einen block mit einer länge von 3 zoll, über dem sich block 1 befindet	finden sie einen block mit einer länge von 3 zoll, der block 1 ist über	finden sie einen block mit einer länge von 3 cm, der block 1 ist oben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
finde mich in allen blöcken unter dem block, von dem 1 übrig ist	finden sie mich alle blöcke unter diesem block 1 ist links von	mich finden alle blöcke unterhalb von block 1 ist links	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )
was 3 zoll ziegel ist rechts von ziegel 1	was 3 zoll ziegel ist auf der rechten seite von ziegel 1	was sie 3zollziegel ist auf der rechten seite der ziegel 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
welcher stein hat zwei blöcke darunter	welcher ziegel zwei blöcke darunter hat	die backsteinhat zwei blöcke unter ihm	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finden sie mich alle blöcke zwei blocks von block 1	finden sie mir alle blöcke zwei blöcke links von block 1	mich finden alle blöcke und zwei blöcke links von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )
finde mich alle blöcke mit höchstens 2 blöcken rechts davon	finden sie mich alle blöcke mit höchstens 2 blöcken rechts davon	mich finden alle blöcke mit höchstens 2 blöcke auf der rechten seite	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle blöcke, die block 1 ist rechts und darunter	finden sie mich alle blöcke, die block 1 ist rechts und unten	mich finden alle blöcke, block 1 ist rechts und unten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )
holen sie sich einen block über einem pyramidenblock	erhalten sie einen block über jedem pyramidenblock	holen sie sich einen block, der sich über jeder pyramide block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
block, von dem höchstens zwei block übrig sind	block, dass höchstens zwei blocks von	block, dass bei den meisten zweiblock ist links	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher block kürzer ist als block 1, ist lang	welcher block kürzer ist als block 1 ist lang	was block kürzer ist dann block 1 ist lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
block, der unter der meisten anzahl von blöcken liegt	block, der unter der meisten anzahl von block ist	block, unten die anzahl von block 	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string below ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher block ist über und rechts von block 1	welcher block sich oben und rechts von block 1 befindet	der block ist oben und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
block, der über weniger als zwei block ist	block, der über weniger als zwei blocks liegt	block, der vor weniger als zwei blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde den block mit den wenigsten blöcken links davon	finden sie den block mit den wenigsten blöcken links davon	finden sie den block mit den wenigsten blöcke auf der linken seite ist es	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string right ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block, von dem der eine nicht übrig ist	block, der nicht übrig bleibt,	block, der block eins ist nicht links	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string ! = ) en.block.block1 ) )
suchen sie einen block, der über und links von block 1 liegt	finden sie einen block, der block 1 über und links von	finden sie einen block, der block 1 ist oben und auf der linken seite	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
block, der links vom block über block 1 liegt	block, der links vom block über block 1 ist	block, links block oben block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )
block, der block 1 darüber und darunter hat	block, der block 1 oben und unten hat	block, dass block 1 oben und unten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )
wählen sie den block aus, der sich rechts von block 1 unter dem block befindet	wählen sie den block unterhalb des blocks rechts neben block 1	wählen sie den block unter den block mit dem rechten block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )
block rechts vom pyramidenblock	block rechts vom pyramidenblock	block rechts der pyramide block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
block, der speziell ist und der von block 1 übrig bleibt	block, der speziell ist und von block 1 links ist	block, dass ist das besondere und das ist links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string left ) ( string = ) en.block.block1 ) )
wählen sie alle blöcke aus, deren länge maximal 6 zoll beträgt	wählen sie alle blöcke aus, deren länge maximal 6 zoll beträgt	wählen sie alle blöcke, deren länge auf maximal 6 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
unterhalb und rechts von block 1	unten und rechts von block 1	unterhalb und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
finden sie den block mit einer höhe, die 3 oder 6 zoll nicht überschreitet	finden sie den block mit einer höhe, die weder 3 oder 6 zoll übertrifft	finden sie den block mit einer höhe, die nicht zu übertreffen entweder 3 oder 6 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
welcher block ist links von den kleinsten blöcken	welcher block links von den kleinsten blöcken ist	was block ist auf der linken seite der beine blockiert	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string right ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher stein hat weniger als zwei formen	welcher ziegel weniger als zwei formen hat	die backsteinhat weniger als zwei formen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string < ) ( number 2 ) ) )
finde mich alle blöcke mit mindestens 2 blöcken rechts davon	finden sie mich alle blöcke mit mindestens 2 blöcken rechts davon	mich finden alle blöcke mit mindestens 2 blöcke auf der rechten seite	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
suchen sie einen block mit einer höhe, die der länge von block 1 entspricht	finden sie einen block mit einer höhe, die block 1s länge ist	finden sie einen block mit der höhe der gleichblock 1s länge	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.getProperty en.block.block1 ( string length ) ) ) )
block, dessen form eine pyramide ist	block, dessen form eine pyramide ist	block, dessen form einer pyramide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) )
finde den pyramidenblock rechts von block 1	finden sie mich die pyramide block, der auf der rechten seite von block 1 ist	mich finden die pyramideblock, der rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
wählen sie den block aus, der zwei blöcke über diesem block liegt	wählen sie den block aus, der zwei blöcke über diesem block liegt	wählen sie den block, zwei blocks weiter oben, dass block	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher stein ist rechts von dem speziellen stein	welcher ziegel rechts vom spezialziegel ist	die mauer rechts von der speziellen ziegel	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
block mit zwei formen	zwei formblock	zwei formblock	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) ( number 2 ) ) )
wie viele blöcke gibt es	wie viele blöcke es gibt	wie viele blöcke sind es	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher stein hat nicht mehr als zwei steine darüber	welcher ziegel nicht mehr als zwei steine darüber hat	die backsteinhat nicht mehr als zwei steine oben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wählen sie einen block unter block 2	wählen sie einen block unter block 2	wählen sie einen block unter den block 2	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
was ist die farbe von block 1?	was ist die farbe von block 1	was ist die farbe von block 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string color ) ) )
finde alle blöcke, die 2 blöcke unter block 1 liegen	finden sie mich alle blöcke, die 2 blöcke unter block 1 ist	mich finden alle blöcke, 2 blöcke unterhalb von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )
finde alle pyramidenblöcke, die rechts von block 1 liegen	finden sie mich alle pyramidenblöcke, die rechts von block 1 ist	mich finden alle pyramidenblöcke, dass ist richtig, der block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string right ) ( string = ) en.block.block1 ) )
3 zoll langer block links von block 1	3 zoll langer block links von block 1	3 cm langen block an der linken seite von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
welcher block ist über dem backstein, der 3 cm hoch ist	welcher block über dem ziegel ist, der 3 zoll hoch ist	welcher block über dem ziegel, der ist 3 cm hoch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
suchen sie einen block, der rechts von mindestens zwei blöcken ist	finden sie einen block, der von mindestens zwei blöcken rechts ist	finden sie einen block, dass ist richtig, der mindestens zwei blöcke	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher block hat eine breite von 3 zoll und befindet sich links von block 1	welcher block hat eine breite von 3 zoll und ist links von block 1	was block hat eine breite von 3 cm und ist auf die linke seite von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string left ) ( string = ) en.block.block1 ) )
wähle den stein zwei steine links von stein 1 aus	wählen sie den ziegel zwei ziegel links von ziegel 1	wählen sie die ziegel zwei steine links von ziegel 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )
suchen sie mir den block, der sich links neben dem block befindet, der sich rechts neben block 1 befindet	finden sie mich den block, der sich links neben dem block befindet, der sich rechts von block 1 befindet	finden sie mir den block links von dem block, der rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
block unten und links von block 1	block unten und links von block 1	block unterhalb und links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
block, von dem weniger als zwei blocks übrig sind	block, dass weniger als zwei block von	block, weniger als zwei blocks links	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wie lang ist der block?	was ist die länge des blocks	was ist die länge des blocks	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ) ) )
finde mich alle blöcke rechts von block 1	finden sie mich alle blöcke rechts von block 1	mich finden alle blöcke rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
welcher block ist links und unter block 1	welcher block links und unten ist block 1	was block nach links und unten, block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )
finde mich alle blöcke, die 3 cm breit und lang sind	finden sie mich alle blöcke, die 3 zoll breit und lang ist	mich finden alle bausteine, die ist 3 cm breit und lang	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
welcher block ist rechts von dem 3 zoll breiten block	welcher block rechts vom 3 zoll breiten block ist	was block ist rechts neben dem 3 zoll breiten block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )
wählen sie den block, der sich auf der linken seite des blocks befindet und 3 zoll lang ist	wählen sie den block auf der linken seite des blocks aus, der 3 zoll lang ist	wählen sie den block, der auf der linken seite des blocks, der 3 zoll in der länge	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
finde den block mit einer länge, die kürzer als die von block 1 ist	finden sie den block mit einer länge kürzer als die von block 1	finden sie den block mit einer länge kürzer als die von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
block über weniger als zwei blöcken	block über weniger als zwei blöcken	block vor weniger als zwei blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wähle den ziegelstein in form einer pyramide oder eines würfels	wählen sie den ziegel in form einer pyramide oder eines würfels	wählen sie die ziegel geformt wie eine pyramide oder ein würfel	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) ( call SW.concat en.shape.pyramid en.shape.cube ) ) )
finde die blöcke mit zwei oder weniger formen	finden sie die blöcke mit zwei oder weniger formen	finden sie die blöcke, die zwei formen oder weniger	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string <= ) ( number 2 ) ) )
was ist der untere und linke block von block 1?	was ist der block unten und links von block 1	was ist der block links unterhalb von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )
block unter 3 zoll breiten block	block unter 3 zoll breiter block	block unten 3 cm breitblock	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )
suchen sie den block unter block 1, der ebenfalls eine breite von 3 zoll hat	suchen sie den block unter block 1, der auch eine breite von 3 zoll hat	suchen sie den block unter den block 1, der hat auch eine breite von 3 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
3 zoll hoher bock unter block 1	3 zoll hoher bock unter block 1	3 zoll groß bock unter block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
wähle mir den block aus, der über block 1 liegt und eine höhe von 3 zoll hat	wählen sie mir den block, der über block 1 ist und eine höhe von 3 zoll hat	wählen sie mir den block oben block 1 und hat eine höhe von 3 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
finde alle blöcke, die noch von spezialblöcken übrig sind	finden sie mich alle blöcke links von speziellen blöcken	mich finden alle blöcke links von spezielle blöcke	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
block unter einem speziellen block	block unter einem speziellen block	block unter einem speziellen block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
welcher block hat eine breite von drei zoll und dieser block 1 ist unten	welcher block hat eine breite von drei zoll und dieser block 1 ist unten	was block hat eine breite von drei zoll und der block 1 ist unten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
suchen sie den block mit einem höhenmaß, das mindestens der länge von block 1 entspricht	lokalisieren sie den block mit einer höhenmessung, die mindestens der länge von block 1 entspricht	suchen sie den block mit einer höhe messung entspricht mindestens der länge von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
wählen sie einen block mit der gleichen höhe wie block 1	wählen sie einen block aus, der die gleiche höhe wie block 1 hat	wählen sie einen block, der die gleiche höhe wie block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
finden sie alle sonderblöcke unter block 1	finden sie alle spezialblöcke unter block 1	finden sie alle spezielle blöcke unterhalb von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string below ) ( string = ) en.block.block1 ) )
wählen sie den unteren block, der 5 cm hoch ist	wählen sie den unteren block, der 3 zoll hoch ist	wählen sie den unteren block, der 3 zoll groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
welcher pyramidenförmige block befindet sich rechts von block 1?	welcher pyramidenförmige block rechts von block 1	die pyramidenförmiger block rechts, block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
block, über dem die geringste anzahl von blöcken liegt	block, dass die geringste anzahl von block über	block, der die geringste anzahl der block ist oben	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string above ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wählen sie den block über dem block rechts aus. 1	wählen sie den block über dem block zum rechten block 1	wählen sie den block über den block mit dem rechten block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )
sammeln sie alle blöcke, die nicht 3 cm lang sind	sammeln sie alle blöcke, die nicht 3 zoll lang sind	sammeln sie alle die blöcke, die nicht 3 cm lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string ! = ) ( number 3 en.inch ) ) )
finde mich alle blöcke bei block 1	finden sie mich alle blöcke bei block 1	mich finden alle blöcke auf block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )
finde mich alle sonderblöcke über block 1	finden sie mich alle spezialblöcke über block 1	mich finden alle speziellen blöcken, die oben block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string above ) ( string = ) en.block.block1 ) )
finde mich einen block unter mindestens zwei blöcken	finden sie mich einen block unter mindestens zwei blöcken	finden sie mir einen block unter mindestens zwei blöcke	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle blöcke über dem block 1 ist unten	finden sie mich alle blöcke über diesem block 1 ist unten	mich finden alle blöcke oberhalb, der block 1 ist unten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )
wählen sie den block rechts von mehr als 2 blöcken aus	wählen sie den block rechts von mehr als 2 blöcken	wählen sie den block, der rechts von mehr als 2 blöcke	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block, dessen breite die breite von block 1 ist	block, dessen breite die breite des blocks 1 ist	block, deren breite der breite des block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )
finde alle blöcke, über denen block 1 liegt	finden sie mich alle blöcke, über denen block 1 das recht hat,	mich finden alle blöcke vor dem block 1 ist richtig, der	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )
block über 3 zoll hohen block	block über 3 zoll hohen block	block oben 3 zoll hohen block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
ist es eine pyramide oder ein würfel	ist es eine pyramide oder ein würfel	ist es eine pyramide oder ein würfel	( call SW.listValue ( call SW.concat en.shape.pyramid en.shape.cube ) )
suchen sie einen block, der mindestens die gleiche höhe wie block 1 hat	suchen eines blocks, der mindestens die gleiche höhe wie block 1 hat	finden sie einen block, der mindestens die gleiche höhe wie block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
finde mich alle 3 zoll langen blöcke unter block 1	finden sie mich alle 3 zoll langen blöcke unter block 1	mich finden alle 3zolllange blöcke unterhalb von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
finde einen block größer als block 1 ist lang	finden sie einen block größer als block 1 ist lang	finden sie einen block größer als der block 1 ist lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
suchen sie den block über block 1	finden sie den block, der sich über block 1 befindet	finden sie den block oben block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
finde mich alle blöcke mit einer länge länger als 3 cm	finden sie mich alle blöcke mit einer länge länger als 3 zoll	mich finden alle blöcke mit einer länge von mehr als 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
suchen sie einen block, der über zwei anderen blöcken liegt	suchen eines blocks, der sich auf zwei anderen blöcken befindet	finden sie einen block, der auf der oberseite der beiden anderen blöcke	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wählen sie einen block mit zwei blöcken darunter aus	wählen sie einen block mit zwei blöcken darunter	wählen sie einen block mit zwei blöcken darunter	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
pyramidenförmiger block, der sich links von block 1 befindet	pyramidenförmigen block, der sich links von block 1 befindet	die pyramidenförmigen block, links block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
wählen sie den ziegel, der sich über dem ziegel links von ziegel 1 befindet	wählen sie den ziegel, der über dem ziegel auf der linken seite von ziegel 1 ist	wählen sie den ziegel oberhalb der ziegel auf der linken seite der ziegel 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )
wählen sie den block unter block unter block 1 aus	wählen sie block unter block unter block 1	wählen sie block unter blocks unter block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )
finde mich alle blöcke mindestens 3 cm breit	finden sie mich alle blöcke mindestens 3 zoll breit	mich finden alle blöcke, die mindestens 3 cm breit ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
was ist der am weitesten links stehende block?	was ist der linke block	was ist am linken block	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string left ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle 3 zoll langen blöcke	finden sie mich alle 3 zoll langen blöcke	mich finden alle 3zolllange blöcke	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
wählen sie die blöcke aus, die sich unter nicht mehr als 2 blöcken befinden	wählen sie die blöcke aus, die sich unter nicht mehr als 2 blöcken befinden	wählen sie die blöcke, die unter nicht mehr als 2 blöcke	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher stein ist ganz oben	welcher ziegel ganz oben steht	die ziegel an der spitze	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string below ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block 1 oder 2 auswählen	block 1 oder 2 auswählen	wählen sie block 1 oder 2	( call SW.listValue ( call SW.concat en.block.block1 en.block.block2 ) )
block mit einer form	block mit einer form	block mit einer form	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string < ) ( number 2 ) ) )
suchen sie einen block mit einer breite von mehr als 3 oder 6 zoll	suchen eines blocks mit einer breite, die größer als 3 oder 6 zoll ist	suchen sie einen block mit einer breite, die mehr als 3 oder 6 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
suchen sie den block, der eine breite von 3 zoll hat und sich rechts von block 1 befindet	finden sie den block, der eine breite von 3 zoll hat und sich rechts von block 1 befindet	finden sie den block, hat eine breite von 3 cm und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string right ) ( string = ) en.block.block1 ) )
finde mich alle blöcke, von denen block 1 rechts und links ist	finden sie mich alle blöcke, die block 1 rechts und links von	mich finden alle blöcke die block 1 ist rechts und links von	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )
wählen sie den 3 zoll breiten spezialblock	wählen sie den 3 zoll breiten spezialblock	wählen sie die 3zollbreit speziellen block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
suchen sie einen block, der breiter als block 1 ist	suchen eines blocks, der breiter als block 1 ist	finden sie einen block, der breiter als der block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
sonderblock links von block 1	spezialblock links von block 1	spezielle block links block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string is_special ) ) )
welcher stein kürzer als stein 1 ist, ist hoch	welcher ziegel kürzer ist als ziegel 1 ist hoch	die ziegel kürzer ist als ziegel1 hoch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
block mit der gleichen breite wie block 1	block mit der gleichen breite wie block 1	block mit der gleichen breite, die von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )
block rechts von mindestens 2 blöcken	block rechts von mindestens 2 blöcken	block auf der rechten seite der mindestens 2 blöcke	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
suchen sie einen block mit einem durchmesser, der die höhe von block 1 nicht überschreitet	finden sie einen block mit einem durchmesser, der die höhe von block 1 nicht überschreitet	finden sie einen block mit einem durchmesser übersteigt nicht die höhe von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
block unter block 1	block unter block 1	block unten block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
welche pyramidenblöcke über block 1 liegen	welche pyramidenblöcke über block 1 liegen	was die pyramide blöcke sind oben block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
links von block 1	links von block 1	links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
welcher ziegel unterhalb des speziellen ziegels liegt	welcher ziegel unter dem speziellen ziegel steht	die ziegel unter dem besonderen ziegel	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
finde mich alle blöcke über block 1	finden sie mich alle blöcke über block 1	mich finden alle blöcke oberhalb block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
was ist die gesamtbreite des ziegels	was ist die gesamtbreite des ziegels	was ist die gesamte breite der ziegel	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ) ) )
block, der sich über dem block befindet, der sich rechts von block 1 befindet	block, der sich über dem block befindet, der rechts von block 1 ist	block oben block, der rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )
wählen sie den pyramidenförmigen block rechts neben block 1 aus	wählen sie den block in form einer pyramide und rechts von block 1	wählen sie den block, der in der form einer pyramide und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string right ) ( string = ) en.block.block1 ) )
finde mich alle pyramidenblöcke mit einer höhe von 3 zoll	finden sie mich alle pyramidenblöcke mit einer höhe von 3 zoll	finden mich die ganze pyramide blöcke mit höhe 3 zoll	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string shape ) ( string = ) en.shape.pyramid ) )
block, dessen länge 3 zoll ist	block, dessen länge 3 zoll beträgt	block, dessen länge 3 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
finde einen speziellen block	finden sie einen speziellen block	finden sie einen speziellen block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string is_special ) ) )
block, der block 1 oben und links hat	block, der block 1 oben und links hat	block, dass block 1 oben und links	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
finde alle sonderblöcke, die block 1 unten hat	finden sie mich alle speziellen blöcke, die block 1 ist unten	mich finden alle speziellen blöcken, block 1 ist unten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string is_special ) ) )
finde den block mit den meisten formen	suchen sie den block mit den meisten formen	finden sie den block mit den meisten formen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string shape ) ) )
suchen sie den block, der über mindestens einem anderen block liegt und eine länge von 3 zoll hat	suchen sie den block, der sich auf mindestens einem anderen block befindet und eine länge von 3 zoll hat	suchen sie den block, der auf der oberseite von mindestens einem anderen block und hat eine länge von 3 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
wähle alle pyramidenblöcke aus	wählen sie alle pyramidenblöcke aus	wählen sie alle pyramide blöcke	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) )
finde mich alle blöcke mindestens 3 cm lang	finden sie mich alle blöcke mindestens 3 zoll lang	mich finden alle blöcke, die mindestens 3 cm lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
finde mich alle blöcke höchstens so hoch wie 3 zoll	finden sie mich alle blöcke höchstens so groß wie 3 zoll	mich finden alle blöcke, die höchstens so groß wie 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
welcher stein hat weniger als zwei steine darüber?	welcher ziegel weniger als zwei steine darüber hat	die backsteinhat weniger als zwei ziegel oben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher block befindet sich rechts von einem pyramidenförmigen block?	welcher block rechts von einem pyramidenförmigen block ist	was block ist rechts von einem pyramidenförmigen block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
finde mich alle blöcke links und über block 1	finden sie mich alle blöcke links und über block 1	mich finden alle blöcke links und oben block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
suchen sie den block rechts von block 1 mit einer breite von 3 zoll	finden sie den block rechts neben block 1 mit einer breite von 3 zoll	finden sie den block, der rechts von block 1 mit einer breite von 3 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
finde alle blöcke, von denen block 1 noch übrig ist	finden sie mich alle blöcke, die block 1 links und oben ist	mich finden alle blöcke, block 1 ist links und oben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )
oberhalb und rechts von block 1	oben und rechts von block 1	über und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )
block, der sich unter dem block befindet, der von block 1 links ist	block, der sich unterhalb des blocks befindet, der von block 1 links ist	block unten block, links block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )
finden sie einen block mit gleichen höhen und breitenmaßen, speziell 3 zoll	finden sie einen block mit gleicher höhe und breite messungen speziell 3 zoll	finden eines blocks mit gleicher höhe und breite messungen, die speziell 3 zoll	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
finde den pyramidenförmigen block unter block 1	finden sie den pyramidenförmigen block unter block 1	finden sie die pyramidenförmigen block unten block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
wählen sie einen 3 zoll langen block links von block 1 aus	wählen sie einen block links von block 1, der 3 zoll lang ist	wählen sie einen block auf der linken seite von block 1, der ist 3 cm lang	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string left ) ( string = ) en.block.block1 ) )
block, der etwas besonderes ist und der etwas besonderes ist	block, der besonders ist und das ist speziell	block, dass ist das besondere und das ist das besondere	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string is_special ) ) )
wählen sie die blöcke unter block 1 aus	wählen sie die blöcke unter block 1	wählen sie die blöcke unter block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) )
block ist an der zweiten linken seite von block 1	block befindet sich an der zweiten linken von block 1	block an der zweiten linken block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )
welcher ziegelstein 3 zoll breit und rechts von ziegelstein 1 ist	welcher ziegel ist 3 zoll breit und rechts von ziegel 1	die backstein ist 3 cm breit und auf der rechten seite der ziegel 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string right ) ( string = ) en.block.block1 ) )
finden sie die blöcke, die eine breite von 3 zoll haben und sich links von block 1 befinden	finden sie die blöcke, die eine breite von 3 zoll haben und sich links von block 1 befinden	finden sie die blöcke haben eine breite von 3 zoll und den linken block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
wählen sie den 3zollhohen block	wählen sie den 3 zoll hohen block	wählen sie die 3 zoll hohen block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
welcher block ist rechts von den kleinsten blöcken	welcher block rechts von den kleinsten blöcken ist	was block ist auf der rechten seite der beine blockiert	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string left ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich einen block dünner als block 1	finden sie mich einen block skinnier als block 1	finden sie mir einen block dünner als block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
finden sie den block, dessen länge und höhe 3 zoll beträgt	finden sie den block, dessen länge und höhe 3 zoll beträgt	finden sie den block, dessen länge und höhe ist 3 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
wählen sie den block mit einer breite von 3 zoll	wählen sie den block mit einer breite von 3 zoll	wählen sie den block mit einer breite von 3 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
finde spezielle blöcke mit block 1 darüber	finden sie spezielle blöcke mit block 1 über ihnen	finden sie spezielle blöcke mit dem block 1 über ihnen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
finde mich alle blöcke so hoch wie die breite von block 1	finden sie mich alle blöcke so hoch wie die breite von block 1	mich finden alle blöcke so hoch wie die breite der block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
wählen sie einen block zwischen 3 oder 6 zoll	wählen sie einen block zwischen 3 oder 6 zoll	wählen sie einen block zwischen 3 oder 6 zoll	( call SW.listValue ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) )
finde den block links von block 1	finden sie mich den block, der sich links von block 1 befindet	finden sie mir den block, links block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )
such mir einen 3 zoll langen pyramidenförmigen block	finden sie mich eine pyramide geformten block 3 zoll lang	finden sie mir einen pyramidenförmigen block 3 cm lang	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string shape ) ( string = ) en.shape.pyramid ) )
block, der rechts von weniger als zwei block ist	block, der recht von weniger als zwei block ist	block, dass ist richtig, der weniger als zwei blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wie hoch ist der block 1?	was ist die höhe von block 1	was ist die höhe von block 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string height ) ) )
finde mich alle blöcke über und rechts von block 1	finden sie mich alle blöcke über und rechts von block 1	mich finden alle blöcke oberhalb und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )
finde alle pyramidenblöcke, die von block 1 übrig sind	finden sie mich alle pyramidenblöcke, die von block 1 links ist	mich finden alle pyramidenblöcke, die links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string left ) ( string = ) en.block.block1 ) )
der block, der der länge von block 1 entspricht	der block, der der länge des blocks 1 entspricht	der block, der gleich der länge des block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
wie hoch ist ein durchschnittlicher block?	was ist die höhe eines durchschnittlichen blocks	was die höhe der durchschnittlich block	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ) ) )
wählen sie einen block links von block 1	wählen sie einen block links von block 1	wählen sie einen block links block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )
finde mich alle blöcke so lange wie block 1	finden sie mich alle blöcke, solange block 1	mich finden alle blöcke so lange wie block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string length ) ) ) )
suchen sie einen block, der kürzer als 3 zoll oder 6 zoll ist	suchen sie einen block, der kürzer als 3 zoll oder 6 zoll ist	suchen sie einen block, der kürzer als 3 zoll oder 6 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
block länger als blockbreite 1	block länger als die breite von block 1	block länger als die breite der block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
wählen sie einen block rechts von den meisten blöcken	wählen sie einen block rechts neben den meisten blöcken	wählen sie einen block auf der rechten seite die meisten blöcke	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string right ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
suchen sie den block links von block 1	finden sie den block, der sich links von block 1 befindet	finden sie den block, der sich links von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
was 3 zoll langer block ist über block 1	was 3 zoll langer block ist über block 1	was 3 cm langen block über block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
block links von block 1	block links von block 1	block links block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )
welcher block ist 3 oder weniger zoll groß	welcher block ist 3 oder weniger zoll groß	was block 3 oder weniger zoll groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
block, der zwei block ist rechts von	block, dass zwei block ist rechts von	block, zwei blocks wird rechts von	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle blöcke mindestens 2 blöcke weiter unten	finden sie mich alle blöcke mindestens 2 blöcke unten	mich finden alle blöcke mindestens 2 blöcke unten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welche blöcke sind von einzelnen oder weniger blöcken übrig	welche blöcke von einzelnen oder weniger blöcken übrig bleiben	die blöcke sind links von einzelnen oder weniger blöcke	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde alle blöcke, von denen block 1 übrig ist	finden sie mich alle blöcke, die block 1 links von	mich finden alle blöcke, block 1 ist links	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
welcher block befindet sich links von und unter block 1?	welcher block links von und unter block 1 ist	was block ist auf der linken seite und unten, block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )
wählen sie den block 1 links und darunter aus	wählen sie den block aus, der sich links und unten befindet	wählen sie den block, der block 1 ist auf der linken seite und unten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
finde blöcke, die mindestens so hoch sind, wie block 1 breit ist	finden sie blöcke, die mindestens so hoch wie block 1 sind breit	finden sie blöcke, die sind mindestens so groß, wie der block 1 ist breit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
blöcke mit mehr als zwei farben	blöcke mit mehr als zwei farben	blöcke von mehr als zwei farben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string > ) ( number 2 ) ) )
welcher ziegel hat eine breite, die kleiner ist als die länge von ziegel 1?	welcher ziegel hat eine breite weniger als die länge des ziegels 1	die backsteinhat eine breite kleiner als die länge der ziegel 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
welcher block ist links von block 1	welcher block links von block 1 ist	der block ist auf der linken seite von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string ! = ) en.block.block1 ) )
welcher block ist rechts und unter block 1	welcher block rechts und unten block 1 ist	was block ist auf der rechten seite und unten, block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )
pyramidenblock unter block 1	pyramidenblock unter block 1	pyramideblock unten block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
finden sie alle blöcke mit einer höhe von weniger als 6 zoll	finden sie alle blöcke mit einer höhe von weniger als 6 zoll	finden sie alle blöcke mit einer größe von weniger als 6 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
finde mich alle blöcke rechts von block 1	finden sie mich alle blöcke rechts von block 1	mich finden alle blöcke, die rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) )
wählen sie die 3 zoll langen blöcke aus	wählen sie die blöcke aus, die 3 zoll lang sind	wählen sie die blöcke, die sind 3 cm lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
block weniger als zwei blöcke weiter unten	block weniger als zwei blöcke darunter	block weniger als zwei blocks unten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
suchen sie den block, der sich unter der kleinsten anzahl anderer blöcke befindet	suchen sie den block, der sich unter der kleinsten anzahl anderer blöcke befindet	finden sie die block, ist unterhalb der kleinsten anzahl von anderen blöcken	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string below ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wählen sie einen block länger als 3 zoll	wählen sie einen block mit einer zeit von mehr als 3 zoll	wählen sie einen block mehr als 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
welcher 3 zoll lange block über block 1 liegt	der 3 zoll lange block ist über block 1	die 3 zoll langen block über block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
finden sie den block höher als 3 zoll	finden sie den block größer als 3 zoll	finden sie den block größer als 3 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
wählen sie den block mit zwei formen aus	wählen sie den block mit zwei shapes aus	wählen sie den block, die hat zwei formen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) ( number 2 ) ) )
3 zoll block über block 1	3zollblock über block 1	3zollblock oben block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string above ) ( string = ) en.block.block1 ) )
finde mich alle blöcke mit 2 farben	finden sie mich alle blöcke mit 2 farben	mich finden alle blöcke mit 2 farben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string = ) ( number 2 ) ) )
wähle den block auf der linken seite von block 1 aus	wählen sie den block auf der linken seite von block 1	wählen sie den block auf der linken seite von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
wählen sie einen block mit einer höhe von 1 blockbreite	wählen sie einen block mit einer höhe von 1 blockbreite	wählen sie einen block mit einer höhe von 1 block breite	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )
was ist der spezialblock links von block 1?	was ist der spezielle block links von block 1	was ist der besondere block im linken block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
wählen sie alle blöcke der länge 1	wählen sie alle blöcke der länge 1	wählen sie alle blöcke der länge 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string length ) ) )
was ist die farbe von block 1?	was ist die farbe von block 1	was ist die farbe von block 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string color ) ) )
finde mich alle blöcke, die nicht 3 cm lang sind	finden sie mich alle blöcke, die nicht 3 zoll lang ist	mich finden alle bausteine, die ist nicht 3 cm lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string ! = ) ( number 3 en.inch ) ) )
block links von der geringsten anzahl von blöcken	block links von der geringsten anzahl von blöcken	block auf der linken seite der geringsten anzahl von blöcken	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string left ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde alle speziellen blöcke, die rechts von block 1 sind	finden sie mich alle speziellen blöcke, die recht auf block 1 ist	mich finden alle speziellen blöcken, das ist richtig, der block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string is_special ) ) )
finde einen block rechts von block 1	finden sie einen block rechts neben block 1	finden sie einen block auf der rechten seite von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )
block, solange block 1 breit ist	block, solange block 1 breit ist	so lange blockieren, wie block 1 ist breit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )
welcher block ist über dem block, der 3 cm lang ist	welcher block über dem block ist, der 3 zoll lang ist	was block über den block, der ist 3 cm lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
finde mich alle 3zollblöcke links von block 1	finden sie mich alle 3 zoll blöcke links von block 1	mich finden alle 3zollblöcke links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
welcher pyramidenförmige ziegelstein 3 zoll lang ist	welcher pyramidenförmige ziegel ist 3 zoll lang	was pyramidenförmigen stein ist 3 cm lang	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string shape ) ( string = ) en.shape.pyramid ) )
welcher stein hat zwei steine darunter	welcher ziegel zwei steine darunter hat	die backsteinhat zwei ziegelsteine unten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher block ist länger als block 1?	welcher block ist länger als block 1	was block ist länger als der block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
wähle den pyramidenförmigen block aus	wählen sie den pyramidenförmigen block	wählen sie die pyramidenförmigen block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
wähle steine aus, die mindestens 5 cm hoch sind	wählen sie ziegel, die mindestens 3 zoll hoch sind	wählen sie steine, die mindestens 3 cm hoch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
wählen sie einen block, der sich rechts vom äußersten block links befindet	wählen sie einen block, der rechts vom entferntesten block nach links ist	wählen sie einen block, der rechts von der am weitesten block auf der linken seite	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )
finde mich alle blöcke vor und links von block 1	finden sie mich alle blöcke vorne und links von block 1	mich finden alle blöcke vorderund der linke block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )
finde mich alle blöcke mit einer breite von weniger als 3 zoll	finden sie mich alle blöcke mit einer breite kürzer als 3 zoll	mich finden alle blöcke mit einer breite, die kürzer als 3 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
finde mich alle steine breiter als die breite von block 1	finden sie mich alle steine breiter als die breite von block 1	finden, die mir all die steine, die breiter als die breite des blocks 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
der einzigartige 3 zoll breite block	der einzigartige 3 zoll breite block	das einzigartige 3zollwideblock	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string is_special ) ) )
block zwei leerzeichen über block 1	block zwei leerzeichen über block 1	block zwei räume oben block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
block, der größer als drei zoll ist	block, der größer als drei zoll ist	block, der größer als drei zentimeter	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
es gibt einen block unter block 1 und einen block darüber	es gibt einen block unter block 1 und einen block darüber, den man finden	es ist ein block unten block 1 und block oben, dass man es finden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )
wählen sie den block aus, der sich auf der rechten seite des blocks auf der linken seite von block 1 befindet	wählen sie den block auf der rechten seite des blocks auf der linken seite von block 1	wählen sie den block, der auf der rechten seite des blocks auf die linke seite von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )
suchen sie den block mit einer höhe, die die höhe von block 1 nicht überschreitet	suchen sie den block mit einer höhe, die die höhe von block 1 nicht überschreitet	finden sie den block, der hat eine höhe, die nicht über die höhe des block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
block rechts von 3 zoll breiten block	block auf der rechten seite von 3 zoll breiten block	block auf der rechten seite 3 cm breiten block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )
finde einen block links von zwei oder weniger blöcken	finden sie mich einen block, der sich links von zwei oder weniger blöcken befindet	finden sie mich ein block, der links von zwei oder weniger blöcke	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle blöcke kürzer als block 1	finden sie mich alle blöcke kürzer als block 1	mich finden alle blöcke kürzer als der block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
finde den kürzesten block	finden sie den kürzesten block	finden sie den kürzesten block	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string height ) ) ) )
finde mich alle blöcke höchstens so lang wie die breite von block 1	finden sie mich alle blöcke höchstens so lange wie die breite von block 1	mich finden alle blöcke, die höchstens so lang wie die breite der block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
gibt es einen block auf der rechten seite von block 1?	gibt es einen block auf der rechten seite von block 1	gibt es einen block auf der rechten seite von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )
finde blöcke mit der länge von block 1	finden sie blöcke mit der länge des blocks 1	finden sie in blöcke mit der länge von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string length ) ) ) )
3 zoll hohen block rechts von block 1	3 zoll hoher block rechts von block 1	3 zoll groß block rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
2 blöcke unter block 1	2 blöcke unter block 1	2 blocks unterhalb von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )
welcher stein hat eine länge von weniger als 3 zoll	welcher ziegel hat eine länge kürzer als 3 zoll	die backsteinhat eine länge, die kürzer als 3 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
finden sie den speziellen block, der 3 zoll ist	finden sie den speziellen block, der 3 zoll ist	die besonderen block, 3 zoll	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string is_special ) ) )
wähle den 3 zoll langen block rechts von block 1 aus	wählen sie den 3 zoll langen block rechts von block 1	wählen sie die 3zolllangen block auf der rechten seite von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string right ) ( string = ) en.block.block1 ) )
finde mich alle blöcke unten und rechts von block 1	finden sie mich alle blöcke unten und rechts von block 1	mich finden alle blöcke unterhalb und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )
wählen sie einen 3zollblock unter block 1	wählen sie einen 3zollblock unter block 1	wählen sie ein 3zollblock unter den block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
finde mir alle speziellen pyramidenblöcke	finden sie mich alle speziellen pyramidenblöcke	mich finden alle besonderheiten, die pyramide blöcke	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string shape ) ( string = ) en.shape.pyramid ) )
finde mich alle blöcke rechts und über block 1	finden sie mich alle blöcke rechts und oben block 1	mich finden alle blöcke auf der rechten seite und oben block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
wählen sie den block mit einer breite von weniger als 3 zoll	wählen sie den block mit einer breite kleiner als 3 zoll	wählen sie den block mit einer breite kleiner als 3 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
block rechts von block 1 und darüber	block rechts von block 1 und darüber	block auf der rechten seite von block 1 und darüber	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
finden sie den block, der sich links von block 1 mit einer höhe von 3 zoll befindet	finden sie mich den block, der auf der linken seite von block 1 mit einer höhe von 3 zoll ist	mich finden sie den block, der sich links von block 1 mit einer höhe von 3 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
welcher ziegel nicht unter ziegel 1 liegt	welcher ziegel nicht unter ziegel 1 ist	die ziegel nicht unter ziegel 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string ! = ) en.block.block1 ) )
holen sie sich die blöcke unter block 1	erhalten sie die blöcke unter block 1	holen sie sich die blöcke unterhalb von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
finde mich alle blöcke über 3 zoll langen blöcken	finden sie mich alle blöcke über 3 zoll langen blöcken	mich finden alle blöcke, die über 3zolllange blöcke	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
block unter einem pyramidenförmigen block	block unter einem pyramidenförmigen block	block unter einem pyramidenförmigen block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
finden sie den block rechts neben dem block, über dem sich block 1 befindet	finden sie mich den block, der sich rechts neben dem block befindet, der block 1 oben ist	finden sie mir den block, der rechts neben dem block, der block 1 ist oben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )
block unten	block auf der unterseite	block auf der unterseite	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle 3 zoll breiten pyramidenblöcke	finden sie mich alle 3 zoll breiten pyramidenblöcke	mich finden alle 3 zoll breiten pyramide blöcke	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string shape ) ( string = ) en.shape.pyramid ) )
block unten und links von block 1	block unten und links von block 1	block links unterhalb von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
block rechts von mehr als zwei blöcken	blockrecht von mehr als zwei blöcken	block rechts von mehr als zwei blöcke	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
ein ziegel zwischen 3 und 6 zoll	ein ziegel zwischen 3 und 6 zoll	ein backstein zwischen 3 und 6 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
block, der rechts von block ist, der rechts von block 1 ist	block, der das recht des blocks ist, das recht auf block 1 ist	block, dass ist richtig, der block, der rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )
3 zoll langer block, der block 1 auf der linken seite hat	3 zoll langer block, der block 1 links hat	3 cm langen block, die den block 1 auf der linken seite	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
finde mich alle speziellen 3 zoll langen blöcke	finden sie mich alle speziellen 3 zoll langen blöcke	mich finden alle speziellen 3zolllange blöcke	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
der block unter dem block, der weniger als zwei ist	der block unter dem block, der kleiner als zwei	der block unter dem block, die weniger als zwei	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block oben und rechts von block 1	block oben und rechts von block 1	block oberhalb und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )
wählen sie einen speziellen pyramidenblock	wählen sie einen speziellen pyramidenblock	wählen sie eine spezielle pyramide block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string is_special ) ) )
wählen sie den block aus, der sich links von block 1 befindet und eine höhe von 3 zoll hat	wählen sie den block aus, von dem sich block 1 links befindet und der eine höhe von 3 zoll hat	wählen sie den block, der block 1 ist auf der linken seite und hat eine höhe von 3 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
wählen sie alle blöcke mit einer länge von mehr als 3 aus	wählen sie alle blöcke mit einer länge größer als 3	wählen sie alle blöcke mit einer länge von mehr als 3	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
finden sie die blöcke, die über und links von block 1 sind	finden sie die blöcke, die sich oben und links zum block 1 befinden	finden sie die blöcke, die oben und links auf den block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )
finde mich alle blöcke 2 über block 1	finden sie mich alle blöcke 2 über block 1	mich finden alle blöcke oben 2 block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
finden sie den block, dessen höhe 3 zoll ist	finden sie den block, dessen höhe 3 zoll beträgt	finden sie den block, dessen höhe 3 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
block links von 3zollblock	block links von 3zollblock	block links vom 3zollblock	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )
finde mich alle blöcke über und rechts von block 1	finden sie mich alle blöcke über und rechts von block 1	mich finden alle blöcke über und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )
finde mich alle blöcke links von 3 zoll breiten blöcken	finden sie mich alle blöcke links von 3 zoll breiten blöcken	mich finden alle blöcke links von 3 cm breite blöcke	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )
wählen sie den block 1	wählen sie den block 1	wählen sie den block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string is_special ) ) )
blockieren, dass die größte anzahl von blöcken darunter liegt	blockieren, dass die meisten blocks unter	block, dass die anzahl der block ist unten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string below ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block, dessen höhe größer als 3 zoll ist	block, dessen höhe größer als 3 zoll ist	block, dessen höhe größer ist als 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
welcher block sich über dem block befindet, der sich links von block 1 befindet	welcher block sich über dem block befindet, der sich links von block 1 befindet	was block über dem block, links block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )
finde mich alle 3 zoll hohen blöcke, von denen block 1 rechts ist	finden sie mich alle 3 zoll hohen blöcke, die block 1 ist rechts von	mich finden alle 3 zoll groß die blöcke, block 1 ist richtig, der	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
welcher stein über dem pyramidenförmigen block liegt	welcher ziegel über dem pyramidenförmigen block ist	die ziegel oberhalb der pyramidenförmigen block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
welcher stein befindet sich unterhalb des ziegels in form einer pyramide?	welcher ziegel unter dem ziegel ist, der wie eine pyramide geformt ist	die ziegel unter die ziegel geformt wie eine pyramide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
welcher block ist unter dem speziellen block	welcher block sich unterhalb des sonderblocks befindet	was block ist unter dem speziellen block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
finde einen block, der 6 zoll oder weniger lang ist	finden sie einen block 6 zoll oder weniger lang	finden einen block von 6 zoll oder weniger lange	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
pyramidenblock unter block 1	pyramidenblock unter block 1	pyramideblock unten block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
finde mich alle blöcke nicht größer als 3 zoll	finden sie mich alle blöcke nicht größer als 3 zoll	mich finden alle blöcke, die nicht größer als 3 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
welcher block ist über block 1	welcher block über block 1 ist	was block oben block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
finde alle blöcke, die höchstens 2 blöcke rechts davon haben	finden sie mich alle blöcke, die höchstens 2 blöcke auf der rechten seite davon hat	mich finden alle bausteine, die hat höchstens 2 blöcke auf der rechten seite	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
was ist die anzahl der blöcke	wie viele blöcke ist	was ist die anzahl der blöcke	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wählen sie den block mit einer breite von 3 zoll aus, der sich unter block 1 befindet	wählen sie den block mit einer breite von 3 zoll und unterhalb von block 1	wählen sie den block, hat eine breite von 3 zoll und ist unter block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
suchen sie einen block unter und rechts von block 1	finden sie einen block unter und rechts von block 1	finden sie einen block unter und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
welcher ziegel nicht höher ist als ziegel 1, ist breit	welcher ziegel nicht höher als ziegel 1 ist breit	die backstein ist nicht höher als ziegel 1 ist breit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
wähle einen 3 zoll hohen ziegelstein	wählen sie einen 3 zoll hohen ziegel	wählen sie ein 3zollziegel hoch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
block rechts von 3 zoll breiten block	block rechts von 3 zoll breiten block	block rechts von 3 zoll breiten block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )
wählen sie einen speziellen block, der unter block 1 liegt	wählen sie einen speziellen block, der sich unter block 1 befindet	wählen sie einen speziellen block, der unter block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string below ) ( string = ) en.block.block1 ) )
finde mich alle blöcke die übrig sind und über block 1 liegen	finden sie mich alle blöcke, die links und über block 1 ist	mich finden alle blöcke, die links und oben block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )
welcher block sich unter dem block befindet, der sich rechts von block 1 befindet	welcher block befindet sich unterhalb des blocks, der sich rechts von block 1 befindet	welcher block unten block, der rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )
gibt es einen block, dessen durchmesser und länge in beiden richtungen 3 zoll beträgt?	gibt es einen block, dessen durchmesser und länge ist gleich 3 zoll in beiden richtungen	gibt es einen block, dessen durchmesser und länge gleich 3 cm in beide richtungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
wählen sie einen block mit weniger als zwei farben	wählen sie einen block mit weniger als zwei farben	wählen sie einen block, der weniger als zwei farben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string < ) ( number 2 ) ) )
welcher block ist am weitesten links	welcher block am weitesten links ist	welcher block ist am weitesten links	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string right ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finden sie einen block mit einem 3 zoll langen block darunter	finden sie einen block mit einem 3 zoll langen block darunter	finden sie einen block mit einem 3zolllangen block unter ihm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
finde mir die blöcke, die mehr als zwei formen haben	finden sie mich die blöcke, die mehr als zwei formen sind	suche mir die blöcke, die mehr als zwei formen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string > ) ( number 2 ) ) )
wählen sie den pyramidenförmigen block rechts neben block 1 aus	wählen sie den block in form einer pyramide und rechts von block 1	wählen sie den block, der in der form einer pyramide und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string right ) ( string = ) en.block.block1 ) )
wähle alle steine mit einer länge von 1 aus	wählen sie alle steine mit einer länge von 1	wählen sie alle steine mit einer länge von 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.getProperty en.block.block1 ( string length ) ) ) )
welcher block ist der block rechts und unter block 1?	welcher block ist der block rechts und unten block 1	was block ist der block auf der rechten seite und unten, block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )
finde alle blöcke, unter denen block 1 übrig ist	finden sie mich alle blöcke, die block 1 links und unter	mich finden alle blöcke, block 1 ist links und unter	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
welcher ziegelstein ist links vom 3zollziegelstein	welcher ziegel links vom 3zollstein ist	die ziegel auf der linken seite der 3zollbackstein	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
befindet sich rechts von block 1 und links von block 1 ein block?	befindet sich ein block rechts von block 1 und links von block 1	gibt es einen block auf der rechten seite von block 1 und links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )
gibt es einen block, der sich links von block 1 befindet und ebenfalls 3 zoll lang ist?	gibt es einen block, der sich links von block 1 befindet, der ebenfalls 3 zoll lang ist	ist es ein block, der links von block 1, die ist auch 3 cm in der länge	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string left ) ( string = ) en.block.block1 ) )
welche blöcke sind sowohl über als auch unter block 1	welche blöcke sich sowohl oberhalb als auch unterhalb von block 1 befinden	was blöcke sind sowohl oben und unten, block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )
suchen sie den block unter block 1, der 5 cm lang ist	finden sie den block unter block 1, der 3 zoll lang ist	finden sie den block unter den block 1, der ist 3 cm lang	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string below ) ( string = ) en.block.block1 ) )
block mit der gleichen farbe wie block 1	block mit der gleichen farbe wie block 1	block mit der gleichen farbe wie der block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string = ) ( call SW.getProperty en.block.block1 ( string color ) ) ) )
finde den pyramidenförmigen block unter block 1	finden sie den pyramidenförmigen block unter block 1	finden sie die pyramidenförmigen block unten block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
finde mich alle steine unter block 1 oder 2	finden sie mich alle steine unter block 1 oder 2	mich finden alle steine unterhalb von block 1 oder 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
holen sie sich einen block links von block 1 oder block 2	einen block links von block 1 oder block 2	holen sie sich einen block links von block 1 oder block 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
mehrfarbenblock	mehrfarbiger block	multicolorblock	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string > ) ( number 2 ) ) )
wählen sie den 3 zoll hohen block rechts von block 1 aus	wählen sie den block 3 hoch rechts von block 1	wählen sie den block 3 hoch kroch nach rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
welche blöcke befinden sich unter block 1?	welche blöcke befinden sich unter block 1	was blöcke sind unterhalb von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )
wählen sie einen block, der sich unter den am dichtesten besiedelten steinen befindet	wählen sie einen block, der sich unterhalb der am stärksten besiedelten steine befindet	wählen sie einen block, der unten am dichtesten besiedelten steine	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string below ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher block ist rechts von block 1 und hat die form einer pyramide	welcher block rechts von block 1 ist und in form einer pyramide ist	was block ist auf der rechten seite von block 1 und ist in der form einer pyramide	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
finde alle blöcke, die so lang oder länger als block 1 sind	finden sie alle blöcke, die so lang oder länger als block 1 sind	finden sie alle blöcke, die sind so lang oder länger als der block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
welcher block ist am nächsten am boden	welcher block am nächsten an der unterseite ist	welcher block ist am nächsten an der unterseite	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string above ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
zweifarbiger block	doppelfarbiger block	dualfarbigen block	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string > ) ( number 2 ) ) )
finde alle blöcke, die rechts von block 1 sind	finden sie mich alle blöcke, die recht von block 1 ist	mich finden alle blöcke, dass ist richtig, der block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )
welcher block ist nur eine einzige farbe	welcher block nur eine einzige farbe ist	der block ist nur eine einzige farbe	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string < ) ( number 2 ) ) )
finden sie den block mit 3 zoll höhe	finden sie den block mit 3 zoll höhe	finden sie den block mit 3 cm höhe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
welcher stein ist unter einem stein, der 3 cm breit ist	welcher ziegel ist unter einem ziegel, der 3 zoll breit ist	die ziegel unter ziegel, der ist 3 cm breit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )
holen sie sich einen 3 zoll langen block unter block 1	erhalten sie einen 3 zoll langen block unter block 1	holen sie sich ein 3 zoll langer block unten block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
finde mir alle blöcke, die keine pyramide sind	finden sie mich alle blöcke, die keine pyramide ist	mich finden alle bausteine, die nicht eine pyramide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string ! = ) en.shape.pyramid ) )
welcher block ist rechts von block 1 und hat eine breite von 3 zoll	welcher block rechts von block 1 ist und hat eine breite von 3 zoll	was block ist auf der rechten seite von block 1 und hat eine breite von 3 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
finden sie den block, der mindestens 3 cm lang ist	finden sie den block, der mindestens 3 zoll lang ist	finden sie den block, der mindestens 3 cm lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
der block unter block eins und rechts von block 1	der block unten block eins und rechts von block 1	der block unten block eins und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )
wähle links von block 1 aus	wählen sie die linke seite von block 1	wählen sie den linken block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
wählen sie einen block rechts von block 2 aus	wählen sie einen block, der das recht von block 2 ist	wählen sie einen block, der rechts von block 2	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher stein ist höher als 3 zoll	welcher ziegel höher als 3 zoll ist	die backstein ist höher als 3 zentimeter	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
welcher block ist so lange wie block 1 breit ist	welcher block ist so lang wie block 1 breit ist	was blockiert ist, solange block 1 ist breit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )
finde mich alle blöcke höchstens so hoch wie block 1	finden sie mich alle blöcke höchstens so hoch wie block 1	mich finden alle blöcke, die höchstens so groß wie block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
wähle den 3 zoll breiten block links von block 1 aus	wählen sie den 3 zoll breiten block links von block 1	wählen sie die 3zollwideblock links block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string left ) ( string = ) en.block.block1 ) )
wählen sie den block, der von einem block, der 3 zoll ist, links ist	wählen sie den block aus, der sich von einem block links befindet, der 3 zoll groß ist	wählen sie den block, der links ein block, 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
wähle den buntesten block	wählen sie den buntesten block	wählen sie die bunten block	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string color ) ) )
block, dessen länge nicht 3 zoll ist	block, dessen länge nicht 3 zoll beträgt	block, dessen länge nicht 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string ! = ) ( number 3 en.inch ) ) )
finde mich alle blöcke mit mindestens 2 farben	finden sie mich alle blöcke mit mindestens 2 farben	mich finden alle blöcke mit mindestens 2 farben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string >= ) ( number 2 ) ) )
finde einen block der gleichen farbe wie block 1	suchen eines blocks in der gleichen farbe wie block 1	finden sie einen block der gleichen farbe wie block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string = ) ( call SW.getProperty en.block.block1 ( string color ) ) ) )
welcher block ist links von mehr als zwei blöcken	welcher block von mehr als zwei blöcken links ist	was block ist auf der linken mehr als zwei blöcke	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wählen sie einen block, der nicht mehr als 2 formen enthält	wählen sie einen block, der nicht mehr als 2 shapes ist	wählen sie einen block, der nicht mehr als 2 formen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string <= ) ( number 2 ) ) )
welcher ziegel über dem ziegel rechts von ziegel 1 liegt	welcher ziegel über dem ziegel auf der rechten seite des ziegels 1 ist	die brick über den brick rechts von ziegel 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )
block, der unter block ist, dessen länge 3 zoll ist	block, der unter block ist, dessen länge 3 zoll beträgt	block unten block, dessen länge 3 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
finde mich alle 3 zoll hohen blöcke, die block 1 oben ist	finden sie mich alle 3 zoll hohen blöcke, die block 1 ist oben	mich finden alle 3 zoll groß die blöcke, block 1 ist oben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
wählen sie einen block mit einer länge von mehr als 3 zoll	wählen sie einen block mit einer länge von mehr als 3 zoll	wählen sie einen block, der eine länge von mehr als 3 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
suchen sie den 3 zoll hohen block auf der rechten seite von block 1	finden sie den block, der 3 zoll hoch ist und sich auf der rechten seite von block 1 befindet	finden sie den block, der 3 zoll in der höhe und ist auf der rechten seite von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string right ) ( string = ) en.block.block1 ) )
finde den block links und unter block 1	finden sie mich den block, der sich links und unten block 1 befindet	finden sie mir den block nach links und unten, block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
finde mich alle 3 zoll langen blöcke, von denen block 1 rechts ist	finden sie mich alle 3 zoll langen blöcke, die block 1 ist recht von	mich finden alle 3zolllange blöcke, block 1 ist richtig, der	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
block mit zwei farben	block mit zwei farben	block mit zwei farben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string = ) ( number 2 ) ) )
wählen sie die blöcke links von und über block 1 aus	wählen sie die blöcke links von und über block 1	wählen sie die blöcke auf der linken seite und oben block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )
block 3 zoll lang und unter block eins	block 3 zoll lang und darunter block eins	block 3 cm lang und unten sperren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
suchen sie den block unter block 1, der 3 zoll hoch ist	finden sie den block unter block 1, der 3 zoll hoch ist	finden sie den block unten block 1, ist 3 cm hoch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
welcher block ist etwas besonderes und hat block 1 auf der rechten seite	welcher block ist speziell und hat block 1 auf der rechten seite	was block ist etwas besonderes und hat den block 1 auf der rechten seite	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
finden sie den block links von zwei blöcken oder einen, aber nicht mehr	finden sie den block auf der linken seite von zwei blöcken oder einem, aber nicht mehr	finden sie den block auf der linken von zwei blöcken oder in einem, aber nicht mehr	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welche blöcke befinden sich oberhalb des blocks rechts von block 1?	welche blöcke sich über dem block befinden, der sich rechts von block 1 befindet	was blöcke sind über den block, der rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )
wählen sie alle 3 zoll langen blöcke aus	wählen sie alle blöcke aus, die 3 zoll lang sind	wählen sie alle blöcke, die sind 3 cm lang	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
wählen sie rechts neben block den block 1 aus	wählen sie block rechts von block über block 1	wählen sie block rechts von block über block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
wähle blöcke aus, die zwei farben haben	auswählen von blöcken, die aus zwei farben bestehen	wählen sie blöcke, zwei farben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string = ) ( number 2 ) ) )
block links von 2 blöcken	block links von 2 blöcken	block links, 2 blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block links von den blöcken 1 und 2	block links von den blöcken 1 und 2	block links von den blöcken 1 und 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
finde mich alle 3 zoll hohen blöcke rechts von block 1	finden sie mich alle 3 zoll hohen blöcke rechts von block 1	mich finden alle 3 zoll groß die blöcke rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
welcher block ist über dem 3 zoll hohen block	welcher block über dem 3 zoll hohen block ist	was block ist über das 3zollhighblock	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
wähle den block links aus	wählen sie den block auf der linken seite	wählen sie den block auf der linken seite	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )
welcher block ist der kürzeste?	welcher block der kürzeste ist	welcher block ist der kürzeste	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string height ) ) ) )
block unterhalb und rechts von block 1	block unten und rechts von block 1	block unterhalb und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )
suchen sie den block auf der rechten seite eines 3 zoll breiten blocks	lokalisieren sie den block auf der rechten seite eines blocks mit einer breite von 3 zoll	suchen sie den block auf der rechten seite von einem block von 3 zoll in der breite	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )
finde mich alle blöcke über einem pyramidenblock	finden sie mich alle blöcke über einem pyramidenblock	mich finden alle blöcke oberhalb einer pyramide block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
wählen sie einen baustein, dessen länge mindestens der breite von block 1 entspricht	wählen sie einen ziegel, dessen länge mindestens die breite des blocks 1 beträgt	wählen sie einen ziegel, dessen länge mindestens der breite des block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
finde mich alle blöcke mit höchstens zwei blöcken davon übrig	finden sie mich alle blöcke mit höchstens zwei blöcken links davon	mich finden alle blöcke mit höchstens zwei blöcke links von ihm	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finden sie den speziellen block mit block 1 darunter	finden sie den speziellen block mit block 1 darunter	finden sie die speziellen block mit block 1 unten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string is_special ) ) )
welcher block ist mindestens 3 oder 6 zoll lang	welcher block mindestens 3 oder 6 zoll lang ist	welcher block ist mindestens 3 oder 6 cm lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
wählen sie jeden 3 oder 6 zoll großen block	wählen sie jeden block mit einer größe von 3 oder 6 zoll	wählen sie jeden block von 3 oder 6 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )
ein 3zollblock hat einen block darüber und findet diesen block	ein 3zollblock hat einen block oben auf ihm finden, dass block	ein 3zollblock hat, einen block auf, finden sie, dass block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )
wählen sie die blöcke aus, die über und unter block 1 liegen	wählen sie die blöcke aus, die sich über und unter block 1 befinden	wählen sie die blöcke, die oberhalb und unterhalb von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )
finde mich alle blöcke unter zwei block	finden sie mich alle blöcke unter zwei block	mich finden alle blöcke unter zwei block	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mir den block mit den wenigsten farben	finden sie mir den block mit den wenigsten farben	finden sie mir den block mit den wenigsten farben	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string color ) ) )
wählen sie den block links von block 1 mit einer gesamthöhe von 3 zoll aus	wählen sie den block, der sich links von block 1 befindet und eine gesamthöhe von 3 zoll hat	wählen sie den block, der sich links von block 1 und hat eine höhe von 3 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
wie lang ist der block?	wie lange ist der block	wie lange ist der block	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ) ) )
welcher ziegel hat die meisten formen?	welcher ziegel die meisten formen hat	die backsteinhat die meisten formen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string shape ) ) )
3 zoll hoher block über block 1	3 zoll hoher block über block 1	3 zoll hohen block oben block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string above ) ( string = ) en.block.block1 ) )
finden sie den block, der sich unter dem block befindet, der sich unter block 1 befindet	finden sie mich den block, der sich unter dem block befindet, der sich unter block 1 befindet	finden sie mir den block unter den block, der unter block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )
wählen sie den block links von block 1 aus	wählen sie den block links von block 1	wählen sie den block links block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
unten und rechts ab block 1	unten und rechts von block 1	unterhalb und rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )
block unter block 1, der 3 zoll lang ist	block unter block 1, der 3 zoll lang ist	block unten block 1 ist 3 cm lang	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
block, dessen höhe höchstens 3 zoll oder 6 zoll beträgt	block, dessen höhe höchstens 3 zoll oder 6 zoll beträgt	block, dessen höhe höchstens 3 cm oder 6 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
such mir den speziellen block, der sich links von block 1 befindet	finden sie mir den speziellen block, der sich links von block 1 befindet	mich finden die speziellen block, der sich links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string left ) ( string = ) en.block.block1 ) )
such mir einen speziellen block links von block 1	finden sie mir einen speziellen block auf der linken seite von block 1	finden sie mir einen speziellen block links block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string left ) ( string = ) en.block.block1 ) )
gibt es einen block mit einer breite, die 3 oder 6 zoll maximal entspricht	gibt es einen block mit einer breite, die maximal 3 oder 6 zoll entspricht	ist es ein block mit einer breite, die gleich 3 oder 6 zoll maximale	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
finde mich alle blöcke unter block 1	finden sie mich alle blöcke unter block 1	mich finden alle blöcke unterhalb von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )
block, der die meisten formen hat	block mit der meisten form	block, dass die anzahl der form	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string shape ) ) )
welcher block mindestens so hoch ist wie block 1, ist breit	welcher block mindestens so hoch ist wie block 1 breit	was block ist mindestens so groß, wie der block 1 ist breit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
finde einen block, der 6 zoll lang oder weniger ist	finden sie einen block 6 zoll lang oder weniger	finden einen block von 6 zoll lang oder weniger	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
block über block, der unter block 1 liegt	block über block, der sich unter block 1 befindet	block oben block unten block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )
block links vom pyramidenblock	block links vom pyramidenblock	block auf der linken seite der pyramide block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
wählen sie alle sonderblöcke über block 1 aus	wählen sie alle spezialblöcke über block 1	wählen sie alle speziellen blöcken, die oben block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string is_special ) ) )
wählen sie einen block über den am dünnsten besiedelten steinen	wählen sie einen block über den am wenigsten bevölkerten ziegeln	wählen sie einen block über die am wenigsten besiedelte steine	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string above ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde den block mit dem pyramidenförmigen block darüber	finden sie den block mit dem pyramidenförmigen block darüber	finden sie den block mit den pyramidenförmigen block oben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
welche blockhöhe ist nicht 3 zoll	was blockiert höhe ist nicht 3 zoll	was blockiert die höhe ist nicht 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string ! = ) ( number 3 en.inch ) ) )
finde mich alle blöcke länger als block 1	finden sie mich alle blöcke länger als block 1	mich finden alle blöcke, die länger als der block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
sammeln sie alle blöcke, die 3 zoll oder mehr sind	sammeln sie alle blöcke, die 3 zoll oder mehr sind	sammeln sie alle die blöcke, die 3 zoll oder mehr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
rechts von block 1	recht auf block 1	rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
finde mich alle pyramidenblöcke rechts von block 1	finden sie mich alle pyramidenblöcke rechts von block 1	finden mich die ganze pyramide blöcke rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
welcher block sich links vom block befindet, befindet sich rechts von block 1	welcher block links vom block ist, der sich rechts von block 1 befindet?	was block links von dem block, der rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )
block über 1 block und links von 1 block	block über 1 block und links von 1 block	block oben 1 block und links 1 block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
welcher stein hat mindestens zwei steine auf der linken seite	welcher ziegel mindestens zwei steine links hat	was brick hat mindestens zwei steine auf der linken seite	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
rechts von block 1 und block 2	rechts von block 1 und block 2	rechts von block 1 und block 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
3 zoll block über block 1	3zollblock über block 1	3zollblock oben block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string above ) ( string = ) en.block.block1 ) )
welcher stein ist 3 oder 6 cm lang	welcher ziegel 3 oder 6 zoll lang ist	die backstein ist 3 oder 6 cm lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )
wählen sie den block, dessen breite 3 zoll beträgt	wählen sie den block mit einer breite von 3 zoll aus	wählen sie den block aus, dessen breite ist 3 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )
rechts vom sonderblock	recht auf sonderblock	rechts von speziellen block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
finde mich alle pyramidenförmigen blöcke	finden sie mich alle pyramidenförmigen blöcke	mich finden alle pyramidenförmigen blöcke	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string shape ) ( string = ) en.shape.pyramid ) )
wählen sie einen block, der weniger dick ist als block 1	wählen sie einen block, der weniger dick ist als block 1	wählen sie einen block, ist weniger dick als der block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
finde mich alle blöcke unter den blöcken 1 oder 2	finden sie mich alle blöcke unter den blöcken 1 oder 2	mich finden alle blöcke unter blöcken 1 oder 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
welcher pyramidenförmige block 3 zoll breit ist	welcher pyramidenförmige block 3 zoll breit ist	die pyramidenförmigen block ist 3 cm breit	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string shape ) ( string = ) en.shape.pyramid ) )
gesamtlänge des blocks	gesamtlänge des blocks	gesamtlänge des blocks	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ) ) )
block über der pyramide	block über pyramide	block oberhalb pyramide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
nimm den spezialblock von rechts von block 1	erhalten sie den sonderblock von rechts von block 1	holen sie sich die speziellenblock vom rechten block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string is_special ) ) )
finde mich alle blöcke links von block 1 ist unten	finden sie mich alle blöcke links von diesem block 1 ist unten	mich finden alle blöcke links des blocks 1 ist unten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )
wählen sie einen block, der kürzer als block 1 ist	wählen sie einen block, der kürzer als block 1 ist	wählen sie einen block, der kleiner ist als der block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
finde alle blöcke, von denen block 1 rechts und von denen block 1 links ist	finden sie mich alle blöcke, die block 1 rechts von ist und die links von block 1 ist	mich finden alle blöcke, block 1 ist rechts und links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )
suchen sie einen block mit der gleichen form wie block 1	suchen eines blocks in der gleichen form wie block 1	finden sie einen block, der die gleiche form wie block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) ( call SW.getProperty en.block.block1 ( string shape ) ) ) )
finde mich alle blöcke über und links von block 1	finden sie mich alle blöcke oben und links von block 1	mich finden alle blöcke oberhalb und links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
finde den block über zwei blöcken	finden sie den block über zwei blöcken	finden sie den block über zwei blöcke	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle 3 zoll breiten blöcke rechts von block 1	finden sie mich alle 3 zoll breiten blöcke rechts von block 1	mich finden alle 3 cm breite blöcke rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string right ) ( string = ) en.block.block1 ) )
finden sie einen block, der eine länge von weniger als 3 zoll hat	finden sie einen block mit einer länge von weniger als 3 zoll	finden sie einen block, der eine länge von weniger als 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
finde einen block zwischen block 1 und einem block über block 1	finden sie einen block zwischen block 1 und einem block über block 1	finden sie einen block, zwischen block 1 und block oben block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
welcher block ist unter block 1 und hat eine höhe von 3 zoll	welcher block ist unter block 1 und hat eine höhe von 3 zoll	was block unten block 1 und hat eine höhe von 3 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
welcher block ist von block 1 und 3 zoll in der länge übrig	welcher block von block 1 und 3 zoll in der länge links ist	was block links block 1 und 3 cm in der länge	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
block, dessen länge größer als 3 zoll oder 6 zoll ist	block, dessen länge größer als 3 zoll oder 6 zoll ist	block, dessen länge größer ist als 3 zoll oder 6 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
dritter block links	dritter block nach links	der dritte block auf der linken seite	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
gibt es einen block über dem pyramidenförmigen block?	gibt es einen block auf der spitze der pyramide geformten block	gibt es einen block auf der spitze der pyramide geformt block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
suchen sie den block mit einer länge, die die breite von block 1 überschreitet	suchen sie den block mit einer länge, die die breite von block 1 überschreitet	suchen sie den block mit einer länge, größer als die breite des blocks 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
block, der sich rechts von der meisten anzahl von blöcken befindet	block, der sich rechts von den meisten blöcken befindet	block, der an das recht der meisten anzahl der blöcke	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string right ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
suchen sie einen block mit block 1 rechts	finden sie einen block, der block 1 auf der rechten seite hat	finden sie einen block, dass block 1, rechts	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) )
block, von dem mehr als zwei blöcke übrig sind	block, dass mehr als zwei block von	block, der mehr als zwei block ist links	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wählen sie einen block mit einer breite und höhe von 3 zoll	wählen sie einen block mit einer breite und höhe von je 3 zoll	wählen sie einen block, dass breite und höhe von 3 cm jeweils	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
such mir einen block, der keine pyramide ist	finden sie mich einen block, der keine pyramide ist	finden sie mich ein block, der nicht eine pyramide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string ! = ) en.shape.pyramid ) )
wählen sie die blöcke rechts von mehr als zwei blöcken aus	wählen sie die blöcke rechts von größer, dass zwei blöcke	wählen sie die blöcke, um das recht des größeren, dass zwei blöcke	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wählen sie den 3 zoll hohen block über block 1	wählen sie den 3 zoll hohen block über block 1	wählen sie die 3zollhighblock oben block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
wie lautet die nummer des blocks?	was ist die nummer des blocks	was ist die nummer des blocks	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block mit maximal zwei farben	block mit maximal zwei farben	block mit maximal zwei farben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string <= ) ( number 2 ) ) )
welcher block ist unter zwei blöcken	welcher block befindet sich unter zwei blöcken	was block ist unten zwei blöcke	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block, der sich rechts von der meisten anzahl von blöcken befindet	block, der sich rechts von den meisten blöcken befindet	block, der an das recht der meisten anzahl der blöcke	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string right ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher block ist auf der linken seite des 3zollhochblocks	welcher block sich links vom 3 zoll hohen block befindet	der block ist auf der linken seite der 3 zoll highblock	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
3 zoll block über block 1	3zollblock über block 1	3zollblock oben block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
welche pyramidenblöcke befinden sich rechts von block 1?	welche pyramidenblöcke rechts von block 1	die pyramide blöcke sind rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
block zwei rechts von block 1	block zwei rechts aus block 1	block zwei rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )
finde mich alle blöcke über 3 zoll breiten blöcken	finden sie mich alle blöcke über 3 zoll breiten blöcken	mich finden alle blöcke, die über 3 zoll breite blöcke	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )
welcher block hat weniger als zwei blöcke links davon	welcher block weniger als zwei blöcke links davon hat	was block ist weniger als zwei blocks auf der linken seite ist es	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finden sie den block von 3 cm höhe und links platziert	finden sie den block von 3 zoll höhe und platziert in links	finden sie den block von 3 zoll höhe und platziert in die linke	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
welcher block hat block 1 oben und links	welcher block block 1 oben und links hat	was block block 1 oben und links	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )
welcher block hat eine breite, die kleiner oder gleich der länge von block 1 ist	welcher block eine breite hat, die kleiner oder gleich der blocklänge 1s ist	was block hat eine breite von weniger als oder gleich zu sperren 1s länge	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
block über und links von block 1	block oben und links von block 1	block oben und links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
finde alle blöcke, unter denen block 1 rechts ist	finden sie mich alle blöcke unter, unter denen block 1 ist recht auf	mich finden alle blöcke unter dem block 1 ist richtig, der	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
finden sie den block mit einer höhe von weniger als 3 zoll	finden sie den block mit einer höhe von weniger als 3 zoll	finden sie den block mit einer höhe von weniger als 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
wählen sie den 3zollblock unter block 1 aus	wählen sie den 3zollblock unter block 1	wählen sie die 3zollblock unten block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string below ) ( string = ) en.block.block1 ) )
block, dessen länge 3 zoll und dessen länge 3 zoll ist	block, dessen länge 3 zoll und deren länge ist 3 zoll	block, dessen länge 3 cm und dessen länge ist 3 zoll	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
welcher block ist block 1 rechts von	welcher block block 1 rechts von	block ist block 1 rechts	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
welcher block ist zwei blöcke rechts von block 1	welcher block ist zwei blöcke rechts von block 1	was block ist zwei blocks nach rechts block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )
wählen sie einen block, der von block 1 übrig bleibt	wählen sie einen block, der von block 1 übrig bleibt	wählen sie einen block, links block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) )
ein spezieller block, dessen form pyramide ist	ein spezieller block, dessen form pyramide ist	einen speziellen block, dessen form pyramide	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string shape ) ( string = ) en.shape.pyramid ) )
welcher block befindet sich links von block 1 oder block 2?	welcher block links von block 1 oder block 2 ist	was block ist auf der linken von entweder block 1 oder block 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
suchen sie den block unter block 1	finden sie den block, der sich unter block 1 befindet	finden sie den block, der unter block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )
block, dessen höhe nicht 3 zoll ist	block, dessen höhe nicht 3 zoll beträgt	block, dessen höhe nicht 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string ! = ) ( number 3 en.inch ) ) )
finde mich alle blöcke größer als 3 zoll	finden sie mich alle blöcke größer als 3 zoll	mich finden alle blöcke größer als 3 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
was ist die höhe des blocks	was ist die höhe des blocks	was ist die höhe des blocks	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ) ) )
welcher ziegelstein nicht breiter als ziegelstein 1 ist	welcher ziegel nicht breiter als ziegel 1 ist	die backstein ist nicht breiter als ziegel 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
welcher stein ist 3 oder 6 cm hoch	welcher ziegel 3 oder 6 zoll hoch ist	die backstein ist 3 oder 6 cm hoch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )
wähle den am wenigsten bunten stein aus	wählen sie den am wenigsten bunten ziegel	wählen sie die am wenigsten bunte ziegel	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string color ) ) )
such mir einen pyramiden oder würfelförmigen block	finden sie mir eine pyramide oder würfelförmigen block	suche mir eine pyramide oder einen würfelförmigen block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) ( call SW.concat en.shape.pyramid en.shape.cube ) ) )
welcher block hat block 1 auf der rechten seite	welcher block block 1 auf der rechten seite hat	was block block 1 auf der rechten seite	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )
block, der über mehr als zwei blöcken liegt	block, der sich über mehr als zwei blöcken befindet	block, der über mehr als zwei blöcke	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finden sie den block, der sich unter dem block befindet, und den block, über dem sich block 1 befindet	finden sie mich den block, der unter dem block ist, der block 1 oben ist	finden sie mir den block unter den block mit der block 1 ist oben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )
welcher block ist über dem block von block1	welcher block über dem block von block1 ist	was block über dem block block1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )
finde mich alle blöcke über dem block 1 ist oben	finden sie mich alle blöcke über diesem block 1 ist oben	mich finden alle blöcke über, der block 1 ist oben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )
block, dessen länge größer ist als die breite von block 1	block, dessen länge größer als die breite des blocks 1 ist	block, dessen länge größer ist als die breite der block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
welcher block ist auf der linken seite des 3 zoll langen blocks	welcher block links vom 3 zoll langen block ist	was block ist auf der linken seite der 3zolllangen block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
benenne einen block mit block 1 unten und rechts	benennen sie einen block mit block 1 unten und rechts	der name eines blocks mit block 1 rechts unten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )
finde mich alle blöcke 2 blocks von rechts	finden sie mich alle blöcke 2 blöcke von rechts	mich finden alle blöcke 2 blöcke von der rechten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block links von der pyramide	block links von der pyramide	block links von der pyramide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
finde den längsten block	finden sie den längsten block	finden sie die längste block	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string length ) ) ) )
block über 3 zoll langen block	block über 3 zoll langen block	block oben 3 cm langer block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
block, dessen länge mindestens 3 zoll oder 6 zoll beträgt	block, dessen länge mindestens 3 zoll oder 6 zoll beträgt	block, dessen länge mindestens 3 cm oder 6 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
welcher block ist rechts von 3 cm langen block	welcher block ist rechts von 3 zoll langen block	was block ist auf der rechten seite 3 cm lang block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
welcher stein ist nicht links von stein 1	welcher ziegel nicht links von ziegel 1 ist	die backstein nicht auf der linken seite der ziegel 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string ! = ) en.block.block1 ) )
wählen sie den block aus, der über der kleinsten blockgruppe liegt	wählen sie den block aus, der sich über der kleinsten blockgruppe befindet	wählen sie den block, der über die kleinste gruppe von blöcken	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string below ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
suchen sie einen block links von und unter block 1	finden sie einen block links von und unter block 1	finden sie einen block nach links und unten, block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
gibt es einen block nicht breiter als 3 oder 6 zoll	gibt es einen block nicht breiter als 3 oder 6 zoll	gibt es einen block nicht breiter als 3 oder 6 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
block, dessen länge 3 zoll ist und dessen form eine pyramide ist	block, dessen länge 3 zoll beträgt und dessen form eine pyramide ist	block, dessen länge ist 3 zoll, und deren form ist eine pyramide, die	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string shape ) ( string = ) en.shape.pyramid ) )
block mit der geringsten breite	block mit niedrigster breite	block mit der geringsten breite	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string width ) ) ) )
wie lang ist block 1?	was ist die länge des blocks 1	was ist die länge von block 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string length ) ) )
welcher block hat block 1 auf der rechten seite und ist pyramidenförmig	welcher block block 1 auf der rechten seite hat und pyramidenförmig ist	was block block 1 auf der rechten und pyramidenförmigen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
wählen sie einen block, der nicht pyramidenförmig ist	wählen sie einen block, der nicht pyramidenförmig ist	wählen sie einen block, der nicht die pyramidenförmigen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string ! = ) en.shape.pyramid ) )
suchen sie den block unter dem block mit einer breite von 3 zoll	suchen sie den block unter dem block mit einer breite von 3 zoll	suchen sie den block unter den block, hat eine breite von 3 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )
block nicht links von block 1	block nicht links von block 1	block nicht nach links block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string ! = ) en.block.block1 ) )
welcher stein ist am weitesten links?	welcher ziegel am weitesten links ist	die backstein ist das am weitesten links	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string right ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle 3 zoll breiten blöcke, über denen block 1 liegt	finden sie mich alle 3 zoll breiten blöcke, die block 1 ist oben	mich finden alle 3 cm breite blöcke, block 1 ist oben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
finde einen pyramidenförmigen block	finden sie einen block in form einer pyramide	finden sie einen block geformt wie eine pyramide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) )
finde den block, der über dem block liegt, der unter block 1 liegt	finden sie mich den block, der sich über dem block befindet, der sich unter block 1 befindet	finden sie mir den block über dem block unten block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )
finde mir alle steine mit einer geringeren breite als block 1	finden sie mich alle steine mit einer kleineren breite als block 1	mich finden alle steine mit einer geringeren breite als der block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
links und über block 1	links und oben block 1	links und oben block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )
welcher block ist 3 zoll groß und pyramidenförmig	welcher block ist 3 zoll hoch und pyramidenförmig	was block ist 3 zoll groß und pyramidenförmigen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string shape ) ( string = ) en.shape.pyramid ) )
finde mich alle 3 zoll langen blöcke, die block 1 unten ist	finden sie mich alle 3 zoll langen blöcke, die block 1 ist unten	mich finden alle 3zolllange blöcke, die den block 1 ist unten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
block zwei über block 1	block zwei über block 1	block zwei oben block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
finde mich alle blöcke 2 unter block 1	finden sie mich alle blöcke 2 unter block 1	mich finden alle 2 blöcke unterhalb von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )
finde mich alle 3 zoll breiten und langen blöcke	finden sie mich alle 3 zoll breiten und langen blöcke	mich finden alle 3 zoll breit und lang blockiert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
welche blöcke 3 zoll breit überschreiten	die blöcke überschreiten 3inches breit	die blöcke überschreiten, 3cm breit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
welcher block ist unter den meisten blöcken	welcher block unter den meisten blöcken liegt	was block ist unterhalb der meisten blöcke	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string above ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
wählen sie einen block zwischen 3 und 6 zoll breit	wählen sie einen block zwischen 3 und 6 zoll breit	wählen sie einen block zwischen 3 und 6 cm breit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
finde mich alle sonderblöcke links von block 1	finden sie mich alle speziellen blöcke links von block 1	mich finden alle spezielle blöcke links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string is_special ) ) )
finden sie einen block mit einem durchmesser, der insgesamt größer als 5 cm ist	finden sie einen block mit einem durchmesser, der breiter als 3 zoll insgesamt ist	finden sie einen block mit einem durchmesser, der breiter als 3 zoll insgesamt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
finde alle blöcke, von denen block 1 noch übrig ist und darunter	finden sie mich alle blöcke, die block 1 links und unten ist	mich finden alle blöcke, block 1 ist links und unten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )
welcher block hat die höchste anzahl von blöcken darunter?	welcher block die höchste anzahl von blöcken darunter hat	der block hat die höchste anzahl von blöcken darunter	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string below ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde blöcke, die größer als block 1 sind, ist lang	finden blöcke, die größer als block 1 sind lang	finden sie blöcke, die größer sind als der block 1 ist lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
block über 3 zoll block	block über 3 zoll block	block oben 3zollblock	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
wählen sie den block unter dem rechten aus	wählen sie den block unterhalb des blocks auf der rechten seite	wählen sie den block, der unter der auf der rechten seite	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
welcher ziegel eine breite hat, die kleiner als die höhe von ziegel 1 ist	welcher ziegel hat eine breite kleiner als die höhe des ziegels 1	die backsteinhat eine breite, die kleiner als die höhe der ziegel 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
welcher block hat die wenigsten formen?	welcher block die wenigsten formen hat	was block hat die wenigsten formen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string shape ) ) )
wählen sie den block links von block 1 mit einer länge von 3 zoll aus	wählen sie den block, der sich links von block 1 befindet und eine länge von 3 zoll hat	wählen sie den block, der sich links von block 1 und hat eine länge von 3 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
wähle den block über dem linken aus	wählen sie den block über dem linken	wählen sie den block über der linken	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )
finde mich alle 3 zoll hohen blöcke	finden sie mich alle 3 zoll hohen blöcke	mich finden alle 3zollhighblöcke	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
finde mich alle blöcke unter block 1, der block 1 ist auch darunter	finden sie mich alle blöcke unter block 1, der block 1 ist auch unten	mich finden alle blöcke unterhalb von block 1 der block 1 ist auch unten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
wählen sie den block über block 1 aus	wählen sie den block über block 1	wählen sie den block oben block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
block, der über block 1 liegt	block, der sich über block 1 befindet	block oben block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) )
finde mich alle steine unten höchstens 2 blocks	finden sie mich alle steine unten höchstens 2 blöcke	mich finden alle steine unten höchstens 2 blöcke	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
finde mich alle blöcke mindestens in der gleichen höhe wie block 1	finden sie mich alle blöcke mindestens die gleiche höhe wie block 1	mich finden alle blöcke mindestens der gleichen höhe wie block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
finde mich alle blöcke höchstens 6 cm hoch	finden sie mich alle blöcke höchstens 6 zoll hoch	mich finden alle blöcke an die meisten 6 zoll hoch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
welcher pyramidenförmige ziegelstein 3 zoll hoch ist	welcher pyramidenförmige ziegel 3 zoll hoch ist	die pyramidenförmigen stein ist 3 cm hoch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
finden sie alle sonderblöcke rechts von block 1	finden sie alle spezialblöcke rechts von block 1	finden sie alle speziellen blöcken, die rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string is_special ) ) )
welcher stein befindet sich unter dem stein, der sich über dem stein 1 befindet?	welcher ziegel unter dem ziegel ist, der über ziegel 1 ist	die ziegel unterhalb der ziegel über ziegel 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
wählen sie einen block mit weniger als 2 blöcken links davon	wählen sie einen block, der weniger als 2 blöcke links hat	wählen sie einen block, der weniger als 2 blocks auf der linken seite	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
suchen sie den 3zolllangen block, der sich rechts von block 1 befindet	finden sie den 3 zoll langen block, der sich rechts von block 1 befindet	finde die 3 zoll langen block, der sich rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
wählen sie den block links neben dem block über block 1 aus	wählen sie den block links neben dem block über block 1	wählen sie den block links von dem block oben block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
finde alle pyramidenblöcke, unter denen block 1 liegt	finden sie mich alle pyramidenblöcke, die block 1 ist unten	mich finden alle pyramidenblöcke, block 1 ist unten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
block, dessen höhe 3 zoll beträgt und der unter block 1 liegt	block, dessen höhe 3 zoll beträgt und der unter block 1 liegt	block, deren höhe von 3 zoll und ist unter block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string below ) ( string = ) en.block.block1 ) )
suchen sie den block unter block 1	suchen sie den block, der sich unter block 1 befindet	finden sie den block, der unter block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )
finde mich alle speziellen blöcke, die oben sind	finden sie mich alle speziellen blöcke, die oben sind	mich finden alle speziellen blöcken, die oberhalb	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
wählen sie die blöcke links von und über block 1 aus	wählen sie die blöcke links von und über block 1	wählen sie die blöcke links und oben block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
wählen sie den block links von einem anderen block aus	wählen sie den block aus, der sich links von einem anderen block befindet	wählen sie den block, der links von einem anderen block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
finde mich alle blöcke größer als die länge von block 1	finden sie mich alle blöcke größer als die länge des blocks 1	mich finden alle blöcke größer als die länge von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
suchen sie den block, der sich auf der anderen seite eines blocks links von block 1 befindet	suchen sie den block auf der anderen seite eines blocks links von block 1	finden sie den block, der auf der anderen seite ein block, der sich links auf block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )
welcher ziegelstein ist nicht länger als ziegelstein 1?	welcher ziegel nicht länger als ziegel 1 ist	die ziegel nicht mehr als ziegel 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
finde mich alle blöcke rechts und unter block 1	finden sie mich alle blöcke rechts und unten block 1	mich finden alle blöcke rechts und untenblock 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )
wählen sie den block über block 1 und auf der linken seite	wählen sie den block über block 1 und auf der linken seite	wählen sie den block oben block 1 und auf der linken seite	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
wählen sie einen block, der so lang ist, wie block 1 breit ist	wählen sie einen block, der so lang ist, wie block 1 breit ist	wählen sie einen block, der so lange als block 1 ist breit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )
wählen sie die steine aus, die weniger als 6 zoll hoch sind, und wählen sie dann die steine aus, die weniger als 3 zoll hoch sind	wählen sie die steine, die weniger als 6 zoll hoch sind, dann wählen sie die ziegel, die weniger als 3 zoll hoch sind	wählen sie die steine, die weniger als 6 cm hoch und wählen sie dann die steine kleiner als 3 zoll groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
finde mich alle 3 zoll großen spezialblöcke	finden sie mich alle 3 zoll hohen spezialblöcke	mich finden alle 3 zoll groß spezielle blöcke	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string is_special ) ) )
suchen sie einen block, der nicht über block 1 liegt	suchen sie einen block, der sich nicht über block 1 befindet	finden sie einen block, der nicht über block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string ! = ) en.block.block1 ) )
finde alle spezialblöcke, die unten stehen	finden sie mich alle speziellen blöcke, die unten ist	mich finden alle speziellen blöcken, die unter	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
welcher sonderblock ist über block 1	welcher spezielle block über block 1 ist	welche besonderen block oben block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string above ) ( string = ) en.block.block1 ) )
block, der unter block 1 liegt und dessen breite 3 zoll beträgt	block, der unter block 1 liegt und dessen breite 3 zoll beträgt	block, unterhalb von block 1 und dessen breite 3 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
block mit block 1 oder block 2 rechts	block, der block 1 oder block 2 rechts hat	block, dass block 1 oder block 2 rechts	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
such mir einen 3 zoll großen pyramidenförmigen block	finden sie mich einen 3 zoll hohen pyramidenförmigen block	suche mir eine 3 zoll groß die pyramidenförmigen block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
wählen sie die blöcke unten und links von block 1 aus	wählen sie die blöcke unten und links von block 1	wählen sie die blöcke von unten und links von block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
suchen sie die blöcke, die sich links von block 1 befinden	finden sie die blöcke, die sich links von block 1 befinden	finden sie die blöcke, dass die links von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )
welcher ziegel größer ist als ziegel 1, ist hoch	welcher ziegel höher ist als ziegel 1 ist hoch	die ziegel ist größer als ziegel1 hoch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
welche art von block hat die meisten formen	welcher blocktyp die meisten formen hat	welche art von block hat die meisten formen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string shape ) ) )
finde mich alle 3 zoll hohen blöcke, von denen block 1 übrig ist	finden sie mich alle 3 zoll hohen blöcke, die block 1 links von	mich finden alle 3 zoll groß die blöcke, die den block 1 ist links	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
finde den höchsten block	finden sie den höchsten block	finden sie die höchsten block	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string height ) ) ) )
wählen sie den block aus, der rechts von block 1 und darüber liegt	wählen sie den block, der sich auf der rechten seite und darüber befindet	wählen sie den block, der block 1 ist auf der rechten seite und oben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )
finde die blöcke links und über block 1	finden sie blöcke links und oben block 1	finden blocks nach links und oben block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
wählen sie einen 3zollblock, der von block 1 übrig bleibt	wählen sie einen 3zollblock, der von block 1 links ist	wählen sie ein 3zollblock, links block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
wähle den baustein links unter block 1 aus	wählen sie den ziegel, der sich unten und links von block 1 befindet	wählen sie die ziegel, die unterhalb und links von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )
finden sie einen block, der mindestens 3 bis 6 zoll ist	finden sie einen block, der mindestens 3 bis 6 zoll groß ist	finden sie einen block, der mindestens 3 bis 6 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
block, dessen länge größer als 3 zoll ist	block, dessen länge größer als 3 zoll ist	block, dessen länge größer ist als 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
such mir einen 3 zoll langen block	finden sie mich einen 3 zoll langen block	suche mir eine 3 zoll lange blockieren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
block über block 1	block über block 1	block oben block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
block, dessen form eine pyramide ist und das ist etwas besonderes	block, dessen form eine pyramide ist und die	block, dessen form einer pyramide und ist etwas besonderes	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string is_special ) ) )
2 blöcke rechts von block 1	2 blöcke rechts von block 1	2 blöcke rechts von block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )
welche speziellen blöcke haben eine länge von 3 zoll	welche spezialblöcke eine länge von 3 zoll haben	was spezielle blöcke haben eine länge von 3 zoll	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string is_special ) ) )
welcher stein ist mindestens so hoch wie stein 1 ist lang	welcher ziegel mindestens so hoch ist wie ziegel 1 ist lang	die backstein ist mindestens so hoch wie ziegel 1 ist lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
welcher stein ist über dem stein 1	welcher ziegel über ziegel 1 ist	die ziegel über ziegel 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) )
finde mich einen block mit höchstens zwei blöcken links davon	finden sie mir einen block mit höchstens zwei blöcken links davon	finden sie mir einen block mit höchstens zwei blöcke auf der linken seite ist es	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
pyramidenblock rechts von block 1	pyramidenblock rght des blocks 1	pyramide block rght block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string left ) ( string = ) en.block.block1 ) )
welcher block ist über block 1 und hat eine höhe von 3 zoll	welcher block über block 1 ist und eine höhe von 3 zoll hat	was block oben block 1 und hat eine höhe von 3 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
suchen sie den block, über und unter dem sich block 1 befindet	finden sie den block, der block 1 oben und unten befindet	finden sie den block, der block 1 ist oben und unten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )
welcher stein ist mindestens 3 cm hoch	welcher ziegel mindestens 3 zoll hoch ist	die backstein ist mindestens 3 cm hoch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
was ist die gesamthöhe der blöcke	was ist die gesamthöhe der blöcke	was ist die gesamthöhe der blöcke	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ) ) )
befindet sich rechts von block 1 oder block 2 ein block?	gibt es einen block rechts von block 1 oder block 2	gibt es einen block auf der rechten seite von entweder block 1 oder block 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
suchen sie den block, der rechts von block 1 ist und eine breite von 3 zoll hat	finden sie den block rechts von block 1 und hat eine breite von 3 zoll	finden sie den block, der rechts von block 1 und hat eine breite von 3 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
welcher block mindestens so breit ist, wie block 1 hoch ist	welcher block mindestens so breit ist wie block 1, ist hoch	welcher block ist mindestens so breit wie block 1 ist groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
3 zoll breiter block über block 1	3 zoll breiter block über block 1	3zollwideblock oben block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
block rechts von mindestens zwei block	blockrecht von mindestens zwei blocks	block rechts von mindestens zwei block	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
breite von block 1	breite des blocks 1	breite block 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string width ) ) )
finden sie den pyramidenförmigen block unter block 1	finden pyramidenförmigen block unter block 1	finden pyramidenförmigen block unten block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string below ) ( string = ) en.block.block1 ) )
welcher block sich unter einem block befindet, vor dem sich block 1 rechts befindet	welcher block sich unterhalb eines blocks befindet, der sich rechts von	welcher block unter einem block, der block 1 ist auf der rechten seite von	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )
block, der über block ist, dessen länge 3 zoll ist	block, der über dem block liegt, dessen länge 3 zoll beträgt	block oben block, dessen länge 3 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
finde den block über dem block, den block 1 darunter hat	finden sie mich den block, der über dem block ist, der block 1 unten ist	finden sie mir den block über dem block, der block 1 ist unten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )
block, zu dem die geringste anzahl von blöcken gehört	blockieren, dass die geringste anzahl von block rechts ist	block, der die geringste anzahl der block ist rechts	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string right ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
suche mir alle steine, die höchstens 2 blöcke darunter haben	finden sie mich alle ziegel, die höchstens 2 blöcke darunter haben	finden, die mir all die steine, die höchstens 2 blöcke unten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
welcher block über block 2 oder block 1 liegt	welcher block über block 2 oder block 1 ist	was block über block 2 oder block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
finden sie mich den block über dem speziellen block	finden sie mir den block über dem speziellen block	finden sie mir den block oberhalb der spezielle block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
finden sie einen block mit einer länge und breite von 3 zoll pro seite	finden sie einen block mit einer länge und breite von 3 zoll pro seite	finden sie einen block mit einer länge und breite von 3 zoll auf jeder seite	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
wählen sie die blöcke aus, die kleiner als 5 cm sind	wählen sie die blöcke weniger als 3 zoll	wählen sie die blöcke von weniger als 3 zoll	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
wie groß ist block 1?	wie hoch ist block 1	wie groß ist block 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string height ) ) )
finde mich alle 3 zoll breiten blöcke, die block 1 unten ist	finden sie mich alle 3 zoll breiten blöcke, die block 1 ist unten	mich finden alle 3 cm breite blöcke, block 1 ist unten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
such mir den block, der sich rechts vom spezialblock befindet	finden sie mich den block, der sich rechts vom sonderblock befindet	finden sie mir den block, der rechts von dem speziellen block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
welcher ziegel hat die gleiche form wie ziegel 1?	welcher ziegel die gleiche form wie ziegel 1 hat	die backstein ist die gleiche form wie ziegel 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) ( call SW.getProperty en.block.block1 ( string shape ) ) ) )
besprechungen, die später als die wöchentliche standupbesprechung beginnen	besprechungen, die später als die wöchentliche standupbesprechung beginnen	sitzungen, die später starten, als der wöchentliche standupmeeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
welches datum ist das wöchentliche standupmeeting?	welches datum ist das wöchentliche standupmeeting	zu welchem termin ist die wöchentliche standupmeeting	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) )
wann ist der wöchentliche standup?	wann ist der wöchentliche standup	wann ist die wöchentliche standup	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) )
zeigen sie mir alle besprechungen im greenberg cafe, an denen alice teilnimmt	zeigen sie mir alle treffen in greenberg café, die alice besucht	zeigen sie mir in allen sitzungen greenberg cafe, die alice besucht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string attendee ) ( string = ) en.person.alice ) )
zeig mir das meeting, das spätestens am tag beginnt	zeigen sie mir das treffen ab dem letzten tag	zeigen sie mir die tagungsbeginnend spätestens in den tag	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string start_time ) ) ) )
zeig mir alle treffen, die nicht um 10 uhr enden	zeigen sie mir alle besprechungen, die nicht um 10 uhr enden	zeige mir alle begegnungen nicht endet um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string ! = ) ( time 10 0 ) ) )
zeigen sie mir alle besprechungen mit mindestens zwei teilnehmern	zeigen sie mir alle treffen mit mindestens zwei personen, die	zeige mir alle meetings mit mindestens zwei personen teilnehmen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string >= ) ( number 2 ) ) )
zeig mir alle treffen, die drei stunden dauern	zeigen sie mir alle meetings, die drei stunden dauern	zeige mir alle treffen dauert drei stunden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )
besprechungen, die vor 10 uhr oder vor 15 uhr beginnen	besprechungen, die vor 10.00 uhr oder vor 15.00 uhr beginnen	sitzungen, die beginnen, die vor 10 oder vor 3pm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )
welche besprechungen beginnen nicht um 10 uhr	welche meetings nicht um 10 uhr beginnen	die sitzungen dont start um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string ! = ) ( time 10 0 ) ) )
welches meeting endet vor dem beginn des wöchentlichen standups?	welches meeting vor beginn des wöchentlichen standups endet	was treffen endet vor dem beginn der wöchentlichen standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
zeig mir treffen nach dem 2. januar	zeigen sie mir meetings nach jan 2	zeigen sie mir treffen, nachdem jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) ) )
welches meeting hat den frühesten startzeitpunkt?	welches meeting die früheste startzeit hat	was treffen hat die früheste startzeit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string start_time ) ) ) )
zeig mir alle treffen drei stunden lang im greenberg cafe	zeigen sie mir alle treffen drei stunden lang im greenberg café	zeige mir alle meetings drei stunden lang an der greenbergcafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )
zeig mir alle besprechungen, die spätestens um 10 uhr enden	zeigen sie mir alle besprechungen, die spätestens um 10 uhr enden	zeige mir alle treffen endet nicht später als 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
wichtiges treffen am 2. januar	wichtige sitzung am 2. januar	wichtige sitzung am 2. januar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
zeigen sie mir alle besprechungen, die spätestens zu dem zeitpunkt beginnen, an dem die wöchentliche besprechung beginnt	zeigen sie mir alle besprechungen, die spätestens zu dem zeitpunkt beginnen, zu dem das wöchentliche standupmeeting beginnt	zeige mir alle sitzungen beginnen nicht später als die zeit, die wöchentlich standupmeeting beginnt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
wie lange dauert das wöchentliche standupmeeting?	wie lange dauert das wöchentliche standupmeeting	wie lange ist die wöchentliche standupmeeting	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) )
zeig mir alle 3 stunden langen treffen, die um 10 uhr enden	zeigen sie mir alle 3 stunden langen meetings, die um 10 uhr enden	zeige mir alle 3 stunden lange sitzungen, ende um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )
zeig mir alle termine, die nicht um 10 uhr beginnen	zeigen sie mir alle sitzungen nicht ab 10 uhr	zeige mir alle begegnungen nicht beginn um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string ! = ) ( time 10 0 ) ) )
welche meetings enden, wenn der wöchentliche standupvorgang gestartet werden soll	welche besprechungen enden, wenn der wöchentliche standup gestartet werden soll	die sitzungen enden, wenn die wöchentliche standup ist geplant zu beginnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) )
zeige mir alle locations, die mindestens zwei meetings hatten	zeigen sie mir alle orte, die mindestens zwei sitzungen hatten	zeige mir alle orte, die mindestens zwei sitzungen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
zeigen sie mir besprechungen, die 3 stunden dauern	zeigen sie mir meetings, die 3 stunden dauern	zeigen sie mir meetings, die 3 stunden dauern	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )
in welchem meeting tauchten die wenigsten leute auf?	welches treffen die wenigsten leute auftauchen ließen	was treffen hatte die wenigsten menschen zeigen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( string attendee ) ) )
wann endet die wöchentliche aufstehphase?	welche zeit endet der wöchentliche stand up	welche zeit ist der wöchentliche stand bis ende	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) )
welches treffen um 10 uhr endet und alice anwesend ist	welche besprechung um 10 uhr endet und alice teilnimmt	was die sitzung endet um 10 uhr und alice ist auch dabei	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string end_time ) ( string = ) ( time 10 0 ) ) )
zeigen sie mir die durchschnittliche besprechungsdauer	zeigen sie mir durchschnittliche besprechungslänge	zeigen sie mir die durchschnittliche länge treffen	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ) ) )
person, die am 2. januar teilnimmt	person, die am 2. januar teilnimmt	teilnehmer, jan 2. treffen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ) )
zeig mir alle treffen mit bob oder alice	zeigen sie mir alle treffen mit bob oder alice teilnehmen	zeigen sie mir alle den sitzungen mit bob oder alice die teilnahme an	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
zeigen sie mir besprechungen mit zwei teilnehmern	zeigen sie mir besprechungen mit zwei teilnehmern	zeigen sie mir den sitzungen mit zwei teilnehmern	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( number 2 ) ) )
zeigen sie mir alle besprechungen, die zur selben zeit oder früher als der wöchentliche start enden	zeigen sie mir alle besprechungen, die gleichzeitig oder früher als der wöchentliche standup endet	zeige mir alle treffen endet zur gleichen zeit oder früher als die wöchentliche standup beginnt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
zeigen sie mir alle besprechungen mit zwei teilnehmern	zeigen sie mir alle besprechungen mit zwei teilnehmern	zeige mir alle treffen, die haben zwei teilnehmer	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( number 2 ) ) )
zeig mir alle teilnehmer der treffen am 2. januar	zeigen sie mir alle teilnehmer der sitzungen am 2. januar	zeige mir alle teilnehmer des meetings am 2. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ) )
sitzung beginnt um 10 uhr	sitzung, die um 10 uhr beginnt	treffen beginnt um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
welches wichtige treffen hat einen ort im greenberg cafe	welches wichtige treffen hat einen standort im greenberg café	was wichtiges meeting hat eine stelle, an greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )
zeig mir alle dreistündigen treffen am 2. januar	zeigen sie mir alle dreistündigen treffen am 2. januar	zeigen sie mir alle drei stundensitzungen am jan 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
finden sie alle treffen, die am 2. januar oder 3. januar beginnen	finden sie alle sitzungen, die am 2. januar oder 3. januar beginnen	finden sie alle begegnungen, die beginnen am 2. januar oder 3. januar	( call SW.listValue ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) )
welches treffen beginnt frühestens	welche sitzung beginnt frühestens	die sitzung beginnt frühestens	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string start_time ) ) ) )
zeig mir alle treffen, die nach 10 oder 15 uhr enden	zeigen sie mir alle sitzungen, die nach 10.00 oder 15.00 uhr enden	zeige mir alle treffen endet nach 10 uhr morgens oder 3 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )
welches treffen endet spätestens um 10 uhr	welches treffen endet höchstens um 10 uhr	was treffen endet bei den meisten um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
ort verfügt über die größte anzahl von besprechungen	standort bietet die größte anzahl von besprechungen	standort verfügt über die größte anzahl von sitzungen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string location ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
welche besprechungen haben eine startzeit von 10 oder 15 uhr	welche meetings eine startzeit von 10.00 oder 15.00 uhr haben	welche begegnungen haben eine startzeit von 10 uhr morgens oder 3 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) )
treffen im greenberg cafe, an denen alice teilnahm	treffen im greenberg café mit alice	treffen bei greenberg cafe besucht, von alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string location ) ( string = ) en.location.greenberg_cafe ) )
zeig mir die daten aller wöchentlichen standupmeetings	zeigen sie mir die termine aller wöchentlichen standupmeetings	zeigen sie mir die termine aller wöchentlichen standup meetings	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) )
welche besprechung hat die gleiche endzeit wie wöchentliches aufstehen?	welches meeting eine endzeit hat, die mit dem wöchentlichen standup identisch ist	was treffen hat ein endezeit die gleiche wie die wöchentliche standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
welche meetings enden gleichzeitig mit dem wöchentlichen roundupmeeting?	welche besprechungen gleichzeitig mit dem wöchentlichen roundupmeeting enden	was die sitzungen enden in der gleichen zeit wie die wöchentlichen roundup treffen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) )
treffen, an dem alice teilnimmt, beginnt um 1000 uhr	treffen, an dem alice teilnimmt, das um 1000 uhr beginnt	meeting, in dem alice besucht die beginnt bei 1000 bin	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
zeigen sie mir alle besprechungen, deren dauer weniger als drei stunden oder weniger als eine stunde beträgt	zeigen sie mir alle besprechungen, die weniger als drei stunden oder weniger als eine stunde betragen sollen	zeige mir alle sitzungen werden in weniger als drei stunden oder weniger als eine stunde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) ) )
welches treffen ist zum frühesten zeitpunkt geplant	welches treffen zum frühesten zeitpunkt angesetzt ist	die tagung soll auf das früheste datum	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string date ) ) ) )
sitzungen finden später als am 2. januar statt	sitzungen, die nach dem 2. januar	sitzungen, die später als januar 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
zeig mir treffen, die 3 stunden dauern und bei alice sind	zeigen sie mir meetings, die 3 stunden dauern und mit alice sind	zeigen sie mir den sitzungen, die dauern 3 stunden und sind mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string attendee ) ( string = ) en.person.alice ) )
welche person besucht das wöchentliche startup?	welche person an der wöchentlichen inbetriebnahme teilnimmt	welche person ist die teilnahme an wöchentlich start	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) en.meeting.weekly_standup ) )
die besprechung beginnt vor 10 oder 15 uhr	sitzung beginnt vor 10.00 oder 15.00 uhr	meeting beginnt, die vor 10 oder 3pm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )
was für ein treffen nicht später als das des wöchentlichen starts	welches treffen spätestens bei wöchentlichem start	was treffen nicht später als der wöchentliche start	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )
welches treffen ist länger als wöchentliche standup	welches meeting länger ist als der wöchentliche standup	was treffen ist mehr als die wöchentliche standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) ) ) )
welches treffen hat ein nach dem 2. oder 3. januar	welche besprechung hat eine nach jan 2 oder 3	was treffen hat, nachdem jan 2 oder 3	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) ) )
zeigen sie mir alle meetings, die nach dem ende des wöchentlichen standups beginnen	zeigen sie mir alle meetings, die nach dem wöchentlichen standupende beginnen	zeige mir alle versammlungen beginnen nach dem wöchentlichen standup endet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
was ist die startzeit für das wöchentliche standupmeeting?	was ist die startzeit für das wöchentliche standupmeeting	was ist die startzeit für den wöchentlichen standupmeeting	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) )
wie lange dauert das treffen?	wie lange dauert das treffen	wie lange ist das treffen	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ) ) )
besprechungen, die nach dem start der wöchentlichen startbesprechung enden	besprechungen, die nach beginn der wöchentlichen startbesprechung enden	sitzungen, die nach ende der wöchentlichen startupmeeting beginnt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
besprechungen, an denen alice teilnimmt und die drei stunden dauern	sitzungen, die von alice besucht werden und drei stunden lang sind	sitzungen, die besucht werden, von alice und sind drei stunden lang	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string attendee ) ( string = ) en.person.alice ) )
wer ist bei der wöchentlichen oder jährlichen überprüfung	der beim wöchentlichen standup oder jahresrückblick ist	wer bei den wöchentlichen standuppaddle oder jährliche überprüfung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.concat en.meeting.weekly_standup en.meeting.annual_review ) ) )
welche sitzungen enden um 10 uhr	welche sitzungen um 10 uhr enden	die sitzungen enden um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )
besprechungen, die um 10 uhr morgens enden und um 10 uhr morgens beginnen	treffen, die um 10 uhr enden und um 10 uhr beginnen	besprechungen, ende um 10 uhr und starten um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
besprechung am 2. oder 3. januar	sitzung, die am 2. januar oder 3. januar ist	sitzung, die am jan 2 oder 3 jan	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) )
zeig mir die leute, die an den meisten meetings teilnehmen	zeigen sie mir die leute, die an den meisten treffen teilnehmen	zeigen sie mir die menschen, die teilnahme an den meisten sitzungen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string attendee ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
wichtiges treffen um 10 uhr	wichtiges treffen um 10 uhr	wichtige meeting um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
welches treffen beginnt am frühesten	welche besprechung beginnt am frühesten	was die sitzung beginnt frühestens	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string start_time ) ) ) )
standorte, an denen das wöchentliche standupmeeting nicht stattfindet	standorte, die nicht die wöchentliche standupsitzung beherbergen	orte, an denen kein haus dem wöchentlichen standupmeeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string ! = ) en.meeting.weekly_standup ) )
zeigen sie mir wichtige besprechungen, die um 10 uhr beginnen	zeigen sie mir wichtige meetings, die um 10 uhr beginnen	zeig mir wichtig, die sitzungen beginnen um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
wie lange dauert ein wöchentlicher start?	wie lange ist die wöchentliche inbetriebnahme?	was ist die länge der wöchentlichen start	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) )
zeig mir alle treffen, die bis zum 3. januar stattfinden	zeigen sie mir alle treffen, die von jan 3 stattfinden	zeige mir alle treffen, die stattfinden, durch jan 3	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) ) )
wo ist der wöchentliche standup	wo ist der wöchentliche standup	wo ist der wöchentliche standup	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) en.meeting.weekly_standup ) ( call SW.reverse ( string location ) ) ( string = ) en.meeting.weekly_standup ) )
zeig mir alle dreistündigen besprechungen ab 10 uhr	zeigen sie mir alle sitzungen, die drei stunden dauern, beginnend um 10 uhr	zeige mir alle sitzungen mit einer dauer von drei stunden beginnend um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
sitzungen, die um 10 uhr enden	sitzungen, die um 10 uhr enden	besprechungen, ende um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )
zeig mir die daten der wöchentlichen standupmeetings	zeigen sie mir die termine der wöchentlichen standupmeetings	zeigen sie mir die termine für die wöchentlichen standup meetings	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) )
besprechung, die um oder nach der endzeit des wöchentlichen standups endet	treffen, das bei oder nach der endzeit des wöchentlichen standups endet	treffen die enden die bei oder nach der endzeit der wöchentlichen standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
treffen, die nicht im greenberg cafe stattfinden	treffen, die nicht im greenberg café stattfinden	sitzungen, die nicht gehalten werdenbei greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string ! = ) en.location.greenberg_cafe ) )
welche besprechung hat eine endzeit, die nicht größer ist als das ende des wöchentlichen startvorgangs	welches meeting eine endzeit hat, die nicht größer ist als das ende des wöchentlichen starts	was treffen hat ein ende die zeit nicht mehr als das ende der wöchentlichen start	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
besprechungen, die um 10 uhr beginnen	treffen, die um 10 uhr beginnen	die sitzungen beginnen um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
besprechungen, die vor dem wöchentlichen standupmeeting enden	besprechungen, die vor beginn des wöchentlichen standupmeetings enden	meetings, die vor ende der wöchentlichen standupmeeting beginnt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
besprechungen, die zur gleichen zeit wie die wöchentliche standupbesprechung enden	sitzungen, die wie das wöchentliche standupmeeting enden	meetings, die am ende die gleichen wie die wöchentliche standupmeeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) )
zeigen sie mir alle als wichtig gekennzeichneten besprechungen, die um 10 uhr beginnen	zeigen sie mir alle meetings, die als wichtig gekennzeichnet sind und um 10 uhr beginnen	zeige mir alle besprechungen mit der bezeichnung als wichtig, dass der start um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string is_important ) ) )
zeigen sie mir alle meetings, die später als die wöchentliche sitzung enden	zeigen sie mir alle besprechungen, die später als die wöchentliche standup enden	zeige mir alle treffen endet später als der wöchentliche standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
treffen, das früher endet als wöchentliches aufstehen	treffen, das früher endet als der wöchentliche standup endet	sitzung endet früher als wöchentliche standup endet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
zeig mir alle treffen, die vor dem 2. januar oder dem 3. januar stattfinden	zeigen sie mir alle sitzungen, die vor dem 2. januar oder 3. januar stattfinden	zeige mir alle begegnungen geschehen vor januar 2. oder 3. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) ) )
ist das treffen um 10 oder 15 uhr	ist das treffen um 10.00 oder 15.00 uhr	ist das treffen um 10 uhr oder 3 uhr	( call SW.listValue ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) )
besprechung mit mindestens zwei teilnehmern	besprechung mit mindestens zwei teilnehmern	sitzung hat mindestens zwei teilnehmer	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string >= ) ( number 2 ) ) )
zeigen sie mir die orte aller besprechungen, die um 10 uhr beginnen	zeigen sie mir die orte aller meetings ab 10 uhr	zeigen sie mir die standorte aller treffen ab 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ) )
person, die wöchentlich an standup teilnimmt	person, die wöchentlichen standup besucht	person, die besucht wöchentlich standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) en.meeting.weekly_standup ) )
treffen länger als ein oder drei stunden	besprechung länger als eine oder drei stunden	sitzung länger als eine oder drei stunden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) ) )
zeige mir treffen an weniger als zwei orten	zeigen sie mir meetings an weniger als zwei orten	zeigen sie mir, treffen auf weniger als zwei standorten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string < ) ( number 2 ) ) )
wählen sie alle wichtigen besprechungen aus	wählen sie alle wichtigen besprechungen aus	wählen sie alle wichtigen sitzungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string is_important ) ) )
welche besprechung beginnt vor 10 oder 15 uhr	welches treffen vor 10.00 oder 15.00 uhr beginnt	was meeting beginnt vor 10 uhr oder 3 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )
zeigen sie mir alle besprechungen, die zu dem zeitpunkt beginnen, an dem die wöchentliche besprechung endet	zeigen sie mir alle besprechungen, die zum zeitpunkt des endes der wöchentlichen standupbesprechung beginnen	zeige mir alle treffen, die beginnen zu dem zeitpunkt die wöchentliche standupmeeting endet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) )
welches meeting hat den gleichen ort wie das wöchentliche aufstehen?	welches meeting den gleichen ort wie der wöchentliche standup hat	was treffen hat die gleiche lage wie die wöchentliche standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) en.meeting.weekly_standup ) ) )
welche besprechungen haben die gleiche startzeit wie die wöchentliche startbesprechung?	welche meetings die gleiche startzeit wie die wochenstartbesprechung haben	welche begegnungen haben die gleiche startzeit wie die woche startupmeeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) )
sitzungen vor dem 3. januar	sitzungen, die vor dem 3. januar	sitzungen, die vor dem 3. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) ) )
zeigen sie mir alle teilnehmer von besprechungen, die um 10 uhr beginnen	zeigen sie mir alle teilnehmer von meetings ab 10 uhr	zeige mir alle teilnehmer des meetings ab 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ) )
treffen am 2. januar, die um 10 uhr enden	sitzungen am 2. januar, die um 10.00 uhr enden	treffen am 2. januar, das ende um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )
zeigen sie mir alle besprechungen, die zur gleichen zeit oder früher als das wöchentliche ende des standups beginnen	zeigen sie mir alle besprechungen, die gleichzeitig oder früher als das wöchentliche standupende beginnen	zeige mir alle sitzungen beginnen zur gleichen zeit oder früher als die wöchentliche standup endet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
welches treffen beginnt um 10 uhr	welches treffen beginnt um 10 uhr	was die sitzung beginnt um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
welches treffen beginnt mindestens um 10 uhr	welches meeting beginnt mindestens um 10 uhr	was meeting beginnt, zu mindestens bei 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
wie lange dauert das wöchentliche standupmeeting?	wie lange dauert das wöchentliche standupmeeting	wie lange ist die wöchentliche standupmeeting	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) )
was ist das meeting, das unmittelbar vor dem wöchentlichen standup stattfindet?	was ist das treffen, das unmittelbar vor dem wöchentlichen standup stattfindet	was ist die treffen, die stattfinden, unmittelbar vor der wöchentlichen standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
an welchem ort werden mehr als zwei sitzungen abgehalten?	an welchem ort werden mehr als zwei sitzungen	was ist die lage, dass mehr als zwei sitzungen werden abgehalten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
zeig mir die orte aller treffen am 2. januar	zeigen sie mir die orte aller meetings am 2. januar	zeigen sie mir die standorte aller sitzungen am 2. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ) )
zeigen sie mir alle teilnehmer von besprechungen, die drei stunden lang sind	zeigen sie mir alle teilnehmer von meetings drei stunden lang	zeige mir alle teilnehmer des meetings drei stunden lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ) )
zeigen sie mir besprechungen, die nicht um 10 uhr enden	zeigen sie mir sitzungen, die nicht um 10 uhr schließen	zeigen sie mir die sitzungen, die nicht schließen, um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string ! = ) ( time 10 0 ) ) )
besprechungen, an denen personen teilnehmen, die an der wöchentlichen besprechung teilnehmen	treffen, an denen personen teilnehmen, die an der wöchentlichen standupsitzung teilnehmen	tagungen von menschen, die an den wöchentlichen standupmeeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string attendee ) ) ) )
welche treffen finden am 2. januar im greenberg cafe statt?	welche treffen am 2. januar im greenberg café stattfinden	was in den sitzungen am jan 2 in greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
welches meeting hat die gleiche länge wie das wöchentliche startup?	welches meeting die gleiche länge hat wie die wöchentliche inbetriebnahme	was treffen ist die gleiche länge wie der wöchentliche start	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) ) )
welche person nimmt nicht am wöchentlichen standupmeeting teil?	welche person nicht am wöchentlichen standupmeeting teilnimmt	welche person ist nicht die teilnahme an der wöchentlichen standupmeeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string ! = ) en.meeting.weekly_standup ) )
treffen im greenberg cafe, die um 10 uhr beginnen	treffen im greenberg café beginnen um 10 uhr	treffen bei greenberg cafe, beginnen um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
besprechungen, die am selben tag oder nach dem wöchentlichen standupmeeting abgehalten werden	sitzungen, die am selben tag wie oder nach der wöchentlichen standupsitzung stattfinden	sitzungen, die am gleichen tag oder nach dem wöchentlichen standupmeeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )
zeigen sie mir alle besprechungen, die am selben tag oder vor dem wöchentlichen standup stattfinden	zeigen sie mir alle meetings, die am selben tag oder vor dem wöchentlichen standup stattfinden	zeige mir alle sitzungen geschieht am selben tag oder vor der wöchentlichen standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )
zeig mir alle besprechungen, an denen entweder alice oder bob teilgenommen haben	zeigen sie mir alle meetings, die entweder von alice oder bob besucht werden	zeige mir alle tagungen von entweder alice oder bob	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
welche besprechung beginnt mindestens um 10 oder 15 uhr	welches treffen beginnt mindestens um 10.00 oder 15.00 uhr	was meeting beginnt, mindestens 10 oder 3pm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )
finde mir ein treffen, das kürzer als drei stunden ist	finden sie mir ein treffen kürzer als drei stunden	suche mir eine versammlung, die kürzer als drei stunden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.hour ) ) ) )
welcher ort sind die meisten meetings?	welcher ort ist die meisten besprechungen	in welcher lage ist die meisten treffen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string location ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
wöchentlicher startteilnehmer	wöchentlicher startupteilnehmer	wöchentliche startupteilnehmer	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string attendee ) ) )
zeig mir alle treffen, die um 10 uhr beginnen	zeigen sie mir alle treffen, die um 10 uhr beginnen	zeige mir alle treffen beginnen um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
zeigen sie mir besprechungen, die enden, bevor das wöchentliche aufstehen beginnt	zeigen sie mir meetings, die vor beginn der wöchentlichen standupsitzungen enden	zeigen sie mir den sitzungen, die vor ende der wöchentlichen standup beginnt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
meeting teilt teilnehmer mit wöchentlichem standup	meeting teilt teilnehmer mit wöchentlichem standup	treffen aktien teilnehmer mit wöchentlichen standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) en.meeting.weekly_standup ) ) )
zeig mir treffen um 10 uhr mit alice	zeigen sie mir meetings um 10 uhr mit alice	zeig mir treffen um 10 uhr mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string attendee ) ( string = ) en.person.alice ) )
besprechungen, die nicht um 10 uhr enden	sitzungen, die nicht um 10 uhr enden	sitzungen, die nicht um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string ! = ) ( time 10 0 ) ) )
welches treffen endet um 10 uhr am zweiten januar	welches treffen am zweiten januar um 10.00 uhr endet	was die sitzung endet um 10 uhr am zweiten januar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
personen, die nicht am wöchentlichen standupmeeting teilnehmen	personen, die nicht am wöchentlichen standupmeeting teilnehmen	menschen, die nicht an den wöchentlichen standupmeeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string ! = ) en.meeting.weekly_standup ) )
besprechungen, die drei stunden oder länger oder eine stunde oder länger dauern	besprechungen, die drei stunden oder länger oder eine stunde oder länger sind	sitzungen, die drei stunden oder länger oder eine stunde oder länger	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) ) )
treffen am 2. januar um 10 uhr	sitzung am 2. januar um 10.00 uhr	sitzung am 2. januar um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
zeig mir treffen vor dem 3. januar	zeigen sie mir meetings vor jan 3	zeigen sie mir treffen, bevor jan 3	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) ) )
zeigen sie mir die besprechungen mit der geringsten anzahl von verschiedenen standorten	zeigen sie mir die besprechungen mit der geringsten anzahl von verschiedenen standorten	zeigen sie mir die treffen mit der geringsten anzahl von verschiedenen standorten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( string location ) ) )
zeigen sie mir standorte aller als wichtig gekennzeichneten besprechungen	zeigen sie mir orte aller meetings, die als wichtig markiert sind	zeigen sie mir die standorte aller sitzungen, an denen die als wichtig markiert sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ) )
zeigen sie mir alle besprechungen, an denen personen teilgenommen haben, die auch an der wöchentlichen besprechung teilgenommen haben	zeigen sie mir alle treffen, an denen personen teilnehmen, die auch an der wöchentlichen standupsitzung teilgenommen haben	zeige mir alle tagungen von menschen, die auch an den wöchentlichen standupmeeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string attendee ) ) ) )
personen, die an besprechungen teilnehmen, die um 10 uhr morgens enden	personen, die an besprechungen teilnehmen, die um 10 uhr enden	menschen, die teilnahme an besprechungen, ende um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ) )
zeig mir, wer an drei stunden tagen teilnimmt	zeigen sie mir, wer an dreistündigen besprechungen teilnimmt	zeigen sie mir, wer ist die teilnahme an dreistundensitzungen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ) )
welche besprechung hat die geringste teilnehmerzahl?	welche besprechung hat die geringste teilnehmerzahl	was treffen hat die geringste anzahl der teilnehmer	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( string attendee ) ) )
zeige mir alle als wichtig gekennzeichneten besprechungen	zeigen sie mir alle treffen markiert wichtig	zeige mir alle sitzungen als wichtig markiert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string is_important ) ) )
sitzungen, an denen zwei oder weniger personen teilnehmen	treffen, an denen zwei oder weniger personen teilnehmen	tagungen von zwei oder weniger personen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string <= ) ( number 2 ) ) )
welches treffen hatte jemand, der wöchentlich auf standup ging	welches treffen hatte jemanden, der zu wöchentlichen standup ging	was treffen hatte jemand, der ging zu den wöchentlichen standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string attendee ) ) ) )
zeig mir wer nicht im wöchentlichen standup ist	zeigen sie mir, wer nicht auf dem wöchentlichen standup ist	zeigen sie mir, wer ist nicht bei den wöchentlichen standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string ! = ) en.meeting.weekly_standup ) )
zeig mir alle termine, die um 10 uhr beginnen und enden	zeigen sie mir alle besprechungen, die um 10 uhr beginnen und enden	zeige mir alle sitzungen beginnt und endet um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )
wichtige sitzungen von alice besucht	wichtige sitzungen, an denen alice	wichtige tagungen von alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string attendee ) ( string = ) en.person.alice ) )
besprechungen, die vor dem wöchentlichen standupmeeting beginnen	besprechungen, die vor dem wöchentlichen standupmeeting beginnen	meetings, die früher beginnen als die wöchentliche standupmeeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
welches treffen findet im greenberg cafe statt?	welches treffen im greenberg café stattfindet	was treffen an der greenbergcafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )
an welchem dreistündigen treffen hat alice teilgenommen?	welche dreistündige sitzung alice besucht hat	was dreistündigen sitzung hat alice die teilnahme an	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string length ) ( string = ) ( number 3 en.hour ) ) )
zeig mir die längsten treffen	zeigen sie mir die längsten treffen	zeigen sie mir die längsten sitzungen	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string length ) ) ) )
zeige mir alle locations die nicht das wöchentliche standup hosten	zeigen sie mir alle standorte, die nicht die wöchentliche standup hosten	zeige mir alle orte, die nicht als host für die wöchentliche standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string ! = ) en.meeting.weekly_standup ) )
was ist ein wichtiges treffen?	was ist ein wichtiges treffen	was ist eine wichtige sitzung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string is_important ) ) )
zeig mir alle treffen, die um 10 uhr beginnen und um 10 uhr enden	zeigen sie mir alle sitzungen, die um 10 uhr beginnen und um 10 uhr enden	zeige mir alle sitzungen beginnen um 10 uhr und ende um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
zeigen sie mir alle besprechungen, die drei oder eine stunde dauern sollen	zeigen sie mir alle besprechungen, die für drei oder eine stunde geplant sind	zeigen sie mir, alle sitzungen zu drei stunden oder eine stunde lang	( call SW.listValue ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) )
dreistündiges treffen im greenberg cafe	dreistündiges treffen im greenberg café	dreistundensitzung, bei greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )
personen, die an besprechungen teilnehmen, an denen alice teilnimmt	personen, die an besprechungen teilnehmen, an denen alice teilnimmt	menschen, die teilnahme an besprechungen, die alice besucht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ) )
zeigen sie mir die teilnehmer für alle besprechungen am 2. januar	zeigen sie mir die teilnehmer für alle meetings am 2. januar	mir zeigen die teilnehmer bei allen treffen auf jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ) )
zeig mir alle, die an meetings teilgenommen haben, an denen auch alice teilgenommen hat	zeigen sie mir alle, die sitzungen besucht auch von alice besucht	zeigen sie mir, alle, die an den sitzungen teilgenommen haben auch beigewohnt von alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ) )
wer ist die person, die an dem wöchentlichen standupmeeting teilnimmt?	wer die person ist, die an der wöchentlichen standupsitzung teilnimmt	wer ist die person, die an den wöchentlichen standupmeeting	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) en.meeting.weekly_standup ) ( call SW.reverse ( string attendee ) ) ( string = ) en.meeting.weekly_standup ) )
welche besprechung hat eine länge von mehr als wöchentlichem start	welche besprechung eine länge hat, die größer ist als der wöchentliche start	was sitzung hat eine länge von mehr als wöchentlichen start	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) ) ) )
welche person nimmt an mehr als zwei meetings teil?	welche person an mehr als zwei besprechungen teilnimmt	welche person ist ein teilnehmer mehr als zwei sitzungen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
treffen vor dem 2. januar	sitzung vor dem 2. januar	treffen vor jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
zeig mir alle treffen, an denen alice am 2. januar teilgenommen hat	zeigen sie mir alle sitzungen alice hat am 2. januar teilgenommen	zeigen sie mir eine treffen alice besucht am 2. januar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string attendee ) ( string = ) en.person.alice ) )
welche besprechung hat eine endzeit vor dem wöchentlichen start	welche besprechung eine endzeit vor dem wöchentlichen start hat	was treffen hat ein ende, mal früher als wöchentlicher start	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
zeigen sie mir besprechungen, die enden, bevor der wöchentliche standup beginnt	zeigen sie mir meetings, die vor wöchentlichem standup enden	zeigen sie mir treffen, der wird am ende vor dem wöchentlichen standup beginnt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
welche treffen am 2. januar enden um 10 uhr	welche sitzungen am 2. januar um 10.00 uhr enden	was den sitzungen am 2. januarende um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
welche wichtigen treffen werden von alice besucht?	welche wichtigen sitzungen von alice besucht werden	welche wichtigen sitzungen werden von alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string is_important ) ) )
besprechungen, die genauso lang sind wie die wöchentliche standupbesprechung	besprechungen, die die gleiche länge wie die wöchentliche standupbesprechung haben	sitzungen, die die gleiche länge wie die wöchentliche standupmeeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) ) )
sitzung endet nach 10 uhr	treffen endet nach 10 uhr	sitzung endet nach 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
besprechungen, die nach dem wöchentlichen standupmeeting beginnen	besprechungen, die nach beginn des wöchentlichen standupmeetings beginnen	sitzungen, die beginnen, nachdem die wöchentlichen standupmeeting beginnt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
welches treffen hat die kürzeste zeit	welches meeting die kürzeste zeit hat	was treffen hat die kürzeste zeit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string end_time ) ) ) )
besprechung, die später als zu beginn des wöchentlichen standups beginnt	besprechung, die später als der beginn des wöchentlichen standups beginnt	sitzung beginnt später als beginn der wöchentlichen standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
zeigen sie mir alle besprechungen, die höchstens zwei standorte haben	zeigen sie mir alle meetings, die an den meisten zwei standorten haben	zeige mir alle treffen, die haben am meisten zwei standorten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string <= ) ( number 2 ) ) )
welche wichtigen treffen beginnen um 10 uhr	welche wichtigen treffen beginnen um 10 uhr	welche wichtigen sitzungen beginnen um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string is_important ) ) )
2. januar treffen	2. januarsitzung	januar 2. treffen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
welche besprechung hat eine endzeit von mindestens 10 uhr	welches meeting eine endzeit von mindestens 10 uhr hat	was treffen hat ein endezeit von mindestens 10	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
welches treffen war kürzer als drei stunden	welches meeting kürzer als drei stunden war	was treffen war kürzer als drei stunden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) ) )
welches wichtige treffen befindet sich im greenberg cafe	welches wichtige treffen im greenberg café liegt	welche wichtigen meeting befindet sich bei greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string is_important ) ) )
welche besprechung hat eine endzeit, die kleiner ist als die wöchentliche standupzeit?	welches meeting eine endzeit hat, die kleiner ist als der wöchentliche standup	was treffen hat ein endezeit kleiner als wöchentliche standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
zeigen sie mir alle personen, die an mehr als zwei besprechungen teilgenommen haben	zeigen sie mir alle personen, die mehr als zwei sitzungen besucht haben	zeige mir alle personen, die daran teilgenommen haben, mehr als zwei sitzungen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
sitzungen am oder vor dem 2. januar	sitzungen am oder vor dem 2. januar	meetings, die am oder vor dem 2. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
welcher ort hat mehr als zwei treffen	welcher ort mehr als zwei besprechungen hat	was lage mehr als zwei sitzungen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
meetings an den meisten orten	treffen an den meisten orten	treffen in den meisten standorten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( string location ) ) )
treffen im greenberg cafe, die um 10 uhr morgens enden	treffen im greenberg café, die um 10 uhr enden	treffen bei greenberg cafe, das ende einer 10	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )
dreistündiges treffen mit alice als teilnehmerin	dreistündiges treffen mit alice als teilnehmer	dreistundentreffen mit alice als teilnehmer	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string length ) ( string = ) ( number 3 en.hour ) ) )
welche besprechung beginnt mit der durchschnittlichen wöchentlichen startzeit	welches meeting bei der wöchentlichen standupdurchschnittlichen startzeit beginnt	was meeting beginnt bei den wöchentlichen standupdurchschnittliche startzeit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
besprechungen anzeigen, die nicht früher als die wöchentliche startbesprechung beginnen	anzeigen von besprechungen, die frühestens als die wöchentliche startbesprechung beginnen	show treffen, die nicht früher als die wöchentlichen startmeeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
zeig mir alle gespräche, an denen alice teilnimmt, die drei stunden dauern	zeigen sie mir alle sitzungen alice ist anwesend, die drei stunden lang sind	zeige mir alle sitzungen alice an, die sind drei stunden lang	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string attendee ) ( string = ) en.person.alice ) )
zeigen sie mir alle besprechungen, die zur gleichen zeit enden, zu der der wöchentliche standup beginnt	zeigen sie mir alle meetings, die gleichzeitig mit dem wöchentlichen standup enden	zeige mir alle versammlungen, die ende in der gleichen zeit die wöchentlichen standup beginnt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) )
welche besprechung hat eine startzeit zum endzeitpunkt des wöchentlichen standups?	welches meeting eine startzeit bei der endzeit des wöchentlichen standups hat	was sitzung hat eine startzeit endezeit der wöchentlichen standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) )
orte wichtiger treffen	orte wichtiger meetings	standorte von wichtigen meetings	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ) )
zeig mir treffen ab 10 oder 15 uhr	zeigen sie mir meetings ab 10.00 oder 15.00 uhr	zeigen sie mir, treffen ab 10 uhr oder 3 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )
welches meeting beginnt, bevor das wöchentliche aufstehen endet?	welches meeting beginnt, bevor der wöchentliche standup endet	was meeting beginnt vor dem wöchentlichen standup endet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
zeig mir alle treffen drei stunden lang	zeigen sie mir alle sitzungen drei stunden lang	zeige mir alle meetings drei stunden lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )
standorte, an denen mindestens zwei sitzungen stattfinden	orte, an denen mindestens zwei sitzungen stattfinden	standorte, das haus mindestens zwei sitzungen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
zeig mir treffen nicht am 2. januar	zeigen sie mir meetings nicht am 2. januar	zeigen sie mir die sitzungen nicht auf jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string ! = ) ( date 2015 1 2 ) ) )
das meeting endet nach der endzeit des wöchentlichen standups	besprechung endet nach endzeit des wöchentlichen standups	sitzung endet nach ende wöchentlichen standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
zeig mir den ort aller treffen, an denen alice teilgenommen hat	zeigen sie mir den ort aller meetings, die von alice besucht werden	zeigen sie mir, wo all die tagungen von alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ) )
zeig mir alle treffen am 2. januar, die um 10 uhr enden	zeigen sie mir alle sitzungen am 2. januar, die um 10 uhr enden	zeige mir alle sitzungen am 2. januar das ende um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
zeig mir alle treffen im greenberg cafe, die um 10 uhr enden	zeigen sie mir alle treffen im greenberg café, das um 10 uhr endet	zeige mir alle versammlungen auf der greenbergcafé endet um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )
drei stunden lang wichtiges treffen	drei stunden langes wichtiges treffen	drei stunden lang wichtige sitzung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string is_important ) ) )
welche besprechung hat alice anwesend und beginnt um 10 uhr	welches meeting alice besucht hat und beginnt um 10 uhr	was treffen alice, die teilnehmen, und beginnt um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
wichtige besprechungen beginnen um 10 uhr	wichtige treffen, die um 10 uhr beginnen	wichtige sitzungen beginnen um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
wie viele besprechungen gibt es?	wie viele meetings es gibt	wie viele sitzungen sind da	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
wöchentliche standupendzeit	wöchentliche standupendzeit	wöchentliche standup ende der zeit	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) )
welcher ort ist das meeting, an dem alice teilnimmt?	welcher ort ist die besprechung, an der alice teilnimmt	in welcher lage ist das tagungswer hat alice die teilnahme an	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ) )
zeig mir alle treffen, an denen alice nicht teilgenommen hat	zeigen sie mir alle besprechungen, an denen alice nicht teilgenommen hat	zeigen sie mir eine treffen, dass alice nicht besucht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string ! = ) en.person.alice ) )
wie lange dauert die durchschnittliche besprechung?	wie lange dauert die durchschnittliche besprechung	wie lange braucht der durchschnitt der letzten sitzung	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ) ) )
zeige mir alle treffen am 2. januar	zeigen sie mir alle treffen am 2. januar	zeige mir alle treffen auf jan 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
person ist teilnehmer der wöchentlichen standup oder jährlichen überprüfung	person ist teilnehmer des wöchentlichen standups oder der jahresüberprüfung	person ist teilnehmer des wöchentlichen standup oder jährliche überprüfung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.concat en.meeting.weekly_standup en.meeting.annual_review ) ) )
besprechungen, die drei stunden oder länger dauern	besprechungen, die drei stunden oder länger sind	sitzungen, die drei stunden oder länger	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.hour ) ) ) )
wichtige treffen, die um 10 uhr morgens enden	wichtige treffen, die um 10.00 uhr enden	wichtige meetings, das ende um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string is_important ) ) )
zeig mir alle treffen am 2. januar, die um 10 uhr enden	zeigen sie mir alle sitzungen am 2. januar endet um 10 uhr	zeige mir alle sitzungen am 2. januar und endet am 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )
besprechungen, die kürzer als drei stunden oder kürzer als eine stunde sind	besprechungen, die kürzer als drei stunden oder kürzer als eine stunde sind	sitzungen, die kürzer sind als drei stunden oder kürzer als eine stunde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) ) )
besprechungen, die um 10 oder 15 uhr enden	treffen, die um 10.00 oder 15.00 uhr enden	besprechungen, ende um 10 uhr oder 3 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) )
die besprechung beginnt nicht um 10 uhr	besprechung beginnt nicht um 10 uhr	treffen nicht starten um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string ! = ) ( time 10 0 ) ) )
sitzungen beginnen später als 10 uhr	besprechungen beginnen später als 10 uhr	sitzungen ab, die später als 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
zeig mir alle treffen, die mindestens drei stunden dauern	zeigen sie mir alle meetings mindestens drei stunden lang	zeige mir alle sitzungen mindestens drei stunden lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.hour ) ) ) )
zeig mir treffen, die nach dem 2. januar stattfinden	zeigen sie mir meetings, die nach dem 2. januar stattfinden	zeigen sie mir den sitzungen passiert nachdem jan 2.	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
welches treffen hat die geringste länge	welches meeting die kleinste länge hat	was treffen hat die kleinste länge	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string length ) ) ) )
zeigen sie mir alle besprechungen, die um 10 uhr enden und an denen alice teilnimmt	zeigen sie mir alle besprechungen, die um 10 uhr enden, dass alice teilnimmt	zeige mir alle treffen endet um 10 uhr, die alice besucht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string end_time ) ( string = ) ( time 10 0 ) ) )
wichtiges treffen im greenberg cafe	wichtiges treffen im greenberg café	wichtige besprechung im cafe greenberg	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )
zeig mir alle treffen im greenberg cafe, die um 10 uhr enden	zeigen sie mir alle treffen im greenberg café, die um 10 uhr enden	zeige mir alle metings in greenberg cafe, das ende um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )
besprechungen, die kürzer als drei stunden sind	besprechungen, die kürzer als drei stunden sind	sitzungen, die kürzer als drei stunden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.hour ) ) ) )
zeigen sie mir alle als wichtig gekennzeichneten besprechungen	zeigen sie mir alle sitzungen, die als wichtig markiert sind	zeige mir alle sitzungen als wichtig markiert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) )
zeig mir alle treffen am 2. januar ab 10 uhr	zeigen sie mir alle sitzungen am 2. januar ab 10 uhr	zeige mir alle sitzungen am 2. januar ab 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
zeigen sie mir alle besprechungen mit maximal zwei teilnehmern	zeigen sie mir alle besprechungen, die nicht mehr als zwei teilnehmer haben	zeige mir alle versammlungen, die nicht mehr als zwei teilnehmer	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string <= ) ( number 2 ) ) )
wer wird an wichtigen treffen teilnehmen	die an wichtigen sitzungen teilnehmen werden	wer wird die teilnahme an wichtigen sitzungen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ) )
besprechungen, die gleichzeitig mit oder vor dem wöchentlichen standupmeeting enden	sitzungen, die gleichzeitig mit oder vor dem ende der wöchentlichen standupbesprechung enden	besprechungen, die ende in der gleichen zeit wie oder früher als die wöchentliche standupmeeting endet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
zeigen sie mir alle teilnehmer von besprechungen, die als wichtig markiert sind	zeigen sie mir alle teilnehmer von meetings markiert wichtig	zeige mir alle teilnehmer des meetings als wichtig markiert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ) )
zeig mir alle meetings nicht länger als die wöchentlichen standups	zeigen sie mir alle meetings nicht länger als die wöchentliche standup	zeige mir alle meetings nicht länger als die wöchentliche standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) ) ) )
welches meeting beginnt, wenn das wöchentliche aufstehen endet?	welche besprechung beginnt, wenn der wöchentliche standup endet	was treffen beginnt dann, wenn die wöchentliche standup endet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) )
zeig mir alle treffen zwischen 10 und 15 uhr	zeigen sie mir alle treffen zwischen 10.00 und 15.00 uhr	zeige mir alle treffen zwischen 10am und 3pm	( call SW.listValue ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) )
zeig mir, an welchem treffen alice teilnehmen wird, das um 10 uhr endet	zeigen sie mir die sitzung alice wird teilnehmen, die um 10 uhr endet	zeigen sie mir die tagungsalice wird an die enden um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string attendee ) ( string = ) en.person.alice ) )
zeige mir alle termine ab spätestens 15 uhr	zeigen sie mir alle treffen ab spätestens 15 uhr	zeige mir alle sitzungen beginn bei 3 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )
welches meeting hat die früheste endzeit?	welche besprechung die früheste endzeit hat	die sitzung hat frühestens ende der zeit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string end_time ) ) ) )
welches wichtige treffen begann um 10 uhr	das wichtige treffen begann um 10 uhr	was wichtig treffen begann um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
besprechungen, die um oder nach 10 uhr enden	sitzungen, die um oder nach 10 uhr enden	meetings, die am ende oder nach 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
welcher ort beherbergt die meisten meetings?	welcher ort die meisten besprechungen ausrichtet	die location beherbergt die meisten sitzungen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string location ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
zeigen sie mir alle besprechungen, die frühestens mit dem ende der wöchentlichen besprechung beginnen	zeigen sie mir alle besprechungen, die frühestens am ende der wöchentlichen standupbesprechung beginnen	zeige mir alle treffen, die nicht früher als, wenn der wöchentliche standupmeeting endet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
zeigen sie mir alle besprechungen, die am oder nach dem datum des wöchentlichen standups stattfinden	zeigen sie mir alle besprechungen, die am oder nach dem datum des wöchentlichen standups stattfinden	zeige mir alle versammlungen geschehen, die am oder nach dem datum der wöchentlichen standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )
zeigen sie mir alle besprechungen, die nach 10 uhr beginnen	zeigen sie mir alle besprechungen, die später als 10 uhr beginnen	zeige mir alle treffen, die erst später als 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string > ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
zeigen sie mir die besprechung, die am 2. januar um 10 uhr beginnt	zeigen sie mir das treffen, das am 2. januar um 10 uhr beginnt	zeigen sie mir, dass die besprechung beginnt um 10 uhr am 2. januar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
ist dieses treffen drei stunden lang oder eine stunde lang	ist dieses treffen drei stunden lang oder eine stunde lang	ist diese sitzung drei stunden lang oder eine stunde lang	( call SW.listValue ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) )
zeig mir alle besprechungen, an denen alice teilgenommen hat und die um 10 uhr beginnen	zeigen sie mir alle sitzungen alice besucht hat, die um 10 uhr beginnen	zeige mir alle sitzungen alice besucht hat, die beginnen um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string attendee ) ( string = ) en.person.alice ) )
treffen vor dem wöchentlichen standupmeeting	treffen vor dem wöchentlichen standupmeeting	 treffen stattfand, bevor das wöchentliche standupmeeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )
sitzungen enden um 10 uhr und dauern drei stunden	treffen, die um 10 uhr endeten und drei stunden lang sind	treffen endet um 10 uhr, die drei stunden lang	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )
zeig mir alle meetings, die nach dem wöchentlichen standup stattfinden	zeigen sie mir alle meetings, die nach dem wöchentlichen standup stattfinden	zeige mir alle sitzungen passiert nach der wöchentlichen standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )
die besprechung endet spätestens zur startzeit des wöchentlichen standups	besprechung endet spätestens mit der startzeit des wöchentlichen standups	treffen endet spätestens mit beginn der wöchentlichen standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
zeigen sie mir alle besprechungen im greenberg cafe oder in der zentrale	zeigen sie mir alle treffen im greenberg café oder zentrale	zeigen sie mir, alle treffen sich an greenberg cafe oder zentrale	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) ( call SW.concat en.location.greenberg_cafe en.location.central_office ) ) )
welche besprechung dauert eine stunde oder länger?	welche besprechung eine stunde oder länger ist	was treffen ist eine stunde oder mehr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) ) )
dreistündiges treffen, das um 10 uhr endet	dreistündiges treffen, das um 10 uhr endet	dreistundensitzung endet um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )
treffen nicht länger als die dauer der wöchentlichen standup	sitzung nicht länger als dauer des wöchentlichen standups	treffen nicht länger als die dauer der wöchentlichen standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) ) ) )
zeigen sie mir alle besprechungen mit einer länge von weniger oder mehr als drei stunden	zeigen sie mir alle meetings mit längen, die entweder weniger als drei stunden	zeige mir alle besprechungen mit längen, die entweder weniger oder mehr als drei stunden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string ! = ) ( number 3 en.hour ) ) )
zeigen sie mir die besprechungen, die nicht später als das wöchentliche aufstehen enden	zeigen sie mir die sitzungen, die spätestens mit dem wöchentlichen standupende enden	zeigen sie mir die sitzungen, an denen ende nicht später als die wöchentliche standup endet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
wann beginnt das wöchentliche standupmeeting?	wann beginnt die wöchentliche standupbesprechung	wann wird die wöchentliche standupmeeting beginnen	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) )
welche besprechung hat ein früheres datum als der 2. januar?	welche besprechung ein früheres datum als der 2. januar hat	was treffen hat ein früheres datum als jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
zeigen sie mir alle besprechungen, die vor dem wöchentlichen standup beginnen	zeigen sie mir alle besprechungen, die vor dem wöchentlichen standup beginnen	zeige mir alle treffen anfang früher als die wöchentliche standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
zeig mir alle meetings, an denen alice nicht teilnimmt	zeigen sie mir alle besprechungen, an denen alice nicht teilnimmt	zeige mir alle besprechungen, dass alice nicht an	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string ! = ) en.person.alice ) )
person, die an der sitzung teilnimmt, die um 10 uhr endet	person, die an der besprechung teilnimmt, die um 10.00 uhr endet	person, die beachtet, dass die besprechung endet um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ) )
treffen von zwei personen besucht	treffen, an denen zwei personen teilnahmen	tagungen von zwei menschen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( number 2 ) ) )
welche person nimmt an mindestens zwei sitzungen teil?	welche person an mindestens zwei besprechungen teilnimmt	welche person ist ein teilnehmer mindestens zwei sitzungen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
wo findet das meeting statt, an dem alice teilnimmt?	an welchem ort der besprechung ist alice teil.	was ist der ort des treffens, die alice besucht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ) )
zeigen sie mir alle besprechungen im greenberg cafe oder in der zentrale	zeigen sie mir alle treffen im greenberg café oder zentrale	zeigen sie mir in allen sitzungen greenberg cafe oder zentrale	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) ( call SW.concat en.location.greenberg_cafe en.location.central_office ) ) )
besprechung, deren startzeit nach der endzeit des wöchentlichen standups liegt	besprechung, deren startzeit nach der endzeit des wöchentlichen standups ist	treffen, deren startzeit nach der endzeit der wöchentlichen standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
showmeetings, die um 10 uhr im greenberg cafe beginnen	zeigen sie treffen, die um 10 uhr im greenberg café beginnen	show treffen beginnen um 10 uhr im cafe greenberg	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )
welches meeting hat die späteste startzeit?	welches meeting die letzte startzeit hat	was treffen hat die letzte startzeit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string start_time ) ) ) )
welches meeting sich im greenberg cafe befindet und alice wird anwesend sein	welches treffen im greenberg café und alice ist anwesend	was treffen liegt bei greenberg cafe und alice besuchen werden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string location ) ( string = ) en.location.greenberg_cafe ) )
was ist das kürzeste treffen?	was ist das kürzeste treffen	was ist das kürzeste treffen	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string length ) ) ) )
zeigen sie mir alle besprechungen, die um 10 uhr enden	zeigen sie mir alle treffen, die um 10 uhr enden	zeigen sie mir eine treffen, das ende um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )
besprechungen, die genauso lang oder kürzer sind als das wöchentliche standupmeeting	besprechungen, die die gleiche länge oder kürzer als die wöchentliche standupbesprechung haben	treffen, die die gleiche länge oder kürzer als die wöchentliche standupmeeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) ) ) )
zeigen sie mir besprechungen, die denselben standort haben wie der wöchentliche start	zeigen sie mir besprechungen, die den gleichen standort wie der wöchentliche start haben	zeigen sie mir den sitzungen, die am gleichen ort wie der wöchentliche start	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string location ) ) ) )
zeigen sie mir alle drei stunden langen besprechungen, die als wichtig markiert sind	zeigen sie mir alle sitzungen drei stunden lang, die als wichtig markiert sind	zeige mir alle meetings drei stunden lang, die die als wichtig markiert sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string is_important ) ) )
an welchem ort finden die meisten meetings statt?	an welchem ort die meisten besprechungen stattfinden	was ist die position, die anzahl der sitzungen werden abgehalten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string location ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
welches treffen hat zwei standorte	welches meeting an zwei standorten besteht	welche begegnung hat zwei standorte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string <= ) ( number 2 ) ) )
zeig mir die besprechungen ab 15 uhr	zeigen sie mir meetings, die vor 15.00 uhr beginnen	zeig mir treffen ab, bevor 3pm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )
zeige mir alle treffen, die später als 10 uhr enden	zeigen sie mir alle sitzungen, die später als 10 uhr enden	zeige mir alle versammlungen, die ende später als 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
wer hat die geringste anzahl von sitzungen besucht	der die geringste anzahl von sitzungen besucht hat	wer hat an der geringsten anzahl von sitzungen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string attendee ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
zeigen sie mir alle besprechungen, an denen personen teilgenommen haben, die auch am wöchentlichen standup teilgenommen haben	zeigen sie mir alle treffen, die von personen besucht wurden, die auch an der wöchentlichen standup teilgenommen haben	zeige mir alle tagungen von menschen, die auch an den wöchentlichen standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) en.meeting.weekly_standup ) ) )
leute, die an treffen im greenberg cafe teilnehmen	leute, die an meetings im greenberg café teilnehmen	menschen, die an meetings teilnehmen greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ) )
sitzungen finden vor dem 2. oder 3. januar statt	sitzungen, die vor dem 2. januar oder 3. januar	sitzungen, die vor dem 2. januar oder 3. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) ) )
zwei teilnehmer sind an der besprechung	zwei teilnehmer sind an der besprechung	zwei teilnehmer sind bei der versammlung	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( number 2 ) ) )
zeigen sie mir alle besprechungen, bei denen es sich entweder um wöchentliche oder jährliche besprechungen handelt	zeigen sie mir alle meetings, die entweder der wöchentliche standup oder die jährliche überprüfung sind	zeigen sie mir eine treffen, die entweder die wöchentliche standup oder jährliche überprüfung	( call SW.listValue ( call SW.concat en.meeting.weekly_standup en.meeting.annual_review ) )
wo findet das meeting mit der geringsten teilnehmerzahl statt?	wie hoch ist der standort der meting mit der geringsten teilnehmerzahl	was ist der ort der begegnung mit der geringsten anzahl der teilnehmer	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string location ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
die besprechung findet zu einem späteren zeitpunkt als der wöchentlichen standupsitzung statt	besprechung findet zu einem späteren zeitpunkt als der wöchentliche standup statt	sitzung tritt am späteren datum als wöchentliche standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )
zeige alle meetings, die früher als 10 uhr beginnen	alle besprechungen anzeigen, die als 10 uhr beginnen	zeige alle sitzungen beginnen ealier als 10	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
wichtige besprechungen, die drei stunden dauern	wichtige meetings, die drei stunden lang sind	wichtige meetings, die drei stunden lang	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string is_important ) ) )
welcher ort ist das meeting, das um 10 uhr endet?	welcher ort ist die besprechung, die um 10.00 uhr endet	wo soll das treffen endet um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ) )
treffen im greenberg cafe oder in der zentrale	treffen im greenberg café oder in der zentrale	meetings bei greenberg cafe oder zentrale	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) ( call SW.concat en.location.greenberg_cafe en.location.central_office ) ) )
welche meetings sind am selben tag wie das wöchentliche standupmeeting?	welche besprechungen am selben tag wie das wöchentliche standupmeeting sind	welche begegnungen sind am selben tag wie der wöchentliche standupmeeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) )
zeig mir wichtige treffen am 2. januar	zeigen sie mir wichtige treffen am 2. januar	zeigen sie mir wichtige meetings on jan 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string is_important ) ) )
wo findet das wichtige treffen statt?	wo zu dem ort des wichtigen treffens steht	was ist die position der wichtigen sitzung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ) )
besprechungen, die zum oder vor dem wöchentlichen standupmeeting beginnen	besprechungen, die zum oder vor dem zeitpunkt des wöchentlichen standupmeetings beginnen	sitzungen, die beginnen am oder vor die zeit der wöchentlichen standupmeeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
drei oder eine stunde	drei oder eine stunde	drei oder eins stunden	( call SW.listValue ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) )
welche besprechung hat ein späteres datum als die wöchentliche besprechung?	welche besprechung zu einem späteren zeitpunkt als der wöchentliche standup hat	was treffen einem späteren zeitpunkt als wöchentliche standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )
wöchentliche standupdauer	wöchentliche standupdauer	wöchentliche standup dauer	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) )
welches treffen ist nicht länger als ein bis drei stunden	welches meeting nicht größer als ein bis drei stunden ist	was treffen ist nicht größer als ein bis drei stunden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) ) )
zeig mir alle treffen, die am oder nach dem 2. januar stattfinden	zeigen sie mir alle treffen, die am oder nach dem 2. januar stattfinden	zeige mir alle versammlungen geschehen, die am oder nach dem 2. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
ort von mindestens zwei sitzungen ist der ort	ort von mindestens zwei meetings ist der ort	lage von mindestens zwei sitzungen ist die lage	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
zeig mir alle 10uhrmeetings, an denen alice teilnimmt	zeigen sie mir alle 10uhrmeetings, an denen alice teilnimmt	zeige mir alle 10 sitzungen, die alice besucht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string attendee ) ( string = ) en.person.alice ) )
zeig mir alle besprechungsteilnehmer im greenberg cafe	zeigen sie mir alle teilnehmer der treffen im greenberg café	zeige mir alle teilnehmer der besprechungen auf der greenbergcafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ) )
welche meetings haben die gleiche startzeit wie das wöchentliche standupmeeting?	welche besprechungen die gleiche startzeit wie das wöchentliche standupmeeting haben	die sitzungen haben die gleiche startzeit wie die wöchentliche standupmeeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) )
an welchem meeting nehmen die meisten personen teil?	an welchem treffen die meisten menschen teilnehmen	die versammlung ist im beisein der meisten menschen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( string attendee ) ) )
sitzungen, die vor 10 uhr enden	sitzungen, die vor 10 uhr enden	besprechungen, ende vor 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string < ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
zeigen sie mir alle meetings, die vor dem wöchentlichen standupmeeting beginnen	zeigen sie mir alle besprechungen, die vor dem wöchentlichen standupmeeting beginnen	zeige mir alle treffen, die früher beginnen als die wöchentliche standupmeeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
welche besprechung hat den späteren termin	welche besprechung das spätere datum hat	was treffen hat, die später	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string date ) ) ) )
besprechungen, die am oder vor dem wöchentlichen standupmeeting abgehalten wurden	sitzungen, die auf oder vor dem wöchentlichen standupmeeting stattfinden	sitzungen, die am oder vor dem wöchentlichen standupmeeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )
zeige mir treffen vor dem wöchentlichen aufstehen	zeigen sie mir meetings vor dem wöchentlichen standup	zeigen sie mir treffen, bevor die wöchentlichen standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )
meeting mit der längsten endzeit	treffen mit der längsten endzeit	treffen die längste ende der zeit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string end_time ) ) ) )
zeigen sie mir alle besprechungen, die zur selben zeit oder früher als die wöchentliche besprechung enden	zeigen sie mir alle besprechungen, die gleichzeitig oder früher als das wöchentliche standupmeeting enden	zeige mir alle besprechungen, die ende in der gleichen zeit oder früher als die wöchentliche standupmeeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
zeig mir alle treffen, an denen alice um 10 uhr teilgenommen hat	zeigen sie mir alle sitzungen, die alice hat, dass ende um 10 uhr besucht	zeige mir alle versammlungen, die alice besucht hat, das ende um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string attendee ) ( string = ) en.person.alice ) )
wie viele besprechungen sind geplant?	wie viele besprechungen geplant sind	wie viele sitzungen sind geplant	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
zeigen sie mir alle besprechungen, die länger als drei stunden dauern	zeigen sie mir alle besprechungen, die länger als drei stunden dauern	zeige mir alle treffen, die länger als drei stunden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) ) )
welche besprechung hat eine endzeit, die größer ist als der wöchentliche standup	welches meeting eine endzeit hat, die größer ist als der wöchentliche standup	was treffen hat ein endezeit größer als wöchentliche standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
welches treffen endet um 10 uhr, an dem alice teilnimmt	welche sitzung um 10 uhr endet, an der alice teilnimmt	was die sitzung endet um 10 uhr in die alice besucht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string attendee ) ( string = ) en.person.alice ) )
zeigen sie mir alle besprechungen, die spätestens um 10 uhr beginnen	zeigen sie mir alle besprechungen, die spätestens um 10 uhr beginnen	zeige mir alle besprechungen, anfang nicht später als 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
was für ein wichtiges treffen hat eine länge von drei stunden	welches wichtige treffen hat eine länge von drei stunden	was wichtiges meeting hat eine länge von drei stunden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string is_important ) ) )
welche besprechung beginnt früher als 10 uhr	welche besprechung vor 10 uhr beginnt	was treffen beginnt früher als 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
welcher besprechungstermin liegt vor dem 2. oder 3. januar?	welches besprechungsdatum vor dem 2. januar oder 3. januar liegt	was treffen datum ist früher als jan 2 oder 3.	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) ) )
zeigen sie mir alle besprechungen, die nicht früher als das wöchentliche standupmeeting beginnen	zeigen sie mir alle besprechungen, die frühestens beim wöchentlichen standupmeeting beginnen	zeige mir alle treffen, die nicht früher als die wöchentliche standupmeeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )
zeigen sie mir alle meetings, die nach dem start des wöchentlichen standupmeetings enden	zeigen sie mir alle besprechungen, die nach beginn des wöchentlichen standupmeetings enden	zeige mir alle treffen, die nach ende der wöchentliche standupmeeting beginnt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
wie lautet die nummer des treffens?	wie lautet die nummer der besprechung	was ist die nummer der sitzung	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
besprechungen mit der letzten endzeit	besprechungen mit der letzten endzeit	treffen mit den neuesten endzeit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string end_time ) ) ) )
orte der sitzungen, an denen alice teilnahm	tagungsorte, an denen alice teilnahm	standorte der tagungen von alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ) )
dreistündiges treffen in greenberg	dreistündiges treffen am greenberg	drei stunden lange sitzung, bei greenberg	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string length ) ( string = ) ( number 3 en.hour ) ) )
wichtiges treffen mit alice als teilnehmerin	wichtige besprechung mit alice als teilnehmer	treffen mit alice als teilnehmer	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string attendee ) ( string = ) en.person.alice ) )
treffen von geringster dauer	treffen kleinster dauer	treffen der kleinsten dauer	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string end_time ) ) ) )
zeig mir treffen am 2. januar mit alice	zeigen sie mir meetings am 2. januar mit alice	zeigen sie mir, treffen auf jan 2 mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
person, die an den wenigsten sitzungen teilnimmt	person, die an den wenigsten sitzungen teilnimmt	person beachtet, dass die wenigsten treffen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string attendee ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
2. oder 3. januar	2. oder 3. januar	januar 2. oder 3.	( call SW.listValue ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) )
zeig mir die länge des wöchentlichen standups	zeigen sie mir die länge des wöchentlichen standups	zeigen sie mir die länge der wöchentlichen standup	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) )
zeig mir alle treffen, die am oder vor dem 2. januar stattfinden	zeigen sie mir alle sitzungen, die am oder vor dem 2. januar stattfinden	zeige mir alle sitzungen geschieht am oder vor dem 2. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
zeigen sie mir alle als wichtig gekennzeichneten besprechungen im greenberg cafe	zeigen sie mir alle treffen, die als wichtig markiert sind, wenn sie im greenberg café stattfinden	zeige mir alle sitzungen als wichtig markiert passiert greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )
das treffen beginnt um 10 uhr im greenberg cafe	treffen, das um 10 uhr im greenberg café beginnt	treffen beginnt um 10 uhr im cafe greenberg	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
besprechung, die um 10 uhr oder früher beginnt	besprechung, die um 10 uhr oder früher beginnt	treffen beginnt um 10 uhr oder früher	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
besprechungen, die drei stunden oder eine stunde dauern	sitzungen, die drei stunden lang oder eine stunde lang sind	sitzungen, die drei stunden lang oder eine stunde lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) )
ort, an dem mehr als zwei sitzungen abgehalten werden	ort, an dem mehr als zwei sitzungen stattfinden	ort, wo mehr als zwei sitzungen abgehalten werden	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
treffen mit der größten anzahl von standorten	treffen mit der größten anzahl von standorten	treffen mit der größten anzahl von standorten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( string location ) ) )
welches treffen findet spätestens am 2. januar statt?	welches treffen spätestens am 2. januar stattfinden wird	was treffen findet nicht später als jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
wo finden die treffen statt, die um 10 uhr enden?	wo enden die sitzungen um 10.00 uhr	wo sind die treffen endet um 10 uhr statt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ) )
welches treffen hat eine startzeit um 10 uhr im greenberg cafe	welches treffen um 10 uhr im greenberg café beginnt	was sitzung hat eine startzeit um 10 uhr bei greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )
zeigen sie mir besprechungen, die sich den standort mit dem wöchentlichen standupmeeting teilen	zeigen sie mir besprechungen, die den ort mit dem wöchentlichen standupmeeting teilen	showmemeetings, die freigabe mit den wöchentlichen standupmeeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) en.meeting.weekly_standup ) ) )
was ist die durchschnittliche dauer einer besprechung?	was ist die durchschnittliche dauer eines meetings	was ist die durchschnittliche länge einer sitzung	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ) ) )
wann endet das wöchentliche standupmeeting?	zu welcher zeit endet das wöchentliche standupmeeting	welche zeit ist die wöchentliche standupmeeting ende	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) )
welches treffen ist vor dem wöchentlichen aufstehen	welches meeting vor dem wöchentlichen standup ist	was treffen ist vor dem wöchentlichen standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )
zeigen sie mir alle besprechungen im greenber cafe, die drei stunden dauern	zeigen sie mir alle treffen im greenber café, das drei stunden dauern wird	zeigen sie mir in allen sitzungen greenber cafe, die ausgeführt wird, drei stunden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )
welche besprechung ist am oder vor dem 2. oder 3. januar	welches treffen am oder vor dem 2. oder 3. januar ist	was treffen ist am oder vor jan 2 oder 3.	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) ) )
welches meeting hat die wenigsten geplanten orte?	welches meeting die wenigsten geplanten standorte hat	das treffen hat die wenigsten geplante standorte	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( string location ) ) )
wöchentliche startzeit	wöchentliche standupstartzeit	wöchentliche standupstartzeit	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) )
besprechungen, die höchstens drei stunden dauern	sitzungen, die drei stunden oder weniger dauern	sitzungen, die drei stunden oder weniger	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.hour ) ) ) )
sitzungen, die nicht drei stunden lang sind	nicht drei stunden dauernde besprechungen	sitzungen, die nicht drei stunden lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string ! = ) ( number 3 en.hour ) ) )
welches meeting hat die länge der meisten wöchentlichen startupmeetings	welches meeting die dauer der meisten wöchentlichen startupmeetings hat	was treffen hat die länge die meisten wöchentlichen startupmeetings	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) ) ) )
zeigen sie mir besprechungen, die beginnen, bevor die wöchentliche besprechung endet	zeigen sie mir besprechungen, die vor dem ende der wöchentlichen standupbesprechung beginnen	zeigen sie mir den sitzungen, die vor dem starten der wöchentlichen standupmeeting endet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
wo befindet sich das wöchentliche standupmeeting?	wo befindet sich das wöchentliche standupmeeting	wo ist der wöchentliche standupmeeting gelegen	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string location ) ) )
planen sie ein meeting für 10 oder 15 uhr	planen eines meetings für 10.00 oder 15.00 uhr	vereinbaren sie einen termin für 10 uhr morgens oder 3 uhr	( call SW.listValue ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) )
zeigen sie mir alle besprechungen, die entweder wöchentlich oder jährlich stattfinden	zeigen sie mir alle meetings, die entweder wöchentlicher standup oder jahresrückblick sind	zeige mir alle treffen, die entweder wöchentlich standuppaddle oder jährliche überprüfung	( call SW.listValue ( call SW.concat en.meeting.weekly_standup en.meeting.annual_review ) )
welches treffen ist nicht am 2. januar	welche sitzung ist nicht am 2. januar	was treffen ist nicht am jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string ! = ) ( date 2015 1 2 ) ) )
besprechungen, die nach 10 uhr beginnen	besprechungen, die nach 10 uhr beginnen	sitzungen, die nach 10 uhr starten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string > ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
besprechungen, an denen zwei oder mehr personen teilnehmen	treffen, an denen zwei oder mehr personen teilnehmen	tagungen von zwei oder mehr personen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string >= ) ( number 2 ) ) )
ist dieses treffen am 2. januar oder 3. januar	ist dieses treffen am 2. januar oder 3. januar	ist dieses treffen am 2. januar oder 3. januar	( call SW.listValue ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) )
besprechungen, die um 10 oder 15 uhr beginnen	treffen, die um 10.00 oder 15.00 uhr beginnen	die sitzungen beginnen um 10 uhr oder 3 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) )
personen, die an dreistündigen besprechungen teilnehmen	personen, die an dreistündigen besprechungen teilnehmen	menschen, die an drei stunden lange sitzungen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ) )
welche person nimmt an einem wichtigen meeting teil?	welche person an einer wichtigen sitzung teilnimmt	welche person ist die teilnahme an einer wichtigen sitzung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ) )
zeig mir die treffen, die in dem monat aktuell sind	zeigen sie mir die treffen, die zuletzt im monat sind	zeigen sie mir den sitzungen, die sind spätestens im monat	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string date ) ) ) )
besuche mich für ein drei stunden langes treffen	finden sie mir ein treffen, das drei stunden lang ist	finden sie mich ein treffen, das drei stunden lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )
welche person besucht wöchentliche standup	welche person an wöchentlichem standup teilnimmt	welche person ist die teilnahme an wöchentlich standup	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) en.meeting.weekly_standup ) ( call SW.reverse ( string attendee ) ) ( string = ) en.meeting.weekly_standup ) )
besprechungen mit dem frühesten startzeitpunkt	besprechungen mit der frühesten startzeit	begegnungen mit der frühesten startzeit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string start_time ) ) ) )
wo findet die wöchentliche inbetriebnahme statt?	was ist der standort des wöchentlichen startups	was ist die position der wöchentliche start	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) en.meeting.weekly_standup ) ( call SW.reverse ( string location ) ) ( string = ) en.meeting.weekly_standup ) )
wie lange dauert dieses treffen?	wie lange dauert dieses treffen	wie lange wird dieses treffen	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ) ) )
zeigen sie mir alle besprechungen, die nicht später als 10 oder 15 uhr beginnen	zeigen sie mir alle treffen, die spätestens um 10.00 oder 15.00 uhr beginnen	zeige mir alle treffen anfang nicht später als 10 uhr morgens oder 3 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )
was für ein wichtiges treffen ist, an dem alice teilnimmt	was wichtig ist alice teilnahme	was wichtig treffen ist alice besucht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string is_important ) ) )
zeig mir alle treffen, die nicht im greenberg cafe stattfinden	zeigen sie mir alle treffen, die nicht im greenberg café stattfinden	zeige mir alle begegnungen nicht passiert greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string ! = ) en.location.greenberg_cafe ) )
wer nimmt an den meisten meetings teil?	der an den meisten meetings teilnimmt	wer nimmt an den meisten sitzungen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string attendee ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
welches treffen war kürzer oder länger als drei stunden	welches meeting kürzer oder länger als drei stunden war	was treffen war kürzer oder länger als drei stunden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string ! = ) ( number 3 en.hour ) ) )
zeigen sie mir alle dreistündigen besprechungen, die um 10 uhr enden	zeigen sie mir alle dreistündigen besprechungen, die um 10 uhr enden	zeigen sie mir alle drei stundensitzungen, ende um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )
zeigen sie mir alle besprechungen, die um 10 uhr beginnen und alle besprechungen, die um 10 uhr enden	zeigen sie mir alle sitzungen ab 10 uhr und alle treffen, die um 10 uhr enden	zeige mir alle meetings ab 10 uhr und alle treffen endet um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )
welche wichtigen treffen sind für den 2. januar geplant?	welche wichtigen treffen für den 2. januar angesetzt sind	was wichtig treffen sind geplant für jan 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
zeig mir treffen am 2. januar im greenberg cafe	zeigen sie mir treffen am 2. januar im greenberg café	zeigen sie mir, treffen auf jan 2 in greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )
besprechungen, die nicht um 10 uhr beginnen	besprechungen, die nicht um 10 uhr beginnen	sitzungen, die nicht um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string ! = ) ( time 10 0 ) ) )
wer besucht wöchentlich standup	die wöchentlichestand besucht	wer besucht wöchentlich standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) en.meeting.weekly_standup ) )
dauer des treffens	dauer der sitzung	dauer des treffens	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ) ) )
zeig mir alle termine ab 10 uhr	zeigen sie mir alle treffen ab 10 uhr	zeige mir alle meetings ab 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
zeig mir wichtige treffen mit alice	zeigen sie mir wichtige treffen mit alice	zeigen sie mir wichtige treffen mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string attendee ) ( string = ) en.person.alice ) )
zeigen sie mir die meetings, die später als das wöchentliche standupmeeting beginnen	zeigen sie mir die besprechungen, die später als die wöchentliche standupbesprechung beginnen	zeigen sie mir die treffen, die später starten, als der wöchentliche standupmeeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
zeige mir alle besprechungen, die für 3 stunden angesetzt sind	zeigen sie mir alle besprechungen, die für 3 stunden geplant sind	zeigen sie mir, alle sitzungen zu 3 stunden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.hour ) ) ) )
welche besprechungen haben das gleiche datum wie die wöchentliche standupbesprechung?	welche besprechungen das gleiche datum wie die wöchentliche standupbesprechung haben	was tagungen haben das gleiche datum wie die wöchentliche standupmeeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) )
wie lang ist das treffen?	wie lange ist die besprechung	was ist die länge der sitzung	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ) ) )
welche person nimmt an dem treffen im greenberg cafe teil?	welche person an der sitzung im greenberg café teilnimmt	welche person ist die teilnahme an der sitzung bei greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ) )
zeigen sie mir alle besprechungen, die an tagen vor dem wöchentlichen standup stattfinden	zeigen sie mir alle meetings, die an tagen vor dem wöchentlichen standup stattfinden	zeige mir alle sitzungen geschieht am tage vor der wöchentlichen standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )
wer nimmt an der wöchentlichen standup teil?	der an wöchentlichem standup teilnimmt	wer ist die teilnahme an wöchentlich standup	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string attendee ) ) )
zeig mir alle treffen am 2. januar, die auch 3 stunden lang sind	zeigen sie mir alle treffen am 2. januar, die auch 3 stunden lang sind	zeige mir alle sitzungen am 2. januar auch 3 stunden lang	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
zeige mir alle treffen, die für drei stunden angesetzt sind	zeigen sie mir alle besprechungen für drei stunden geplant	zeige mir alle sitzungen für drei hourse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )
personen, die an mehr als zwei sitzungen teilnehmen	personen, die an mehr als zwei sitzungen teilnehmen	menschen, die an mehr als zwei sitzungen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
welche besprechung hat eine startzeit vor dem wöchentlichen standup	welches meeting eine startzeit vor dem wöchentlichen standup hat	was sitzung hat eine startzeit früher als die wöchentliche standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
was für ein treffen, das um 10 uhr endet, ist alice, die anwesend ist	welche besprechung um 10 uhr endet, ist alice attending	was die sitzung endet um 10 uhr ist alice besucht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string end_time ) ( string = ) ( time 10 0 ) ) )
die startzeit des meetings liegt nach der startzeit des wöchentlichen standups	startzeit der besprechung ist nach der startzeit des wöchentlichen standups	beginn der versammlung ist nach dem start uhrzeit der wöchentlichen standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
treffen am 2. januar mit alice als teilnehmer	treffen am 2. januar mit alice als teilnehmer	sitzung am 2. jan mit alice als teilnehmer	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
zeige mir alle besprechungen, die um oder vor 10 uhr beginnen	zeigen sie mir alle besprechungen ab oder vor 10 uhr	zeige mir alle termine beginnend am oder vor 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
zeigen sie mir alle als wichtig gekennzeichneten besprechungen, die um 10 uhr enden	zeigen sie mir alle treffen markiert wichtig, die um 10 uhr enden	zeige mir alle sitzungen als wichtig markiert, das ende um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string is_important ) ) )
sitzungen am 2. januar, die drei stunden dauern	treffen am 2. januar, die drei stunden lang sind	treffen am 2. januar, die drei stunden lang	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
wie lautet die nummer des standorts?	wie lautet die nummer des standorts	was ist die nummer von der lage	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ) )
welche besprechung hat die gleiche länge wie der wöchentliche start	welches meeting hat die gleiche länge wie der wöchentliche start	was treffen hat die gleiche länge wie der wöchentliche start	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) ) ) )
zeig mir treffen nicht im greenberg cafe	zeigen sie mir treffen nicht im greenberg café	zeigen sie mir den sitzungen nicht bei greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string ! = ) en.location.greenberg_cafe ) )
an wichtigen treffen nimmt alice teil	wichtige besprechung alice ist anwesend	wichtige treffen alice besucht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string is_important ) ) )
dreistündiges treffen	dreistündiges treffen	dreistundensitzung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )
zeige mir treffen ab 10 uhr	zeigen sie mir meetings, die vor 10 uhr beginnen	zeigen sie mir treffen, beginnend vor 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
wichtige treffen im greenberg cafe	wichtige treffen im greenberg café	wichtige meetings an greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )
zeig mir alle treffen am 2. januar ab 10 uhr	zeigen sie mir alle treffen am 2. januar ab 10 uhr	zeigen sie mir eine sitzungen am 2. januar ab 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
wer nimmt an der sitzung am 2. januar teil?	der an der sitzung am 2. januar teilnimmt	wer ist die teilnahme an der sitzung am jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ) )
wann beginnt das wöchentliche standupmeeting?	zu welcher zeit beginnt das wöchentliche standupmeeting	welche zeit ist die wöchentliche standupmeeting starten	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) )
sitzungen am oder nach dem 2. januar	sitzungen, die am oder nach dem 2. januar	sitzungen, die am oder nach dem 2. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
zeigen sie mir alle besprechungen, die am selben ort stattfinden wie die wöchentliche sitzung	zeigen sie mir alle meetings, die am selben ort wie der wöchentliche standup stattfinden	zeige mir alle sitzungen geschieht in der gleichen lage wie die wöchentliche standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) en.meeting.weekly_standup ) ) )
zeigen sie mir alle besprechungen, die vor 10 oder 15 uhr beginnen	zeigen sie mir alle sitzungen, die vor 10 uhr oder 15 uhr beginnen	zeige mir alle sitzungen beginnen früher als 10 uhr morgens oder 3 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )
welches treffen endet um 10 oder 15 uhr	welches treffen um 10.00 oder 15.00 uhr endet	was die sitzung endet um 10 uhr oder 3 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )
zeigen sie mir die leute, die an den meisten meetings teilnehmen	zeigen sie mir die leute, die die meisten treffen besuchen	zeigen sie mir die menschen, die an den meisten sitzungen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string attendee ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
sitzung, die am tag der ersten wöchentlichen standup ist	treffen, das sich am tag des ersten wöchentlichen standups befindet	treffen, das ist auf das datum der ersten weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )
wie lautet die nummer der person?	wie lautet die nummer der person	was ist die nummer von der person	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
wer besucht das greenberg cafe für das treffen	der das greenberg café für das treffen besucht	wer ist die teilnahme an der greenbergcafé für das treffen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ) )
die sitzung beginnt um 700 uhr und endet um 000 uhr	sitzung beginnt um 700 uhr und endet um 000 uhr	treffen beginnt um 700 uhr und endet um 000 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )
welche besprechung hat eine startzeit bis spätestens 10.00 uhr oder 15.00 uhr	welches meeting eine startzeit bis spätestens 10.00 oder 15.00 uhr hat	was sitzung hat eine startzeit nicht später als 10 uhr oder 3 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )
wer nimmt an der 10uhrsitzung teil?	der an der 10uhrsitzung teilnimmt	wer ist die teilnahme an den 10uhrmeeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ) )
zeig mir treffen vor dem 2. januar	zeigen sie mir meetings vor dem 2. januar	zeigen sie mir, treffen vor dem 2. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
zeig mir alle treffen, die am 2. oder 3. januar stattfinden	zeigen sie mir alle treffen, die stattfinden jan 2 oder jan 3	zeige mir alle metings, die stattfinden, jan 2 oder 3 jan	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) )
zeigen sie mir alle meetings, die einen teilnehmer mit dem wöchentlichen standupmeeting teilen	zeigen sie mir alle besprechungen, die einen teilnehmer mit dem wöchentlichen standupmeeting teilen	zeige mir alle treffen, die teilen sich ein teilnehmer mit der wöchentlichen standupmeeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) en.meeting.weekly_standup ) ) )
zeige mir alle meetings, die am 2. januar um 10 uhr beginnen	zeigen sie mir alle meetings, die um 10 uhr am 2. januar beginnen	zeige mir alle sitzungen beginnen um 10 uhr am jan 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
zeigen sie mir alle besprechungen, die früher enden, als der wöchentliche standup beginnt	zeigen sie mir alle besprechungen, die vor beginn der wöchentlichen standupsitzungen enden	zeige mir alle versammlungen, die ende früher als die wöchentliche standup beginnt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
an welchem treffen ist alice um 10 uhr teilzunehmen	welches treffen ist alice teilnahme um 10 uhr	was ist die meetingalicebesuch um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
besprechungen mit der spätesten startzeit	besprechungen mit der letzten startzeit	treffen mit der neuesten startzeit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string start_time ) ) ) )
zeig mir alle treffen, an denen alice teilgenommen hat und die im greenberg cafe stattfinden	zeigen sie mir alle treffen, die alice besucht hat und im greenberg café stattfinden	zeigen sie mir eine treffen, die alice besucht hat und nehmen sie platz im cafe greenberg	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string attendee ) ( string = ) en.person.alice ) )
zeigen sie mir alle besprechungen, die um 10 uhr enden und um 10 uhr beginnen	zeigen sie mir alle meetings, die um 10 uhr enden und um 10 uhr beginnen	zeige mir alle besprechungen, ende um 10 uhr und starten um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
welches treffen hat ein datum vom 2. januar und hat alice anwesend	welches meeting ein datum für den 2. januar hat und an dem alice teilgenommen hat	was treffen hat date jan 2 und alice besuchen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string attendee ) ( string = ) en.person.alice ) )
zeig mir treffen im greenberg cafe	zeigen sie mir treffen im greenberg café	zeigen sie mir, treffen bei greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string location ) ( string = ) en.location.greenberg_cafe ) )
welches meeting hat die meisten standorte?	welche besprechung die meisten standorte hat	was treffen hat die meisten anzahl von standorten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( string location ) ) )
treffen am ort der wöchentlichen standup	treffen am ort des wöchentlichen standup	treffen in lage der wöchentlichen standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string location ) ) ) )
besprechung, die um 10 uhr beginnt und endet	besprechung, die um 10 uhr beginnt und endet	sitzung beginnt und endet um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )
zeig mir die treffen mit den letzten endzeiten	zeigen sie mir die treffen mit den neuesten endzeiten	zeigen sie mir die begegnungen mit den neuesten endzeiten	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string end_time ) ) ) )
welche besprechung endet früher als 10 oder 15 uhr	welches treffen vor 10.00 oder 15.00 uhr endet	was treffen endet früher als 10 uhr morgens oder 3 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )
zeigen sie mir besprechungen, die vor dem wöchentlichen standup enden	zeigen sie mir meetings, die vor dem wöchentlichen standup enden	zeigen sie mir den sitzungen, die vor ende der wöchentlichen standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
welches treffen hat die längste zeit	welches meeting die längste zeit hat	was treffen hat die längste zeit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string end_time ) ) ) )
besprechungen, an denen personen teilnehmen, die auch an der wöchentlichen besprechung teilnehmen	treffen, an denen personen teilnehmen, die auch an der wöchentlichen standupsitzung teilnehmen	sitzungen, die besucht werden von menschen, die auch an den wöchentlichen standupmeeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) en.meeting.weekly_standup ) ) )
an welchem wichtigen treffen hat alice teilgenommen?	welche wichtige sitzung hat alice teilnahme	was wichtiges meeting hat alice die teilnahme an	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string attendee ) ( string = ) en.person.alice ) )
welche meetings finden im greenberg cafe statt?	welche treffen im greenberg café stattfinden	die sitzungen sind in greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )
zeigen sie mir alle besprechungen, die am selben ort stattgefunden haben wie die geringste anzahl von besprechungen	zeigen sie mir alle besprechungen, die am selben ort wie die geringste anzahl von besprechungen stattgefunden haben	zeige mir alle treffen, die zufällig am gleichen ort wie der geringsten anzahl von sitzungen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string location ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
die sitzung endet mindestens zum beginn der wöchentlichen zusammenfassung	besprechung endet mindestens zur startzeit der wöchentlichen roundup	sitzung endet spätestens beim start der wöchentlichen roundup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
zeigen sie mir alle besprechungen am selben tag wie die wöchentliche besprechung	zeigen sie mir alle besprechungen am selben tag wie das wöchentliche standupmeeting	zeige mir alle treffen am gleichen tag wie die wöchentliche standupmeeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) )
welches treffen endete nach 10 uhr	welches treffen nach 10 uhr endete	was treffen endete nach 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
welche sitzungen sind von bedeutung	welche sitzungen von bedeutung sind	die sitzungen sind deutliche	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) )
zeigen sie mir alle besprechungen, die später als 10 oder 15 uhr stattfinden	zeigen sie mir alle treffen, die später als 10.00 oder 15.00 uhr stattfinden	zeige mir alle sitzungen geschieht später als 10 uhr morgens oder 3 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )
zeigen sie mir alle personen, die an dem wöchentlichen standupmeeting oder an der jährlichen überprüfung teilnehmen	zeigen sie mir alle personen, die entweder am wöchentlichen standupmeeting oder der jahresüberprüfung teilnehmen	zeige mir alle personen teilnehmen, die entweder die wöchentliche standupmeeting oder jährliche überprüfung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.concat en.meeting.weekly_standup en.meeting.annual_review ) ) )
zeig mir treffen im greenberg cafe am 2. januar	zeigen sie mir treffen im greenberg café am 2. januar	zeigen sie mir, treffen bei greenberg cafe am jan 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
zeigen sie mir die standorte mit den meisten besprechungen	zeigen sie mir die orte, die die meisten besprechungen haben	zeigen sie mir die orte, die die meisten anzahl von sitzungen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string location ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
die besprechung beginnt nach 10 uhr	besprechung beginnt später als 10 uhr	sitzung beginnt später als 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string > ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
welche besprechung ist für den spätesten termin geplant?	welche besprechung zum letzten datum geplant ist	die tagung soll auf das aktuelle datum	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string date ) ) ) )
sitzungen, die drei stunden dauern	sitzungen, die drei stunden lang sind	sitzungen, die drei stunden lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )
zeigen sie mir alle drei stunden dauernden besprechungen im greenbergcafé	zeigen sie mir alle treffen drei stunden lang im greenberg café	zeige mir alle meetings drei stunden lang das geschehen bei der greenbergcafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string length ) ( string = ) ( number 3 en.hour ) ) )
welcher ort ist nicht dasselbe wie wöchentliches aufstehen?	welcher standort nicht mit dem wöchentlichen standup identisch ist	welche position ist nicht die gleiche wie die wöchentliche standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string ! = ) en.meeting.weekly_standup ) )
die sitzung beginnt am 2. januar um 10 uhr	sitzung, die am 2. januar um 10 uhr beginnt	treffen beginnt um 10 uhr am jan 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
treffen am 2. januar, an denen alice teilnimmt	treffen am 2. januar, an denen alice teilnimmt	treffen am 2. januar, die alice besucht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string attendee ) ( string = ) en.person.alice ) )
welches treffen hat einen ort im greenberg cafe und beginnt um 10 uhr	welches treffen hat einen standort im greenberg café und beginnt um 10 uhr	welche begegnung hat eine stelle, an greenberg cafe und beginnt um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
welche besprechungen sollen um 10 uhr enden?	welche sitzungen um 10.00 uhr enden sollen	die sitzungen sind geplant, ende um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )
zeigen sie mir besprechungen, die um 10 uhr beginnen und enden	zeigen sie mir meetings, die um 10 uhr beginnen und enden	zeigen sie mir die sitzungen beginnen und enden um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
wo findet das treffen am 2. januar statt?	was ist der ort des jan 2 treffens	was ist die position der jan 2 treffen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ) )
welches treffen beginnt um 10 uhr am 2. januar	welches treffen beginnt um 10 uhr am 2. januar	was treffen beginnt um 10 uhr am jan 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
wichtiges treffen	wichtiges treffen	wichtige sitzung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) )
besprechungen, die nach 10 uhr oder nach 15 uhr beginnen	besprechungen, die nach 10.00 uhr oder nach 15.00 uhr beginnen	die sitzungen beginnen nach 10 uhr oder nach 3 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )
meetings, die später als das wöchentliche standupmeeting enden	besprechungen, die später als die wöchentliche standupbesprechung enden	besprechungen, die ende später als der wöchentliche standupmeeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
teilnehmer an besprechungen, die um 10 uhr beginnen	personen, die an besprechungen teilnehmen, die um 10 uhr beginnen	menschen, die teilnahme an sitzungen beginnen um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ) )
sitzung, die um 1000 uhr beginnt	treffen, das um 1000 uhr beginnt	sitzung die beginnt bei 1000 bin	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
was ist die durchschnittliche länge aller sitzungen	was ist die durchschnittliche länge aller sitzungen	was ist die durchschnittliche länge aller sitzungen	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ) ) )
welche besprechung hat zwei oder weniger teilnehmer?	welche besprechung zwei oder weniger teilnehmer hat	welche begegnung hat zwei teilnehmern oder weniger	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string <= ) ( number 2 ) ) )
zeig mir alle treffen, die kürzer als drei stunden sind	zeigen sie mir alle besprechungen kürzer als drei stunden	zeige mir alle sitzungen, die kürzer als drei stunden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.hour ) ) ) )
welche besprechung endet zu beginn oder nach beginn des wöchentlichen standups?	welche besprechung zu beginn oder nach dem start des wöchentlichen standups endet	was treffen endet mit dem start oder nach dem start der wöchentlichen standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
welche person hat wöchentlich am standup teilgenommen?	welche person an wöchentlichem standup teilgenommen hat	welche person besucht wöchentlich standup	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) en.meeting.weekly_standup ) ( call SW.reverse ( string attendee ) ) ( string = ) en.meeting.weekly_standup ) )
welche besprechung hat eine endzeit von 10 uhr am 2. januar	welches meeting eine endzeit von 10 uhr am 2. januar hat	was treffen hat ein ende der zeit von 10 uhr auf jan2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
sitzungen, die nicht am 2. januar sind	sitzungen, die nicht am 2. januar stattfinden	sitzungen, die nicht am 2. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string ! = ) ( date 2015 1 2 ) ) )
besprechungen, die drei stunden dauern und um 10 uhr morgens enden	treffen, die drei stunden lang sind und um 10 uhr enden	sitzungen, die drei stunden lang und enden um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )
welche besprechung endet spätestens um 10 oder 15 uhr	welches treffen endet nicht später als 10.00 oder 15.00 uhr	was treffen endet nicht später als 10 uhr oder 3 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )
dreistündige besprechungen, die um 10 uhr beginnen	drei stunden dauernde besprechungen, die um 10 uhr beginnen	sitzungen, die drei stunden lang, beginnen um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )
treffen im greenberg cafe, das um 10 uhr endet	treffen im greenberg café, das um 10 uhr endet	treffen bei greenberg café endet um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )
welches treffen ist mindestens drei stunden	welches meeting mindestens drei stunden dauert	was sitzung ist mindestens drei stunden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.hour ) ) ) )
wo findet das wichtige treffen statt?	wo ist das wichtige treffen, das	wo ist die wichtige sitzung statt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ) )
die startzeit des meetings ist am ende des wöchentlichen standups	welche sitzungsstartzeit am ende des wöchentlichen standups ist	was treffen die startzeit ist am ende der wöchentlichen standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
welche meetings werden so viel zeit in anspruch nehmen wie wöchentliche standups?	welche meetings genauso viel zeit in anspruch nehmen wie wöchentliche standup	die sitzungen dauern wird, wie viel zeit sie wöchentlich standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) ) ) )
besprechung, die vor der startzeit des wöchentlichen standups beginnt	treffen, das vor der startzeit des wöchentlichen standups beginnt	meeting beginnt vor dem start der wöchentlichen standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
zeig mir alle treffen, an denen alice teilnimmt	zeige mir alle besprechungen, an denen alice teilnimmt	zeige mir alle treffen, die alice besucht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string attendee ) ( string = ) en.person.alice ) )
das treffen dauert mindestens 3 stunden	sitzung ist mindestens 3 stunden lang	treffen mindestens 3 stunden lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.hour ) ) ) )
die besprechung beginnt spätestens zur startzeit des wöchentlichen standups	besprechung beginnt spätestens mit der startzeit des wöchentlichen standups	sitzung beginnt nicht später als zu beginn der wöchentlichen standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
sitzungen, an denen die geringste anzahl von personen teilnahm	treffen, an denen die kleinste anzahl von personen teilnahm	tagungen durch die kleinste zahl von menschen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( string attendee ) ) )
der ort ist derselbe wie der ort eines dreistündigen meetings	standort ist der gleiche wie der ort von drei stunden lange sitzung	standort ist derselbe wie der standort der drei stunden lange sitzung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ) )
sitzungen finden vor dem 2. januar statt	sitzungen, die vor dem 2. januar	sitzungen, die vor dem 2. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
zeigen sie mir alle teilnehmer von besprechungen, die um 10 uhr enden	zeigen sie mir alle teilnehmer von meetings, die um 10 uhr enden	zeige mir alle teilnehmer der treffen endet um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ) )
zeigen sie mir besprechungen, die beginnen, bevor das wöchentliche aufstehen endet	zeigen sie mir meetings, die vor dem ende des wöchentlichen standupauslaufs beginnen	zeigen sie mir den sitzungen, die vor dem starten der wöchentlichen standup endet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
welches treffen ist am 2. januar um 10 uhr	welches treffen ist am 2. januar um 10 uhr	was treffen ist am jan 2 um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
person, die an einem wichtigen treffen teilnimmt	person, die an wichtigen besprechungen teilnimmt	person, die beachtet wichtige sitzung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ) )
zeig mir alle meetings, die zur gleichen zeit beginnen, wenn die wöchentliche standupphase endet	zeigen sie mir alle meetings, die gleichzeitig mit dem wöchentlichen standupende beginnen	zeige mir alle sitzungen beginnen zur gleichen zeit die wöchentlichen standup endet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) )
welches treffen ist nicht drei stunden	welches meeting nicht drei stunden dauert	was treffen ist nicht drei stunden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string ! = ) ( number 3 en.hour ) ) )
person, die an den meisten sitzungen teilnimmt	person, die an den meisten sitzungen teilnimmt	person, die an den meisten sitzungen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string attendee ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
besprechung, die zum endzeitpunkt des wöchentlichen standups endet	besprechung, die zum endzeitpunkt des wöchentlichen standups endet	treffen endet am ende wöchentlichen standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) )
wo finden wöchentliche standups und jährliche überprüfungen statt?	wo wird wöchentlich standup und jährliche überprüfung stattfinden	wo wird wöchentlich standup und jährliche überprüfung stattfinden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.concat en.meeting.weekly_standup en.meeting.annual_review ) ) )
zeig mir dreistündige treffen am 2. januar	zeigen sie mir dreistündige treffen am 2. januar	zeigen sie mir drei stundensitzungen am jan 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
besprechungen, die um oder vor 10 uhr beginnen	besprechungen, die um oder vor 10 uhr beginnen	sitzungen, die beginnen am oder vor 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
was für ein treffen ist im greenberg cafe und alice ist anwesend	welches treffen ist im greenberg café und alice ist anwesend	was treffen ist bei greenberg cafe und alice ist auch dabei	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string attendee ) ( string = ) en.person.alice ) )
welches treffen endet am ehesten am tag	welche besprechung am schönsten am tag endet	was treffen endet ealiest in den tag	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string end_time ) ) ) )
ort unterscheidet sich vom ort der wöchentlichen standup	standort anders als standort des wöchentlichen standup	anderen ort von der lage der wöchentlichen standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string ! = ) en.meeting.weekly_standup ) )
zeig mir alle besprechungen, die vor 10 uhr enden	zeigen sie mir alle besprechungen, die vor 10 uhr enden	zeige mir alle treffen ende vor 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string < ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
sitzungen an zwei oder weniger orten	treffen an zwei oder weniger orten	sitzungen, die in zwei oder weniger standorte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string <= ) ( number 2 ) ) )
welche besprechungen sind wichtig und beginnen um 10 uhr	welche treffen imporant sind und um 10 uhr beginnen	welche meetings sind wichtige und beginnen um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string is_important ) ) )
besprechungen, die drei stunden oder weniger oder eine stunde oder weniger dauern	sitzungen, die drei stunden oder weniger oder eine stunde oder weniger	sitzungen, die drei stunden oder weniger, oder eine stunde, oder weniger	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) ) )
orte, an denen treffen am 2. januar stattfinden	orte, an denen am 2. januar sitzungen stattfinden	orte, die hausmeetings am 2. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ) )
zeige mir alle besprechungen, die vor 10 uhr beginnen	zeigen sie mir alle besprechungen, die vor 10 uhr beginnen	zeige mir alle sitzungen beginnen früher als 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
besprechungen, die zur gleichen zeit oder später als zu beginn der wöchentlichen standupbesprechung enden	sitzungen, die gleichzeitig mit oder später als der beginn des wöchentlichen standupmeetings enden	besprechungen, die ende in der gleichen zeit oder später als der beginn der wöchentlichen standupmeeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
welche treffen in greenberg cafe dauern drei stunden	welche treffen im greenberg café drei stunden dauern	die sitzungen in greenberg café letzten drei stunden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string length ) ( string = ) ( number 3 en.hour ) ) )
standort ist greenberg cafe oder zentrale	lage ist greenberg café oder zentrale	lage ist greenberg cafe oder zentrale	( call SW.listValue ( call SW.concat en.location.greenberg_cafe en.location.central_office ) )
personen, die an mindestens zwei sitzungen teilnehmen	personen, die an mindestens zwei sitzungen teilnehmen	menschen, die an mindestens zwei sitzungen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
platziert das haus mindestens eine besprechung	orte, die mindestens ein treffen beherbergen	orte, die haus mindestens eine sitzung	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string location ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
das treffen beginnt um 1000 uhr im greenberg cafe	treffen, das um 1000 uhr im greenberg café beginnt	sitzung beginnt um 1000 uhr am cafe greenberg	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )
treffen an einem einzigen ort	treffen an einem einzigen ort	treffen an einem einzigen ort	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string < ) ( number 2 ) ) )
besprechungen, die um oder vor 10 uhr enden	sitzungen, die um oder vor 10 uhr enden	meetings, die am ende oder vor 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
zeig mir alle treffen im greenberg cafe	zeigen sie mir alle treffen im greenberg café	zeige mir alle treffen sich an greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string location ) ( string = ) en.location.greenberg_cafe ) )
besprechungen, die zu dem zeitpunkt enden, an dem die wöchentliche standupbesprechung beginnt	besprechungen, die zu dem zeitpunkt enden, zu dem die wöchentliche standupbesprechung beginnt	meetings, die am ende der zeit, wenn der wöchentliche standupmeeting beginnt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) )
welche besprechungen dauern am kürzesten?	welche meetings für die kürzeste zeit laufen	welche veranstaltungen laufen für die kürzeste länge der zeit, die	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string length ) ) ) )
sie hat mir alle treffen mit einer dauer zwischen 1 und 3 stunden	sie mich alle treffen mit einer dauer zwischen 1 und 3 stunden	sie mir alle sitzungen mit einer dauer zwischen 1 und 3 stunden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) ) )
für welche besprechung gilt die endzeit des fans nach 10 oder 15 uhr?	welches meeting fanendzeit nach 10.00 oder 15.00 uhr hat	welche meetingfan ende der zeit nach 10 uhr oder 3 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )
zeigen sie mir alle drei stunden langen besprechungen, die um 10 uhr enden	zeigen sie mir alle sitzungen drei stunden lang, die um 10 uhr enden	zeige mir alle meetings drei stunden lang, das ende um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )
orte von besprechungen, die drei stunden lang sind	orte von meetings, die drei stunden lang sind	standorte von sitzungen, die drei stunden lang	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ) )
welche person nimmt an den meisten besprechungen teil?	welche person an den meisten besprechungen teilnimmt	welche person nimmt an den meisten sitzungen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string attendee ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
sitzungen, die vor 10 uhr oder vor 15 uhr enden	sitzungen, die vor 10.00 uhr oder vor 15.00 uhr enden	besprechungen, ende vor 10 uhr oder vor 3pm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )
zeig mir alle wichtigen treffen, an denen alice teilnimmt	zeigen sie mir alle wichtigen besprechungen, an denen alice teilnimmt	zeige mir alle wichtigen sitzungen, die alice besucht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string is_important ) ) )
welcher ort ist wöchentliche standup und jährliche überprüfung	welcher standort wöchentlichestand und jahresüberprüfung ist	was lage ist wöchentlich standup und jährliche überprüfung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.concat en.meeting.weekly_standup en.meeting.annual_review ) ) )
person, die an der gleichen sitzung teilnimmt wie alice	person, die an derselben besprechung teilnimmt wie alice	person, die an derselben sitzung wie alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ) )
wer nimmt an der besprechung teil, die um 10 uhr endet?	der an der besprechung teilnimmt, die um 10.00 uhr endet	wer ist die teilnahme an der sitzung endet um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ) )
zeigen sie mir alle besprechungen, die um 10 uhr enden	zeigen sie mir alle besprechungen, die um 10 uhr enden	zeige mir alle besprechungen, ende um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )
besprechung, die nicht um 10 uhr endet	besprechung, die nicht um 10 uhr endet	treffen, die noch nicht zu ende, um 10 uhr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string ! = ) ( time 10 0 ) ) )
zeigen sie mir alle meetings, die zur selben zeit oder später als das wöchentliche standupmeeting enden	zeigen sie mir alle besprechungen, die gleichzeitig oder später als das wöchentliche standupmeeting enden	zeige mir alle treffen endet zur gleichen zeit oder später als die wöchentliche standupmeeting endet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
zeigen sie mir alle besprechungen, die später enden, als der wöchentliche standup beginnt	zeigen sie mir alle besprechungen, die später als der wöchentliche standup endet	zeige mir alle versammlungen, die ende später als der wöchentliche standup beginnt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
besprechung, die spätestens zur endzeit des wöchentlichen standups beginnt	besprechung, die spätestens zur endzeit des wöchentlichen standups beginnt	treffen, beginnt nicht später als die endezeit der wöchentlichen standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
welche besprechung endet 10 uhr oder später	welche besprechung um 10 uhr oder höher endet	was treffen endet 10 uhr oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )
was ist das jüngste treffen	was ist das jüngste treffen	was ist mit der letzten sitzung	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string date ) ) ) )
gehäuse, das größer als 123 sesamstraße ist	gehäuse, das größer ist als 123 sesamstraße	gehäuse, das größer ist als 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )
zeigen sie mir, dass es sich um die gleiche wohnung wie in der sesamstraße 123 handelt	zeigen mir gehäuse, das der gleiche typ wie 123 sesamstraße ist	zeigen sie mir gehäuse, dass ist der gleiche typ wie 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) )
welche wohneinheit hat eine mindestmiete von 1500 dollar pro monat	welche wohneinheit hat eine mindestmiete von 1500 dollar pro monat	die wohneinheit hat eine minimale miete von 1500 dollar pro monat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )
wohnraum vor oder am selben tag wie die sesamstraße 123	wohnbebauung vor oder am selben tag wie 123 sesamstraße	gehäuse geschrieben werden, bevor oder am selben tag wie 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )
nachbarschaft mit der geringsten anzahl von wohneinheiten	nachbarschaft mit der geringsten anzahl von wohneinheiten	viertel mit der geringsten menge an wohnungen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
finden sie wohneinheiten mit mietkosten von weniger als 2000 dollar	wohnungseinheiten mit mietkosten von weniger als 2000 dollar finden	finden, wohnungen mit mieten von weniger als 2000 dollar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) ) )
welche wohneinheit hat mehr als zwei arten von häusern	welche wohneinheit hat mehr als zwei arten von häusern	die wohnungswirtschaft hat mehr als zwei arten von häusern	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
wie viel ist 123 sesamstraße pro monat	wie viel ist 123 sesamstraße pro monat	wie viel ist 123 sesame street pro monat	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) )
finde die größte wohneinheit	finden sie die größte wohneinheit	finden sie die größte wohneinheit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string size ) ) ) )
welche wohnung ist bei 1500 oder 2000 dollar festgesetzt	welche wohnung kostet 1500 oder 2000 dollar	das, was gehäuse ist, preislich bei 1500 oder 2000 dollar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) ) )
gehäuse mit einem schlafzimmer und eigenem bad	wohnanlage mit hauptschlafzimmer und eigenem bad	gehäuse mit einem schlafzimmer und eigenem bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string has_private_room ) ) )
wohneinheit mit eigenem bad und 1500 dollar miete	wohneinheit mit eigenem bad und 1500 dollar miete	wohneinheit mit eigenem bad und 1500 dollar miete	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )
welche wohneinheit erlaubt katzen und hatte ein eigenes bad	welche wohneinheit katzen zulässt und ein eigenes bad darin hatte	die gehäuseeinheit, die erlaubt, katzen und hatte ein eigenes bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string has_private_bath ) ) )
finden sie eine wohneinheit am 2. januar und das erlaubt katzen	finden sie eine wohneinheit am 2. januar gebucht und das ermöglicht katzen	finden sie eine wohneinheit veröffentlicht am 2. januar ist und dass katzen erlaubt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string allows_cats ) ) )
einheiten mit einer größeren miete als 123 sesamstraße	wohneinheiten mit größerer miete als 123 sesamstraße	einheiten mit einer größeren miete als 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )
welche wohneinheit ist bei 1500 dollar festgesetzt	welche wohneinheit kostet 1500 dollar	was die gehäuseeinheit ist zum preis von 1500 dollar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )
finden sie wohneinheiten mit eigenem zimmer in der nähe von midtown west	finden sie wohneinheiten mit eigenem zimmer in der nähe von midtown west	finden wohneinheiten mit eigenem zimmer in der nähe von midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string has_private_room ) ) )
gehäuse mit eigenem bad, das am 2. januar veröffentlicht wurde	wohnung mit eigenem bad, die am 2. januar veröffentlicht wurde	gehäuse mit eigenem bad, veröffentlicht wurde am 2. januar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string has_private_bath ) ) )
welche wohneinheit in der größe 123 sesamstraße ähnelt	welche wohneinheit ähnelt 123 sesamstraße in der größe	die gehäuseeinheit ähnelt 123 sesame street in der größe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) )
apartments mit einem privaten raum	apartments mit eigenem zimmer	apartments mit eigenem zimmer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ) )
gehäuse, das 800 quadratmeter mit einem privaten raum ist	gehäuse, das 800 quadratmeter mit einem privaten zimmer ist	gehäuse mit 800 quadratmetern mit einem privaten zimmer	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )
welche wohneinheiten in der region midtown east erlauben auch hunde?	welche wohneinheiten im midtownostbereich auch hunde zulassen	was wohnungen in der midtown east gegend auch hunde erlaubt sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
wohnungstyp wohneinheit mit eigenem bad	apartmenttypwohneinheit, die ein eigenes bad hat	appartementtyp gehäuseeinheit, die hat ein eigenes bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )
was für ein gehäuse ist 800 quadratmeter	welche art von gehäuse ist 800 quadratmeter	welche art von gehäuse ist 800 quadratmeter	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ) )
welche wohneinheit hat eine geringere monatliche miete als 123 sesamstraße	welche wohneinheit hat eine geringere monatliche miete als 123 sesamstraße	die wohneinheit hat eine geringere miete als 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )
finden sie eine wohneinheit am 2. januar mit dem gleichen mietpreis wie 123 sesam st	finden sie eine wohneinheit am 2. januar mit dem gleichen mietpreis wie 123 sesam st	finden sie eine wohneinheit veröffentlicht am 2. januar mit den gleichen mietpreis als 123 sesame st	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string rent ) ) ( string = ) en.housing_unit.123_sesame_street ) )
wohnung mit einem privaten raum, der für 1500 ein monat mietet	wohnung mit einem privaten zimmer, das für 1500 pro monat vermietet	apartment mit einem privaten raum, dass die mieten für 1500 im monat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string has_private_room ) ) )
gehäuse die gleiche größe wie 123 sesamstraße	gehäuse in der gleichen größe wie 123 sesamstraße	gehäuse die gleiche größe wie 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )
800 quadratmeter wohneinheit mit eigenem bad	800 quadratmeter wohneinheit mit eigenem bad	800 qm wohneinheit mit eigenem bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string has_private_bath ) ) )
wohneinheiten, die ein privates zimmer haben, das am 2. januar gepostet wurde	wohneinheiten, die ein privates zimmer haben, das am 2. januar gebucht wurde	die wohneinheiten haben ein eigenes zimmer, das wurde gepostet am 2. januar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )
welche wohneinheit hat häuser der wohnungstyp	welche wohneinheit hat wohnungen der wohnung art	die wohnungswirtschaft hat häuser wohnung art	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string housing_type ) ( string = ) en.housing.apartment ) )
gehäuse, das mindestens zwei arten hat	gehäuse, das mindestens zwei typen hat	gehäuse, in dem mindestens zwei arten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string >= ) ( number 2 ) ) )
finden sie wohneinheiten, die kleiner oder gleich der größe der sesamstraße 123 sind	finden sie wohneinheiten, die der größe von 123 sesamstraßen entsprechen oder kleiner sind	finden wohneinheiten, die gleich wie oder kleiner als die größe von 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )
welche wohneinheit hat die höchste miete pro monat	welche wohneinheit die höchste miete pro monat hat	die wohnungswirtschaft hat die höchste miete pro monat	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string rent ) ) ) )
gehäuse, das am 2. januar oder 3. februar veröffentlicht wurde	gehäuse, das am 2. januar oder 3. februar veröffentlicht wurde	gehäuse, veröffentlicht wurde am 2. januar oder 3. februar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) ) )
was ist die 123 sesamstraße gehäusetyp	was ist die 123 sesamstraße gehäusetyp	was ist das 123 sesame streetgehäuse typ	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string housing_type ) ) )
welche wohneinheit bietet ein eigenes bad	welche wohneinheit ein eigenes bad bietet	die wohneinheit bietet ein eigenes bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string has_private_bath ) ) )
gehäuse, das 800 quadratmeter mit einem eigenen bad ist	gehäuse, das 800 quadratmeter mit einem privaten bad ist	gehäuse mit 800 quadratmetern mit eigenem bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string has_private_bath ) ) )
nachbarschaft mit den meisten wohneinheiten	nachbarschaft mit den meisten wohneinheiten	viertel mit den meisten wohneinheiten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
gehäusetyp von mehr als zwei verfügbaren gehäusen	wohntyp von mehr als zwei verfügbaren gehäusen	gehäuse typ von mehr als zwei gehäusen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
wohneinheit, die beide ein eigenes zimmer haben und hunde erlauben	wohneinheit, die beide ein privates zimmer haben und hunde erlauben	gehäuseeinheit, die beiden haben ein eigenes zimmer und hunde erlaubt sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string allows_dogs ) ) )
bereich um 123sesame straße	bereich um 123sesame straße	bereich um 123sesame straße	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string neighborhood ) ) )
welche wohneinheit hat eine monatliche miete von weniger als 1500 dollar	welche wohneinheit hat eine monatliche miete von weniger als 1500 dollar	die wohneinheit hat eine monatliche miete von weniger als 1500 dollar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string < ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )
zeigen sie mir, wo hunde erlaubt sind	zeigen sie mir gehäuse, wo hunde erlaubt sind	zeigen sie mir gehäuse, wo hunde erlaubt sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string allows_dogs ) ) )
gehäuse von zwei arten	gehäuse von zwei arten	gehäuse von zwei arten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
wohnungen mit miete zwischen 1500 und 2000	wohnungen mit miete zwischen 1500 und 2000	wohnungen mit mieten zwischen 1500 und 2000	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) ) )
apartments mit eigenem bad	apartments mit eigenem bad	apartments mit eigenem bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string has_private_bath ) ) )
wohneinheiten mit 2 nachbarschaften	wohneinheiten mit 2 nachbarschaften	wohneinheiten mit 2 nachbarschaften	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( number 2 ) ) )
welche wohnung kostet 1500 dollar	welche wohnung kostet 1500 dollar	was die wohnung kostet 1500 dollar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )
wohnungen mit der gleichen miete wie 123 sesamstraße	wohnungen mit der gleichen miete wie 123 sesamstraße	apartments mit der gleichen miete wie 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )
welche wohneinheiten erlauben hunde und katzen?	welche wohneinheiten hunde und katzen zulassen	die wohnungen gestatten, hunde und katzen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string allows_dogs ) ) )
gehäuse, das mindestens so teuer ist wie 123 sesamstraße	wohnen, das mindestens so teuer ist wie 123 sesamstraße	gehäuse, das mindestens so teuer wie 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )
privatzimmer in midtown west	privatzimmer in midtown west	private room in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string has_private_room ) ) )
wohneinheiten übergröße 123 sesamstraße	wohneinheiten überdimensionieren 123 sesamstraße	wohneinheiten outsizing 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )
wohnungen in der midtown west oder chelsea nachbarschaften	wohnungen in der innenstadt west oder chelsea nachbarschaften	apartments in midtown west oder chelsea nachbarschaften	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.concat en.neighborhood.midtown_west en.neighborhood.chelsea ) ) )
gehäusetypen wie 123 sesamstraße oder 900 mission avenue	wohntypen wie 123 sesamstraße oder 900 mission avenue	gehäusetypen wie 123 sesame street oder 900 mission avenue	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.concat en.housing_unit.123_sesame_street en.housing_unit.900_mission_ave ) ) )
gehäuse, das zwischen 800 und 1000 quadratmetern reicht	gehäuse, das zwischen 800 und 1000 quadratmetern liegt	gehäuse, die im bereich zwischen 800 und 1000 quadratmeter	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) ) )
welche wohneinheiten haben die gleiche größe wie die in der sesamstraße 123?	welche wohneinheiten sind die gleiche größe wie die in 123 sesamstraße	was für wohnungen werden die gleiche größe wie die in 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )
wohneinheiten finden, die keine wohnung sind	finden sie wohneinheiten, die keine wohnung ist	finden wohneinheiten, die nicht einer wohnung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string ! = ) en.housing.apartment ) )
welcher bereich hat mindestens zwei wohneinheiten	welche fläche mindestens zwei wohneinheiten hat	die fläche hat mindestens zwei wohneinheiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
gehäuse in der nähe von 123 sesamstraße	wohnhaus in der nähe von 123 sesamstraße	wohnraum in der nähe von 123 sesame street	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string neighborhood ) ) )
welche wohneinheit enthält ein privatzimmer und erlaubt katzen	welche wohneinheit einen privaten raum enthält und katzen erlaubt	was wohneinheit enthält einen privaten raum und ermöglicht katzen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string has_private_room ) ) )
finde wohneinheiten, die vor dem 2. januar gepostet wurden	finden wohneinheiten vor dem 2. januar gebucht	finden wohneinheiten, gebucht vor dem 2. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
finden sie wohneinheiten, die an anderen daten als dem 2. januar veröffentlicht wurden	finden gehäuse einheit auf anderen daten außer für den 2. januar gebucht	finden sie die gehäuseeinheit geschrieben, die auf anderen termine außer die für den 2. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string ! = ) ( date 2015 1 2 ) ) )
finden sie wohneinheiten, die tierfreundlich sind	finden sie wohneinheiten, die haustierfreundlich sind	finden wohneinheiten sind haustier freundlich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string allows_dogs ) ) )
gehäuse in den meisten stadtteilen gefunden	wohnraum in den meisten vierteln gefunden	gehäuse finden sich in den meisten stadtteilen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( string neighborhood ) ) )
mietwohnungen für 1500 pro monat	wohnungen mieten für 1500 pro monat	apartments mieten für 1500 im monat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )
welche nachbarschaften haben gehäuse mit eigenem bad	welche stadtteile wohnungen mit eigenem bad haben	die nachbarschaften haben gehäuse mit eigenem bad	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ) )
gehäuse, das am 3. februar veröffentlicht wurde	wohnung, die am 3. februar veröffentlicht wurde	gehäuse wurde geschrieben am 3. februar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) ) )
wohneinheit, die 800 oder 1000 quadratfuß ist	wohneinheit, die 800 oder 1000 quadratmeter groß ist	gehäuseeinheit, die 800 oder 1000 quadratmeter	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) )
gehäuse mit weniger als zwei einheiten	gehäuse mit weniger als zwei einheiten	gehäuse mit weniger als zwei einheiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
geben sie den gehäusetyp der wohneinheit an, die über ein eigenes bad verfügt	geben sie den gehäusetyp der wohneinheit an, die über ein eigenes bad verfügt	geben sie die gehäusetyp gehäuseeinheit, die hat ein eigenes bad	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ) )
gehäuse am 2. januar veröffentlicht	wohnungsbau veröffentlicht am 2. januar	gehäuse veröffentlicht am 2. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
einheiten größer als 800 quadratfuß	einheiten größer als 800 quadratmeter	einheiten, die größer als 800 quadratmeter	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) ) )
was ist die art von gehäuse, das einen privaten raum hat	was ist die art des gehäuses, die ein privates zimmer hat	was ist die art der unterbringung, die hat ein eigenes zimmer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ) )
wohneinheiten mit mehr als zwei stadtteilen	wohneinheiten, die mehr als zwei nachbarschaften haben	wohneinheiten, die mehr als zwei nachbarschaften	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string > ) ( number 2 ) ) )
welche wohneinheit hat eine fläche von 800 quadratmetern	welche wohneinheit hat eine fläche von 800 quadratmetern	die wohneinheit hat eine fläche von 800 quadratmetern	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )
zeigen sie mir unterkünfte, die am oder vor dem tag 123 sesamstraße gepostet haben	zeigen mir gehäuse, die auf oder vor dem tag 123 sesamstraße gepostet hat	zeigen sie mir gehäuse, das gepostet am oder vor dem tag 123 sesame street hatte	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )
wohnungen mit einer miete unter 1500 pro monat	wohnungen mit einer miete unter 1500 pro monat	wohnungen mit einer miete unter 1500 im monat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string ! = ) ( number 1500 en.dollar ) ) )
welche wohneinheit in midtown west hat ein eigenes bad	welche wohneinheit rund um midtown west ein eigenes bad hat	die wohnungswirtschaft rund um midtown west verfügt über ein eigenes bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
wie lautet die gehäusetypennummer?	was ist die gehäusetypnummer	was ist die gehäusetyp anzahl	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ) )
welche wohneinheit hat die vielfalt der häuser	welche wohneinheit die vielfalt der häuser hat	die wohnungswirtschaft hat die vielfalt der häuser	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( string housing_type ) ) )
gehäuse, das nicht die gleiche art wie 123 sesamstraße ist	gehäuse, das nicht die gleiche art wie 123 sesamstraße ist	gehäuse, dass ist nicht die gleiche art wie 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string ! = ) en.housing_unit.123_sesame_street ) )
nennen sie die nachbarschaft der wohneinheit mit eigenem bad	nennen sie die nachbarschaft der wohneinheit mit eigenem bad	name der nachbarschaft der gehäuseeinheit mit eigenem bad	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ) )
in welchem gebiet gibt es die meisten wohneinheiten?	welche fläche die meisten wohneinheiten hat	welcher bereich hat die meisten anzahl der wohneinheiten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( string neighborhood ) ) )
gehäuse art von 123 sesamstraße, die am 2. januar geschrieben wurde	wohnanlage von 123 sesamstraße, die am 2. januar veröffentlicht wurde	gehäuse art 123 sesame street wurde geschrieben am 2. januar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) )
wohnung mit eigenem bad zu vermieten um 1500	wohnung mit eigenem bad zu vermieten bei 1500	apartment mit eigenem bad für mieten bei 1500	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string has_private_bath ) ) )
wohnen in midtown west, das am 2. januar veröffentlicht wurde	wohnungsbau in midtown west, das am 2. januar veröffentlicht wurde	wohnen in midtown west, veröffentlicht wurde am 2. januar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
gehäuse, das mehr als 1500 monate oder mehr als 2000 monate ist	gehäuse, die mehr als 1500monate oder mehr als 2000monate	gehäuse, die mehr als 1500month oder mehr als 2000month	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) ) )
wohneinheiten nach dem 2. januar gebucht	wohneinheiten nach dem 2. januar	wohnungen gebucht, die nach januar 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
nachbarschaft von 123 sesamstraße oder 900 mission ave.	nachbarschaft von 123 sesamstraße oder 900 mission ave	nachbarschaft von 123 sesame street oder 900 mission ave	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.concat en.housing_unit.123_sesame_street en.housing_unit.900_mission_ave ) ) )
welche wohneinheit mit eigenem bad wurde am 2. januar veröffentlicht	welche wohneinheit mit eigenem bad wurde am 2. januar gepostet	was wohneinheit mit eigenem bad wurde gepostet am jan 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string has_private_bath ) ) )
eine wohneinheit in der sesamstraße 123, die am 2. januar gepostet wurde	eine wohneinheit auf 123 sesamstraße, die am 2. januar veröffentlicht	eine wohneinheit auf 123 sesame street, die veröffentlicht am 2. januar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) )
gehäuse, das am selben tag bei 123 sesamstraße geschrieben	wohnhäuser, die am selben tag in der 123 sesamstraße	gehäuse gepostet am gleichen tag bei 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )
gehäuse, das 1500 monate mit einem privaten raum ist	gehäuse, das 1500monate mit einem privaten zimmer ist	gehäuse 1500month mit einem privaten zimmer	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )
wohnungen, die hunde erlauben	wohnungen, die hunde erlauben	appartements, hunde erlaubt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string allows_dogs ) ) )
wohnung mit eigenem bad	wohnung mit eigenem bad	apartment mit eigenem bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )
in welcher nachbarschaft befand sich die wohneinheit am 2. januar?	welche nachbarschaft war die wohneinheit am 2. januar	was der nachbarschaft wurde die wohneinheit gepostet am jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
auf der suche nach wohnraum, der entweder eine wohnung oder eine eigentumswohnung ist	auf der suche nach wohnraum, die entweder eine wohnung oder wohnung ist	für die unterbringung suchen, der entweder eine wohnung oder eigentumswohnung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) ( call SW.concat en.housing.apartment en.housing.condo ) ) )
auf der suche nach häusern in ruhigen vierteln	auf der suche nach häusern in ruhigen vierteln	suche nach häusern in ruhigen gegenden	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( string housing_type ) ) )
was gehäuse kostet 1500 dollar und ist 800 quadratmeter	welche wohnung kostet 1500 dollar und ist 800 quadratmeter	welche wohnung kostet 1500 dollar und ist 800 quadratmeter	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )
wie groß ist die wohneinheit?	wie groß ist die wohneinheit	wie groß ist die wohneinheit	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ) ) )
800 quadratmeter einheit mit einer miete von 1500 monatlich	800 quadratmeter große einheit mit miete von 1500 monatlich	800 qm große einheit mit miete von monatlich 1500	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )
wohneinheiten in midtown west, die hunde erlauben	wohneinheiten in midtown west, die hunde erlauben	wohnungen in midtown west, dass hunde erlaubt sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string allows_dogs ) ) )
nachbarschaften mit wohnraum, der 1500 monate ist	nachbarschaften mit wohnraum, die 1500monate	nachbarschaften mit gehäuse 1500month	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ) )
gehäuse, das mehr als zwei nachbarschaft hat	gehäuse, das mehr als zwei nachbarschafthat	gehäuse, die mehr als zwei viertel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string > ) ( number 2 ) ) )
finden sie eine wohnung, die größer als die sesamstraße 123 ist	finden gehäuse größer als 123 sesamstraße	wohnungssuche größer als 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )
welche nachbarschaft hat die geringste menge an wohnraum	welche nachbarschaft die geringste menge an wohnraum hat	welche nachbarschaft hat die wenigsten gehäuse	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
welche wohneinheit in der mitte west hat ein eigenes zimmer	welche wohneinheit im midtown west bereich hat ein privates zimmer	die gehäuseeinheit in der midtown west gegend hat ein eigenes zimmer	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
welche wohneinheit hat die gleiche miete wie die einheit, die am 2. januar gebucht wurde?	welche wohneinheit die gleiche miete hat wie die einheit, die am 2. januar gebucht wurde	was gehäuse gerät die gleiche miete wie die einheit gepostet am jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
finden sie apartments mit eigenem bad	finden sie wohnungen mit eigenem bad	finden sie apartments mit eigenem bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string has_private_bath ) ) )
wohnungen in midtown west mit miete bei 1500	wohnungen in midtown west mit miete bei 1500	apartments in midtown west mit miete 1500	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
welcher haustyp erlaubt haustiere?	welche wohnart haustiere zulässt	die gehäuse typ haustiere erlaubt sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ) )
günstigstes gehäuse	billigsten wohnraum	billigste gehäuse	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string rent ) ) ) )
wohneinheiten mit 1500 dollar bis 2000 als miete finden	finden sie wohneinheiten mit 1500 dollar bis 2000 als miete	finden wohneinheiten mit 1500 dollar bis 2000 als mieten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) ) )
hier finden sie alle freistehenden wohneinheiten	finden sie alle freistehenden wohneinheiten	finden sie alle freistehenden wohnungen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
finden sie wohneinheiten, die vor der sesamstraße 123 gepostet wurden	finden wohneinheiten vor 123 sesamstraße gebucht	finden wohneinheiten gepostet vor 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )
gehäuse, das 800 quadratmeter oder größer ist	gehäuse, das 800 quadratmeter oder größer ist	gehäuse, das 800 quadratmeter oder größer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )
wohneinheit in midtown west, die monatliche miete von 1500 hat	wohneinheit in midtown west, die monatliche miete von 1500 hat	gehäuseeinheit in midtown west, hat monatliche miete von 1500	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
welche wohneinheit ist für einen preis von weniger als 1500 dollar verfügbar	welche wohneinheit für einen preis von weniger als 1500 dollar erhältlich ist	die gehäuseeinheit ist erhältlich für einen preis von weniger als 1500 dollar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string ! = ) ( number 1500 en.dollar ) ) )
wohnungen mit miete zwischen 1500 bis 2000 dollar	wohnungen mit miete zwischen 1500 und 2000 dollar	wohnungen mit mieten zwischen 1500 bis 2000 dollar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) ) )
wohneinheit mit dem größten buchungsdatum	wohneinheit mit dem größten buchungsdatum	gehäuseeinheit mit der größten buchungsdatum	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )
welche wohneinheit hat ein eigenes zimmer	welche wohneinheit über ein eigenes zimmer verfügt	die wohneinheit hat ein eigenes zimmer	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string has_private_room ) ) )
wohnen in der nähe von 123 sesamstraße oder 900 mission ave.	gehäuse in der nachbarschaft von 123 sesamstraße oder 900 mission ave	wohnen in der nachbarschaft von 123 sesame street oder 900 mission ave	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.concat en.housing_unit.123_sesame_street en.housing_unit.900_mission_ave ) ) )
wohnen in midtown west, die am 2. januar veröffentlicht	wohnungsbau in midtown west, die am 2. januar veröffentlicht	wohnen in midtown west, veröffentlicht am 2. januar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
welche wohneinheit gepostet wurde, wurde am 2. januar gepostet	welche wohneinheit gebucht wurde, wurde am 2. januar veröffentlicht	was wohneinheit gepostet wurde gepostet am jan 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string posting_date ) ) ( string = ) en.housing_unit.123_sesame_street ) )
welche arten von wohnungen hat ein eigenes bad	welche arten von wohnraum hat ein eigenes bad	welche art von gehäuse verfügt über ein eigenes bad	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ) )
welche nachbarschaft ist 123 sesamstraße in	welche nachbarschaft ist 123 sesamstraße in	die nachbarschaft ist 123 sesame street in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.housing_unit.123_sesame_street ) )
finden sie eine unterkunft, die katzen erlaubt	finden sie einfamilienhäuser, die katzen	finden sie gehäuse, dass katzen erlaubt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ) )
welche wohneinheit hat die meisten arten von häusern?	welche wohneinheit die meisten arten von häusern hat	die wohnungswirtschaft hat die art der häuser	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string housing_type ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
gehäuse, das katzen erlaubt und ein privates zimmer enthält	gehäuse, das katzen ermöglicht und ein privates zimmer beinhaltet	gehäuse, die erlaubt, katzen und beinhaltet ein eigenes zimmer	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string allows_cats ) ) )
auf der suche nach wohnungen	auf der suche nach wohnungen	auf der suche nach wohnungen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ) )
nachbarschaften mit zwei oder mehr wohneinheiten benennen	namensviertel mit zwei oder mehr wohneinheiten	name stadtteile mit zwei oder mehr wohneinheiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
welche wohneinheit mit einer fläche von 800 quadratmetern hat ein eigenes zimmer	welche wohneinheit mit einer fläche von 800 quadratmetern hat ein privates zimmer	die wohneinheit mit einer fläche von 800 quadratmetern hat ein eigenes zimmer	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )
welche wohneinheit ähnelt der der sesamstraße 123	welche wohneinheit der von 123 sesamstraße ähnelt	die gehäuseeinheit ähnelt der 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string housing_type ) ) ) )
finden sie wohneinheiten mit einer größe von mehr als 800 quadratfuß	finden sie wohneinheiten mit einer größe von mehr als 800 quadratmetern	finden wohneinheiten mit einer größe von mehr als 800 quadratmetern	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string > ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )
welche unterkunft an einem anderen datum als dem 2. januar gepostet wurde	welche wohnungen an einem anderen datum als dem 2. januar gebucht wurden	die gehäuse gepostet, auf ein datum als 2. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string ! = ) ( date 2015 1 2 ) ) )
welche nachbarschaften haben einheiten mit 800 quadratmetern	welche nachbarschaften haben einheiten mit 800 quadratmetern	welche stadtteile haben einheiten, die mit 800 quadratmetern	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ) )
welche wohneinheit hat zwei oder mehr stadtteile	welche wohneinheit zwei oder mehr nachbarschaften hat	was wohneinheit verfügt über zwei oder mehr nachbarschaften	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string >= ) ( number 2 ) ) )
welche art von unterkunft ist die einzige ihrer art?	welche art von gehäusetyp ist die einzige seiner art	welche art von gehäuse art ist die einzige ihrer art	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
welche art von unterkunft bietet 800 quadratmeter und erlaubt katzen	welche art von gehäuse bietet 800 quadratmeter und ermöglicht katzen	welche art von gehäuse bietet 800 quadratmeter und katzen erlaubt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string allows_cats ) ) )
wohnung in midtown west	wohnung in midtown west	wohnung in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
gehäuse 800 qm groß am 2. januar veröffentlicht	gehäuse 800 sq in der größe veröffentlicht am januar 2	gehäuse 800 qm in der größe gepostet am 2. januar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )
wohnungsarten in midtown west	wohnformen in der innenstadt west	gehäusetypen in der midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )
wo sind 800 quadratmeter wohneinheiten, die hunde erlauben	wo sind 800 quadratmeter gebührenwohneinheiten, die hunde erlauben	wo sind die 800 qm gebühr wohneinheiten, dass hunde erlaubt sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string allows_dogs ) ) )
welche wohneinheit wurde am 2. januar veröffentlicht?	welche wohneinheit wurde am 2. januar veröffentlicht	was wohneinheit wurde gepostet am jan 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )
wohnung zu vermieten um 1500	wohnung zu vermieten bei 1500	wohnung zur miete 1500	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )
welche art von gehäuse ist für 1500 monate verfügbar	welche art von gehäuse für 1500monate verfügbar ist	welche art von gehäuse ist für 1500month	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ) )
wohneinheit, die katzen mit midtown west als nachbarschaft erlaubt	wohneinheit, die katzen mit midtown west als nachbarschaft erlaubt	gehäuseeinheit, die erlaubt, katzen, midtown west als nachbarschaft	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
gehäuse nach 123 sesamstraße geschrieben	wohnung nach 123 sesamstraße gebucht	gehäuse gepostet, nach 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )
gehäuse mit einem privaten raum und einem bad	wohnbebauung mit eigenem zimmer und bad	gehäuse mit eigenem zimmer und bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string has_private_bath ) ) )
was ist der zahlreichste wohnungstyp?	was ist die zahlreichste gehäuseart	was ist die zahlreiche gehäusetyp	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( string housing_type ) ) )
hier finden sie alle 800 quadratmeter großen einheiten mit eigenem bad	finden sie alle 800 quadratmeter großen einheiten mit eigenem bad	finden sie alle 800 quadratfußeinheiten mit privaten bädern	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )
gehäuse in zwei oder weniger stadtteilen gefunden	wohnungen in zwei oder weniger nachbarschaften gefunden	gehäuse, die in zwei oder weniger nachbarschaften	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string <= ) ( number 2 ) ) )
gehäuse wohnung mit eigenem bad	wohnwohnung mit eigenem bad	gehäuse apartment mit eigenem bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )
was für eine art von unterkunft ist 123 sesamstraße	was für ein gehäuse ist 123 sesamstraße	welche art von gehäuse 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) )
wohneinheiten vom typ wohnung finden	finden sie wohneinheiten des typs wohnung	finden wohneinheiten vom typ ferienwohnung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ) )
wohneinheit, die billiger als 1500 dollar ist	wohneinheit, die billiger als 1500 dollar ist	gehäuseeinheit, die billiger als 1500 dollar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string < ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )
gehäuse, das mindestens 1500 monate oder mindestens 2000 monate ist	gehäuse, das mindestens 1500monate oder mindestens 2000monate beträgt	gehäuse, das mindestens 1500month oder zumindest 2000month	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) ) )
ausgeschlossen sind apartments, die sich in der nachbarschaft der sesamstraße 123 befinden	ausschließen wohnungen, die in der gleichen nachbarschaft wie 123 sesamstraße sind	ausschließen wohnungen in der gleichen nachbarschaft als 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string ! = ) en.housing_unit.123_sesame_street ) )
wohneinheit mit einem privaten raum und erlaubt katzen	wohneinheit mit eigenem zimmer und ermöglicht katzen	gehäuseeinheit mit einem privaten raum und ermöglicht katzen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string allows_cats ) ) )
miete weniger als 15002000 dollar	miete unter 15002000 dollar	miete weniger als 15002000 dollar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) ) )
wohnungen, die hunde erlauben	wohnungen, die hunde erlauben	appartements, hunde erlaubt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) )
katzenfreundliches gehäuse	katzenfreundliches gehäuse	katze freundliches gehäuse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) )
wohnungen mit miete, die teurer als 123 sesamstraße ist	wohnungen mit miete, die teurer als 123 sesamstraße ist	wohnungen mit mieten, die teurer ist als 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )
an welchem tag wurde 123 sesamstraße verfügbar?	an welchem tag wurde 123 sesamstraße verfügbar	was für ein tag hast 123 sesame street verfügbar sind	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) )
was sind die einheiten, die nicht zu der gegend um midtown west gehören?	was sind die einheiten, die nicht zum gebiet um midtown west gehören	was sind die einheiten, die gehören nicht in die gegend um midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string ! = ) en.neighborhood.midtown_west ) )
welche wohneinheit am 2. januar gebucht ist in midtown west	welche wohneinheit am 2. januar in midtown west ist	was wohneinheit gepostet am jan 2 befindet sich in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
gehäusetyp mit weniger als 2 einheiten	gehäusetyp mit weniger als 2 einheiten	gehäusetyp mit weniger als 2 einheiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
gehäuse, dass der gleiche typ wie 123 sesamstraße ist, die am 2. januar veröffentlicht wurde	gehäuse, das der gleiche typ ist wie 123 sesamstraße, die am 2. januar veröffentlicht wurde	gehäuse, das ist die gleiche art wie 123 sesame street wurde geschrieben am 2. januar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) )
wohneinheit, die katzen erlaubt	wohneinheit, die katzen ermöglicht	gehäuseeinheit, die erlaubt, katzen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string allows_cats ) ) )
haustierfreundliche unterkunft in der nähe von midtown west	haustierfreundliches wohnen in der nähe von midtown west	pet friendlygehäuse in der nähe von midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string allows_cats ) ) )
gehäuse wohnungen in einer midtownwestnachbarschaft	wohnwohnungen in einem midtown west viertel	gehäuse wohnungen in midtown west nachbarschaft	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string housing_type ) ( string = ) en.housing.apartment ) )
gehäuse vor dem 2. januar oder 3. februar veröffentlicht	wohnung vor dem 2. januar oder 3. februar	gehäuse geschrieben werden, bevor der 2. januar oder 3. februar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) ) )
finden sie katzenfreundliche wohneinheiten mit eigenem bad	finden sie katzenfreundliche wohneinheiten mit eigenem bad	finden katze freundliche wohneinheiten mit eigenem bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string has_private_bath ) ) )
welche nachbarschaft hat gehäuse mit einem privaten raum	welche nachbarschaft hat gehäuse mit einem privaten zimmer	welche nachbarschaft hat das gehäuse mit einem privaten zimmer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ) )
ruhige wohnungen	ruhige wohnungen	ruhige apartments	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string < ) ( number 2 ) ) )
eine wohneinheit in midtown west, die am 2. januar gepostet wurde	eine wohneinheit in midtown west, die am 2. januar veröffentlicht wurde	eine wohneinheit in midtown west, veröffentlicht wurde am 2. januar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )
wohneinheit, die hunde und katzen erlaubt	wohneinheit, die hunde und katzen ermöglicht	gehäuseeinheit, die erlaubt, dass hunde und katzen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string allows_cats ) ) )
gehäuse, das die gleiche miete wie oder billiger als 123 sesamstraße ist	wohnungen, die die gleiche miete als oder billiger als 123 sesamstraße ist	gehäuse, der die gleiche miete wie oder billiger als 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )
welche wohneinheit am 2. januar gebucht ist die gleiche art wie 123 sesamstraße	welche wohneinheit auf jan 2 gebucht ist die gleiche art wie 123 sesamstraße	was wohneinheit gepostet am jan 2 ist die gleiche art wie 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) )
wohnung oder eigentumswohnung einheiten	wohnungs oder eigentumswohnungen	wohnung oder eine eigentumswohnung einheiten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) ( call SW.concat en.housing.apartment en.housing.condo ) ) )
wohneinheiten mit eigenem bad in der region midtown west	wohneinheiten mit eigenem bad im midtown west bereich	die wohneinheiten mit eigenem bad in der midtown west gegend	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string has_private_bath ) ) )
gehäuse mit einem privaten raum, der am 2. januar gebucht	wohnung mit einem privaten zimmer, die am 2. januar veröffentlicht	gehäuse mit einen privaten raum, veröffentlicht am 2. januar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )
welche nachbarschaft ist die 800 quadratmeter große wohnung in	in welcher nachbarschaft die 800 quadratmeter große wohnung in	was nachbarschaft ist die 800 quadratmeter wohnung in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ) )
800 quadratmeter große wohnungen	800 quadratmeter große wohnungen	800 quadratmeter großen apartments	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )
gehäuse, das nicht 800 quadratfuß ist	gehäuse, das nicht 800 quadratmeter groß ist	gehäuse, das nicht 800 quadratmeter	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string ! = ) ( number 800 en.square_feet ) ) )
wohnung, die am 2. januar gebucht wurde	wohnung, die am 2. januar veröffentlicht wurde	wohnung, veröffentlicht wurde am 2. januar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )
wohneinheiten in der nähe von zwei stadtteilen	wohneinheiten in der nähe von zwei vierteln	gehäuseeinheiten in der nähe zwei nachbarschaften	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( number 2 ) ) )
eine wohneinheit, die am 2. januar gebucht wurde	eine wohneinheit, die am 2. januar veröffentlicht wurde	eine gehäuseeinheit, die veröffentlicht wurde am 2. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
wie lautet die hausnummer der wohnung?	was ist die hausnummer der wohnung	was ist die hausnummer von der wohnung	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
welche wohneinheit wurde am 2. januar veröffentlicht?	welche wohneinheit wurde am 2. januar veröffentlicht	was wohneinheit wurde gepostet am jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
was ist die art der unterbringung der wohneinheit, die hunde erlaubt	was ist der gehäusetyp der wohneinheit, die hunde erlaubt	was ist die gehäusetyp gehäuseeinheit, die erlaubt, dass hunde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ) )
einheit kleiner als 123 sesamstraße	einheit kleiner als 123 sesamstraße	einheit kleiner als 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )
gehäuse, das nicht 1500 monate ist	gehäuse, das nicht 1500monate ist	gehäuse, das nicht 1500month	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string ! = ) ( number 1500 en.dollar ) ) )
gehäuse typisch für 123 sesamstraße gehäuse am 2. januar veröffentlicht	wohnbau typisch für 123 sesamstraßenwohnungen, die am 2. januar veröffentlicht wurden	gehäuse typisch von 123 sesame streetgehäuse veröffentlicht am 2. januar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string size ) ) ( string = ) en.housing_unit.123_sesame_street ) )
welche wohneinheit befindet sich in derselben nachbarschaft wie die am 2. januar eingestellte wohneinheit?	welche wohneinheit sich in der gleichen nachbarschaft befindet wie die einheit, die am 2. januar	was wohneinheit ist in der gleichen nachbarschaft als die einheit gepostet am jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
welche wohneinheit erlaubt hunde und verfügt über ein eigenes bad	welche wohneinheit hunde zulässt und die möglichkeit eines privaten bades hat	die gehäuseeinheit erlaubt hunde und hat die möglichkeit, ein eigenes bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string has_private_bath ) ) )
welches gehäuse bietet weniger als zwei arten von einheiten	welches gehäuse weniger als zwei arten von einheiten bietet	das gehäuse bietet weniger als zwei arten von einheiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string < ) ( number 2 ) ) )
wohneinheiten mit weniger als zwei stadtteilen	wohneinheiten mit weniger als zwei stadtteilen	wohnungen mit weniger als zwei nachbarschaften	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string < ) ( number 2 ) ) )
nachbarschaft, die mindestens 2 wohnungen hat	nachbarschaft, die mindestens 2 wohnungen hat	nachbarschaft, die mindestens 2 wohnungen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
zeigen sie mir eine wohnung mit 800 quadratmetern fläche, in der katzen akzeptiert werden	zeigen sie mir gehäuse mit 800 quadratmetern fläche, wo katzen akzeptabel sind	show megehäuse mit 800 quadratmetern fläche, wo katzen sind akzeptabel	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )
wie lautet die telefonnummer dieser apartmentanlage?	was ist die telefonnummer dieses apartmentkomplexes	was ist die telefonnummer von diesem apartmentkomplex	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ) )
800 quadratmeter wohneinheit mit einem privaten raum	800 quadratmeter wohneinheit mit eigenem zimmer	800 quadratmeter großen wohneinheit mit eigenem zimmer	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string has_private_room ) ) )
finden sie wohneinheiten mit einer maximalen größe von 800 quadratfuß	finden sie wohneinheiten mit maximaler größe 800 quadratmeter	finden wohneinheiten mit einer maximalen größe von 800 quadratmetern	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )
gehäuse wie 123 sesamstraße, die am 2. januar veröffentlicht wurde	gehäuse wie 123 sesamstraße, die am 2. januar veröffentlicht wurde	gehäuse wie 123 sesame street wurde geschrieben am 2. januar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string size ) ) ( string = ) en.housing_unit.123_sesame_street ) )
miete zwischen 1500 und 2000 dollar	miete zwischen 1500 und 2000 dollar	mieten zwischen 1500 und 2000 usdollar	( call SW.listValue ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) )
finden sie eine wohnung	finden sie eine wohnung, die eine wohnung ist	finden sie gehäuse, dass ist eine wohnung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string housing_type ) ( string = ) en.housing.apartment ) )
gehäuse am oder vor dem 2. januar gebucht	wohnung, die am oder vor dem 2. januar gebucht wurde	gehäuse gepostet am oder vor dem 2. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
welche wohneinheit ist in der gleichen umgebung wie 123 sesame st und wurde am 2. januar gepostet	welche wohneinheit in der gleichen nachbarschaft wie 123 sesam st ist und wurde am 2. januar gepostet	was wohneinheit ist in der gleichen nachbarschaft als 123 sesame street und wurde gepostet am jan 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.housing_unit.123_sesame_street ) )
wohneinheit in west midtown am 2. januar gebucht	wohneinheit in west midtown am 2. januar veröffentlicht	gehäuseeinheit in west midtown geschrieben am 2. januar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
eine wohneinheit, die am 2. januar oder 3. februar gepostet wurde	eine wohneinheit, die am 2. januar oder 3. februar	eine wohneinheit veröffentlicht am 2. januar oder 3. februar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) )
gehäuse, das 800 quadratmeter und 1500 monate ist	gehäuse, das 800 quadratmeter und 1500monate ist	gehäuse ist 800 quadratmeter groß und 1500month	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )
welche art von gehäuse ist 123 sesamstraße	welche art von gehäuse ist 123 sesamstraße	welche art von gehäuse 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) )
welches gehäuse hat die günstigste miete	welche wohnung hat die günstigste miete	welche wohnung hat die günstigsten mieten	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string rent ) ) ) )
wohnungstyp in der sesamstraße 123	wohnbautyp auf der sesamstraße 123	gehäuse typ auf 123 sesame street	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string housing_type ) ) )
wohnung mit einem privaten raum	wohnung mit eigenem zimmer	wohnung mit eigenem zimmer	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string has_private_room ) ) )
800 quadratmeter große wohnung mit eigenem bad	800 quadratmeter große wohnung mit eigenem bad	800 quadratmeterwohnung mit eigenem bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string has_private_bath ) ) )
apartment mit eigenem bad	wohnung mit eigenem bad	apartment mit eigenem bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string has_private_bath ) ) )
wohnung mit einem masterbad	wohnung mit hauptbadezimmer	wohnung mit masterbad	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) )
gehäuse, das hunde erlaubt und am 2. januar veröffentlicht wurde	gehäuse, das hunde erlaubt und wurde am 2. januar	gehäuse, die erlaubt, dass hunde und war veröffentlicht am 2. januar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )
welche stadtteile haben hundefreundliche unterkünfte?	welche stadtteile hundefreundliches wohnen haben	die stadtteile haben eine hundefreundliche gehäuse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ) )
wohneinheiten mit einem privaten raum finden	wohnungseinheiten mit eigenem zimmer finden	finden wohneinheiten mit eigenem zimmer	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string has_private_room ) ) )
was für ein gehäuse ist ein typ mit zwei einheiten	welches gehäuse ist ein zweieinheitentyp	welche wohnung ist eine zweieinheit typ	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
finden sie eine ähnliche unterkunft wie das haus in der sesamstraße 123	finden sie eine ähnliche wohnung wie das haus in der 123 sesamstraße	finden sie gehäuse, ähnlich wie das haus befindet sich auf 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) ) )
gehäusetypen der meisten einheiten	gehäusetypen der meisten einheiten	gehäusetypen von den meisten einheiten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string housing_type ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
welche wohneinheit hat die gleiche größe wie die am 2. januar veröffentlichte wohneinheit?	welche wohneinheit die gleiche größe hat wie die einheit, die am 2. januar	was die gehäuseeinheit ist die gleiche größe wie die einheit gepostet am jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
welches gehäuse in midtown west hat ein eigenes bad	welche wohnung in midtown west hat ein eigenes bad	die wohnungen in midtown west verfügt über ein eigenes bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
welcher bereich hat mehr als zwei wohneinheiten	welche fläche hat mehr als zwei wohneinheiten	die gegend hat mehr als zwei wohneinheiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
gehäuse, das 2. januar oder später gebucht wurde	gehäuse, das am 2. januar oder später veröffentlicht wurde	gehäuse gepostet wurde 2. januar oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
in welcher nachbarschaft befindet sich die wohneinheit, die am 2. januar gepostet wurde?	welche nachbarschaft ist die wohneinheit in, die am 2. januar veröffentlicht wurde	was nachbarschaft ist, der wohnungswirtschaft, der gepostet 2. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
wohneinheit in der nähe von midtown west	wohneinheit in der nähe von midtown west	gehäuseeinheit in der nähe von midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
katzenfreundliche apartments mit eigenem zimmer	katzenfreundliche apartments mit eigenem zimmer	catfreundliche apartments mit eigenem zimmer	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string has_private_room ) ) )
wohneinheit mit einer größe von entweder 800 oder 1000 quadratfuß	wohneinheit mit einer größe von 800 oder 1000 quadratmetern	wohneinheit mit der größe von entweder 800 oder 1000 quadratmeter	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) )
liste alle gehäuse, die kleiner als 800 quadratmeter sind	alle gehäuse auflisten, die kleiner als 800 quadratmeter sind	liste aller gehäuse, die kleiner als 800 quadratmeter	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string < ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )
gehäuse, das nach dem 2. januar oder 3. februar veröffentlicht wurde	gehäuse, das nach dem 2. januar oder 3. februar	gehäuse gepostet wurde nach dem 2. januar oder 3. februar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) ) )
welche art von gehäuse sind die beiden wohneinheiten	welche art von wohnraum sind die beiden wohneinheiten	welche art von gehäuse sind die zwei wohneinheiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
wie viel kostet die miete in der sesamstraße 123 im monat?	wie viel pro monat ist die miete in 123 sesamstraße	wie viel ein monat ist die miete bei 123 sesame street	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) )
welches gehäuse ist nicht größer als 123 sesamstraße	welches gehäuse nicht größer als 123 sesamstraße ist	das gehäuse ist nicht größer als 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )
apartments mit eigenem bad	apartments mit eigenem bad	apartments mit einem eigenen bad	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ) )
auf der suche nach einer wohnung, die keine wohnung ist	auf der suche nach wohnungen, die keine wohnung sind	für die unterbringung suchen, dass nicht eine wohnung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string ! = ) en.housing.apartment ) )
seltenste wohnform	seltenste gehäuseart	seltensten gehäuse typ	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string housing_type ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
gehäuse in weniger als zwei stadtteilen gefunden	wohnungen in weniger als zwei vierteln gefunden	gehäuse gefunden, in weniger als zwei nachbarschaften	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string < ) ( number 2 ) ) )
apartment mit hauptschlafzimmer und eigenem bad	wohnung mit hauptschlafzimmer und eigenem bad	apartment mit einem schlafzimmer und eigenem bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string has_private_bath ) ) )
welche wohneinheit hat eine miete von 1500 dollar oder 2000 dollar pro monat	welche wohneinheit hat eine miete von 1500 dollar oder 2000 dollar pro monat	die wohneinheit hat einen mietpreis von 1500 dollar oder 2000 dollar pro monat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) ) )
was midtown west housing erlaubt katzen	was midtown west gehäuse erlaubt katzen	was midtown west gehäuses ermöglicht katzen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
welche wohneinheit am 2. januar gebucht ist die gleiche größe wie 123 sesamstraße	welche wohneinheit auf jan 2 gebucht ist die gleiche größe wie 123 sesamstraße	was wohneinheit gepostet am jan 2 ist die gleiche größe wie 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string size ) ) ( string = ) en.housing_unit.123_sesame_street ) )
nachbarschaften, die 800 quadratfuß gehäuse haben	nachbarschaften, die 800 quadratmeter wohnfläche haben	nachbarschaften, die 800 quadratmeter gehäuse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ) )
auf der suche nach einer ruhigen gegend	auf der suche nach einer ruhigen nachbarschaft	auf der suche nach einer ruhigen nachbarschaft	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
wohneinheiten von entweder 800 quadratfuß oder 1000 quadratfuß	wohneinheiten von 800 quadratmetern oder 1000 quadratmetern	gehäuseeinheiten von 800 quadratmetern oder auf 1000 quadratmetern	( call SW.listValue ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) )
gehäuse mit 2 umliegenden stadtteilen	wohnen mit 2 umliegenden vierteln	gehäuse mit 2 umliegenden stadtteilen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string <= ) ( number 2 ) ) )
suche nach apartments, die am 2. januar veröffentlicht wurden	find apartments veröffentlicht am januar 2	finden sie apartments veröffentlicht am 2. januar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )
in welchen stadtteilen sind hunde erlaubt?	welche viertel wohnungen haben, in denen hunde erlaubt sind	die stadtteile haben eine gehäuse, wo hunde erlaubt sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ) )
wohnungen gepostet vor 123 sesame street gepostet wurde	wohnungen vor 123 sesamstraße veröffentlicht wurde	apartments gebucht vor 123 sesame street wurde geschrieben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )
haustierfreundliche 800 quadratfuß wohneinheit	haustierfreundliche 800 quadratmeter wohneinheit	pet friendly 800 quadratmeter wohneinheit	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string allows_dogs ) ) )
gehäuse, das 800 quadratmeter oder weniger ist	gehäuse, das 800 quadratmeter oder weniger ist	gehäuse mit 800 qm oder weniger	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )
wohneinheit in midtown west und erlaubt hunde	wohneinheit in midtown west und erlaubt hunde	gehäuseeinheit in midtown west und ermöglicht den hunden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string allows_dogs ) ) )
welche wohneinheit mit einer fläche von 800 quadratmetern ist für eine miete von 1500 dollar pro monat verfügbar	welche wohneinheit mit einer fläche von 800 quadratmetern für eine miete von 1500 dollar pro monat zur verfügung steht	die wohneinheit mit einer fläche von 800 quadratmetern ist verfügbar gremien miete von 1500 dollar pro monat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )
katzenfreundliche wohnungen mit miete um 1500	katzenfreundliche wohnungen mit miete bei 1500	katze freundliche wohnungen mit mieten unter 1500	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string allows_cats ) ) )
gehäuse am 2. januar veröffentlicht, die hunde erlaubt	gehäuse am 2. januar veröffentlicht, die hunde erlaubt	gehäuse geschrieben am januar 2nd, dass hunde erlaubt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )
auf der suche nach wohnungen	auf der suche nach wohnungen	auf der suche nach wohnungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string housing_type ) ( string = ) en.housing.apartment ) )
welche größe hat die wohneinheit am 2. januar?	welche größe hat die wohneinheit, die am 2. januar	wie groß ist die wohnungswirtschaft veröffentlicht am 2. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
gehäuse wohnungen mit eigenem bad	wohnwohnungen mit eigenem bad	gehäuse apartments mit eigenem bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string has_private_bath ) ) )
welches gehäuse hat eine monatliche miete von 1500 dollar	welche wohnung hat eine monatliche miete von 1500 dollar	das gehäuse hat eine monatliche miete von 1500 dollar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )
finden sie wohneinheiten in der gleichen größe von 123 sesamstraße	finden sie wohneinheiten in der gleichen größe von 123 sesamstraße	finden sie wohnungen in der gleichen größe von 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) )
gehäuse, das hunde erlaubt und am 2. januar veröffentlicht wurde	gehäuse, das hunde erlaubt und wurde am 2. januar	gehäuse, die erlaubt, dass hunde und war veröffentlicht am 2. januar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string allows_dogs ) ) )
wohneinheit zur miete am 2. januar gebucht	wohneinheit zur miete veröffentlicht am 2. januar	wohneinheit zur miete veröffentlicht am 2. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
suche nach wohneinheiten, die vor oder am selben datum wie die sesamstraße 123 gepostet wurden	finden sie wohneinheiten, die vor oder am selben datum wie 123 sesamstraße gebucht wurden	finden wohneinheiten geschrieben werden, bevor oder am selben tag wie 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )
was ist der durchschnitt? finden sie 800 quadratmeter große wohneinheiten, in denen katzen leben können	was ist der durchschnitt finden 800 quadratmeter wohneinheiten, die katzen ermöglichen	was ist die durchschnittliche finden 800 quadratmeter wohnungen, die es ermöglichen, katzen	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ) ) )
gehäuse, das für mindestens 1500 pro monat mietet	wohnungen, die mindestens 1500 pro monat vermietet	gehäuse, dass die mieten für mindestens 1500,  pro monat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )
apartments veröffentlicht am 2. januar	apartments veröffentlicht am 2. januar	apartments veröffentlicht am 2. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
suche mir eine wohneinheit, die 1500 für miete berechnet und ein eigenes bad hat	finden sie mich eine wohneinheit, die 1500 zu vermieten und hat ein eigenes bad	suche mir eine gehäuseeinheit, die gebühren 1.500,  für miete und verfügt über ein eigenes bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string has_private_room ) ) )
die 1500 monatlichen mieten sind 800 quadratmeter	1500 monatliche mieten sind 800 quadratmeter	die 1500 monatliche mieten sind 800 quadratmeter	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )
in welcher wohneinheit sind katzen erlaubt?	welche wohneinheit katzen darin zulässt	die gehäuseeinheit erlaubt die katzen drin	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string allows_cats ) ) )
eine nachbarschaft mit weniger als zwei wohneinheiten	eine nachbarschaft mit weniger als zwei wohneinheiten	ein viertel mit weniger als zwei hauseinheiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
gehäuse mit nicht mehr als zwei wohneinheiten	gehäuse mit nicht mehr als zwei wohneinheiten	gehäuse mit nicht mehr als zwei wohneinheiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
wie viele nachbarschaften	wie viele nachbarschaften	wie viele nachbarschaften	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ) )
wie groß ist das gerät in der sesamstraße 123?	wie groß ist das gerät an der sesamstraße 123	wie groß ist das gerät bei 123 sesame street	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) )
wohnungen zur miete unter 1500	wohnungen zu vermieten unter 1500	wohnungen zur miete unter 1500	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )
hundefreundliches wohnen	hundefreundliches wohnen	hundefreundliche gehäuse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string allows_dogs ) ) )
welche wohneinheit ist teurer als 123 sesamstraße	welche wohneinheit ist teurer als 123 sesamstraße	die wohneinheit ist teurer als 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )
wohneinheiten, die mindestens so groß sind wie die wohneinheit in der sesamstraße 123	wohneinheiten, die mindestens die gleiche quadratmeterzahl wie die wohneinheit auf 123 sesamstraße sind	wohneinheiten, die mindestens der gleichen quadratmeterzahl als das gehäuseeinheit, die auf 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )
was ist die art von wohnraum in der sesamstraße 123	was ist die art von wohnraum in 123 sesamstraße zur verfügung	was ist die art von gehäuse in 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) )
welche wohneinheit, die katzen erlaubt, wurde am 2. januar veröffentlicht	welche wohneinheit, die katzen erlaubt, wurde am 2. januar veröffentlicht	was die gehäuseeinheit, so dass katzen wurde gepostet am jan 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string allows_cats ) ) )
wohneinheit mit 2 gehäusetypen	wohneinheit mit 2 wohnarten	wohneinheit mit 2 arten von wohnungen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string < ) ( number 2 ) ) )
lokalisieren wohneinheiten mit eigenem bad	wohneinheiten mit privatem zimmerbad lokalisieren	suchen sie die wohneinheiten mit eigenem zimmer, bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string has_private_bath ) ) )
kleinste verfügbare einheit	kleinste verfügbare einheit	kleinste verfügbare einheit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string size ) ) ) )
unterbringung von wohnungen, die katzen erlaubt	wohnraum wohnungen, die katzen ermöglicht	gehäuse wohnungen, die erlaubt, katzen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )
einheiten, die vor dem 2. januar veröffentlicht wurden	einheiten, die vor dem 2. januar gebucht wurden	einheiten geschrieben werden, bevor ab 2. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
welche unterkunft mit privatem zimmer gebucht 2. jan	welche wohnung mit einem privaten zimmer gepostet jan 2.	welche wohnung mit einem eigenen zimmer gebucht, jan 2.	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string has_private_room ) ) )
eine nachbarschaft mit höchstens zwei wohneinheiten	ein viertel mit höchstens zwei wohneinheiten	eine nachbarschaft mit höchstens zwei hauseinheiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
welche art von unterkunft ist für eine miete von 1500 dollar pro monat zur verfügung	welche art von wohnraum für eine miete von 1500 dollar pro monat zur verfügung steht	welche art von gehäuse ist für eine miete von 1500 dollar pro monat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ) )
wohneinheit mit einem buchungsdatum, das unter dem der sesamstraße 123 liegt	wohneinheit mit buchungsdatum kleiner als 123 sesamstraße	gehäuseeinheit mit buchungsdatum weniger als 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )
wie hoch ist die monatliche durchschnittsmiete einer wohneinheit?	was ist die durchschnittliche miete pro monat einer wohneinheit	was ist die durchschnittliche miete pro monat eine wohneinheit	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ) ) )
gehäuse, das billiger als 1500 monate ist	wohnraum, der billiger ist als 1500monate	gehäuse, die billiger ist als 1500month	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string < ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )
apartmentkomplexe mit den meisten einheiten	apartmentkomplexe mit den meisten einheiten	apartmentkomplexe mit den meisten einheiten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( string housing_type ) ) )
gehäuse, das nach dem 2. januar oder nach dem 3. februar veröffentlicht wurde	gehäuse, das nach dem 2. januar oder nach dem 3. februar	gehäuse gepostet wurde nach dem 2. januar oder 3. februar nach	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) ) )
gehäuse mit mehr quadratmeter als 123 sesamstraße	gehäuse mit mehr quadratmetern als 123 sesamstraße	gehäuse mit mehr quadratmeterzahl als 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )
gehäuse, das weniger als 800 quadratfuß ist	gehäuse, das weniger als 800 quadratmeter groß ist	gehäuse, das ist weniger als 800 quadratmeter	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string < ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )
wohneinheiten mit einem gehäusetyp	wohneinheiten mit einem gehäusetyp	wohneinheiten mit einem gehäuse typ	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string < ) ( number 2 ) ) )
eine zwei wohneinheit	eine zweigehäuseeinheit	eine zweigehäuseeinheit	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) ( number 2 ) ) )
gehäuse, das 800 quadratmeter groß ist und eine private bah enthält	gehäuse, das 800 quadratmeter groß ist und eine private bah	gehäuse ist 800 quadratmeter groß und verfügt über ein eigenes bah	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )
welche unterkunft mit am 2. januar gebucht hat ein eigenes bad	welche wohnung mit auf jan 2 gepostet hat ein eigenes bad	was gehäuse mit gepostet am jan 2 hat ein eigenes bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )
hier finden sie alle wohneinheiten, die am 2. januar veröffentlicht wurden	finden sie alle wohneinheiten gebucht am januar 2	finde alle wohneinheiten geschrieben am 2. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
finde wohneinheiten weit weg von midtown west	finden wohneinheiten weit weg von midtown west	finden wohneinheiten weit entfernt von midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string ! = ) en.neighborhood.midtown_west ) )
800 fuß wohnung mit einem privaten raum	800 fuß wohnung mit eigenem zimmer	800fußwohnung mit eigenem zimmer	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )
gehäuse, das mindestens 800 quadratmeter oder mindestens 1000 quadratmeter groß ist	gehäuse, das mindestens 800 quadratmeter oder mindestens 1000 quadratmeter groß ist	gehäuse mit mindestens 800 quadratmetern oder mindestens 1000 quadratmeter	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) ) )
wohneinheit, die eine wohnung ist	wohneinheit, die eine wohnung ist	eine wohneinheit ist eine wohnung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string housing_type ) ( string = ) en.housing.apartment ) )
finden sie wohneinheiten in der gleichen wohnform wie in der sesamstraße 123	finden wohneinheiten in der gleichen wohnart von 123 sesamstraße	finden wohneinheiten im gleichen gehäuse typ 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string housing_type ) ) ) )
wohneinheiten mit privatem zimmer finden und 1500 dollar als monatliche miete haben	finden wohneinheiten mit einem privaten zimmer und hat 1500 dollar als monatliche miete	finden wohneinheiten mit einem privaten raum und hat 1500 dollar monatliche miete	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )
finden sie wohneinheiten mit einer größe von weniger als 800 quadratfuß	finden sie wohneinheiten mit einer größe von weniger als 800 quadratmetern	finden wohneinheiten mit einer größe von weniger als 800 quadratmetern	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string < ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )
wohnungen mit einer günstigeren miete als 123 sesamstraße	wohnungen mit einer günstigeren miete als 123 sesamstraße	wohnungen mit einer miete billiger als 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )
welche wohneinheit ist größer in der fläche von 800 quadratmetern oder 1000 quadratmetern	welche wohneinheit größer ist in der fläche von 800 quadratmetern oder 1000 quadratmeter	die wohneinheit ist größer in fläche von 800 quadratmetern oder auf 1000 quadratmetern	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) ) )
wohnraum für weniger als 1500 dollar finden	finden sie wohnungen für weniger als 1500 dollar	finden sie gehäuse für weniger als 1500 dollar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string < ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )
800 quadratmeter große wohnung mit einem privaten raum	800 quadratmeter große wohnung mit eigenem zimmer	800 quadratmeterwohnung mit einem eigenen zimmer	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string has_private_room ) ) )
wohnungen, die kleiner als 123 sesamstraße sind	wohnungen, die kleiner als 123 sesamstraße sind	wohnungen, die kleiner sind als 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )
das ist die nachbarschaft, die von den meisten wohneinheiten geteilt wird	die nachbarschaft ist, die von den meisten wohneinheiten geteilt wird	was ist mit der nachbarschaft geteilt durch die anzahl der wohneinheiten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
gehäuse mit der gleichen miete wie 123 sesamstraße	wohnen mit der gleichen miete wie 123 sesamstraße	gehäuse mit der gleichen miete wie 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) )
eine wohnung, die am 2. januar gepostet wurde	eine wohnung, die am 2. januar gepostet wurde	eine wohnung, veröffentlicht wurde am 2. januar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )
welche wohneinheit erlaubt katzen darin	welche wohneinheit katzen darin zulässt	die gehäuseeinheit erlaubt katzen in es	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) )
nachbarschaften mit wohnungen, die ein eigenes bad haben	nachbarschaften mit wohnraum, die ein eigenes bad hat	nachbarschaften mit gehäuse hat ein eigenes bad	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ) )
wohneinheit mit dem gleichen wohnungstyp wie in der sesamstraße 123	wohneinheit mit dem gleichen gehäusetyp wie die 123 sesamstraße	gehäuseeinheit mit gleichen gehäusetyp als der 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string housing_type ) ) ) )
welche wohneinheit hat die kleinste größe	welche wohneinheit die kleinste größe hat	die wohnungswirtschaft hat die kleinste größe	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string size ) ) ) )
was für eine art von unterkunft ist in der sesamstraße 123	welche art von gehäuse ist in 123 sesamstraße	welche art von gehäuse ist in 123 sesame street	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string neighborhood ) ) )
wohneinheit am 2. januar gebucht und das ist die gleiche größe wie 123 sesam st	wohneinheit am 2. januar gebucht und das ist die gleiche größe wie 123 sesam st	wohnungswirtschaft veröffentlicht am januar 2, und das ist die gleiche größe wie 123 sesame st	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string size ) ) ( string = ) en.housing_unit.123_sesame_street ) )
welche wohneinheit gehört zur apartmentkategorie mit der ausstattung eines privatzimmers?	welche wohneinheit zur wohnungsart mit der einrichtung eines privaten zimmers gehört	die wohneinheit gehört zu der wohnung art mit, die anlage in einen privaten raum,	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )
wohnen in einer nachbarschaft größer als zwei häuser	wohnen in einem viertel größer als zwei häuser	wohnen in einer nachbarschaft, die größer als zwei häuser	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
gehäuse, das über 800 quadratfuß oder über 1000 quadratfuß ist	gehäuse, das über 800 quadratmeter oder über 1000 quadratmeter ist	gehäuse, das ist über 800 quadratmeter oder über 1000 quadratmetern	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) ) )
gehäuse, das keine wohnung ist	wohnen, das keine wohnung ist	gehäuse, das ist keine wohnung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string ! = ) en.housing.apartment ) )
was sind die seltenen gehäusetypen?	was sind die seltenen gehäusetypen	was sind die seltenen gehäusetypen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string housing_type ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
nennen sie gehäusetypen, die mehr als eine wohneinheit dieses typs haben	name gehäusetypen, die mehr als eine wohneinheit dieses typs haben	name gehäusetypen, die mehr als eine wohneinheit dieses typs	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
wohneinheit mit einem privaten raum	wohneinheit mit eigenem zimmer	wohneinheit mit eigenem zimmer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) )
suchen sie eine wohneinheit, die am 2. januar veröffentlicht wurde und über ein eigenes zimmer verfügt	finden sie eine wohneinheit am 2. januar gebucht und das hat ein privates zimmer	finden sie eine wohneinheit veröffentlicht am januar 2 und hat einen privaten raum,	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string has_private_room ) ) )
suche wohnung oder eigentumswohnung	auf der suche nach einer wohnung oder eigentumswohnung	suche wohnung oder eigentumswohnung	( call SW.listValue ( call SW.concat en.housing.apartment en.housing.condo ) )
welche 1500 monatsmieten sind hundefreundlich	1500 monatsmieten sind hundefreundlich	die 1500 monatliche mieten sind hund freundlich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )
wohnen nicht in midtown west	wohnungsbau nicht in midtown west	gehäuse nicht in midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string ! = ) en.neighborhood.midtown_west ) )
welche wohneinheit in der gegend erlaubt katzen?	welche wohneinheit in der umgebung katzen zulässt	die gehäuseeinheit in den bereich erlaubt, katzen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ) )
gehäuse mit privatem zimmer, das am 2. januar veröffentlicht wurde	wohnung mit privatem zimmer, die am 2. januar veröffentlicht wurde	gehäuse mit privaten raum, veröffentlicht wurde am 2. januar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )
was ist der am häufigsten verwendete gehäusetyp?	was ist die am häufigsten verwendete gehäusetyp	was ist die am häufigsten verwendete gehäuse typ	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string housing_type ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
welche wohneinheit ist flächenmäßig größer?	welche wohneinheit flächenstärker ist	die gehäuseeinheit, die größer ist, durch die gegend	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string size ) ) ) )
welche wohneinheit, die hunde erlaubt, wurde am 2. januar veröffentlicht	welche wohneinheit, die hunde erlaubt, wurde am 2. januar gepostet	was die gehäuseeinheit, so dass hunde wurde gepostet am jan 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string allows_dogs ) ) )
was ist der haustyp von 123 sesamstraße	was ist der wohntyp der 123 sesamstraße	was ist die gehäusetyp 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) )
hundefreundliche unterkunft, die 800 quadratmeter ist	hundefreundliches gehäuse, das 800 quadratmeter groß ist	hundefreundliche gehäuse, das 800 quadratmeter	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string allows_dogs ) ) )
finden sie 800 quadratmeter große wohneinheiten, die katzenfreundlich sind	finden sie 800 quadratmeter wohneinheiten, die katzenfreundlich sind	finden 800 quadratmeter wohneinheiten, die katze freundlich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )
was ist die nachbarschaft der wohneinheit der wohnungen	was ist die nachbarschaft der wohneinheit der wohnungen	was ist die nachbarschaft der wohnungswirtschaft von den apartments entfernt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ) )
welches gehäuse besteht aus maximal zwei einheiten	das gehäuse besteht aus zwei einheiten maximal	das gehäuse besteht aus zwei einheiten maximale	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
was ist das für eine wohnungsgröße	was ist das gehäuseeinheit größe	was ist das gehäuse einheitsgröße	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ) ) )
finden sie 800 quadratmeter große wohneinheiten	finden sie 800 quadratmeter große wohneinheiten	finden 800 quadratmeter große wohneinheiten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )
welches gehäuse am 2. januar bei 123 sesamstraße gebucht	welche wohnung geschrieben jan 2nd bei 123 sesamstraße	die gehäuse gepostet jan 2. bei 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string posting_date ) ) ( string = ) en.housing_unit.123_sesame_street ) )
finden sie eine wohnung, die 800 quadratmeter groß ist	finden sie eine wohnung, die 800 quadratmeter groß ist	finden sie eine wohnung, die 800 quadratmeter	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )
was ist die miete von 123 sesamstraße	was ist die miete von 123 sesamstraße	was ist das vermieten von 123 sesame street	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) )
midtown west einheit mit 1500 miete monatlich	midtown west unit mit 1500 miete monatlich	midtown westeinheit mit 1500 miete monatlich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
katzenfreundliche apartments mit eigenem bad	katzenfreundliche apartments mit eigenem bad	cat freundlichen apartments mit einem eigenen bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string allows_cats ) ) )
listen sie alle wohnungen auf, die mindestens 800 oder 1000 quadratfuß groß sind	liste alle gehäuse uns, die mindestens 800 oder 1000 quadratmeter sind	liste aller wohnungen uns, dass sind mindestens 800 oder 1000 quadratmeter	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) ) )
zeige nur wohneinheiten von 800 quadratfuß	nur nachbarschaftseinheiten von 800 quadratmetern anzeigen	zeigt nur vierteleinheiten von 800 quadratmetern	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ) )
wo sind die meisten wohneinheiten gefunden	wo sind die meisten wohneinheiten gefunden	wo sind die anzahl der wohneinheiten gefunden	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
finden sie wohneinheiten in den stadtteilen von midtown west mit 1500 dollar monatlicher miete	finden sie wohneinheiten in den vierteln von midtown west mit 1500 dollar als monatliche miete	finden sie wohnungen in den vierteln von midtown west mit 1500 dollar monatliche miete	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )
welche nachbarschaft hat die meisten apartmentkomplexe	welche nachbarschaft hat die meisten apartmentkomplexe	in welchem viertel die meisten apartmentkomplexe	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
katzenfreundliche unterkunft mit einem privaten raum	katzenfreundliches gehäuse mit eigenem zimmer	katze freundliche wohnraum mit einem eigenen zimmer	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string has_private_room ) ) )
nachbarschaften mit wohneinheiten mit privaten räumen	nachbarschaften mit wohneinheiten mit privatzimmern	nachbarschaften mit gehäuse einheiten mit eigenem zimmer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ) )
wohneinheit innerhalb von höchstens 2 stadtteilen	wohneinheit in höchstens 2 stadtteilen	gehäuseeinheit innerhalb von höchstens 2 nachbarschaften	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string <= ) ( number 2 ) ) )
welche wohneinheit gibt es in der gegend um midtown west?	welche wohneinheit in der gegend um midtown west verfügbar ist	die wohneinheit ist verfügbar in der umgebung midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
wann wurde 123 sesamstraße gebucht	wann war 123 sesamstraße gepostet	wann wurde 123 sesame street geschrieben	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) )
welche wohneinheit hat zwei oder mehr gehäusetypen?	welche wohneinheit zwei oder mehr gehäusetypen hat	was wohneinheit hat zwei oder mehr gehäusetypen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string > ) ( number 2 ) ) )
zeigen sie mir wohnen in midtown west oder chelsea	zeigen mir gehäuse in midtown west oder chelsea	zeig mir wohnen in midtown west oder chelsea	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.concat en.neighborhood.midtown_west en.neighborhood.chelsea ) ) )
was für eine art von unterkunft ist 123 sesamstraße oder 900 mission ave.	welche art von gehäuse ist 123 sesamstraße oder 900 mission ave	welche art von gehäuse 123 sesame street oder 900 mission ave	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.concat en.housing_unit.123_sesame_street en.housing_unit.900_mission_ave ) ) )
finden sie 800 quadratmeter große wohnungen in den vierteln von midtown west	finden sie 800 quadratmeter große wohnungen in den vierteln von midtown west	finden 800 quadratmeter große wohnungen in den vierteln von midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
welche wohneinheit hat wohnung art von haus mit einer fläche von 800 quadratmetern	welche wohneinheit hat wohnung art von haus mit einer fläche von 800 quadratmetern	die wohnungswirtschaft hat die wohnung art des hauses mit einer fläche von 800 quadratmetern	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )
welche wohneinheit ist am oder vor dem 2. januar gebucht	welche wohneinheit am oder vor dem 2. januar gebucht wird	die wohneinheit ist gebucht, die am oder vor jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
eigentumswohnung oder apartment gehäuse	eigentumswohnung oder wohnungswohnung	eigentumswohnung oder apartment gehäuse	( call SW.listValue ( call SW.concat en.housing.apartment en.housing.condo ) )
zeigen sie mir orte mit einem privaten raum, in denen katzen willkommen sind	zeigen sie mir orte mit einem privaten raum, wo katzen willkommen sind	zeigen sie mir orte, die mit einem privaten raum, wo die katzen sind willkommen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string has_private_room ) ) )
wohnen in der nachbarschaft von 123 sesamstraße	wohnung in der nachbarschaft von 123 sesamstraße	wohnen in der nachbarschaft von 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string neighborhood ) ) ) )
wie viele wohneinheiten gibt es?	wie viele wohneinheiten es gibt	wie viele wohneinheiten gibt es	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
welche wohneinheit ist vor dem buchungsdatum von 123 sesamstraße gebucht	welche wohneinheit vor dem buchungsdatum 123 sesamstraße gebucht wird	die gehäuseeinheit geschrieben werden, bevor das buchungsdatum 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )
wohneinheit gebucht 2. januar und die gleiche miete wie 123 sesamstraße	wohneinheit gebucht 2. januar und die gleiche miete wie 123 sesamstraße	gehäuseeinheit gepostet 2. januar und die gleiche miete wie 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string rent ) ) ( string = ) en.housing_unit.123_sesame_street ) )
gebäude mit zwei oder weniger arten von einheiten	gebäude mit zwei oder weniger arten von einheiten	gebäude mit zwei oder weniger arten von einheiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string <= ) ( number 2 ) ) )
einheit von durchschnittlicher größe	einheit der durchschnittlichen größe	einheit von durchschnittlicher größe	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ) ) )
welche nachbarschaft ist 123 sesamstraße in	welche nachbarschaft ist 123 sesamstraße in	was nachbarschaft ist 123 sesame street in	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string neighborhood ) ) )
apartments, die hundefreundlich sind	wohnungen, die hundefreundlich sind	wohnungen sind hundefreundlich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string allows_dogs ) ) )
welche wohneinheit hat die geringste vielfalt an häusern?	welche wohneinheit die geringste vielfalt an häusern hat	die wohnungswirtschaft hat die geringste vielfalt von häusern	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( string housing_type ) ) )
wohneinheiten, die katzen erlauben und 1500 miete monatlich berechnen	wohneinheiten, die katzen erlauben und 1500 miete monatlich berechnen	wohnungen, die es ermöglichen, katzen und kostenlos 1500 miete monatlich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string allows_cats ) ) )
wohnung zu vermieten um 1500	wohnung zu vermieten bei 1500	wohnung zur miete 1500	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )
welche arten von wohnungen haben ein eigenes bad?	welche wohnformen über ein eigenes bad verfügen	welche arten von wohnungen haben ein eigenes bad	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ) )
hundefreundliche 800 quadratmeter große wohnung	hundefreundliche 800 quadratmeter große wohnung	hund freundlich 800 quadratmeter wohnung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string allows_dogs ) ) )
wohnen in midtown west mit einem privaten raum	wohnen in midtown west mit eigenem zimmer	gehäuse in midtown west, mit einem privaten raum	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
nennen sie andere wohnungstypen als 123 sesamstraße	name gehäusetypen außer 123 sesamstraßentyp	name gehäuse andere typen als 123 sesame street art	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string ! = ) en.housing_unit.123_sesame_street ) )
wohneinheit höchstens 800 quadratmeter	wohneinheit höchstens 800 quadratmeter	wohneinheit höchstens 800 quadratmeter	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )
eine wohneinheit, die am 2. januar in irgendeiner nachbarschaft gepostet wurde	eine wohneinheit, die am 2. januar in jeder nachbarschaft	eine wohneinheit veröffentlicht am 2. januar in jeder nachbarschaft	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
welche midtown west gehäuse 800 quadratmeter haben	die midtown west gehäuse haben 800 quadratmeter	die midtown west gehäuse haben 800 quadratmeter	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
welches gehäuse nicht früher als 2. januar oder 3. februar veröffentlicht	welches gehäuse nicht früher als 2. januar oder feb 3.	die gehäuse gepostet, die nicht älter als jan der 2. oder 3. feb	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) ) )
wohneinheit kleiner als 800 quadratfuß	wohneinheit kleiner als 800 quadratmeter	gehäuseeinheit, die kleiner als 800 quadratmeter	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string < ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )
welches gehäuse am 2. januar gepostet wurde, erlaubt hunde	welche wohnung gebucht jan 2. erlaubt hunde	die gehäuse gepostet jan 2. hunde erlaubt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )
800 quadratmeter große wohnung in midtown west	800 quadratmeter große wohnung in midtown west	800 quadratmeterwohnung in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
hundefreundliche wohnung	hundefreundliche wohnung	dog friendly apartment	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )
zeigen sie mir gehäuse, die ein eigenes bad haben und katzen erlauben	zeigen mir gehäuse, die ein eigenes bad haben und katzen erlauben	zeigen sie mir gehäuse und verfügen über ein eigenes bad und erlauben katzen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string allows_cats ) ) )
gehäuse, das kleiner als 800 quadratfuß oder kleiner als 1000 quadratfuß ist	gehäuse, das kleiner als 800 quadratmeter oder kleiner als 1000 quadratmeter ist	gehäuse, die kleiner als 800 quadratmeter oder kleiner als 1000 quadratmeter	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) ) )
gehäuse, das mehr als 800 quadratfuß ist	gehäuse, das mehr als 800 quadratmeter groß ist	 gehäuse mit mehr als 800 quadratmetern	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string ! = ) ( number 800 en.square_feet ) ) )
apartments mit eigenem bad	apartments mit eigenem bad	apartments mit eigenem bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string has_private_bath ) ) )
welche wohneinheit ähnelt 123 sesamstraße oder 900 mission ave.	welche wohneinheit ähnelt 123 sesamstraße oder 900 mission ave	die gehäuseeinheit ähnelt 123 sesame street oder 900 mission ave	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.concat en.housing_unit.123_sesame_street en.housing_unit.900_mission_ave ) ) )
was ist der gehäusetyp der wohneinheit mit einem privaten raum	was ist die wohnart der wohneinheit mit einem privaten raum	was ist die gehäusetyp gehäuseeinheit mit einem eigenen zimmer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ) )
welche wohneinheit mit einer fläche von 800 quadratmetern hat die möglichkeit, einen privaten raum	welche wohneinheit mit einer fläche von 800 quadratmetern hat die möglichkeit eines privaten raumes	die wohneinheit mit einer fläche von 800 quadratmetern hat die möglichkeit, einen privaten raum,	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string has_private_room ) ) )
stadtteile midtown west oder chelsea	nachbarschaften midtown west oder chelsea	stadtteile midtown west oder chelsea	( call SW.listValue ( call SW.concat en.neighborhood.midtown_west en.neighborhood.chelsea ) )
gehäuse am 2. januar oder 3. februar veröffentlicht	wohnungsbau am 2. januar oder 3. februar	gehäuse veröffentlicht am 2. januar oder 3. februar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) )
wohneinheit mit einem buchungsdatum größer als das datum 123 sesamstraße	wohneinheit mit einem buchungsdatum größer als das datum der 123 sesamstraße	gehäuseeinheit mit einem buchungsdatum größer als das datum der 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )
800 quadratmeter große wohnung, die katzen erlaubt	800 quadratmeter wohnung, die katzen ermöglicht	800 quadratmeterwohnung, die erlaubt, katzen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string allows_cats ) ) )
welche wohneinheit mit privatem zimmer wurde am 2. januar gepostet	welche wohneinheit mit privatem zimmer wurde am 2. januar gepostet	was wohneinheit mit eigenem zimmer wurde gepostet am jan 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string has_private_room ) ) )
welche wohneinheit hat zwei gehäusetypen	welche wohneinheit hat zwei gehäusetypen	was wohneinheit hat zwei gehäusetypen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) ( number 2 ) ) )
welche wohneinheit befindet sich im stadtteil midtown east?	welche wohneinheit in der midtown east nachbarschaft gefunden wird	was wohneinheit liegt in der midtown east nachbarschaft	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )
finden wohneinheiten nach 123 sesamstraße	finden wohneinheiten nach 123 sesamstraße gebucht	finden wohneinheiten gepostet nach 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )
zeigen sie mir wohnungen und eigentumswohnungen	zeigen sie mir wohnungen und eigentumswohnungen	zeigen sie mir, apartments und eigentumswohnungen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) ( call SW.concat en.housing.apartment en.housing.condo ) ) )
eine wohneinheit mit eigenem bad, die am 2. januar veröffentlicht wurde	eine wohneinheit mit eigenem bad, die am 2. januar veröffentlicht	eine wohneinheit mit eigenem bad, veröffentlicht am 2. januar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )
haustierfreundliche unterkunft mit 1500 dollar als miete	haustierfreundliches wohnen mit 1500 dollar als miete	pet friendlygehäuse mit 1500 dollar als miete	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )
welches gehäuse ist derselbe typ wie das am 2. januar veröffentlichte gehäuse?	welche wohnung ist die gleiche art wie die wohnung am 2. januar gebucht	das, was gehäuse ist, die denselben typ wie das gehäuse gepostet am 2. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
ich möchte einen haustyp wie die sesamstraße 123	wollen eine wohnart wie 123 sesamstraße	möchte ein gehäuse typ wie 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) )
was ist die miete von 123 sesamstraße pro monat	was ist die miete von 123 sesamstraße pro monat	was ist das vermieten von 123 sesame street pro monat	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) )
welches gehäuse am 2. januar gepostet wurde, erlaubt katzen	welche wohnung gebucht jan 2. erlaubt katzen	die gehäuse gepostet jan 2. genehmigungen katzen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )
apartments in midtown west mit eigenem zimmer	apartments in midtown west mit eigenem zimmer	apartments in midtown west, mit einem privaten raum	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
was ist die nachbarschaft der wohneinheit mit einem privaten raum	was ist die nachbarschaft der wohneinheit mit einem privaten zimmer	was ist die nachbarschaft von der gehäuseeinheit mit einem eigenen zimmer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ) )
wohnraum mit mietkosten zwischen 1500 und 2000 dollar finden	wohnungssuche mit mietkosten zwischen 1500 und 2000 dollar	finden wohnraum mit mieten zwischen 1500 und 2000 usdollar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) )
einheiten, die ein eigenes zimmer haben	einheiten, die über ein privates zimmer verfügen	einheiten haben ein eigenes zimmer	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string has_private_room ) ) )
gehäuse vor 123 sesamstraße geschrieben	wohnung vor 123 sesamstraße gebucht	gehäuse gepostet vor 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )
unterkunft für katzen, die am 2. januar veröffentlicht wurde	gehäuse für katzen, die am 2. januar gepostet wurde	gehäuse erlaubt katzen, veröffentlicht wurde am 2. januar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string allows_cats ) ) )
gehäuse am 2. januar veröffentlicht, die ein privates zimmer enthält	wohnung veröffentlicht 2. januar, die ein privates zimmer enthält	gehäuse gepostet 2. januar, die gehören ein eigenes zimmer	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string has_private_room ) ) )
einheit größer als 800 quadratfuß	einheit größer als 800 quadratmeter	einheit, die größer als 800 quadratmeter	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string > ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )
zeigen sie mir eine wohnung, die für 1500 dollar im monat oder weniger verfügbar ist	zeigen mir gehäuse für 1500 dollar pro monat oder weniger	zeigen sie mir gehäuse für 1500 dollar im monat oder weniger	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )
wohneinheit mit dem kleinsten buchungsdatum	wohneinheit mit dem kleinsten buchungsdatum	gehäuseeinheit mit der kleinsten buchungsdatum	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )
wohneinheiten mit einem buchungsdatum zwischen dem 2. januar und dem 3. februar suchen	wohnungseinheiten mit buchungsdatum zwischen dem 2. januar und dem 3. februar finden	finden wohneinheiten mit buchungsdatum zwischen dem 2. januar und 3. februar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) ) )
welche wohneinheit hat am 2. januar gepostet?	welche wohneinheit am 2. januar	die wohneinheit gebucht, jan 2.	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )
gerät mit einem gehäusetyp	einheit mit einem gehäusetyp	einheit mit einem gehäuse typ	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string < ) ( number 2 ) ) )
suche nach wohneinheiten, die am selben tag wie die sesamstraße 123 oder später veröffentlicht wurden	finden sie wohneinheiten, die auf dem datum wie 123 sesamstraße oder höher gebucht werden	finden wohneinheiten, die gebucht werden, auf dem datum, das gleiche wie 123 sesame street oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )
gehäuse, das am 2. januar von 123 sesamstraße art geschrieben wurde	wohnung, die am 2. januar von 123 sesamstraße art gepostet wurde	gehäuse, veröffentlicht wurde am 2. januar 123 sesame street art	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string posting_date ) ) ( string = ) en.housing_unit.123_sesame_street ) )
was ist die monatliche miete bei 123 sesamstraße	was ist die monatliche miete in 123 sesamstraße	was ist die monatliche miete bei 123 sesame street	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) )
was ist die quadratmeterzahl von 123 sesamstraße	was ist die quadratische naumfläche von 123 sesamstraße	was ist die fläche von 123 sesame street	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) )
wohnungen mit miete über 1500	wohnungen mit miete über 1500	wohnungen mit mieten über 1500	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string > ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )
gehäuse, das 1500 monate oder 2000 monate ist	gehäuse, das 1500monate oder 2000monat ist	gehäuse 1500month oder 2000month	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) )
welche arten von häusern gibt es in den stadtvierteln von midtown west?	was sind wohntypen in den vierteln von midtown west	was sind wohnformen, gefunden in der nachbarschaft des midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )
wohnung zwischen 800 und 1000 quadratmetern	wohnung zwischen 800 und 1000 quadratmetern	wohnung zwischen 800 und 1000 quadratmeter	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) ) )
finden sie ein gehäuse, das nicht mehr als 800 quadratmeter groß ist	finden sie ein gehäuse, das nicht mehr als 800 quadratmeter groß ist	suchen sie ein gehäuse, dass nicht mehr als 800 quadratmeter	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )
eine wohneinheit, die mehr als zwei gehäusetypen umfasst	eine wohneinheit, die mehr als zwei gehäusetypen umfasst	eine wohneinheit mit mehr als zwei wohnungstypen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string > ) ( number 2 ) ) )
wohneinheiten mit wenig wohnraum	wohneinheiten mit einer kleinen menge an wohnraum	wohneinheiten mit einer kleinen menge von wohnungen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( string housing_type ) ) )
welche wohneinheit hat maximal zwei gehäusetypen?	welche wohneinheit maximal zwei gehäusetypen hat	die wohneinheit hat ein maximum von zwei gehäusetypen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string <= ) ( number 2 ) ) )
welche wohneinheit am 2. januar gebucht hat eine monatliche miete von 1500 dollar	welche wohneinheit am 2. januar gebucht hat eine monatliche miete von 1500 dollar	was wohneinheit gepostet am jan 2 hat eine monatliche miete von 1500 dollar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )
wohneinheit mit einem buchungsdatum bis spätestens 2. januar	wohneinheit mit einem buchungsdatum spätestens am 2. januar	gehäuseeinheit mit einem buchungsdatum, spätestens 2. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
auf der suche nach einer einheit mit eigenem bad und hundefreundlich	auf der suche nach einer einheit mit eigenem bad und hundefreundlich	auf der suche nach einer einheit mit einem eigenen bad und hundefreundlich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string allows_dogs ) ) )
wohnung mit einem privaten raum zur miete bei 1500	wohnung mit einem privaten zimmer zu vermieten bei 1500	wohnung mit eigenem zimmer für miete auf 1500	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )
das ist die wohneinheit, in der hunde leben können	das ist die wohneinheit, die hunde in ihm erlaubt	das ist die gehäuseeinheit, die es erlaubt hunde drin	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string allows_dogs ) ) )
wohneinheit mit dem aktuellsten buchungsdatum suchen	wohnungseinheit mit dem letzten buchungsdatum finden	finden sie eine wohneinheit mit dem aktuellen buchungsdatum	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )
wohneinheit größer als 800 quadratfuß	wohneinheit größer als 800 quadratmeter	gehäuseeinheit, die größer als 800 quadratmeter	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )
gehäuse, das mindestens zwei nachbarschaft hat	gehäuse, das mindestens zwei nachbarschafts	gehäuse, in dem mindestens zwei nachbarschaft	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string >= ) ( number 2 ) ) )
wohneinheit mit einem privaten raum in midtown west	wohneinheit mit eigenem zimmer in midtown west	wohneinheit mit eigenem zimmer in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string has_private_room ) ) )
wohneinheit, die hunde erlaubt und ein eigenes bad hat	wohneinheit, die hunde erlaubt und hat ein eigenes bad	gehäuseeinheit, die erlaubt, dass hunde und hat ein eigenes bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string has_private_bath ) ) )
privathaus in midtown west	privatwohnungen in midtown west	private wohnungen in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
apartments mit eigenem bad in midtown west	apartments mit eigenem bad in midtown west	apartments mit eigenem bad in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
gehäuse von 800 quadratmetern am 2. januar veröffentlicht	gehäuse von 800 quadratmetern veröffentlicht am 2. januar	gehäuse aus 800 quadratmeter gepostet am 2. januar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )
welche wohneinheit auf jan 2s miete gebucht ist 1500 dollar	welche wohneinheit auf jan 2s miete gebucht ist 1500 dollar	was wohneinheit gepostet am jan 2s miete ist 1500 dollar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )
finden sie eine unterkunft mit einem privaten raum und bad	finden sie wohnraum mit eigenem zimmer und bad	wohnungssuche mit eigenem zimmer und bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string has_private_bath ) ) )
wohneinheiten mit monatlich ungleich 1500 dollar finden	wohnungseinheiten mit monatlich nicht gleich 1500 dollar finden	finden wohneinheiten mit monatlichen nicht gleich 1500 dollar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string ! = ) ( number 1500 en.dollar ) ) )
welche art von gehäuse ist in midtown west	welche art von wohnraum ist in midtown west	welche art von gehäuse ist in midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )
gehäuse gebucht am selben tag wie 123 sesamstraße	wohnen am selben tag wie 123 sesamstraße gebucht	gehäuse veröffentlicht am selben tag wie 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) )
in welchen stadtteilen sind mehr als zwei plätze verfügbar?	welche stadtteile mehr als zwei plätze zur verfügung haben	die stadtteile haben mehr als zwei plätze zur verfügung	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
gehäuse am selben tag oder nach 123 sesamstraße gebucht	wohnen am selben tag oder nach 123 sesamstraße gebucht	gehäuse gepostet am gleichen tag oder nach 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )
finden sie wohneinheiten mit 1500 dollar als miete und ist in der nähe von midtown west	finden wohneinheiten mit 1500 dollar als miete und ist in der nähe von midtown west	finden wohneinheiten mit 1500 dollar miete und ist in der nähe von midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
welches gehäuse hat ein privates zimmer	welche wohnung hat ein privates zimmer	welche wohnung hat ein eigenes zimmer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) )
welche arten von unterkünften erlauben katzen?	welche arten von gehäusen katzen erlauben	welche arten von gehäuse erlauben katzen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ) )
welche wohneinheit ist in zwei stadtteilen	welche wohneinheit in zwei vierteln ist	was wohneinheit ist in zwei stadtteile	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( number 2 ) ) )
wohneinheiten mit eigenem bad	wohneinheiten mit eigenem bad	die wohneinheiten mit eigenem bad	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) )
wohneinheit mit buchungsdatum zwischen 2. januar oder 3. februar suchen	wohnungseinheit mit buchungsdatum zwischen dem 2. januar oder 3. februar finden	finden wohneinheit mit buchungsdatum zwischen dem 2. januar oder 3. februar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) ) )
welches gehäuse am gleichen datum wie 123 sesamstraße gebucht	welche wohnungen am selben tag wie 123 sesamstraße gebucht	die gehäuse veröffentlicht, die am selben tag wie 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) )
was ist die nachbarschaft der wohneinheit mit der monatlichen miete 1500 dollar	was ist die nachbarschaft der wohneinheit mit der monatlichen miete 1500 dollar	was ist die nachbarschaft von der gehäuseeinheit mit der monatlichen miete 1500 dollar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ) )
welche wohneinheit wurde am 2. januar gepostet und entspricht der wohnart 123 sesam st	welche wohneinheit wurde im januar 2, die die gleiche wohnart wie 123 sesam st	die wohneinheit wurde verfasst am januar 2, dass ist das gleiche gehäuse typ 123 sesame st	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) )
welche wohneinheit hat mindestens zwei arten	welche wohneinheit hat zwei typen minimum	die wohneinheit verfügt über zwei arten mindestens	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string >= ) ( number 2 ) ) )
was ist der gehäusetyp der beiden wohneinheiten	was ist der wohntyp der beiden wohneinheiten	was ist die gehäuseart der zwei wohneinheiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
wohnung, die die gleiche größe ist, sind 123 sesamstraße	wohnung, die die gleiche größe ist 123 sesamstraße	wohnung der gleichen größe sind 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )
hundefreundliches apartment mit eigenem bad	hundefreundliche wohnung mit eigenem bad	dog friendly apartment mit eigenem bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string allows_dogs ) ) )
wohnungen in der nachbarschaft midtown west	wohnungen in der midtown west nachbarschaft	apartments in midtown west nachbarschaft	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
wohneinheiten mit nur einer nachbarschaft finden	finden sie wohneinheiten mit nur einer nachbarschaft	finden wohneinheiten mit nur einer nachbarschaft	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string < ) ( number 2 ) ) )
gehäuse, das am 2. januar veröffentlicht wurde	wohnung, die am 2. januar veröffentlicht wurde	gehäuse, veröffentlicht wurde am 2. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
zeigen sie mir eine unterkunft in midtown west, in der hunde willkommen sind	zeigen sie mir gehäuse in midtown west, wo hunde willkommen sind	zeig mir wohnen in midtown west, wo hunde willkommen sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string allows_dogs ) ) )
wie viele verschiedene wohnungsarten gibt es	wie viele verschiedene gehäusetypen es gibt	wie viele verschiedene gehäusetypen gibt es	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ) )
gehäuse, das keine höhere miete als 123 sesamstraße hat	wohnungen, die keine höhere miete als 123 sesamstraße haben	gehäuse, die nicht über eine höhere miete dann 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )
gehäuse veröffentlicht zuletzt	wohnungsbau hat die zuletzt	gehäuse gebucht, die zuletzt	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )
welche wohneinheit hat eine wohnung art von haus	welche wohneinheit hat eine wohnung art von haus	die wohneinheit hat eine wohnung art des hauses	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ) )
was ist das datum der 123 sesamstraße posting	was ist das datum der 123 sesamstraßenbuchung	was ist das datum der 123 sesame street posting	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) )
wohnungssuche zwischen 1500 und 2000	wohnungssuche zwischen 1500 und 2000	suche nach wohnungen zwischen 1500 und 2000	( call SW.listValue ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) )
finden sie eine unterkunft zwischen 800 und 1000 quadratfuß	finden gehäuse zwischen 800 und 1000 quadratmetern	wohnungssuche zwischen 800 und 1000 quadratmeter	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) )
welche wohneinheit ist in der gegend von midtown west oder chelsea	welche wohneinheit sich im bereich midtown west oder chelsea befindet	die wohneinheit befindet sich im bereich midtown west oder chelsea	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.concat en.neighborhood.midtown_west en.neighborhood.chelsea ) ) )
wohneinheit mit einem privaten raum und einem bad	wohneinheit mit eigenem zimmer und bad	wohneinheit mit eigenem zimmer und bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string has_private_bath ) ) )
einheit von 800 quadratfuß	einheit von 800 quadratmetern	einheit der 800 quadratmeter	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ) )
in welcher nachbarschaft befindet sich die wohneinheit, die am 2. januar veröffentlicht wurde?	welche nachbarschaft ist die wohneinheit in, die am 2. januar veröffentlicht wurde	was nachbarschaft ist die gehäuseeinheit, die veröffentlicht wurde am 2. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
katzenfreundliche apartments in midtown west	katzenfreundliche wohnungen in midtown west	catfriendly apartments in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
suche nach wohneinheiten mit mietkosten von mehr als 123 sesamstraße	finden sie wohneinheiten mit mietkosten größer als 123 sesamstraße	finden wohneinheiten mit mietgebühren von mehr als 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )
welche wohneinheit ist am buchungsdatum von 123 sesamstraße gebucht	welche wohneinheit am buchungsdatum 123 sesamstraße gebucht wird	die wohneinheit gebucht wird auf das buchungsdatum 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) )
welche wohneinheit hat wohnung art von häusern mit einer fläche von 800 quadratmetern	welche wohneinheit hat wohnung art von häusern mit einer fläche von 800 quadratmetern	die wohnungswirtschaft hat apartment art von häusern mit einer fläche von 800 quadratmetern	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )
welche art von unterkunft wurde am 2. januar veröffentlicht?	welche art von wohnung wurde am jan 2 gepostet	welche art von gehäuse wurde gepostet am jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
800 quadratmeter große wohnung für 1500 miete	800 quadratmeter wohnung für 1500 miete	800 quadratmeterwohnung für 1500 miete	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )
welches gehäuse mit privatem zimmer mietet für 1500 dollar monatlich	welche wohnung mit einem privaten zimmer mieten für 1500 dollar monatlich	welches gehäuse mit einen privaten raum mieten für 1500 dollar monatlich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )
zeigen sie mir wohneinheiten, die keine wohnungen sind	zeigen sie mir wohneinheiten, die keine wohnungen sind	zeigen sie mir wohneinheiten, die arent apartments	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string ! = ) en.housing.apartment ) )
wohneinheit, die eine wohnung ist, die hunde freundlich ist	wohneinheit, die eine wohnung ist, die hundefreundlich ist	gehäuseeinheit, welche eine wohnung, hunde freundlich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )
apartments mit eigenem bad	apartments mit eigenem bad	apartments haben ein eigenes bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string has_private_bath ) ) )
wohnen in der sesamstraße 123, die am 2. januar veröffentlicht wurde	wohnung in 123 sesamstraße nachbarschaft, die am 2. januar veröffentlicht wurde	gehäuse in 123 sesame street nachbarschaft, veröffentlicht wurde am 2. januar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.housing_unit.123_sesame_street ) )
finden sie wohneinheiten mit einzigartigen gehäusetypen	wohnungseinheiten mit einzigartigen gehäusetypen finden	finden wohneinheiten mit einzigartigen gehäusetypen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( string housing_type ) ) )
finden sie tierfreundliche wohneinheiten, die 1500 dollar als miete verlangen	finden haustier freundliche wohneinheiten, die 1500 dollar als miete berechnen	finden sie haustierfreundliche wohnungen, die gebühr von 1500 dollar als miete	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string allows_dogs ) ) )
wohnung gehäuse, das am 2. januar gebucht wurde	wohnungswohnung, die am 2. januar veröffentlicht wurde	apartmentgehäuse, veröffentlicht wurde am 2. januar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )
welche wohneinheit hat eine monatliche miete von mehr als 1000 dollar	welche wohneinheit hat eine monatliche miete von mehr als 1000 dollar	die wohneinheit hat eine monatliche miete von mehr als 1000 dollar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string > ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )
was ist die häufigste wohnform?	was ist die häufigste gehäuseart	was ist der häufigste gehäuse typ	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string housing_type ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
wohneinheiten, die wohnungen sind	wohneinheiten, die wohnungen sind	wohneinheiten, die apartments	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )
katzen erlaubt in midtown west	katzen in midtown west erlaubt	katzen dürfen in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string allows_cats ) ) )
nachbarschaften nicht in der nähe von 123 sesamstraße	nachbarschaften nicht in der nähe von 123 sesamstraße	nachbarschaften, die nicht in der nähe von 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string ! = ) en.housing_unit.123_sesame_street ) )
welche wohneinheit hat einen jan 2. posting	welche wohneinheit eine jan 2. buchung hat	die wohneinheit hat eine jan 2. posting	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )
finden sie wohneinheiten mit einer größe, die kleiner als die der sesamstraße 123 ist	finden sie wohneinheiten mit einer größe kleiner als die von 123 sesamstraße	finden wohneinheiten mit einer größe von weniger als 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )
was sind die wohneinheiten in der gegend um midtown west	was sind die wohneinheiten in der gegend um midtown west	was sind die wohneinheiten in der umgebung midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )
wohnungen mit miete unter 1500	wohnungen mit miete unter 1500	wohnungen mit mieten unter 1500	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string < ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )
welche wohneinheit befindet sich im bereich der sesamstraße 123	welche wohneinheit sich im bereich der 123 sesamstraße befindet	die wohneinheit befindet sich im bereich von 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.housing_unit.123_sesame_street ) ) )
wohnung ähnlich der wohnung in midtown west	wohnung ähnlich der wohnung in midtown west	wohnung ähnelt der wohnung in midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )
gehäuse, das 1500 monate oder weniger oder 2000 monate oder weniger ist	gehäuse, das 1500monate oder weniger oder 2000monate oder weniger ist	gehäuse 1500month oder weniger oder 2000month oder weniger	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) ) )
was ist die anderen bereiche um midtown west, die wohneinheiten hat	was sind die anderen gebiete rund um midtown west, die wohneinheiten hat	was ist mit den anderen bereichen rund um midtown west, hat wohneinheiten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )
was 800 quadratmeter gehäuse erlaubt hunde	was 800 quadratmeter gehäuse erlaubt hunde	was 800 qm gehäuse ermöglicht den hunden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )
finden sie 800 quadratmeter große wohneinheiten in den vierteln von midtown west	finden sie 800 quadratmeter wohneinheiten in den vierteln von midtown west	finden 800 quadratmeter wohneinheiten im viertel von midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )
gehäuse mit buchungsdaten vor dem 2. januar und 3. februar	wohnung mit buchungsterminen vor dem 2. januar und 3. februar	gehäuse mit buchungsdatum vor dem 2. januar und 3. februar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) ) )
welche wohneinheit hat die monatliche miete von 123 sesamstraße	welche wohneinheit hat die monatliche miete von 123 sesamstraße	die wohnungswirtschaft hat die monatliche miete von 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) )
was ist die größte wohneinheit	was ist die größte wohneinheit	was ist die größte wohneinheit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string size ) ) ) )
welche wohneinheiten erlaubt hunde	welche wohneinheiten hunde erlauben	was wohnungen hunde erlaubt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) )
nachbarschaft, in der ich gehäuse mit einem privaten raum finden kann	nachbarschaft, wo ich wohnung mit einem privaten zimmer finden kann	nachbarschaft, wo finde ich wohnraum mit einem eigenen zimmer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ) )
gehäuse, das die gleiche größe oder größer als 123 sesamstraße ist	gehäuse, das die gleiche größe oder größer als 123 sesamstraße ist	gehäuse, das die gleiche größe oder größer als 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )
800 quadratmeter große wohnungen in midtown west	800 quadratmeter große wohnungen in midtown west	800 quadratmeter großen apartments in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )
gehäuse nicht am 2. januar gebucht	gehäuse, das nicht am 2. januar veröffentlicht wurde	gehäuse nicht geschrieben am 2. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string ! = ) ( date 2015 1 2 ) ) )
wohneinheiten, die 800 quadratmeter groß sind und ein eigenes bad haben	wohneinheiten, die 800 quadratmeter groß sind und über ein eigenes bad verfügen	wohneinheiten, die 800 quadratmeter groß und haben ein eigenes bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string has_private_bath ) ) )
gehäuse, das am 2. januar veröffentlicht wurde	wohnung, die am 2. januar veröffentlicht wurde	gehäuse, veröffentlicht wurde am 2. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
nachbarschaften, die mehr als zwei einheiten haben	nachbarschaften, die mehr als zwei einheiten haben	nachbarschaften, die mehr als zwei einheiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
welche wohneinheit gehört nicht zum wohnungstyp mit einer monatlichen miete von 1500 dollar	welche wohneinheit nicht zum wohnungstyp mit einer monatlichen miete von 1500 dollar gehört	die wohneinheit gehört nicht zu der wohnung mit einer monatlichen miete von 1500 dollar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )
welche wohneinheit hat 1500 dollar monatliche miete und hat auch die möglichkeit eines privaten bades	welche wohneinheit hat 1500 dollar als monatliche miete und hat auch die möglichkeit eines privaten bades	die wohnungswirtschaft hat 1500 dollar monatliche miete und hat auch die möglichkeit, ein eigenes bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string has_private_bath ) ) )
welche wohneinheit mit einer miete von 1500 dollar pro monat hat ein privatzimmer	welche wohneinheit mit einer miete von 1500 dollar pro monat ein privates zimmer hat	die wohneinheit wird mit einer miete von 1500 dollar pro monat hat ein eigenes zimmer	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )
finden sie 800 quadratmeter große wohneinheiten mit einem privaten raum	finden sie 800 quadratmeter große wohneinheiten mit eigenem zimmer	finden 800 quadratmeter große wohneinheiten mit eigenem zimmer	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )
was ist die durchschnittliche größe einer wohnung	was ist die durchschnittliche größe einer wohnung	was ist die durchschnittliche größe einer wohnung	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ) ) )
in welchen wohneinheiten in der nachbarschaft sind hunde erlaubt?	welche wohneinheiten in der nachbarschaft hunde in der nachbarschaft erlaubt	die wohneinheiten in der nachbarschaft hunde erlaubt im inneren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ) )
welche wohneinheit ist derselbe typ wie die am 2. januar eingestellte wohneinheit?	welche wohneinheit der gleiche typ ist wie die einheit, die am 2. januar	was die gehäuseeinheit vom gleichen typ wie die einheit gepostet am jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
was ist die fläche von 123 sesamstraße	was ist der bereich der 123 sesamstraße	was ist die fläche von 123 sesame street	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) )
vergleiche 123 sesamstraße und 900 mission avenue	vergleichen sie 123 sesamstraße und 900 mission avenue	vergleichen sie 123 sesame street und 900 mission avenue	( call SW.listValue ( call SW.concat en.housing_unit.123_sesame_street en.housing_unit.900_mission_ave ) )
katzen in der einheit erlaubt	katzen in einheit erlaubt	katzen erlaubt in der einheit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) )
hier finden sie alle verfügbaren einheiten in midtown east	finden sie alle verfügbaren einheiten midtown east	finden sie alle einheiten zur verfügung, midtown east	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
zeigen sie mir eine wohnung, deren miete 1500 dollar beträgt und die ein eigenes bad bietet	zeigen mir wohnung, deren miete 1500 dollar ist und die ein eigenes bad bietet	zeigen sie mir, wohnraum, dessen miete ist 1500 dollar und bietet ein eigenes bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )
finden sie die wohneinheit mit der meisten monatlichen miete	finden sie die wohneinheit mit der meisten monatlichen miete	finden sie die gehäuseeinheit mit den meisten monatlichen miete	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string rent ) ) ) )
wohneinheit mit der gleichen monatlichen miete wie 123 sesamstraße	wohneinheit mit der gleichen monatlichen miete wie 123 sesamstraße	gehäuseeinheit mit der gleichen monatlichen miete als 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) )
wohnkosten von mehr als 1500 dollar pro monat	gehäuse kostet mehr als 1500 dollar pro monat	gehäuse kostet mehr als 1500 dollar pro monat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string > ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )
gehäuse in den wenigsten stadtteilen aufgeführt	wohnungen in den wenigsten vierteln gelistet	gehäuse aufgeführt, die in den wenigsten stadtteilen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( string neighborhood ) ) )
wohnungen in midtown west mit einer miete von 1500 pro monat	wohnungen in midtown west mit einer miete von 1500 pro monat	apartments in midtown west mit einer miete von 1500 im monat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )
was ist die monatliche miete dieser wohnung	was ist die monatliche miete dieser wohnung	was ist die monatliche miete dieser wohnung	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ) ) )
wohnen in mehr als zwei stadtteilen	wohnen in mehr als zwei vierteln	gehäuse in mehr als zwei nachbarschaften	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string > ) ( number 2 ) ) )
zeigen sie mir gehäuse mit 800 quadratmetern raum	zeigen mir gehäuse mit 800 quadratmetern fläche	show megehäuse mit 800 quadratmeter fläche	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )
gehäuse am 2. januar um 123 sesamstraße geschrieben	wohnung veröffentlicht am 2. januar um 123 sesamstraße	gehäuse veröffentlicht am 2. januar um 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.housing_unit.123_sesame_street ) )
wohneinheit mit einem postdatum vor dem 2. januar	wohneinheit mit einem postdatum vor dem 2. januar	gehäuseeinheit mit einem postdatum älter als der 2. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
welche wohneinheit mit einer fläche von 800 quadratmetern erlaubt hunde	welche wohneinheit mit einer fläche von 800 quadratmetern hunde zulässt	die wohneinheit mit einer fläche von 800 quadratmeter erlaubt hunde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string allows_dogs ) ) )
gehäuse, das hunde erlaubt	gehäuse, das hunde erlaubt	 gehäuse ermöglicht den hunden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ) )
800 quadratfuß in midtown west	800 quadratmeter in midtown west	800 quadratmeter in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
nachbarschaften von wohneinheiten, die katzen erlaubt	nachbarschaften von wohneinheiten, die katzen	nachbarschaften von wohneinheiten, die erlaubt, katzen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ) )
billigste orte zu vermieten	günstigste mietorte	billigsten plätze zu vermieten	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string rent ) ) ) )
welche wohneinheit ist vor dem 2. januar gebucht?	welche wohneinheit vor jan 2 gebucht wird	die wohneinheit ist gebucht, bevor jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) ) )
wohneinheiten, die katzen in midtown west ermöglichen	wohneinheiten, die katzen in midtown west erlauben	wohnungen, die es ermöglichen, katzen in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string allows_cats ) ) )
welche wohneinheit in dieser nachbarschaft hat die möglichkeit eines eigenen bades	welche wohneinheit in dieser nachbarschaft hat die möglichkeit eines privaten bades	die gehäuseeinheit in dieser gegend hat die möglichkeit, ein eigenes bad	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ) )
was ist der wohnungstyp in der sesamstraße 123?	was ist der gehäusetyp an der sesamstraße 123	was ist die gehäusetyp bei 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) )
zeigen sie mir das gehäuse mit dem größten verfügbaren platz	zeigen sie mir das gehäuse mit dem meisten platz zur verfügung	zeigen sie mir das gehäuse mit dem meisten speicherplatz zur verfügung	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string size ) ) ) )
finden sie katzenfreundliche wohneinheiten mit einem privaten raum	finden sie katzenfreundliche wohneinheiten mit eigenem zimmer	finden katze freundliche wohneinheiten mit eigenem zimmer	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string allows_cats ) ) )
welche midtown west wohneinheit hat ein eigenes bad	welche midtown west wohneinheit hat ein eigenes bad	was midtown west wohneinheit hat ein eigenes bad	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string has_private_bath ) ) )
finden sie wohneinheiten in der nähe der sesamstraße 123	finden sie wohneinheiten rund um die nachbarschaften von 123 sesamstraße	finden wohneinheiten rund um die nachbarschaften von 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string neighborhood ) ) ) )
wie viele stadtteile gibt es?	wie viele nachbarschaften gibt es	wie viele nachbarschaften gibt es	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ) )
welche wohneinheit am 2. januar gebucht hat die gleiche miete wie 123 sesamstraße	welche wohneinheit auf jan 2 gebucht hat die gleiche miete wie 123 sesamstraße	was wohneinheit gepostet am jan 2 hat die gleiche miete wie 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string rent ) ) ( string = ) en.housing_unit.123_sesame_street ) )
welche wohneinheit befindet sich in midtown west und wurde am 2. januar veröffentlicht?	welche wohneinheit in midtown west ist und am 2. januar veröffentlicht wurde	die wohneinheit befindet sich in midtown west, und war veröffentlicht am 2. januar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )
wohneinheiten in der sesamstraße 123 finden	finden wohneinheiten rund um 123 sesamstraße	finden wohneinheiten rund 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.housing_unit.123_sesame_street ) )
gehäuse am oder vor dem 2. januar oder am oder vor dem 3. februar	wohnungen, die am oder vor dem 2. januar oder vor oder vor dem 3. februar	gehäuse gepostet am oder vor dem 2. januar oder am oder vor dem 3. februar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) ) )
wohneinheit, die eine wohneinheit mit einem privaten raum ist	wohneinheit, die eine wohnung typ mit einem privaten zimmer ist	gehäuseeinheit, welche eine wohnung wohnungstyp mit einem privaten zimmer	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string has_private_room ) ) )
haustierfreundliche wohneinheit	haustierfreundliche wohneinheit	pet friendlygehäuseeinheit	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string allows_cats ) ) )
welche art von gehäuse hat zwei gehäusetypen	welche art von gehäuse hat zwei wohntypen	welche art von gehäuse verfügt über zwei gehäusetypen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string >= ) ( number 2 ) ) )
alle wohneinheiten wurden am 2. januar veröffentlicht	alle wohneinheiten, die am 2. januar	alle wohneinheiten geschrieben am 2. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
wohneinheit mit eigenem bad und kostet 1500 dollar miete	wohneinheit mit eigenem bad und kosten 1500 dollar miete	wohneinheit mit eigenem bad und kostet 1500 dollar miete	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )
gehäusetyp am 2. januar veröffentlicht	wohnungstyp gepostet januar 2	gehäuse typ gepostet 2. januar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
finden sie andere arten von häusern als 123 sesamstraße	finden sie andere wohntypen als 123 sesamstraße	wohnungssuche andere typen als 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string ! = ) en.housing_unit.123_sesame_street ) )
welche wohneinheit am 2. januar gebucht hat ein privates zimmer	welche wohneinheit am 2. januar gepostet hat ein privates zimmer	was wohneinheit gepostet am jan 2 hat ein eigenes zimmer	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )
apartments mit einem privaten raum	apartments mit eigenem zimmer	apartments mit eigenem zimmer	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string has_private_room ) ) )
in welcher wohnungsart sind katzen erlaubt?	welche wohnungsart wohneinheiten katzen darin zulässt	die wohnung art der wohneinheiten erlaubt katzen in es	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )
finden sie wohneinheiten mit eigenem bad in den vierteln von midtown west	finden sie wohneinheiten mit eigenem bad in den vierteln von midtown west	finden wohneinheiten mit eigenem bad befindet sich im stadtviertel midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
gehäuse, das 1500 monate oder weniger ist	gehäuse, das 1500monate oder weniger ist	gehäuse 1500month oder weniger	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )
wohnen in midtown west nachbarschaft am 2. januar gebucht	wohnung in midtown west nachbarschaft am 2. januar veröffentlicht	gehäuse in midtown east) geschrieben am 2. januar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )
wohnungen mit mindestens 2 einheiten	apartments mit mindestens 2 einheiten	apartments mit mindestens 2 einheiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
welches gehäuse nach dem 2. januar gepostet	welche wohnung nach jan 2nd gepostet	die gehäuse gepostet, nachdem jan 2.	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
gehäuse, das zwischen 800 und 1000 quadratmetern ist	gehäuse zwischen 800 und 1000 quadratmetern	gehäuse, das zwischen 800 und 1000 quadratmeter	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) ) )
wohnung mit einem privaten raum	wohnung mit eigenem zimmer	wohnung mit eigenem zimmer	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string has_private_room ) ) )
wohnungen von ähnlicher größe wie in der sesamstraße 123	wohnungen ähnlich groß wie 123 sesamstraße	apartments in der größe ähnlich 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) )
wohneinheit, die 1500 dollar miete kostet und katzen erlaubt	wohneinheit, die 1500 dollar miete kostet und katzen erlaubt	gehäuseeinheit, die kostet 1500 dollar miete und katzen erlaubt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string allows_cats ) ) )
hund und katze freundliche unterkunft	hund und katze freundliches gehäuse	hund und katze freundliches gehäuse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string allows_dogs ) ) )
finden sie wohneinheiten in den vierteln von midtown west	finden sie wohneinheiten in den vierteln von midtown west	finden sie wohnungen in den vierteln von midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
wohnungen 800 quadratmeter und mehr	wohnungen 800 quadratmeter und höher	apartments 800 quadratmetern und über	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )
nachbarschaft der sesamstraße 123	nachbarschaft von 123 sesamstraße	nachbarschaft von 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.housing_unit.123_sesame_street ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.housing_unit.123_sesame_street ) )
anzahl der verschiedenen einheiten	anzahl der verschiedenen einheiten	anzahl der verschiedenen einheiten	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ) )
unterbringung von wohnungen, die hunde erlauben	wohnraum wohnungen, die hunde erlauben	gehäuse wohnungen, die es ermöglichen, hunde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )
gehäuse, das das gleiche wie 123 sesamstraße kostet	wohnen, das das gleiche kostet wie 123 sesamstraße	gehäuse, die kosten das gleiche wie 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) )
welche nachbarschaft hat unter zwei wohneinheiten	welche nachbarschaft hat unter zwei wohneinheiten	die nachbarschaft hat unter zwei wohneinheiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
wie groß ist 123 sesamstraße	wie groß ist 123 sesamstraße	wie groß ist 123 sesame street	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) )
wohneinheit nach dem 2. januar oder 3. februar gebucht	wohneinheit nach dem 2. januar oder 3. februar	gehäuseeinheit geschrieben nach der 2. januar oder 3. februar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) ) )
finden sie eine wohneinheit, die sich in zwei stadtteilen befindet	finden sie eine wohneinheit, die in zwei nachbarschaften ist	finden sie eine gehäuseeinheit ist in zwei stadtteile	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( number 2 ) ) )
was ist das datum der 123 sesamstraße posting	was ist das datum der 123 sesamstraßenbuchung	was ist das datum von 123 sesame street posting	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) )
wohnungen, die am 2. januar gebucht wurden	wohnungen, die am 2. januar veröffentlicht wurden	wohnungen, die wurden geschrieben am 2. januar	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )
welche wohneinheit erlaubt hunde und katzen	welche wohneinheit hunde und katzen erlaubt	die gehäuseeinheit erlaubt es, hunde und katzen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string allows_cats ) ) )
artikel mit der größten anzahl von autoren	artikel mit der größten anzahl von autoren	artikel mit der größten anzahl von autoren	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( string author ) ) )
artikel unter berufung auf artikel in annalen der statistik veröffentlicht	artikel zitiert artikel in annals der statistik veröffentlicht	artikel zitieren artikel veröffentlicht in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )
in welchem artikel aus dem jahr 2004 wird die multivariate datenanalyse zitiert?	welcher artikel aus dem jahr 2004 zitiert multivariate datenanalyse	welche artikel aus dem jahr 2004 zitiert, multivariate datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )
hier finden sie einen artikel aus dem jahr 2004	finden sie einen artikel veröffentlicht im jahr 2004	finden sie einen artikel veröffentlicht im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )
artikel, deren veröffentlichungsdatum in der nähe des datums der multivariaten datenanalyse liegt	artikel mit einem veröffentlichungsdatum, das dem datum der multivariaten datenanalyse nahe liegt	artikel, einer publikation, die den stand zum datum der multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )
welcher artikel wurde von efron verfasst und hat die annalen der statistik als veranstaltungsort	welcher artikel von efron verfasst wurde und die annals der statistik als	der artikel ist verfasst von efron und hat die annalen der statistik als ihren veranstaltungsort	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string author ) ( string = ) en.person.efron ) )
veranstaltungsort nur eines artikels	ort von nur einem artikel	veranstaltungsort von nur einem artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel mit einem oder zwei autoren	artikel mit einem oder zwei autoren	artikel mit ein oder zwei autoren	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string <= ) ( number 2 ) ) )
artikel, dessen autor efron oder lakoff ist	artikel, dessen autor efron oder lakoff ist	artikel, deren autor efron oder lakoff	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) ( call SW.concat en.person.efron en.person.lakoff ) ) )
ein preisgekrönter artikel zitiert einen anderen artikel	ein artikel, der denpreis gewonnen hat, zitiert einen anderen artikel	ein artikel, der gewonnen auszeichnung zitiert einen anderen artikel	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )
autor der multivariaten datenanalyse	autor der multivariaten datenanalyse	autor der multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) )
artikel, die im jahr 2004 veröffentlicht wurden und multivariate datenanalysen zitieren	2004 veröffentlichte artikel, in denen multivariate datenanalysen	artikel veröffentlicht im jahr 2004, dass zitieren multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )
welcher autor hat die meisten artikel geschrieben?	welcher autor die meisten artikel geschrieben hat	welcher autor geschrieben hat, das die meisten artikel	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel, die an mehr als zwei orten veröffentlicht wurden	artikel, die an mehr als zwei orten veröffentlicht wurden	artikel erschienen in mehr als zwei veranstaltungsorte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string > ) ( number 2 ) ) )
artikel, die zwei oder mehr städte erwähnen	artikel, die zwei oder mehr städte erwähnen	artikel, in denen zwei oder mehr städten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel, dessen veröffentlichungsdatum kleiner als das veröffentlichungsdatum der multivariaten datenanalyse ist	artikel, dessen veröffentlichungsdatum kleiner ist als veröffentlichungsdatum der multivariaten datenanalyse	artikel, deren publikation datum kleiner ist als datum der veröffentlichung der multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )
artikel in annalen von statistiken veröffentlicht zitiert durch multivariate datenanalyse	artikel, die in annals von statistiken veröffentlicht werden, die durch multivariate datenanalyse zitiert werden	artikel veröffentlicht in annals of statistics, zitiert von multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
in welchem artikel geht es um multivariate datenanalyse?	welcher artikel befasst sich mit multivariater datenanalyse	was artikel ist über, multivariate datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ) )
artikel in weniger als zwei publikationen gefunden	artikel in weniger als zwei publikationen	gefundene artikel in weniger als zwei publikationen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string < ) ( number 2 ) ) )
nennen sie einen artikel über multivariate datenanalyse des autors efron	nennen sie einen artikel über multivariate datenanalyse durch den autor efron	namen einen artikel über multivariate daten analyse durch den autor efron	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
artikel nicht im jahr 2004 veröffentlicht	artikel, die 2004 nicht veröffentlicht wurden	artikeln, die nicht im jahr 2004 veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string ! = ) ( date 2004 -1 -1 ) ) )
artikel in annalen der statistik zitiert	artikel, die in den statistiken zitiert werden	der artikel zitiert in den annalen der statistik	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )
suche mir einen artikel, der an zwei orten ist	finden sie mir einen artikel, der an zwei orten ist	finden sie mir einen artikel, der in zwei spielstätten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( number 2 ) ) )
artikel, der auf die geringste anzahl von artikeln verweist	artikel, der auf die geringste anzahl von artikeln verweist	artikel, die auf die geringste anzahl von artikeln	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( string cites ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
einen veranstaltungsort mit mehr als zwei artikeln finden	finden sie einen ort mit mehr als zwei artikeln darin	finden sie einen veranstaltungsort mit mehr als zwei artikel in der es	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
ein artikel, der multivariate datenanalyse zitiert	ein artikel, der multivariate datenanalyse zitiert	ein artikel, der zitiert multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
welcher artikel zitiert multivariate datenanalyse	welcher artikel zitiert multivariate datenanalyse	was artikel zitiert multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ) )
welcher artikel war in weniger als zwei orten	welcher artikel an weniger als zwei orten war	was artikel war in weniger als zwei spielstätten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string < ) ( number 2 ) ) )
die mehr als einmal multivariate datenanalyse geschrieben haben	der mehr als einmal eine multivariate datenanalyse geschrieben hat	wer schrieb multivariate analyse der daten mehr als einmal	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) )
welche artikel zitieren weniger als zwei artikel	in welchen artikeln weniger als zwei artikel	die artikel zitieren, die weniger als zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel, die gleichzeitig mit oder nach der multivariaten datenanalyse veröffentlicht wurden	artikel, die zeitgleich mit oder nach der multivariaten datenanalyse veröffentlicht werden	artikel veröffentlicht zeitgleich zu oder nach der multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )
welcher artikel zitiert zwei andere artikel	welcher artikel zwei weitere artikel zitiert	was artikel zitiert zwei andere artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel veröffentlicht in 2004 oder 2010	artikel veröffentlicht 2004 oder 2010	artikel veröffentlicht in 2004 oder 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) )
artikel mit weniger als zwei referenzen	artikel mit weniger als zwei referenzen	artikel mit weniger als zwei referenzen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
welcher artikel zitiert multivariate datenanalyse und ist auch der veranstaltungsort	welcher artikel die multivariate datenanalyse zitiert und ist auch sein	was artikel zitiert multivariate data analysis und ist auch sein ort	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )
artikel mit mehr als zwei autoren	artikel mit mehr als zwei autoren	artikel mit mehr als zwei autoren	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string > ) ( number 2 ) ) )
wer ist der autor einer multivariaten datenanalyse?	der autor einer multivariaten datenanalyse ist	wer ist der autor einer multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) )
veröffentlichung mit den wenigsten artikeln	veröffentlichung mit den wenigsten artikeln	publikation mit den wenigsten artikeln	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string venue ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
veranstaltungsorte mit weniger als zwei artikeln	veranstaltungsorte mit weniger als zwei artikeln	orte mit weniger als zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel zweimal oder seltener zitiert	artikel zwei oder weniger mal zitiert	artikel zitiert zwei oder weniger mal	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel, die vor dem datum der multivariaten datenanalyse veröffentlicht wurden	artikel, die vor dem datum der multivariaten datenanalyse veröffentlicht wurden	artikel veröffentlicht, die vor dem datum der multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )
preisgekrönter artikel von annalen der statistik veröffentlicht	preisgekrönter artikel, veröffentlicht von annals of statistics	preisgekröntes veröffentlichten artikel von annals of statistics	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string won_award ) ) )
welcher artikel wurde vor dem veröffentlichungsdatum von artikeln über multivariate datenanalyse geschrieben?	welcher artikel vor dem veröffentlichungsdatum von artikeln über multivariate datenanalyse geschrieben wurde	was artikel wurde geschrieben vor der veröffentlichung von artikeln über multivariate daten analyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )
wer ist der autor des artikels, der multivariate datenanalyse zitiert	wer ist der autor des artikels, der multivariate datenanalyse zitiert	wer ist der autor des artikels, zitiert multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string author ) ( string = ) en.person.efron ) )
wann wurde die multivariate datenanalyse veröffentlicht?	wann wurde eine multivariate datenanalyse veröffentlicht	wann wurde die multivariate analyse der daten veröffentlicht	( call SW.listValue ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) )
artikel, die vor 2004 veröffentlicht wurden	artikel, die vor 2004 veröffentlicht wurden	veröffentlichungen vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
artikel am wenigsten zitiert	artikel zitiert die wenigsten zeiten	artikel zitiert die wenigsten mal	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string cites ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
welcher autor schrieb zwei artikel	welcher autor zwei artikel geschrieben hat	was der autor schrieb zwei artikel,	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
autor eines artikels, der multivariate datenanalysen zitiert	autor eines artikels, der multivariate datenanalyse zitiert	der autor des artikels, zitiert multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
autor mit höchstens zwei artikeln	autor mit höchstens zwei artikel	autor mit höchstens zwei artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
welcher artikel zitiert andere artikel über annalen der statistik	welcher artikel andere artikel über annals von statistiken zitiert	was artikel zitiert andere artikel über die annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )
welcher veranstaltungsort hat zwei artikel	welcher veranstaltungsort zwei artikel hat	welchen ort hat zwei artikel,	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
autoren mehrerer artikel	autoren mehrerer artikel	autoren mehrerer artikel	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string author ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel, die nach multivariater datenanalyse veröffentlicht wurden	artikel, die nach multivariater datenanalyse veröffentlicht wurden	artikel veröffentlicht nach der multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )
artikel in annalen von statistiken zitiert in multivariaten datenanalyse	artikel in annals von statistiken, die in der multivariaten datenanalyse zitiert werden	artikel in annals of statistics, zitiert in multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
artikel, die artikel zitieren, die durch multivariate datenanalyse zitiert werden	artikel unter berufung auf artikel, die von der multivariaten datenanalyse zitiert werden	artikel zitieren von artikeln zitiert von multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
welcher artikel wurde nicht im jahr 2004 veröffentlicht	welcher artikel 2004 nicht veröffentlicht wurde	was artikel war veröffentlicht 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string ! = ) ( date 2004 -1 -1 ) ) )
veranstaltungsort des artikels, den die multivariate datenanalyse zitiert	ort des artikels, den die multivariate datenanalyse zitiert	veranstaltungsort ist der artikel, der multivariaten datenanalyse zitiert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
autoren, die keine multivariate datenanalyse geschrieben haben	autoren, die keine multivariate datenanalyse geschrieben haben	schriftsteller, die nicht schreiben multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string ! = ) en.article.multivariate_data_analysis ) )
in welchem artikel wird ein weiterer preisgekrönter artikel behandelt?	in welchem artikel wird ein anderer artikel behandelt, der einen preis gewonnen hat	was der artikel beschreibt ein weiterer artikel, der eine auszeichnung gewonnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )
artikel, die von efron geschrieben und durch multivariate datenanalyse zitiert wurden	artikel, die von efron verfasst und von der multivariaten datenanalyse zitiert werden	artikel geschrieben von efron und zitiert von multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
welcher artikel wurde im jahr 2004 oder später veröffentlicht	welcher artikel 2004 oder später veröffentlicht wurde	was artikel wurde veröffentlicht im jahr 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
preisgekrönte artikel	artikel, die einen preis gewonnen haben	artikel, die haben einen preis gewonnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) )
wer ist der autor von weniger als zwei artikeln	der autor von weniger als zwei artikeln ist	wer ist der autor von weniger als zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel, die artikel zitieren, die im jahr 2004 veröffentlicht wurden	artikel, in denen artikel zitiert werden, die 2004 veröffentlicht wurden	artikel zitieren artikel veröffentlicht 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
nennen sie eine person, die der autor eines artikels über multivariate datenanalyse ist	benennen sie eine person, die autor eines artikels über multivariate datenanalyse ist	nennen sie eine person, die der autor eines artikels über multivariate daten analyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) )
nennen sie eine publikation mit weniger als zwei artikeln	benennen einer publikation mit weniger als zwei artikeln	name einer publikation, die mit weniger als zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
welcher autor schrieb die geringste anzahl von artikeln	welcher autor die geringste anzahl von artikeln geschrieben hat	welcher autor schrieb die geringste anzahl von artikeln	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string author ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
preisgekrönter publikationsort für artikel	preisgekrönter artikelpublikationsort	preisgekröntes artikelpublikation veranstaltungsort	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )
artikel, dessen erscheinungsdatum 2004 ist	artikel, dessen veröffentlichungsdatum 2004 ist	artikel, deren erscheinungsdatum 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
nennen sie einen preisgekrönten artikel	namen eines artikels, der eine auszeichnung gewonnen hat	namen einen artikel, der eine auszeichnung gewonnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )
artikel mit mehr als zwei veranstaltungsorten	artikel mit mehr als zwei veranstaltungsorten	artikel mit mehr als zwei veranstaltungsorte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string > ) ( number 2 ) ) )
wer hat die wenigsten artikel verfasst	der die wenigsten artikel verfasst hat	wer hat verfasst am wenigsten artikel	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string author ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
welcher artikel hat die meisten autoren?	welcher artikel die meisten autoren hat	welchen artikel hat das die meisten autoren	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( string author ) ) )
in welcher publikation wurde die multivariate datenanalyse veröffentlicht?	in welcher publikation wurde eine multivariate datenanalyse veröffentlicht	in welcher publikation wurde der multivariaten analyse der daten veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) en.article.multivariate_data_analysis ) )
artikel, dessen veröffentlichungsdatum höchstens das veröffentlichungsdatum der multivariaten datenanalyse ist	artikel, dessen veröffentlichungsdatum höchstens veröffentlichungsdatum der multivariaten datenanalyse ist	artikel, deren erscheinungsdatum ist bei den meisten das datum der veröffentlichung der multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )
verfasser von zwei oder weniger artikeln	autoren von zwei oder weniger artikeln	autoren von zwei oder weniger artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
nennen sie jemanden, der einen artikel über multivariate datenanalyse geschrieben hat	benennen sie jemanden, der einen artikel über multivariate datenanalyse geschrieben hat	name jemand, der hat einen artikel geschrieben über multivariate daten analyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) )
artikel, die am selben tag wie die multivariate datenanalyse veröffentlicht wurden	artikel, die am selben tag veröffentlicht werden wie die multivariate datenanalyse	artikel veröffentlicht am selben tag wie multivariate datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) )
welche autoren haben zwei oder mehr artikel geschrieben	welche autoren zwei oder mehr artikel verfasst haben	die autoren geschrieben haben, die zwei oder mehr artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
finden sie einen ort für einen preisgekrönten artikel	finden sie einen ort eines preisgekrönten artikels	finden sie einen ort der preisgekrönte artikel	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )
jeder artikel, der einen anderen artikel zitiert, der in annalen der statistik veröffentlicht wurde	artikel, der einen anderen artikel zitiert, der in statistiken veröffentlicht wurde	alle artikel, die zitiert einen anderen artikel veröffentlicht in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )
artikel zitiert von preisgekrönten artikeln	artikel, die von preisgekrönten artikeln zitiert werden	der artikel zitiert die preisgekrönte artikel	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )
welcher artikel in annalen der statistik zitiert die multivariate datenanalyse?	welcher artikel in den annals der statistik zitiert multivariate datenanalyse	was artikel in annals of statistics zitiert multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
artikel, der multivariate datenanalyse zitiert	artikel, den die multivariate datenanalyse zitiert	artikel, die multivariate datenanalyse zitiert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
herausgeber von nur einem artikel	herausgeber von nur einem artikel	verleger von nur einem artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
welcher preisgekrönte artikel wurde durch multivariate datenanalyse zitiert	welcher preisgekrönte artikel durch multivariate datenanalyse zitiert wurde	was die preisgekrönten artikel zitiert wurde von multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string won_award ) ) )
veranstaltungsorte von zwei artikeln oder weniger	veranstaltungsorte von zwei artikeln oder weniger	die schauplätze von zwei oder weniger artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
ein artikel, dessen ebenfalls multivariate datenanalyse verfasst wurde	ein artikel, dessen ebenfalls erstellte multivariate datenanalyse	ein artikel, dessen verfasste auch multivariate datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) ( call SW.getProperty en.article.multivariate_data_analysis ( string author ) ) ) )
nennen sie einen artikel, in dem die multivariate datenanalyse zitiert wird	benennen eines artikels, der sich auf eine multivariate datenanalyse beruft	name eines artikels zitieren von multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
artikel aus dem jahr 2004, die mit preisen ausgezeichnet wurden	2004 veröffentlichte artikel, die mit preisen ausgezeichnet wurden	artikel veröffentlicht in 2004, die preise gewonnen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string won_award ) ) )
autoren von weniger als zwei artikeln	autoren von weniger als zwei artikeln	schriftsteller von weniger als zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
nennen sie eine person, die weniger als zwei artikel verfasst hat	benennen sie eine person, die weniger als zwei artikel verfasst hat	nennen sie eine person, die wer verfasst hat weniger als zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
nennen sie einen artikel aus den annalen der statistik über multivariate datenanalyse	benennen sie einen artikel aus den statistiken zur multivariaten datenanalyse	namen einen artikel aus den annalen der statistik über multivariate daten analyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
preisgekrönte artikel, die durch multivariate datenanalyse zitiert wurden	preisgekrönte artikel, die durch multivariate datenanalyse zitiert werden	preisgekröntes artikeln zitiert von multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
veröffentlichungen, in denen artikel von efron zu finden sind	publikationen, in denen artikel von efron zu finden sind	publikationen, in denen artikel von efron gefunden werden kann	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )
artikel, die artikel zitieren, die durch multivariate datenanalyse zitiert werden	artikel unter berufung auf artikel, die von der multivariaten datenanalyse zitiert werden	artikel zitieren von artikeln zitiert von multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
nennen sie einen artikel aus den annalen der statistik	benennen sie einen artikel aus den statistiken	namen einen artikel aus den annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )
artikel, dessen erscheinungsdatum 2004 ist und der durch multivariate datenanalyse zitiert wird	artikel, dessen veröffentlichungsdatum 2004 ist und durch multivariate datenanalyse zitiert wird	artikel, deren erscheinungsdatum ist 2004 und zitiert von multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
welcher artikel hat ein veröffentlichungsdatum, das größer ist als das der multivariaten datenanalyse?	welcher artikel hat ein veröffentlichungsdatum, das größer ist als das der multivariaten datenanalyse	welche artikel hat ein datum der veröffentlichung größer ist als der multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )
welcher artikel zitiert einen preisgekrönten artikel?	welcher artikel einen preisgekrönten artikel zitiert	was der artikel nennt ein preisgekröntes artikel	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )
welche veröffentlichung enthält zwei artikel	welche veröffentlichung zwei artikel enthält	die publikation enthält zwei beiträge	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel, die zwei oder weniger artikel zitieren	artikel, die zwei oder weniger artikel zitieren	artikel, verweisen auf zwei oder weniger artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
welcher artikel behandelt annalen der statistik und dessen erscheinungsdatum war 2004	in welchem artikel die statistiken erörtert werden und deren veröffentlichungsdatum 2004 war	was der artikel beschreibt, annalen der statistik und deren veröffentlichung war 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )
artikel, die artikel zitieren, die in der multivariaten datenanalyse zitiert werden	artikel, die artikel zitieren, die in der multivariaten datenanalyse zitiert werden	artikel zitieren von artikeln zitiert in multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
welche annalen des statistikartikels multivariate datenanalyse zitieren	welche annals von statistiken artikel zitiert multivariate datenanalyse	die annalen der statistikartikel zitiert multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
welcher artikel über annalen und statistiken wurde im jahr 2004 veröffentlicht?	welcher artikel über annals und statistiken eine veröffentlichung von 2004 hat	was artikel über chronik und statistik hat einer veröffentlichung aß 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
artikel aus dem jahr 2004 zitiert durch multivariate datenanalyse	2004 veröffentlichte artikel, die von der multivariaten datenanalyse zitiert wurden	artikel veröffentlicht im jahr 2004, angeführt von multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
artikel aus dem jahr 2004, die ausgezeichnet wurden	2004 veröffentlichte artikel, die mit einem preis ausgezeichnet wurden	artikel veröffentlicht in 2004, haben einen preis gewonnen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )
nennen sie einen artikel mit weniger als zwei autoren	benennen eines artikels mit weniger als zwei autoren	namen einen artikel mit weniger als zwei autoren	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string < ) ( number 2 ) ) )
welcher artikel wird in der multivariaten datenanalyse nicht zitiert?	welcher artikel nicht in der multivariaten datenanalyse zitiert wird	was artikel ist nicht zitiert in der multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string ! = ) en.article.multivariate_data_analysis ) )
wer schrieb die meisten artikel	der die meisten artikel geschrieben hat	wer schrieb die meisten artikel	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel, der zwei oder mehr artikel zitiert	artikel, der zwei oder mehr artikel zitiert	artikel zitiert, dass zwei oder mehr artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel im jahr 2004 zitate veröffentlicht	artikel veröffentlicht 2004 zitate	artikel veröffentlicht in 2004 zitate	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
welcher artikel zitiert die meisten anderen artikel	welcher artikel die meisten anderen artikel zitiert	was artikel zitiert die anzahl von anderen artikeln	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( string cites ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
der im jahr 2004 veröffentlichte artikel wurde durch multivariate datenanalyse zitiert	welcher artikel 2004 veröffentlicht wurde, wurde durch multivariate datenanalyse zitiert	welche artikel im jahr 2004 veröffentlicht wurde, angeführt von multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )
welcher autor schrieb zwei oder mehr artikel	welcher autor zwei oder mehr artikel geschrieben hat	was der autor schrieb zwei oder mehr artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
nennen sie einen artikel aus dem jahr 2004	namen eines 2004 veröffentlichten artikels	namen einem artikel, veröffentlicht im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
nennen sie einen preisgekrönten artikel	namen eines artikels, der eine auszeichnung gewonnen hat	namen einen artikel, der eine auszeichnung gewonnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )
welcher artikel wurde in mehr als zwei zeitschriften veröffentlicht	welcher artikel in mehr als zwei zeitschriften veröffentlicht wurde	der artikel wurde veröffentlicht in mehr als zwei zeitschriften	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string > ) ( number 2 ) ) )
nennen sie einen artikel, in dem es nicht um multivariate datenanalyse geht	benennen sie einen artikel, bei dem es nicht um multivariate datenanalyse geht	name eines artikels, der nicht über multivariate daten analyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string ! = ) en.article.multivariate_data_analysis ) )
artikel, die keine multivariate datenanalyse zitieren	artikel, in denen keine multivariate datenanalyse zitiert wird	artikel, die nicht zitiert multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string ! = ) en.article.multivariate_data_analysis ) )
welcher artikel wurde weniger als zweimal zitiert	welcher artikel weniger als zweimal zitiert wurde	was artikel zitiert wurde, weniger als zweimal	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel mit autor der multivariaten datenanalyse	artikel mit autor der multivariaten datenanalyse	artikel mit autor der multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) ( call SW.getProperty en.article.multivariate_data_analysis ( string author ) ) ) )
welcher artikel zitiert multivariate datenanalyse	welcher artikel die multivariate datenanalyse zitiert	die artikel zitiert multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ) )
wer ist jemand, der artikel über multivariate datenanalyse verfasst hat?	wer ist jemand, der artikel über multivariate datenanalyse verfasst hat	wer ist jemand, der verfasste artikel über multivariate daten analyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) )
finden sie den autor eines preisgekrönten artikels	finden sie den autor eines preisgekrönten artikels	finden der autor von einem preisgekrönten artikel	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )
veranstaltungsort des efronartikels	veranstaltungsort des efronartikels	veranstaltungsort der efron artikel	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )
preisgekrönte artikel von efron	artikel von efron, die einen preis gewonnen haben	artikel geschrieben von efron, die haben einen preis gewonnen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( string author ) ( string = ) en.person.efron ) )
wer ist der autor der beiden artikel	der autor der beiden artikel ist	wer ist der autor der beiden artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel veröffentlicht im jahr 2004 und zitiert multivariate datenanalyse	artikel, der 2004 veröffentlicht wurde und der multivariate datenanalyse	artikel veröffentlicht in 2004 und zitiert multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )
welcher artikel wurde nach 2004 veröffentlicht	welcher artikel nach 2004 veröffentlicht wurde	der artikel wurde veröffentlicht, nachdem 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
welcher veranstaltungsort hat maximal zwei artikel	welcher veranstaltungsort maximal zwei artikel hat	die location hat zwei artikel maximale	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel veröffentlicht vor multivariater datenanalyse	artikel, der vor der multivariaten datenanalyse veröffentlicht wurde	artikel veröffentlicht vor multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )
finde einen artikel, den efron nicht geschrieben hat	finden sie einen artikel, den efron nicht geschrieben hat	finden sie alle artikel, dass efron nicht schreiben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string ! = ) en.person.efron ) )
welcher artikel zitiert nicht multivariate datenanalyse	welcher artikel zitiert keine multivariate datenanalyse	was der artikel nicht zitieren, multivariate datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string ! = ) en.article.multivariate_data_analysis ) )
artikel von einem autor geschrieben	artikel von einem autor geschrieben	artikel geschrieben von einem autor	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string < ) ( number 2 ) ) )
nennen sie einen artikel, der in mehr als zwei publikationen gefunden wurde	namen eines artikels in mehr als zwei publikationen	namen einen artikel gefunden, in mehr als zwei publikationen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string > ) ( number 2 ) ) )
artikel veröffentlicht in oder nach 2004	artikel, die in oder nach 2004 veröffentlicht wurden	artikel veröffentlicht im jahr 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
nennen sie eine publikation, die nicht mehr als zwei artikel enthält	bezeichnung einer publikation, die nicht mehr als zwei artikel enthält	name einer publikation mit nicht mehr als zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
welchen artikel hat efron geschrieben, dessen veranstaltungsort annalen von statistiken sind?	welchen artikel schrieb efron, dessen veranstaltungsort die statistik ist	welchen artikel hast efron schreiben, dessen schauplatz ist annals of statistics	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string author ) ( string = ) en.person.efron ) )
welche artikel werden von autoren der multivariaten datenanalyse geschrieben?	welche artikel von autoren der multivariaten datenanalyse verfasst werden	welche artikel geschrieben sind, von autoren der multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
alle artikel von efron	alle artikel von efron	alle artikel von efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) )
artikel veröffentlicht von 2004 bis 2010	von 2004 bis 2010 veröffentlichte artikel	artikel veröffentlicht von 2004 bis 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
finden sie einen autor eines artikels in annalen der statistik	finden sie einen autor eines artikels in annals von statistiken	finden sie ein autor von einem artikel in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )
veranstaltungsorte, die die meisten artikel veröffentlicht haben	veranstaltungsorte, die die meisten artikel veröffentlicht haben	spielstätten, die haben publiziert die meisten artikel	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string venue ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel an den wenigsten orten veröffentlicht	artikel, die am wenigsten veröffentlicht wurden	artikel veröffentlicht in den wenigsten orten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( string venue ) ) )
wann wurde die multivariate datenanalyse veröffentlicht?	wann wurde eine multivariate datenanalyse veröffentlicht	wann wurde die multivariate analyse der daten veröffentlicht	( call SW.listValue ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) )
autor mit der meisten anzahl von artikeln	autor mit den meisten artikeln	autor mit der anzahl der artikel	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel, die nicht von efron verfasst wurden	artikel, die nicht von efron verfasst wurden	artikel nicht selbst verfasst efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string ! = ) en.person.efron ) )
veranstaltungsorte, die höchstens zwei artikel veröffentlicht haben	veranstaltungsorte, die höchstens zwei artikel veröffentlicht haben	veranstaltungsorte veröffentlichten zwei artikel,	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel mit mehr als zwei autoren	artikel mit mehr als zwei autoren	artikel mit mehr als zwei autoren	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string > ) ( number 2 ) ) )
artikel mit zwei oder mehr verlagen	artikel mit zwei oder mehr herausgebern	artikel mit zwei oder mehr verlagen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string >= ) ( number 2 ) ) )
welcher artikel von efron geschrieben und ausgezeichnet wurde	welcher artikel von efron geschrieben und ausgezeichnet wurde	was artikel ist geschrieben von efron und einen preis gewonnen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string won_award ) ) )
nennen sie einen artikel über multivariate datenanalyse	benennen eines artikels über multivariate datenanalyse	namen einen artikel über multivariate daten analyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
verfasser multivariater datenanalysen	autor der multivariaten datenanalyse	schriftsteller der multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) )
artikel, die vor 2004 veröffentlicht wurden	artikel, die vor 2004 veröffentlicht wurden	veröffentlichungen vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
artikel in höchstens zwei publikationen gefunden	artikel, die in höchstens zwei publikationen zu finden sind	 artikel in zwei publikationen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string <= ) ( number 2 ) ) )
artikel zitiert von den meisten artikeln	artikel, die von den meisten artikeln zitiert werden	der artikel zitiert den meisten artikeln	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string cites ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
finden sie einen efronartikel, der multivariate datenanalysen zitiert	finden sie einen efron artikel, der multivariate datenanalyse zitiert	finden efronartikel, zitiert multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )
welche annalen des statistikartikels wurden durch multivariate datenanalyse zitiert?	welche annals von statistiken artikel wurde durch multivariate datenanalyse zitiert	was annals of statistics artikel zitiert wurde von multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
nennen sie einen artikel von mehr als zwei autoren	namen eines artikels, der von mehr als zwei autoren erstellt wurde	name eines artikels produziert, die von mehr als zwei autoren	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string > ) ( number 2 ) ) )
welchen veranstaltungsort hat unter zwei artikeln	welcher veranstaltungsort unter zwei artikeln	was veranstaltungsort hat sich unter zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
autor von zwei artikeln	autor von zwei artikeln	autor von zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel mit der maximalen anzahl von veranstaltungsorten	artikel mit der maximalen anzahl von veranstaltungsorten	artikel mit der maximalen anzahl von veranstaltungsorten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( string venue ) ) )
wer schrieb multivariate datenanalyse	der multivariate datenanalyse geschrieben hat	wer schrieb multivariaten datenanalyse	( call SW.listValue ( call SW.getProperty en.article.multivariate_data_analysis ( string author ) ) )
in welchen annalen des statistikartikels wurde die multivariate datenanalyse zitiert?	welche annals von statistiken artikel zitiert multivariate datenanalyse	was annals of statistics artikel zitiert multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )
von efron zitierte artikel	artikel zitiert von efron	der artikel zitiert efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )
veröffentlichungen mit mindestens zwei artikeln	veröffentlichungen mit mindestens zwei artikeln	publikationen mit mindestens zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel unter berufung auf multivariate datenanalysen von efron	artikel unter berufung auf multivariate datenanalyse, geschrieben von efron	artikel zitieren von multivariaten datenanalyse geschrieben von efron	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string author ) ( string = ) en.person.efron ) )
welche artikel haben unter zwei autoren	welche artikel unter zwei autoren haben	was für artikel haben, die unter zwei autoren	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string < ) ( number 2 ) ) )
suchen sie einen artikel, der mehr als zwei artikel enthält	finden sie einen artikel, der mehr als zwei artikel zitiert	finden sie einen artikel zitiert, dass mehr als zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
welche artikel wurden von efron geschrieben?	welche artikel von efron geschrieben wurden	welche artikel wurden geschrieben von efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )
artikel, der multivariate datenanalyse zitiert	artikel, der multivariate datenanalyse zitiert	artikel, die zitiert multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )
in welchem artikel wird ein artikel zitiert, der durch multivariate datenanalyse zitiert wird?	welcher artikel zitiert einen artikel, der von multivariaten datenanalysen zitiert wird	was der artikel zitiert einen artikel zitiert, der von multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
artikel, dessen veranstaltungsort annalen der statistik ist	artikel, dessen veranstaltungsort die anzahl der statistiken ist	artikel, deren veranstaltungsort ist annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )
welcher efronartikel wurde ausgezeichnet?	welcher efronartikel einen preis gewonnen hat	was efron artikel hat eine auszeichnung gewonnen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string won_award ) ) )
autor mit maximal zwei artikeln	autor mit maximal zwei artikel	autor mit maximal zwei artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
veranstaltungsort mit zwei veröffentlichten artikeln	veranstaltungsort mit zwei veröffentlichten artikel	veranstaltungsort mit zwei artikel veröffentlicht	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
welcher artikel zitiert annalen des statistikartikels	welcher artikel zitiert einen artikel über die statistik	was der artikel nennt ein annals of statistics artikel	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )
artikel, die multivariate datenanalysen zitieren und in annalen von statistiken veröffentlicht wurden	artikel, die sich auf multivariate datenanalyse berufen, die in statistiken veröffentlicht wurden	artikel zitieren von multivariaten datenanalyse, veröffentlicht in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
welcher artikel wird am häufigsten zitiert?	welcher artikel von der meisten artikel zitiert wird	der artikel ist zitiert von der anzahl der artikel	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string cites ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel an zwei orten veröffentlicht	artikel, die an zwei orten veröffentlicht wurden	artikel erschienen in zwei spielstätten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( number 2 ) ) )
artikel zitiert von artikeln in annalen der statistik veröffentlicht	artikel, die in den statistiken der statistik veröffentlicht werden	der artikel zitierte artikel veröffentlicht in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )
artikel von efron, der multivariate datenanalyse zitiert	artikel von efron, der multivariate datenanalyse zitiert	artikel geschrieben von efron, dass cites multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )
artikel, die nicht in den annalen der statistik veröffentlicht wurden	artikel, die nicht in den statistiken veröffentlicht wurden	artikel nicht veröffentlicht in den annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string ! = ) en.venue.annals_of_statistics ) )
artikel, die nicht durch multivariate datenanalyse zitiert wurden	artikel, die nicht durch multivariate datenanalyse zitiert werden	artikel nicht zitiert von multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string ! = ) en.article.multivariate_data_analysis ) )
was sind einige artikel, die nichts mit annalen von statistiken zu tun haben?	was sind einige artikel, die nichts mit den statistiken zu tun haben	was sind einige artikel, die in keinem zusammenhang zu den annalen der statistik	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string ! = ) en.venue.annals_of_statistics ) )
ein artikel von efron, der multivariate datenanalysen zitiert	ein artikel von efron, der multivariate datenanalyse zitiert	ein artikel von efron, dass cites multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
frühester veröffentlichter artikel	frühester veröffentlichter artikel	frühesten veröffentlichten artikel	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string publication_date ) ) ) )
artikel mit mehr als zwei artikeln	artikel, der sich auf mehr als zwei artikel beruft	artikel zitieren von mehr als zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
finden sie einen artikel mit demselben veranstaltungsort wie die multivariate datenanalyse	finden sie einen artikel mit dem gleichen ort wie die multivariate datenanalyse	finden sie einen artikel mit der gleichen location als multivariate daten analyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( call SW.getProperty en.article.multivariate_data_analysis ( string venue ) ) ) )
welche artikel werden in der multivariaten datenanalyse zitiert?	was sind die artikel, die multivariate datenanalyse zitiert	was sind die artikel, die multivariate datenanalyse zitiert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )
artikel veröffentlicht nach 2004	artikel veröffentlicht nach 2004	artikel publiziert nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
veranstaltungsort des artikels, dessen autor efron ist	veranstaltungsort, der ort des artikels ist, dessen autor efron ist	veranstaltungsort veranstaltungsort ist der artikel, dessen autor ist efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )
welcher artikelautor ist efron?	welche artikel autor ist efron	welche artikel autor efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) )
welcher autor schrieb zwei artikel	welcher autor zwei artikel schrieb	die autorin schrieb sie zwei artikel,	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
autor des artikels zitiert durch multivariate datenanalyse	autor eines artikels, der von multivariater datenanalyse zitiert wird	autor des artikels zitiert von multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
welcher artikel hat ein veröffentlichungsdatum größer als 2004	welcher artikel ein veröffentlichungsdatum hat, das größer als 2004 ist	welchen artikel hat eine veröffentlichung mehr als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
was ist ein artikel in annalen von statistiken über multivariate datenanalyse	was ist ein artikel in dentalen von statistiken über multivariate datenanalyse	was ist ein artikel in annals of statistics über multivariate daten analyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
multivariate datenanalyse veranstaltungsort	multivariate datenanalyseort	multivariate data analysis veranstaltungsort	( call SW.listValue ( call SW.getProperty en.article.multivariate_data_analysis ( string venue ) ) )
welche person hat artikel geschrieben, als eine auszeichnung gewonnen	welche person artikel geschrieben hat, als eine auszeichnung gewonnen hat	welche person schrieb artikel über einen award gewonnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )
artikel, die durch multivariate datenanalyse zitiert und von efron geschrieben wurden	artikel, die von der multivariaten datenanalyse zitiert und von efron	der artikel zitiert von multivariaten datenanalyse und geschrieben von efron	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string author ) ( string = ) en.person.efron ) )
welcher artikel hat zwei zitate	welcher artikel hat zwei zitate	welchen artikel hat zwei zitate	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
veröffentlichungen zur multivariaten datenanalyse	veröffentlichungen der multivariaten datenanalyse	publikationen der multivariaten datenanalyse	( call SW.listValue ( call SW.getProperty en.article.multivariate_data_analysis ( string venue ) ) )
welcher artikel hat weniger als zwei veranstaltungsorte	welcher artikel weniger als zwei veranstaltungsorte hat	welchen artikel hat weniger als zwei spielstätten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string < ) ( number 2 ) ) )
artikel von weniger als zwei personen geschrieben	artikel, die von weniger als zwei personen geschrieben wurden	artikel von weniger als zwei personen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string < ) ( number 2 ) ) )
artikel von mehr als zwei autoren	artikel von mehr als zwei autoren	artikel von mehr als zwei autor	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string > ) ( number 2 ) ) )
artikel mit ihren erscheinungsdaten zwischen 2004 und 2010	artikel mit veröffentlichungsdaten zwischen 2004 und 2010	artikel mit ihren veröffentlichungspflichten, die sich zwischen 2004 und 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) )
dieser artikel zitiert 2 weitere artikel	dieser artikel zitiert 2 weitere artikel	dieser artikel zitiert 2 weitere artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel zitiert von multivariate datenanalyse, deren veranstaltungsort annalen der statistik ist	artikel zitiert durch multivariate datenanalyse, deren veranstaltungsort die anzahl der statistiken ist	artikel zitiert von multivariaten datenanalyse, deren veranstaltungsort ist annals of statistics	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
artikel, die nicht in statistischen annalen veröffentlicht wurden	artikel, die nicht in den statistiken veröffentlicht wurden	artikel nicht veröffentlicht in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string ! = ) en.venue.annals_of_statistics ) )
artikel, die mehr als zwei artikel zitieren	artikel, die mehr als zwei artikel zitieren	artikel, die zitieren sie mehr als zwei artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
welchen preisgekrönten artikel zitiert die multivariate datenanalyse	welcher preisgekrönte artikel durch multivariate datenanalyse zitiert wird	was die preisgekrönten artikel zitiert, der von multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
welcher artikel hat ein erscheinungsdatum von mindestens 2004	welcher artikel ein veröffentlichungsdatum von mindestens 2004 hat	welche artikel hat ein datum der veröffentlichung von mindestens 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
artikel zitiert nicht multivariate datenanalyse	artikel ohne multivariate datenanalyse	artikel nicht unter berufung auf multivariate daten analyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string ! = ) en.article.multivariate_data_analysis ) )
artikel, die in oder vor 2004 veröffentlicht wurden	artikel, die in oder vor 2004 veröffentlicht wurden	artikel veröffentlicht in oder vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
artikel mit weniger als zwei autoren	artikel mit weniger als zwei autoren	artikel mit weniger als zwei autoren	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string < ) ( number 2 ) ) )
nennen sie einen artikel aus den annalen der statistik	benennen sie einen artikel aus den statistiken	namen einen artikel aus den annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )
nennen sie einen artikel über multivariate datenanalyse aus den annalen der statistik	namen eines artikels über multivariate datenanalyse aus den statistiken	namen ein artikel über die multivariate analyse der daten aus den annalen der statistik	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
in welchem artikel wird die multivariate datenanalyse nicht zitiert?	welcher artikel nicht multivariate datenanalyse zitiert	die artikel nicht zitieren, multivariate datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string ! = ) en.article.multivariate_data_analysis ) )
welcher artikel zitiert multivariate datenanalyse	welcher artikel die multivariate datenanalyse zitiert	die artikel zitiert multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ) )
in welchem artikel werden multivariate daten analysiert?	welcher artikel einen ort der multivariaten datenanalyse hat	welche artikel hat ein ort der multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( call SW.getProperty en.article.multivariate_data_analysis ( string venue ) ) ) )
welche artikel werden in der multivariaten datenanalyse veröffentlicht?	welche artikel in der multivariaten datenanalyse veröffentlicht werden	welche artikel sind veröffentlicht in der multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
artikel, die an den wenigsten orten veröffentlicht wurden	artikel, die an den wenigsten orten veröffentlicht wurden	artikel veröffentlicht in den wenigsten locations	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( string venue ) ) )
artikel, die von efron verfasst und in den annalen der statistik veröffentlicht wurden	artikel, die von efron verfasst und in den statistischen zeitschriften veröffentlicht wurden	artikel geschrieben von efron und veröffentlicht in den annals of statistics	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
finde einen artikel, der vor 2004 veröffentlicht wurde	finden sie einen artikel, der vor 2004 veröffentlicht wurde	finden sie einen artikel veröffentlicht, bevor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
artikel mit dem größten erscheinungsdatum	artikel mit dem größten veröffentlichungsdatum	artikel, die das größte datum der veröffentlichung	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string publication_date ) ) ) )
artikel mit den wenigsten zitaten	artikel mit den wenigsten zitaten	artikel mit den wenigsten zitate	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( string cites ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel zitiert in artikeln von efron	artikel, die in artikeln von efron zitiert werden	der artikel zitiert im artikel von efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )
welcher veranstaltungsort hat zwei oder weniger artikel	welcher veranstaltungsort zwei oder weniger artikel hat	welchen ort hat zwei oder weniger artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
welcher artikel wurde am selben tag wie die multivariate datenanalyse veröffentlicht?	welcher artikel am selben tag wie die multivariate datenanalyse veröffentlicht wurde	was artikel erschien am selben tag wie multivariate datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) )
artikel nicht in den annalen der statistik	artikel nicht in den annals der statistik	artikel, die nicht in den annalen der statistik	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string ! = ) en.venue.annals_of_statistics ) )
artikel in weniger als zwei publikationen	artikel in weniger als zwei publikationen	artikel in weniger als zwei publikationen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string < ) ( number 2 ) ) )
welcher artikel ist in den meisten artikeln erwähnt	welcher artikel in den meisten artikeln erwähnt wird	der artikel ist erwähnt in den meisten anzahl der artikel	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string cites ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
was efron artikel zitiert multivariate datenanalyse	was efron artikel zitiert multivariate datenanalyse	was efron artikel zitiert multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
veröffentlichungen mit mehr als zwei artikeln	veröffentlichungen, die mehr als zwei artikel enthalten haben	publikationen, die mehr als zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
finden sie einen artikel, der 2004 oder 2010 veröffentlicht wurde	finden sie einen artikel veröffentlicht entweder 2004 oder 2010	finden sie einen artikel veröffentlicht, in entweder 2004 oder 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) )
wo können sie multivariate datenanalyse sehen	wo können sie multivariate datenanalyse sehen	wo kann man sehen, multivariate datenanalyse	( call SW.listValue ( call SW.getProperty en.article.multivariate_data_analysis ( string venue ) ) )
artikel zitiert multivariate datenanalyse von efron	artikel unter berufung auf multivariate datenanalyse von efron	artikel zitieren von multivariaten datenanalyse von efron	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string author ) ( string = ) en.person.efron ) )
zuletzt veröffentlichter artikel	zuletzt veröffentlichter artikel	die meisten vor kurzem veröffentlichten artikel	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string publication_date ) ) ) )
welcher autor hat keine multivariate datenanalyse geschrieben?	welcher autor keine multivariate datenanalyse geschrieben hat	der autor hat nicht geschrieben multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string ! = ) en.article.multivariate_data_analysis ) )
artikel des multivariaten datenanalyseautors	artikel des multivariaten datenanalyseschreibers	artikel von multivariaten datenanalyseschriftsteller	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) ( call SW.getProperty en.article.multivariate_data_analysis ( string author ) ) ) )
autor von mehr als zwei artikeln	autor von mehr als zwei artikeln	autor von mehr als zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
welcher artikel wurde im jahr 2004 bei annalen der statistik veröffentlicht	der artikel 2004 in den annals der statistik veröffentlicht wurde	der artikel wurde im jahr 2004 veröffentlicht in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
artikel in annalen von statistiken veröffentlicht, die multivariate datenanalyse zitieren	artikel, die in annals von statistiken veröffentlicht werden, die multivariate datenanalyse zitieren	artikel veröffentlicht in den annalen der statistik, die sie zitieren multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
in welchem artikel wurde die multivariate datenanalyse zitiert?	welchen artikel zitierte der artikel, in dem multivariate datenanalyse zitiert wurde,	welchen artikel hat der artikel zitiert, dass multivariate datenanalysezitieren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ) )
welcher artikel hat weniger als zwei autoren	welcher artikel weniger als zwei autoren hat	welchen artikel hat weniger als zwei autoren	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string < ) ( number 2 ) ) )
nennen sie eine person, die zwei artikel geschrieben hat	benennen sie eine person, die zwei artikel geschrieben hat	nennen sie eine person, die geschrieben hat, zwei artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel zitiert von studien mit multivariaten datenanalyse	artikel, die von studien mit multivariater datenanalyse zitiert werden	der artikel zitiert studien, die mit multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
artikel, der drei oder mehr artikel zitiert	artikel, der drei oder mehr artikel zitiert	artikel zitiert drei oder mehr artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
was ist der artikel mit dem ältesten veröffentlichungsdatum?	was ist der artikel mit dem ältesten veröffentlichungsdatum	was ist der artikel mit dem ältesten erscheinungstermin	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string publication_date ) ) ) )
nennen sie den autor eines artikels über multivariate datenanalyse	benennen sie den autor eines artikels über multivariate datenanalyse	name des autors eines artikels über multivariate daten analyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
welche artikel zitieren zwei oder weniger artikel	in welchen artikeln zwei oder weniger artikel	die artikel verweisen auf zwei oder weniger artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
nennen sie einen artikel mit mehr als zwei autoren	benennen eines artikels mit mehr als zwei autoren	namen einen artikel mit mehr als zwei autoren	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string > ) ( number 2 ) ) )
erscheinungsdatum der multivariaten datenanalyse	veröffentlichungsdatum der multivariaten datenanalyse	datum der veröffentlichung der multivariaten datenanalyse	( call SW.listValue ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) )
artikel zitiert von artikeln in annalen der statistik	artikel, die in den statistiken zitiert werden	artikeln zitiert nach artikel in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )
artikel, die von multivariaten datenanalysen zitiert wurden und mit preisen ausgezeichnet wurden	artikel, die von multivariaten datenanalysen zitiert werden, die auszeichnungen erhielten	der artikel zitiert von multivariaten datenanalyse, die auszeichnungen gewonnen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string won_award ) ) )
welcher veranstaltungsort hat weniger als zwei artikel	welcher veranstaltungsort weniger als zwei artikel hat	welchen ort hat weniger als zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
in welchem artikel sind zwei weitere artikel zitiert?	welcher artikel zwei weitere artikel enthält, die darin zitiert werden	welchen artikel hat zwei weitere artikel zitiert in es	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
welcher autor hat mehr als zwei artikel geschrieben	welcher autor mehr als zwei artikel geschrieben hat	was der autor geschrieben hat, mehr als zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel, der multivariate datenanalyse in annalen von statistiken zitierte	artikel, der multivariate datenanalyse in annals von statistiken	artikel zitiert, dass multivariate data analysis in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )
artikel in annalen der statistik veröffentlicht und durch multivariate datenanalyse zitiert	artikel, die in statistiken veröffentlicht und durch multivariate datenanalyse zitiert werden	artikel veröffentlicht in annals of statistics und zitiert von multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
welche artikel werden in den annalen der statistik und im jahr 2004 veröffentlicht?	welche artikel in den statistiken und im jahr 2004 veröffentlicht werden	welche artikel sind veröffentlicht in den annalen der statistik und im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )
artikel veröffentlicht im jahr 2004 und zitiert multivariate datenanalyse	artikel, der 2004 veröffentlicht wurde und der multivariate datenanalyse	artikel veröffentlicht in 2004 und zitiert multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )
welcher artikel wurde vom preisgekrönten artikel zitiert	welcher artikel durch den preisgekrönten artikel zitiert wurde	was artikel zitiert wurde von dem preisgekrönten artikel	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )
preisgekrönter artikel von efron	preisgekrönter artikel veröffentlicht von efron	preisgekröntes artikel veröffentlicht von efron	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string won_award ) ) )
welche artikel zitieren mindestens zwei artikel	in welchen artikeln mindestens zwei artikel	die artikel zitieren mindestens zwei artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
nennen sie einen artikel über multivariate datenanalyse, der im jahr 2004 veröffentlicht wurde	namen eines artikels über multivariate datenanalyse, veröffentlicht 2004	namen einen artikel über multivariate daten analyse, veröffentlicht im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )
von efron oder lakoff geschriebene artikel	artikel geschrieben von efron oder lakoff	artikel geschrieben von efron oder lakoff	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) ( call SW.concat en.person.efron en.person.lakoff ) ) )
der zwei oder weniger artikel verfasst hat	der zwei oder weniger artikel verfasst hat	wer verfasste zwei oder weniger artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
welcher artikel hat ein erscheinungsdatum von 2004	welcher artikel ein veröffentlichungsdatum von 2004 hat	welche artikel hat ein datum der veröffentlichung von 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
nennen sie einen artikel aus dem jahr 2004 über multivariate datenanalyse	namen eines artikels aus dem jahr 2004 über multivariate datenanalyse	name ein artikel von 2004 über multivariate daten analyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )
was sind einige artikel von efron oder lakoff geschrieben	was sind einige artikel von efron oder lakoff geschrieben	was sind einige artikel geschrieben von efron oder lakoff	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) ( call SW.concat en.person.efron en.person.lakoff ) ) )
nennen sie einen autor von zwei artikeln	name eines autors von zwei artikeln	name der autor der beiden artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel von mindestens zwei autoren	artikel von mindestens zwei autoren	artikel, die von mindestens zwei autoren	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string >= ) ( number 2 ) ) )
artikel, die durch multivariate datenanalyse ausgezeichnet wurden	artikel, die auszeichnungen gewonnen haben, die durch multivariate datenanalyse zitiert werden	artikel, preise gewonnen, angeführt von multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
artikel, der multivariate datenanalyse zitiert	artikel, der multivariate datenanalyse zitiert	artikel, die zitiert multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
artikel, dessen autor efron ist und dessen erscheinungsdatum 2004 ist	artikel, dessen autor efron ist und dessen veröffentlichungsdatum 2004 ist	artikel, deren autor efron und deren veröffentlichung 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )
artikel, der die 2004 veröffentlichte multivariate datenanalyse zitiert	artikel, der multivariate datenanalyse zitiert, die 2004 veröffentlicht wird	artikel, die zitiert multivariaten datenanalyse, die im jahr 2004 veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )
artikel, der preisgekrönten multivariaten artikel zur datenanalyse erwähnt	artikel, der preisgekrönten multivariaten datenanalyseartikel erwähnt	artikel, erwähnt preisgekröntes multivariaten datenanalyse zum artikel	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string won_award ) ) )
artikel, der weniger als zwei veranstaltungsorte hat	artikel, der weniger als zwei veranstaltungsorte hat	artikel, die weniger als zwei venue	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string < ) ( number 2 ) ) )
veranstaltungsorte, die im jahr 2004 veröffentlicht	veranstaltungsorte, die 2004 veröffentlicht wurden	spielstätten, die im jahr 2004 veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
artikel, der multivariate datenanalyse in den annalen der statistik zitiert	artikel, der multivariate datenanalyse in den annals der statistik zitiert	artikel, die zitiert multivariaten datenanalyse in den annals of statistics	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
was ist ein artikel von efron geschrieben	was ist ein artikel von efron geschrieben	was ist ein artikel, geschrieben von efron	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string author ) ( string = ) en.person.efron ) )
autor von einem oder zwei artikeln	autor eines oder zweier artikel	autor von ein oder zwei artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
finden sie einen artikel in annalen der statistik, die im jahr 2004 veröffentlicht wurde	finden sie einen artikel in den statistiken, die im jahr 2004 veröffentlicht wurde	finden sie einen artikel in annals of statistics wurde im jahr 2004 veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )
artikel, der mindestens zwei artikel zitiert	artikel, den mindestens zwei artikel zitiert	artikel, die mindestens zwei artikel zitiert	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
preisgekrönter artikel, der multivariate datenanalysen zitiert	artikel, der einen preis gewonnen hat und die multivariate datenanalyse zitiert	artikel, die einen preis gewonnen und zitiert multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string won_award ) ) )
suchen sie einen artikel, der zwei oder weniger zitate enthält	finden sie einen artikel, der zwei oder weniger zitate enthält	finden sie einen artikel, der macht zwei oder weniger zitate	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
nennen sie einen autor von mindestens zwei artikeln	name eines autors von mindestens zwei artikeln	name autor von mindestens zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel mit zwei veranstaltungsorten	artikel mit zwei veranstaltungsorten	artikel mit zwei spielstätten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( number 2 ) ) )
veranstaltungsort des artikels, in dem multivariate datenanalysen zitiert werden	veranstaltungsort, der ort des artikels ist, der multivariate datenanalyse zitiert	veranstaltungsort veranstaltungsort ist der artikel, der zitiert multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ) )
welcher efronartikel zitiert die multivariate datenanalyse?	welcher efron artikel zitiert multivariate datenanalyse	die efronartikel zitiert multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string author ) ( string = ) en.person.efron ) )
personen, die keine multivariate datenanalyse verfasst haben	personen, die keine multivariate datenanalyse erstellt haben	menschen, die nicht autor multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string ! = ) en.article.multivariate_data_analysis ) )
welcher artikel wurde von efron geschrieben und hat ein erscheinungsdatum von 2004	welcher artikel von efron geschrieben wurde und ein veröffentlichungsdatum von 2004 hat	was artikel wurde geschrieben von efron und hat ein erscheinungsdatum 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )
artikel, die nicht von efron geschrieben wurden	artikel, die nicht von efron geschrieben wurden	artikel nicht geschrieben von efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string ! = ) en.person.efron ) )
artikel, der einen einzelnen artikel zitiert	artikel, der einen einzelnen artikel zitiert	artikel zitiert einen einzigen artikel,	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel zitiert von zwei anderen artikeln	artikel, die in zwei weiteren artikeln zitiert werden	artikel angeführt von zwei anderen artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
welche artikel zitiert zwei andere artikel	welche artikel zwei weitere artikel zitieren	was der artikel zitiert zwei andere artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
ein artikel mit dem neuesten erscheinungsdatum	ein artikel mit dem datum datum der letzten veröffentlichung	ein artikel mit dem neuesten datum der veröffentlichung	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string publication_date ) ) ) )
artikel, die am selben ort veröffentlicht wurden wie multivariate datenanalysen	artikel, die am selben ort veröffentlicht werden wie multivariate datenanalyse	artikel veröffentlicht in der gleichen location als multivariate daten analyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
welcher artikel hat über zwei autoren	welcher artikel hat über zwei autoren	welchen artikel hat mehr als zwei autoren	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string > ) ( number 2 ) ) )
artikel, der artikel zitiert, die im jahr 2004 veröffentlicht wurden	artikel, der artikel zitiert, die 2004 veröffentlicht wurden	artikel zitieren artikel veröffentlicht 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
von einem verfasste artikel	artikel, die von einem	artikel verfasst von einem	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string < ) ( number 2 ) ) )
bei welchem veranstaltungsort handelt es sich um mindestens zwei artikel?	welcher veranstaltungsort mindestens zwei artikel ist	was veranstaltungsort ist über mindestens zwei artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
wie viele zeitschriften gibt es?	wie viele zeitschriften vorhanden sind	wie viele zeitschriften gibt es	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ) )
finden sie einen artikel in den annalen der statistik veranstaltungsort	finden sie einen artikel in den annals der statistikveranstaltung	finden sie einen artikel in den annals of statistics ort	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
was ist ein artikel, der zwei orte hat	was ist ein artikel, der zwei veranstaltungsorte hat	was ist ein artikel, der hat zwei spielstätten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( number 2 ) ) )
welcher artikel wurde 2010 oder früher veröffentlicht?	welcher artikel 2010 oder früher veröffentlicht wurde	was artikel wurde veröffentlicht im jahr 2010 oder früher	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
autor von nur einem artikel	autor von nur einem artikel	autor von nur einem artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
von efron verfasste artikel	artikel verfasst von efron	artikel verfasst von efron	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string author ) ( string = ) en.person.efron ) )
artikel mit der geringsten anzahl von veranstaltungsorten	artikel mit der geringsten anzahl von veranstaltungsorten	artikel, die die geringste anzahl der veranstaltungsort	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( string venue ) ) )
welcher artikel zitiert artikel von efron	welcher artikel artikel zitiert, die von efron geschrieben wurden	was artikel zitiert sie artikel von efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )
artikel über annalen von statistiken von efron	artikel über die statistiken von efron	artikel annals of statistics, die von efron	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string author ) ( string = ) en.person.efron ) )
finden sie einen veranstaltungsort ohne multivariate datenanalyse	suchen eines veranstaltungsorts ohne multivariate datenanalyse	finden sie einen ort, der nicht über multivariate daten analyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string ! = ) en.article.multivariate_data_analysis ) )
was ist das datum des artikels	was ist das datum des artikels	was ist das datum von dem artikel	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel, die im jahr 2004 nicht veröffentlicht wurden	artikel, die 2004 nicht veröffentlicht wurden	artikel, die nicht im jahr 2004 veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string ! = ) ( date 2004 -1 -1 ) ) )
artikel von efron, der sich auf multivariate datenanalysen bezieht	artikel von efron, der auf multivariate datenanalyse verweist	artikel geschrieben von efron, dass verweise multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string author ) ( string = ) en.person.efron ) )
welcher artikel wurde ausgezeichnet und handelt von annalen der statistik	welcher artikel einen preis gewonnen hat und sich mit deninaden der statistik befasst	was artikel einen preis gewonnen und ist über die annals of statistics	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
artikel, die mehr als zwei artikel zitieren	artikel, die mehr als zwei artikel zitieren	artikel, die zitieren sie mehr als zwei artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
finden sie einen artikel, der nach einer multivariaten datenanalyse veröffentlicht wurde	suchen eines artikels, der nach multivariater datenanalyse veröffentlicht wurde	finden sie einen artikel veröffentlicht, nach der multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )
artikel, die an zwei oder weniger orten veröffentlicht wurden	artikel, die an zwei oder weniger orten veröffentlicht werden	artikel erschienen in zwei oder weniger locations	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string <= ) ( number 2 ) ) )
artikel, die nach multivariater datenanalyse veröffentlicht wurden	artikel, die nach multivariater datenanalyse veröffentlicht wurden	artikel veröffentlicht nach der multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )
was artikel sites nur einen anderen artikel	welcher artikel nur einen anderen artikel enthält	was artikel seiten nur von einem anderen artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
preisgekrönter artikel zitiert durch multivariate datenanalyse	preisgekrönter artikel, der durch multivariate datenanalyse zitiert wird	preisgekröntes artikel zitiert von multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
welcher artikel hat die meisten veranstaltungsorte?	welcher artikel die meisten veranstaltungsorte hat	welche artikel sind die beliebtesten veranstaltungsorten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( string venue ) ) )
artikel zitiert von artikel, der im jahr 2004 veröffentlicht wird	artikel zitiert durch artikel, der im jahr 2004 veröffentlicht wird	artikel zitierten artikel, die im jahr 2004 veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
artikel mit den wenigsten autoren	artikel mit den wenigsten autoren	artikel mit den wenigsten autoren	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( string author ) ) )
artikel, die multivariate datenanalysen zitieren und in annalen von statistiken veröffentlicht wurden	artikel, die sich auf multivariate datenanalyse berufen, die in statistiken veröffentlicht wurden	artikel zitieren von multivariaten datenanalyse, veröffentlicht in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
nennen sie den autor, dessen artikel seinen sitz als annalen der statistik hat	nennen sie den autor, dessen artikel seinen ort hat, als statistiken	name der autorin, deren artikel hat seinen ort, annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )
nennen sie einen artikel von efron	name eines artikels von efron	name ein artikel von efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )
artikel von efron	artikel von efron	artikel von efron	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string author ) ( string = ) en.person.efron ) )
welcher autor hat maximal zwei artikel geschrieben?	welcher autor zwei artikel maximal geschrieben hat	die autorin hat zwei artikel geschrieben, maximale	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel von einem oder zwei autoren	artikel von einem oder zwei autoren	artikel geschrieben von ein oder zwei autoren	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string <= ) ( number 2 ) ) )
wo findet ein artikel statt, der durch multivariate datenanalyse zitiert wird?	veranstaltungsort eines artikels, der durch multivariate datenanalyse zitiert wird	was ist der ort der einen artikel zitiert, der von multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
welcher veranstaltungsort ist multivariate datenanalyse in	welcher ort ist die multivariate datenanalyse in	was veranstaltungsort ist multivariate datenanalyse in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) en.article.multivariate_data_analysis ) )
welcher artikel über multivariate datenanalyse wurde im jahr 2004 veröffentlicht	welcher artikel über multivariate datenanalyse wurde 2004 veröffentlicht	was artikel über multivariate daten analyse wurde im jahr 2004 veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )
welcher artikel wurde zweimal zitiert	welcher artikel zweimal zitiert wurde	was der artikel wurde zweimal zitiert	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel im jahr 2004 veröffentlicht	2004 veröffentlichte artikel	artikel veröffentlicht in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )
artikel mit demselben veröffentlichungsdatum wie der artikel zur multivariaten datenanalyse	artikel mit demselben veröffentlichungsdatum wie der artikel für die multivariate datenanalyse	artikel, die die veröffentlichung als der multivariaten datenanalyse zum artikel	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )
artikel, die keine multivariate datenanalyse zitieren	artikel, in denen keine multivariate datenanalyse zitiert wird	artikel, die nicht zitieren multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string ! = ) en.article.multivariate_data_analysis ) )
was ist das veröffentlichungsdatum für die multivariate datenanalyse?	was ist das datum der veröffentlichung für die multivariate datenanalyse	was ist das datum der veröffentlichung für multivariate daten analyse	( call SW.listValue ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) )
welcher artikel ist von efron geschrieben	welcher artikel von efron geschrieben wurde	was artikel ist geschrieben von efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) )
wo findet der 2004 erschienene artikel statt?	veranstaltungsort des 2004 veröffentlichten artikels	was ist der ort der der artikel veröffentlicht 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
autoren, die multivariate datenanalyse zitierten	autoren, die multivariate datenanalyse zitierten	autoren, die zitiert multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ) )
artikel, die vor der multivariaten datenanalyse veröffentlicht wurden	artikel, die vor der multivariaten datenanalyse veröffentlicht wurden	artikel veröffentlicht vor multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )
wer ist der andere autor des von efron verfassten artikels?	der andere autor für den von efron geschriebenen artikel	wer ist der andere autor für den artikel, geschrieben von efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )
welcher artikel hat die geringste anzahl von autoren	welcher artikel die geringste anzahl von autoren hat	welchen artikel hat die wenigsten autoren	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( string author ) ) )
welcher artikel zitiert mindestens zwei andere artikel	welcher artikel mindestens zwei weitere artikel zitiert	was artikel zitiert, die mindestens zwei andere artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel, der mindestens zwei artikel zitiert	artikel, der mindestens zwei artikel zitiert	artikel zitieren von mindestens zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
welcher autor veröffentlichte einen artikel im jahr 2004	welcher autor 2004 einen artikel veröffentlicht hat	welcher autor einen artikel veröffentlicht, im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
artikel, die maximal zwei artikel enthalten	artikel, die städte maximal zwei artikel	artikel, die städte maximal zwei artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
welcher preisgekrönte artikel wurde von efron geschrieben?	welcher preisgekrönte artikel von efron geschrieben wurde	was die preisgekrönten artikel wurde geschrieben von efron	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( string author ) ( string = ) en.person.efron ) )
artikel dessen autor efron ist	artikel, dessen autor efron ist	artikel, deren autor efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )
was ist das veröffentlichungsdatum eines multivariaten datenanalyseartikels?	was ist das veröffentlichungsdatum eines multivariaten datenanalyseartikels	was ist das datum der veröffentlichung einer multivariaten datenanalyse artikel	( call SW.listValue ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) )
welcher artikel hat das älteste erscheinungsdatum?	welcher artikel hat das älteste veröffentlichungsdatum	welchen artikel hat das älteste datum der veröffentlichung	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string publication_date ) ) ) )
preisgekrönter artikel	preisgekrönter artikel	preisgekröntes artikel	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) )
artikel von efron aus dem jahr 2004	artikel von efron erschienen 2004	artikel von efron im jahr 2004 veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )
ein artikel, der die 2004 veröffentlichte multivariate datenanalyse zitiert	ein artikel, der multivariate datenanalyse zitiert, die 2004 veröffentlicht wurde	ein artikel, der zitiert multivariaten datenanalyse, veröffentlicht im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )
artikel des gleichen autors für multivariate datenanalyse	artikel desselben autors der multivariaten datenanalyse	artikel vom selben autor der multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
artikel, der die multivariate datenanalyse des autors efron zitiert	artikel, der multivariate datenanalyse von autor efron zitiert	artikel, die zitiert multivariate analyse der daten durch den autor efron	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string author ) ( string = ) en.person.efron ) )
welcher autor schrieb einen artikel, der städte multivariate datenanalyse	welcher autor einen artikel geschrieben hat, dass städte multivariate datenanalyse	was der autor schrieb in einem artikel, dass die städte multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ) )
was ist die personennummer?	was ist die personennummer	was ist die personen anzahl	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
artikel in annalen der statistik veröffentlicht	artikel veröffentlicht in annals of statistics	artikel veröffentlicht in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
was ist ein artikel von nur einem autor geschrieben	was ist ein artikel, der von nur einem autor geschrieben wurde	was ist ein artikel von nur einem autor	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string < ) ( number 2 ) ) )
welcher artikel ist in der geringsten anzahl von anderen artikeln erwähnt	welcher artikel in der geringsten anzahl anderer artikel erwähnt wird	der artikel ist erwähnt in der geringsten anzahl von anderen artikeln	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string cites ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
finden sie einen ort für einen artikel in annalen der statistik	finden sie einen ort eines artikels in dentalen der statistik	finden sie einen ort von einem artikel in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )
veranstaltungsorte, die efrons artikel haben	veranstaltungsorte, die efrons artikel haben	spielstätten, die haben efrons artikel	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )
wie lautet die veranstaltungsortnummer?	was ist die veranstaltungsortnummer	was ist der veranstaltungsorte anzahl	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ) )
welcher artikel wurde in einem artikel von 2004 zitiert?	welcher artikel in einem artikel aus dem jahr 2004 zitiert wurde	was artikel zitiert wurde, von einem 2004 artikel	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
veranstaltungsort von zwei artikeln	veranstaltungsort von zwei artikeln	veranstaltungsort von zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel von efron verfasst und 2004 veröffentlicht	artikel geschrieben von efron und veröffentlicht 2004	artikel geschrieben von efron und im jahr 2004 veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string author ) ( string = ) en.person.efron ) )
nennen sie einen artikel, der im jahr 2004 nicht veröffentlicht wurde	namen eines artikels, der 2004 nicht veröffentlicht wurde	namen einen artikel nicht veröffentlicht 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
an welchem ort wurden mehr als zwei artikel veröffentlicht?	welcher veranstaltungsort für mehr als zwei artikel war	die location war schauplatz für mehr als zwei artikelpublikation	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel, die artikel zitieren, die von efron geschrieben wurden	artikel, die artikel zitieren, die von efron geschrieben wurden	artikel, die zitieren sie artikel von efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )
artikel, die in oder vor 2004 veröffentlicht wurden	artikel, die in oder vor 2004 veröffentlicht wurden	artikel veröffentlicht in oder vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
nennen sie jemanden, der nicht mehr als zwei artikel geschrieben hat	benennen sie jemanden, der nicht mehr als zwei artikel geschrieben hat	name jemand, der geschrieben hat, nicht mehr als zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel verfasst von efron und hat die annalen der statistik als veranstaltungsort	artikel, der von efron verfasst wurde und die annals der statistik als veranstaltungsort hat	artikel verfasst von efron und hat die annalen der statistik als ihren veranstaltungsort	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
welcher artikel hat das gleiche veröffentlichungsdatum wie die multivariate datenanalyse?	welcher artikel ein veröffentlichungsdatum hat, das mit der multivariaten datenanalyse identisch ist	welche artikel hat ein datum der veröffentlichung die gleichen wie multivariate datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) )
veranstaltungsorte mit weniger als zwei artikeln	veranstaltungsorte mit weniger als zwei artikeln	veranstaltungsorte von weniger als zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
in welcher zeitschrift wird die multivariate datenanalyse veröffentlicht?	welches journal ist eine multivariate datenanalyse, die in	welche zeitschrift ist multivariaten datenanalyse, veröffentlicht in	( call SW.listValue ( call SW.getProperty en.article.multivariate_data_analysis ( string venue ) ) )
artikel mit zwei verlagen	artikel mit zwei verlagen	artikel mit zwei verlage	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( number 2 ) ) )
was ist ein veranstaltungsort mit weniger als zwei artikeln	was ist ein veranstaltungsort mit weniger als zwei artikeln	was ist ein ort mit weniger als zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel, der multivariate datenanalyse zitiert	artikel, der multivariate datenanalyse zitiert	artikel, die zitiert multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( call SW.getProperty en.article.multivariate_data_analysis ( string venue ) ) ) )
artikel von efron, der multivariate datenanalysen zitiert	artikel von efron geschrieben, der multivariate datenanalyse zitiert	artikel geschrieben von efron die multivariate datenanalyse zitiert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
andere als die multivariate datenanalyse	andere veranstaltungsorte als der multivariate datenanalyseort	veranstaltungsorte andere als die multivariate data analysis veranstaltungsort	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string ! = ) en.article.multivariate_data_analysis ) )
erster veröffentlichter artikel	erstveröffentlichter artikel	erste artikel veröffentlicht	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string publication_date ) ) ) )
artikel, der mindestens zwei andere artikel erwähnt	artikel, der mindestens zwei weitere artikel erwähnt	artikel erwähnt, dass mindestens zwei andere artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
nennen sie einen artikel, der an zwei oder mehr orten gefunden wurde	benennen sie einen artikel, der an zwei oder mehr orten gefunden wurde	namen einen artikel gefunden, in zwei oder mehr orten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string >= ) ( number 2 ) ) )
artikel, dessen erscheinungsdatum mindestens 2004 ist	artikel, dessen veröffentlichungsdatum mindestens 2004 ist	artikel, deren veröffentlichungsdatum mindestens 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
was ist ein artikel in einer veröffentlichung über multivariate datenanalyse zitiert	was ist ein artikel, der in einer publikation über multivariate datenanalyse zitiert wird?	was ist ein artikel zitiert, der in einer veröffentlichung über multivariate daten analyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
welcher artikel macht die wenigsten zitate	welcher artikel die wenigsten zitate macht	was artikel lässt die wenigsten zitate	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string cites ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
welcher veranstaltungsort hat artikel im jahr 2004 veröffentlicht	welcher veranstaltungsort artikel aus dem jahr 2004 veröffentlicht hat	welchen ort hat beiträge veröffentlicht in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
finden sie einen efron artikel	finden sie einen efron artikel	finden efron artikel	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) )
artikel mit zwei veranstaltungsorten	artikel mit zwei veranstaltungsorten	artikel mit zwei spielstätten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( number 2 ) ) )
wer ist der autor, dessen veranstaltungsort annalen der statistik ist	der autor dessen veranstaltungsort ist, ist die statistik	wer ist der autor, dessen veranstaltungsort wird annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )
artikel mit mehr als zwei autoren	artikel mit mehr als zwei autoren	artikel mit mehr als zwei autoren	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string > ) ( number 2 ) ) )
welcher artikel hat die wenigsten autoren	welcher artikel hat die wenigsten autoren	welchen artikel hat die wenigsten autoren	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( string author ) ) )
welcher artikel wurde von efron geschrieben und behandelt annalen der statistik	welcher artikel von efron geschrieben wurde und an statistiken diskutiert	was artikel wurde geschrieben von efron und diskutiert annals of statistics	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
artikel von efron unter berufung auf multivariate datenanalyse	artikel von efron unter berufung auf multivariate datenanalyse	artikel von efron unter berufung auf multivariate daten analyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
artikel aus dem jahr 2004, in denen multivariate datenanalysen zitiert werden	artikel, die 2004 unter berufung auf multivariate datenanalyse veröffentlicht wurden	artikel veröffentlicht im jahr 2004 unter berufung auf multivariate daten analyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )
artikel, der keine multivariate datenanalyse zitiert	artikel, der keine multivariate datenanalyse zitiert	artikel, die nicht zitieren multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string ! = ) en.article.multivariate_data_analysis ) )
artikel, die vor 2004 oder vor 2010 veröffentlicht wurden	artikel, die vor 2004 oder vor 2010 veröffentlicht wurden	veröffentlichungen vor 2004 oder vor 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
wo findet die multivariate datenanalyse statt?	was ist der ort der multivariaten datenanalyse	was ist der ort der multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string venue ) ) ( string = ) en.article.multivariate_data_analysis ) )
artikel mit dem veranstaltungsort als annalen der statistik	artikel mit dem veranstaltungsort als annals der statistik	artikel mit dem ort, annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )
veröffentlichungen, die keine multivariaten datenanalysen veröffentlichen	publikationen, die keine multivariate datenanalyse veröffentlichen	publikationen, die nicht veröffentlichen, multivariate datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string ! = ) en.article.multivariate_data_analysis ) )
preisgekrönte artikel aus dem jahr 2004	preisgekrönte artikel, die 2004 veröffentlicht wurden	preisgekröntes artikel veröffentlicht 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string won_award ) ) )
artikel des autors für multivariate datenanalyse	artikel des verfassers der multivariaten datenanalyse	artikel geschrieben von autor der multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
nennen sie einen preisgekrönten artikel über multivariate datenanalyse	benennen sie einen artikel über multivariate datenanalyse, der eine auszeichnung erhalten hat	namen einen artikel über multivariate daten analyse, hat eine auszeichnung gewonnen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string won_award ) ) )
preisgekrönter artikel zitiert durch multivariate datenanalyse	preisgekrönter artikel, der durch multivariate datenanalyse zitiert wird	preisgekröntes artikel zitiert von multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string won_award ) ) )
in welchem veranstaltungsort finden sie multivariate datenanalyse?	an welchem ort finden sie multivariate datenanalysen in	was ort finden sie multivariaten datenanalyse in	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string venue ) ) ( string = ) en.article.multivariate_data_analysis ) )
welcher artikel zitiert weniger als zwei andere artikel	welcher artikel weniger als zwei andere artikel zitiert	was artikel zitiert, weniger als zwei andere artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel mit mehr als zwei veranstaltungsorten	artikel mit mehr als zwei veranstaltungsorten	artikel mit mehr als zwei venue	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string > ) ( number 2 ) ) )
welcher autor schrieb über annalen der statistik	was der autor über die statistiken schrieb	was der autor schrieb über annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )
artikel, dessen veranstaltungsort der veranstaltungsort für multivariate datenanalysen ist	artikel, dessen veranstaltungsort veranstaltungsort ist, der ort der multivariaten datenanalyse ist	artikel, deren veranstaltungsort veranstaltungsort veranstaltungsort der multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
welcher veranstaltungsort besteht aus multivariaten datenanalyse	welcher ort aus multivariater datenanalyse besteht	welchem ort aus der multivariaten datenanalyse	( call SW.listValue ( call SW.getProperty en.article.multivariate_data_analysis ( string venue ) ) )
welcher artikel wurde von einer minimalen anzahl von autoren geschrieben?	welcher artikel von der mindestanzahl der autoren geschrieben wurde	die artikel wurde geschrieben, durch die minimale anzahl von autoren	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( string author ) ) )
wer hat artikel mit efron verfasst	der artikel mit efron mitverfasst hat	wer hat coautor von artikeln mit efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )
preisgekrönte artikel, die in artikeln mit multivariater datenanalyse zitiert werden	preisgekrönte artikel, die in artikeln mit multivariater datenanalyse zitiert werden	preisgekrönte artikel zitiert, in artikeln unter verwendung der multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
artikel zitiert von preisgekrönten artikeln	artikel, die von preisgekrönten artikeln zitiert werden	der artikel zitiert die preisgekrönte artikel	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )
welcher artikel zitiert einen preisgekrönten artikel	welcher artikel einen preisgekrönten artikel zitiert	der artikel zitiert eine preisgekrönte artikel	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )
veranstaltungsort von zwei artikeln	veranstaltungsort von zwei artikeln	veranstaltungsort von zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
wer hat die wenigsten artikel geschrieben	der die wenigsten artikel geschrieben hat	wer hat geschrieben, die wenigsten artikel	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string author ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
nennen sie einen artikel, der 2004 über multivariate datenanalyse veröffentlicht wurde	namen eines 2004 veröffentlichten artikels über multivariate datenanalyse	namen einem artikel, veröffentlicht im jahr 2004 über multivariate daten analyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )
bei welchem veranstaltungsort handelt es sich um die meisten artikel?	welcher veranstaltungsort über die meisten artikel ist	was veranstaltungsort ist über die anzahl der artikel	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string venue ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel von efron, der durch multivariate datenanalyse zitiert wird	artikel von efron, der durch multivariate datenanalyse zitiert wird	artikel geschrieben von efron, dass zitiert von multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string author ) ( string = ) en.person.efron ) )
artikel, die gleichzeitig mit oder vor der multivariaten datenanalyse veröffentlicht wurden	artikel, die zeitgleich mit oder vor der multivariaten datenanalyse veröffentlicht wurden	artikel veröffentlicht zeitgleich zur oder vor der multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )
artikel mit erscheinungsdatum als 2004 und austragungsort als annalen der statistik	artikel mit veröffentlichungsdatum 2004 und hat den veranstaltungsort als reihe von statistischen	artikel mit erscheinungsdatum 2004 und hat den veranstaltungsort als annals of statistics	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
suche mir einen artikel mit zwei oder mehr veranstaltungsorten	finden sie mir einen artikel mit zwei oder mehr veranstaltungsorten	finden sie mir einen artikel mit zwei oder mehr orten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string >= ) ( number 2 ) ) )
finden sie einen artikel von efron	finden sie einen artikel von efron	finden sie einen artikel von efron	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string author ) ( string = ) en.person.efron ) )
artikel mit erscheinungsdatum 2004 oder 2010	artikel mit veröffentlichungsdatum 2004 oder 2010	artikel mit erscheinungsdatum 2004 oder 2010	( call SW.listValue ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) )
welcher artikel hat zwei autoren oder weniger	welcher artikel zwei autoren oder weniger hat	welchen artikel hat zwei autoren oder weniger	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string <= ) ( number 2 ) ) )
wo findet ein artikel statt, in dem multivariate datenanalysen zitiert werden?	veranstaltungsort eines artikels, der multivariate datenanalyse zitiert	was ist der ort der einen artikel zitiert, multivariate datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
artikel veröffentlicht im jahr 2004 und zitiert durch multivariate datenanalyse	2004 veröffentlichte und von multivariaten datenanalysen zitierte artikel	artikel veröffentlicht in 2004 und zitiert von multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
welcher artikel war in den meisten veranstaltungsorten	welcher artikel war in den meisten veranstaltungsorten	was artikel wurde in den meisten locations	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( string venue ) ) )
welcher autor schrieb unter zwei artikeln	welcher autor unter zwei artikeln schrieb	die autorin schrieb unter zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel in den meisten publikationen gefunden	artikel in den meisten publikationen	artikel gefunden in den meisten publikationen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( string venue ) ) )
artikel, die drei oder mehr städte erwähnen	artikel, die drei oder mehr städte erwähnen	artikel, in denen drei oder mehr städte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
welcher artikel hat ein erscheinungsdatum von 2003 und eine auszeichnung gewonnen	welcher artikel ein veröffentlichungsdatum von 2003 hat und einen preis gewonnen hat	welche artikel hat ein veröffentlichungsdatum von 2003 und eine auszeichnung gewonnen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string won_award ) ) )
verfasser von artikeln, die durch multivariate datenanalyse zitiert wurden	autor von artikeln, die von multivariater datenanalyse zitiert werden	verfasser der artikel zitiert von multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
artikel zitiert von sowie zitiert multivariate datenanalyse	artikel zitiert von sowie zitiert multivariate datenanalyse	artikel zitiert werden, auch als cites multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
artikel von efron unter berufung auf multivariate datenanalyse	artikel von efron unter berufung auf multivariate datenanalyse	artikel geschrieben von efron unter berufung auf multivariate daten analyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string author ) ( string = ) en.person.efron ) )
autor von zwei artikeln	autor von zwei artikeln	autor von zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
wer hat mehr als zwei artikel geschrieben	der mehr als zwei artikel geschrieben hat	wer geschrieben hat, mehr als zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
nennen sie artikel in annalen der statistik	namensartikel in annals der statistik	name artikel in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )
artikel veröffentlicht, außer im jahr 2004	artikel veröffentlicht außer im jahr 2004	artikel veröffentlicht außer im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string ! = ) ( date 2004 -1 -1 ) ) )
artikel zitiert von preisgekrönten artikel	artikel zitiert durch preisgekrönten artikel	artikel zitiert, der von dem preisgekrönten artikel	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )
verfasser von zwei artikeln	verfasser von zwei artikeln	autoren der beiden artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel veröffentlicht am datum der multivariaten datenanalyse	artikel veröffentlicht am datum der multivariaten datenanalyse	artikel veröffentlicht am datum der multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) )
welcher artikel zitiert einen artikel aus annalen der statistik	welcher artikel zitiert einen artikel aus annals von statistiken	was der artikel zitiert einen artikel von annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )
welcher artikel wurde nach 2004 veröffentlicht?	welcher artikel nach 2004 veröffentlicht wurde	was artikel wurde veröffentlicht, nachdem 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
artikel, die artikel zitieren, die im jahr 2004 veröffentlicht wurden	artikel unter berufung auf 2004 veröffentlichte artikel	artikel zitieren von artikeln veröffentlicht 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
welcher artikel wurde ausgezeichnet	welcher artikel einen preis gewonnen hat	was artikel einen preis gewonnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) )
preisgekrönte artikel aus der multivariaten datenanalyse	preisgekrönte artikel, die in der multivariaten datenanalyse zitiert werden	preisgekrönte artikel zitiert in multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string won_award ) ) )
welcher artikel wurde am oder vor 2004 veröffentlicht	welcher artikel am oder vor 2004 veröffentlicht wurde	was artikel wurde veröffentlicht in oder vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
welche multivariaten datenanalyse stadt artikel wurden nach 2004 veröffentlicht	welche multivariaten datenanalysestadtartikel nach 2004 veröffentlicht wurden	was multivariaten datenanalysestadt wurden artikel veröffentlicht, die nach 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )
artikel, der artikel zitiert, der multivariate datenanalyse zitiert	artikel, der artikel zitiert, dass multivariate datenanalyse zitiert	artikel, die citesartikel, der multivariaten datenanalyse zitiert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
artikel, der die wenigsten artikel zitiert	artikel, der die wenigsten artikel zitiert	artikel zitiert, dass die wenigsten artikel	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string cites ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
welcher artikel, der multivariate datenanalysen zitiert, wurde ausgezeichnet	welcher artikel, der multivariate datenanalyse zitiert, erhielt einen preis	die artikel, die zitiert multivariate data analysis ausgezeichnet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )
veranstaltungsort, der in mindestens zwei artikeln erwähnt wird	veranstaltungsort, der in mindestens zwei artikeln erwähnt wird	ort, der erwähnt wird, in mindestens zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
welcher artikel zitiert mehr als zwei andere artikel	welcher artikel zitiert mehr als zwei andere artikel	was artikel zitiert mehr als zwei andere artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
autor des artikels unter berufung auf multivariate datenanalyse	autor eines artikels, der sich auf multivariate datenanalyse beruft	autor des artikels unter berufung auf multivariate daten analyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ) )
wer schrieb einen artikel unter berufung auf multivariate datenanalyse	der einen artikel geschrieben hat, in dem die multivariate datenanalyse	wer schrieb einen artikel, der unter berufung auf multivariate daten analyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
artikel in multivariater datenanalyse veröffentlicht	artikel, die in der multivariaten datenanalyse veröffentlicht wurden	artikel veröffentlicht in der multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( call SW.getProperty en.article.multivariate_data_analysis ( string venue ) ) ) )
autoren von preisgekrönten artikeln	autoren von preisgekrönten artikeln	die autoren der prämierten beiträge	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )
veröffentlichungen mit von efron verfassten artikeln	publikationen mit artikeln, die von efron verfasst wurden	publikationen mit artikeln geschrieben von efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )
artikel, die vor 2004 veröffentlicht wurden	artikel, die vor 2004 veröffentlicht wurden	veröffentlichungen vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
welcher artikel wurde ausgezeichnet und hat ein erscheinungsdatum von 2004	welcher artikel einen preis gewonnen hat und ein veröffentlichungsdatum von 2004 hat	was artikel einen preis gewonnen und hat ein erscheinungsdatum 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )
artikel, die an zwei oder mehr orten veröffentlicht wurden	artikel, die an zwei oder mehr orten veröffentlicht werden	artikel erschienen in zwei oder mehr orten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string >= ) ( number 2 ) ) )
artikel mit zwei autoren	artikel mit zwei autoren	artikel mit zwei autoren	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) ( number 2 ) ) )
in welchem artikel geht es um multivariate datenanalyse?	welcher artikel befasst sich mit multivariater datenanalyse	was artikel ist über, multivariate datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
autoren von höchstens zwei artikeln	verfasser ndermaximal zwei erpresser	autoren der beiden artikel auf die meisten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel zitiert multivariate datenanalyse in annalen der statistik veröffentlicht	artikel unter berufung auf multivariate datenanalyse, veröffentlicht in statistiken	artikel zitieren von multivariaten datenanalyse, veröffentlicht in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
welcher artikel wurde von efron und cities multivariate datenanalyse geschrieben	welcher artikel von efron und cities multivariate datenanalyse geschrieben wurde	was artikel wurde geschrieben von efron und städte multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string author ) ( string = ) en.person.efron ) )
artikel mit einem veranstaltungsort	artikel mit veranstaltungsort	artikel mit einem veranstaltungsort	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string < ) ( number 2 ) ) )
ein artikel, der multivariate datenanalysen zitiert	ein artikel, der sich auf die multivariate datenanalyse beruft	ein artikel unter berufung auf multivariate daten analyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
welcher veranstaltungsort hat die meisten artikel?	welcher veranstaltungsort die meisten artikel hat	welche ort hat die meisten artikel	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string venue ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel, der ausgezeichnet wurde	artikel, der ausgezeichnet wurde	artikel, die ausgezeichnet wurde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( string won_award ) ) )
welcher artikel zitiert einen artikel von 2004	welcher artikel zitiert einen artikel aus dem jahr 2004	was der artikel zitiert ein 2004 artikel	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
artikel, dessen erscheinungsdatum 2004 ist und dessen autor efron ist	artikel, dessen veröffentlichungsdatum 2004 ist und dessen autor efron ist	artikel, deren erscheinungsdatum 2004 ist, und dessen autor ist efron	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string author ) ( string = ) en.person.efron ) )
was ist der neueste veröffentlichte artikel	was ist der neueste veröffentlichte artikel	was ist die neueste veröffentlichte artikel	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string publication_date ) ) ) )
artikel zitiert durch multivariate datenanalyse und veröffentlicht in annalen von statistiken	artikel, die von multivariaten datenanalysen zitiert und in statistischen beispielen veröffentlicht werden	der artikel zitiert von multivariaten datenanalyse und veröffentlicht in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
entweder annalen der statistik oder der computerlinguistik	entweder annals von statistiken oder computerlinguistik	entweder annalen der statistik oder der computerlinguistik	( call SW.listValue ( call SW.concat en.venue.annals_of_statistics en.venue.computational_linguistics ) )
autor von nur einem artikel	autor von nur einem artikel	autor von nur einem artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel, die vor 2004 geschrieben wurden	artikel, die vor 2004 geschrieben wurden	artikel, die geschrieben wurden, bevor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
welcher artikel von efron zitiert die multivariate datenanalyse?	welcher artikel von efron zitiert multivariate datenanalyse	was artikel geschrieben von efron zitiert multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )
preisgekrönter artikel von efron	preisgekrönter artikel von efron	ausgezeichneter artikel von efron	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( string author ) ( string = ) en.person.efron ) )
welcher artikel wurde vor der multivariaten datenanalyse veröffentlicht?	welcher artikel vor der multivariaten datenanalyse veröffentlicht wurde	was artikel wurde veröffentlicht, bevor der multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )
nennen sie einige artikel, die nicht von efron geschrieben wurden	nennen sie einige artikel, die nicht von efron geschrieben wurden	nennen sie einige artikel, die nicht geschrieben von efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string ! = ) en.person.efron ) )
artikel, der zwei oder weniger artikel zitiert	artikel, der zwei oder weniger artikel zitiert	artikel zitiert, dass zwei oder weniger artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
in welchem artikel wird ein artikel zitiert, der in der multivariaten datenanalyse zitiert wird?	welcher artikel zitiert einen artikel, der in der multivariaten datenanalyse zitiert wird	was der artikel zitiert einen artikel zitiert, in der multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
autoren, die im jahr 2004 veröffentlicht	schriftsteller, die 2004 veröffentlichten	schriftsteller, die im jahr 2004 veröffentlicht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
artikel mit der geringsten artikelanzahl	artikel, der die geringste anzahl von artikel zitiert	 artikel, zitiert die geringste anzahl der artikel	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( string cites ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel mit der geringsten autorenzahl	artikel mit der geringsten anzahl von autoren	artikel, dass hat die wenigsten autor	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( string author ) ) )
artikel mit drei oder mehr autoren	artikel mit drei oder mehr autoren	artikel mit drei oder mehr autoren	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string > ) ( number 2 ) ) )
artikel von efron zitiert	artikel geschrieben von efron zitiert	artikel geschrieben von efron zitiert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )
artikel, der einen artikel erwähnt	artikel, der einen artikel erwähnt	artikel, erwähnt einen artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel zitiert von preisgekrönten artikeln	artikel, die von preisgekrönten artikeln zitiert werden	der artikel zitiert von prämierten artikeln	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )
welcher artikel ist von weniger als zwei autoren geschrieben	welcher artikel von weniger als zwei autoren geschrieben wird	der artikel ist verfasst von weniger als zwei autoren	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string < ) ( number 2 ) ) )
zeitschrift, die keine multivariate datenanalyse veröffentlicht hat	erfassung, die keine multivariate datenanalyse veröffentlicht hat	zeitschrift, die nicht veröffentlichen multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string ! = ) en.article.multivariate_data_analysis ) )
artikel vor 2010 veröffentlicht	artikel, die vor 2010 veröffentlicht wurden	artikel veröffentlicht, bevor 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
nennen sie jemanden, der nicht der autor eines artikels über multivariate datenanalyse ist	benennen sie jemanden, der nicht der autor eines artikels über multivariate datenanalyse ist	name jemand, der nicht der autor eines artikels über multivariate daten analyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string ! = ) en.article.multivariate_data_analysis ) )
der artikel enthält mindestens zwei veranstaltungsorte	es gibt mindestens zwei veranstaltungsorte im artikel	es gibt mindestens zwei orte in der artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string >= ) ( number 2 ) ) )
welcher preisgekrönte artikel hat annalen von statistiken als veranstaltungsort	welcher preisgekrönte artikel hat statistiken als veranstaltungsort	was die preisgekrönten artikel hat annals of statistics als veranstaltungsort	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
welcher veranstaltungsort hat zwei oder mehr artikel	welcher veranstaltungsort zwei oder mehr artikel hat	welchen ort hat zwei oder mehr artikel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel zitiert durch multivariate datenanalyse und veröffentlicht in annalen von statistiken	artikel, die von multivariaten datenanalysen zitiert und in statistischen beispielen veröffentlicht werden	der artikel zitiert von multivariaten datenanalyse und veröffentlicht in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
artikel zitiert von weniger als zwei artikeln	artikel, die in weniger als zwei artikeln zitiert werden	der artikel zitiert von weniger als zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
nennen sie eine person, die nicht mehr als zwei artikel geschrieben hat	nennen sie eine person, die nicht mehr als zwei artikel geschrieben hat	nennen sie eine person, die geschrieben hat, nicht mehr als zwei artikeln	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
artikel des autors für multivariate datenanalyse	artikel des autors der multivariaten datenanalyse	artikel geschrieben von autor der multivariaten datenanalyse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
artikel veröffentlicht zwischen 2004 und 2010	zwischen 2004 und 2010 veröffentlichte artikel	artikel veröffentlicht zwischen 2004 und 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
artikel mehr als zweimal zitiert	artikel mehr als zweimal zitiert	artikel zitiert, mehr als doppelt	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
für welche mahlzeit sind zwei oder weniger rezepte vorgesehen?	welche mahlzeit zwei oder weniger rezepte für sie bestimmt hat	welches essen hat zwei oder weniger rezepte ausgewiesen, für die es	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
zeigen sie mir rezepte mit einer zubereitungszeit, die gleich oder länger als die kochzeit von milchreis ist	zeigen sie mir rezepte mit einer zubereitungszeit gleich oder größer als die garzeit von reispudding	zeige mir rezepte mit einer zubereitungszeit, die gleich oder größer als die garzeit des milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
finde ein rezept, das zwei leute füttert	finden sie ein rezept, das zwei personen füttern	ein rezept thatll zwei personen ernähren	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
welche zutat ist in zwei oder weniger rezepten	welche zutat in zwei oder weniger rezepten enthalten ist	was die zutat ist, die in zwei oder weniger rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welche rezepte machen mindestens 2 mahlzeiten	welche rezepte machen mindestens 2 mahlzeiten	die rezepte mindestens 2 mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
welche zwei zutaten benötigt dieses rezept?	welche zwei zutaten dieses rezept erfordert	welche zwei inhaltsstoffe enthält, rezept benötigen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
wie viele zutaten braucht das?	wie viele zutaten das erfordert	wie viele inhaltsstoffe enthält, die erforderlich	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
zeig mir mittags rezepte	zeigen sie mir mittagessen rezepte	zeigen sie mir mittagessen rezepte	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string meal ) ( string = ) en.meal.lunch ) )
welches rezept kann in kürzerer zeit als milchreis vorbereitet werden, kann gekocht werden	welches rezept in weniger zeit zubereitet werden kann, als reispudding gekocht werden kann	was rezept kann vorbereitet werden, in weniger zeit als milchreis zubereitet werden können	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
wie viele rezepte gibt es?	wie viele rezepte gibt es	wie viele rezepte sind da	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches datum rezepte verbreiten, ist mindestens dasselbe wie milchreis	welche rezepte buchungsdatum ist mindestens das gleiche wie reispudding	welche rezepte buchungsdatum ist mindestens die gleiche wie milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
zeige rezepte, die in jeder mahlzeit verwendet werden könnten	zeigen sie rezepte, die in jeder mahlzeit verwendet werden könnten	zeigen rezepte, die verwendet werden könnten, in jede mahlzeit	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
welche art von küche ist milchreis	welche art von küche ist reispudding	welche art von küche ist reis pudding	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) )
finden sie ein rezept, das die gleiche zeit wie milchreis kocht	finden sie ein rezept, das die gleiche zeit braucht, um wie reispudding zu kochen	finden sie ein rezept, das genauso lange dauert, um zu kochen als reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )
welches rezept dient höchstens drei	welches rezept höchstens drei	was rezept dient höchstens drei	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
das datum der veröffentlichung des mittagsrezepts ist 2004	das datum der mittagsrezeptbuchung ist 2004	das mittagessen rezept buchungsdatum 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string meal ) ( string = ) en.meal.lunch ) )
zeigen sie mir rezepte zum mittagessen, die milch benötigen	zeigen sie mir mittagessen rezepte, die milch benötigen	zeigen sie mir mittagessen rezepte, die erfordern, milch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string requires ) ( string = ) en.ingredient.milk ) )
was ist ein rezept aus den wenigsten küchen	was ist ein rezept aus der geringsten küche	was ist ein rezept von den wenigsten küchen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string cuisine ) ) )
welche rezepte teilen zutaten	welche rezepte zutaten teilen	welche rezepte teilen zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
was ist die mahlzeit, zu der milchreis passt?	was ist die mahlzeit, mit der reispudding geht	was ist die mahlzeit, milchreis geht mit	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) )
was rezepte kochzeit ist mindestens die vorbereitungszeit von milchreis	welche rezepte kochzeit ist mindestens die zubereitungszeit von reispudding	was rezepte kochen zeit ist mindestens die zeit der vorbereitung des reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
nennen sie die zutaten, die in mehr als einem rezept verwendet werden	namenszutaten, die in mehr als einem rezept verwendet werden	name zutaten verwendet werden, die in mehr als einem rezept	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches rezept buchungsdatum ist nicht in 2004	welches rezeptbuchungsdatum nicht im jahr 2004 ist	welche rezepte buchungsdatum liegt nicht in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string ! = ) ( date 2004 -1 -1 ) ) )
rezept für die meisten mahlzeiten	rezept für die meisten mahlzeiten	rezept für die anzahl von mahlzeit	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
welches rezept hat eine küche	welches rezept hat eine küche	was rezept hat eine küche	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string < ) ( number 2 ) ) )
welches rezept benötigt milch?	welches rezept milch erfordert	was rezept benötigt milch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ) )
zeigen sie mir rezepte, die zwei oder mehr zutaten benötigt	zeigen sie mir rezepte, die zwei oder mehr zutaten erforderten	zeigen sie mir rezepte, die zwei oder mehr zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
zeigen sie mir zutaten, die zwei rezepte erfordern	zeigen sie mir zutaten, die zwei rezepte erfordern	zeigen sie mir, zutaten, zwei rezepte benötigt	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
was ist ein rezept für weniger als zwei mahlzeiten	was ist ein rezept für weniger als zwei mahlzeiten verwendet	was ist ein rezept verwendet, für die weniger als zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
welches rezept dauert länger als milchreis zu kochen	welches rezept dauert länger zu kochen als reispudding	was rezept dauert länger, um zu kochen als reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
welche zutat wird in der geringsten anzahl von rezepten benötigt	welche zutat in der geringsten anzahl von rezepten benötigt wird	welche zutat benötigt wird, in der geringsten anzahl von rezepten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches rezept hat sein buchungsdatum als 2004	welches rezept sein buchungsdatum als 2004 hat	das rezept hat seinen posten als datum 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
welches lebensmittel wird im milchreis nicht benötigt?	welche lebensmittel im reispudding nicht benötigt werden	das nahrungsmittel ist nicht erforderlich milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string ! = ) en.recipe.rice_pudding ) )
welche rezepte haben die meisten zutaten	welche rezepte die meisten zutaten haben	welche rezepte haben sie die meisten inhaltsstoffe	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
für welche mahlzeit können maximale rezepte gefunden werden	für welche mahlzeit maximal rezepte gefunden werden können	für das, was mahlzeit kann eine maximale rezepte gefunden werden	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
wie viel zeit braucht man, um milchreis zu kochen?	wie viel zeit es braucht, um reispudding zu kochen	wie viel zeit es braucht, um zu kochen reispudding	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) )
zeig mir rezepte, die keine mittagsrezepte sind	zeigen sie mir rezepte, die keine mittagessen rezepte sind	zeigen sie mir rezepte, die nicht mittagessen rezepte	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string ! = ) en.meal.lunch ) )
zeig mir mahlzeiten, die milch erfordern	zeigen mir mahlzeiten, die milch benötigen	zeigen sie mir die mahlzeiten erfordern milch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ) )
was sind zutaten in milchreis	was sind zutaten in reispudding	was sind die zutaten von reispudding	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) )
rezepte mit der vorbereitungszeit als garzeit von milchreis anzeigen	zeigen sie rezepte mit der zubereitungszeit als die garzeit des reispuddings	zeigen rezepte mit der vorbereitungszeit, da die garzeit von reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )
zeigen sie mir rezepte, deren garzeit länger ist als die vorbereitungszeit für milchreis	zeigen sie mir rezepte mit kochzeit größer als vorbereitungszeit für reispudding	zeigen sie mir die rezepte mit kochzeit größer als die zeit der vorbereitung für reis pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
hier finden sie rezepte für das mittagessen, die im jahr 2004 veröffentlicht wurden	finden mittagessen rezepte veröffentlicht im jahr 2004	finden mittagessen rezepte veröffentlicht 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string meal ) ( string = ) en.meal.lunch ) )
zutaten im rezept aus dem jahr 2004	zutaten in rezept im jahr 2004 veröffentlicht	zutaten im rezept geschrieben im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
was ist das rezept, das die minimale anzahl von zutaten benötigt	was ist das rezept, das die minimale anzahl von zutaten benötigt	was ist das rezept, das muss die minimale anzahl von zutaten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
was rezepte garzeit ist das gleiche wie milchreis	welche rezepte kochzeit ist die gleiche wie reispudding	was rezepte kochen zeit ist die gleiche wie milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )
welches rezept erfordert die meisten zutaten	welches rezept die meisten zutaten benötigt	das rezept erfordert den meisten zutaten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
rezepte in reispudding zubereitet kochzeit	rezepte in reispuddings kochzeit zubereitet	rezepte in reis pudding kochen zeit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )
was ist ein rezept, das zum mittag oder abendessen gut ist	was ist ein rezept, das gut für mittag oder abendessen ist	was ist ein rezept, das ist gut für mittagoder abendessen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( call SW.concat en.meal.lunch en.meal.dinner ) ) )
zutaten in weniger als drei rezepten erforderlich	zutaten in weniger als drei rezepten erforderlich	zutaten benötigt, die in weniger als drei rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
was ist ein mittagessen rezept	was ist ein mittagessen rezept	was ist ein mittagessen rezept	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string meal ) ( string = ) en.meal.lunch ) )
zeige rezepte, die mehr als zwei küchen folgen	zeigen rezepte, die mehr als zwei küchen folgen	zeigen die rezepte, die folgen mehr als zwei küchen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string > ) ( number 2 ) ) )
zeigen sie mir rezepte, deren zubereitung weniger zeit in anspruch nimmt als reispudding	zeigen sie mir rezepte, die weniger zeit zubereiten als reispudding	zeigen sie mir rezepte, die nehmen weniger zeit zum kochen als reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
welches rezept erfordert milch macht ein mittagessen	welches rezept, das milch erfordert, macht eine mittagsmahlzeit	was rezept erfordern milch macht eine mittagsmahlzeit	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string requires ) ( string = ) en.ingredient.milk ) )
zeige mir rezepte, die nicht später als das milchreisrezept veröffentlicht wurden	zeigen sie mir rezepte, die nicht später als der reispudding rezept gebucht	zeigen sie mir rezepte, geschrieben nicht später als die reispuddingrezept	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
welche zutaten braucht milchreis?	welche zutaten braucht reispudding	welche inhaltsstoffe enthält milchreis brauchen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) )
was ist die gesamtkochzeit des rezepts	was ist die gesamte garzeit des rezepts	was ist die gesamte garzeit für das rezept	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ) ) )
was ist ein rezept, das nicht im jahr 2004 veröffentlicht wurde	was ist ein rezept, das nicht im jahr 2004 veröffentlicht wurde	was ist ein rezept, dass nicht gepostet wurde, im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string ! = ) ( date 2004 -1 -1 ) ) )
was ist die verwendete milch oder spinat	was ist die verwendete milch oder spinat	was ist die verwendete milch oder spinat	( call SW.listValue ( call SW.concat en.ingredient.milk en.ingredient.spinach ) )
welches rezept hat die längste zutatenliste	welches rezept die längste zutatenliste hat	das rezept hat die längste zutatenliste	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
was ist küche für milchreis	was ist küche für reispudding	was ist die küche für reis pudding	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) )
zeig mir rezepte für höchstens zwei mahlzeiten	zeigen sie mir rezepte für höchstens zwei mahlzeiten	zeige mir rezepte für zwei mahlzeiten bei den meisten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
zeigen sie mir rezepte, die für mehr als eine mahlzeit arbeiten	zeigen sie mir rezepte, die für mehr als eine mahlzeit arbeiten	zeigen sie mir rezepte, die arbeit für mehr als eine mahlzeit	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
welches rezept benötigt weniger als zwei zutaten	welches rezept weniger als zwei zutaten benötigt	was rezept benötigt weniger als zwei zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
für welche mahlzeit ist reispudding oder quiche gemacht?	welche mahlzeit ist reispudding oder quiche für	welche mahlzeit ist reispudding oder quiche gemacht, für	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) ) )
wie lange dauert die zubereitung von milchreis?	wie lange dauert es, reispudding zuzubereiten	wie lange dauert die erstellung milchreis	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) )
zeig mir die am meisten benötigten zutaten in rezepten	zeigen sie mir die am meisten benötigte zutat in rezepten	zeigen sie mir die benötigte zutat in rezepten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
was ist die durchschnittliche vorbereitungszeit für ein rezept	was ist die durchschnittliche zubereitungszeit für ein rezept	was ist die durchschnittliche vorbereitungszeit für ein rezept	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )
zeigen sie das rezept an, dessen zubereitung am längsten dauert	zeigen sie das rezept, das die längste zeit zum kochen benötigt	zeigen sie das rezept, das dauert am längsten zeit zum kochen	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )
was ist die durchschnittliche zubereitungszeit dieses rezepts?	was ist die durchschnittliche zubereitungszeit dieses rezepts	was ist die durchschnittliche zeit der vorbereitung dieses rezept	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )
welche rezepte wurden bis 2004 oder 2010 veröffentlicht?	welche rezepte bis 2004 oder 2010 gebucht wurden	die rezepte die gepostet wurden bis zum jahr 2004 oder 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
was ist eine zutat in weniger als zwei rezepten gefunden	was ist eine zutat in weniger als zwei rezepten gefunden	was ist eine zutat gefunden in weniger als zwei rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
rezept, das zuerst gebucht	rezept, das zuerst veröffentlicht wurde	rezept, das zuerst gepostet	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )
welches rezept erfordert drei oder mehr zutaten	welches rezept drei oder mehr zutaten erfordert	was rezept benötigt drei oder mehr zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
welches rezept buchungsdatum ist 2004 und erfordert milch	welches rezeptbuchungsdatum 2004 ist und milch benötigt	welche rezepte buchungsdatum 2004 und milch benötigt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string requires ) ( string = ) en.ingredient.milk ) )
welche mahlzeit hat zwei oder mehr rezepte	welche mahlzeit hat zwei oder mehr rezepte	welches essen hat zwei oder mehr rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
zutat, die von der geringsten anzahl an rezepten benötigt wird	zutat erforderlich durch die geringste anzahl von rezepten	zutat benötigt mindestens anzahl der rezepte	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
was ist eine zutat in einem rezept für milchreis oder quiche gefunden	was ist eine zutat in einem rezept für reispudding oder quiche gefunden	was ist eine zutat gefunden in einem rezept für milchreis oder quiche	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) ) )
listen sie die rezepte zum mittag oder abendessen auf	liste der rezepte für mittag oder abendessen	liste der rezepte für mittagoder abendessen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( call SW.concat en.meal.lunch en.meal.dinner ) ) )
was rezepte braucht mehr zeit als milchreis vorzubereiten	welche rezepte mehr zeit in anspruch nimmt als reispudding	welche rezepte braucht mehr zeit zur vorbereitung als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
rezept mit garzeit nicht mehr als die von milchreis	rezept mit kochzeit nicht mehr als das von reispudding	rezept mit dem kochen mal nicht mehr als, dass der reis pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
welche rezepte fallen unter mehr als zwei küchen	welche rezepte unter mehr als zwei küchen fallen	welche rezepte fallen unter mehr als zwei küchen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string > ) ( number 2 ) ) )
finde eine mahlzeit ohne milchreis	finden sie eine mahlzeit ohne reispudding	finden, eine mahlzeit ohne reis pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string ! = ) en.recipe.rice_pudding ) )
spinat oder milch	spinat oder milch	spinat oder milch	( call SW.listValue ( call SW.concat en.ingredient.milk en.ingredient.spinach ) )
was ist die garzeit von milchreis	was ist die garzeit des reispuddings	was ist die garzeit von reispudding	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) )
zeig mir rezepte, die eine zutat erfordern	zeigen sie mir rezepte, die eine zutat erfordern	zeige mir rezepte erfordern eine zutat	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
welches rezept benötigt die längste zeit für die zubereitung?	welches rezept dauert am längsten, um sich vorzubereiten	was rezept dauert am längsten zeit, um prep	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )
was ist ein rezept aus mehr als zwei küchen	was ist ein rezept aus mehr als zwei küchen	was ist eine rezeptur aus mehr als zwei küchen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string > ) ( number 2 ) ) )
was ist die vorbereitungszeit für milchreis	was ist die vorbereitungszeit für reispudding	was ist die vorbereitungszeit für reis pudding	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) )
hier finden sie alle rezepte, die nach 2004 veröffentlicht wurden	finden sie alle rezepte nach 2004 veröffentlicht	finden sie alle rezepte gepostet, die nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
was sind die zutaten für das rezept aus dem jahr 2004?	was sind zutaten, die nach dem 2004 veröffentlichten rezept benötigt werden	was sind die benötigten zutaten, indem sie das rezept gepostet 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
welche mahlzeit hat weniger als zwei rezepte	welche mahlzeit hat weniger als zwei rezepte	die mahlzeit weniger als zwei rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
für welche mahlzeit gibt es die wenigsten rezepte	für welche mahlzeit gibt es die wenigsten rezepte	für welches essen gibt es die geringste anzahl von rezepten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
zeigen sie mir die vorbereitungszeit für milchreis	zeigen sie mir vorbereitungszeit für reispudding	zeigen sie mir die zeit der vorbereitung für reis pudding	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) )
welche zutat steckt in weniger rezepten?	welche zutat gibt es in weniger rezepten	welche zutaten gibt es in weniger rezepte	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches rezept braucht weniger zeit zum kochen als milchreis zuzubereiten	welches rezept weniger zeit zum kochen benötigt als reispudding, um	was rezept dauert weniger zeit zum kochen als reispudding nicht zu bereiten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
was ist die mittlere garzeit für das rezept	was ist die mittlere garzeit für das rezept	was ist die durchschnittliche kochzeit für das rezept	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ) ) )
zeige mir rezepte, die vor 2004 oder vor 2010 gepostet wurden	zeigen sie mir rezepte vor 2004 oder vor 2010 gepostet	zeige mir rezepte gepostet vor 2004 oder vor 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
zeig mir zutaten, die für milchreis nicht benötigt werden	zeigen sie mir zutaten nicht für reispudding erforderlich	zeigen sie mir die zutaten nicht erforderlich für reis pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string ! = ) en.recipe.rice_pudding ) )
welches rezept wurde im jahr 2004 nicht gebucht	welches rezept 2004 nicht veröffentlicht wurde	das rezept nicht gepostet wurde, im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string ! = ) ( date 2004 -1 -1 ) ) )
welches rezept wurde am buchungsdatum von milchreis gebucht	welches rezept am buchungsdatum des reispuddings gebucht wurde	das rezept gepostet wurde, auf das buchungsdatum des reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
zeige mir rezepte, die im jahr 2004 oder später veröffentlicht wurden	zeigen sie mir rezepte im jahr 2004 oder höher veröffentlicht	zeige mir rezepte gepostet, die 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
finden sie rezepte, die vor dem rezept für milchreis geschrieben wurden	finden sie rezepte, die vor dem rezept für reispudding gepostet wurden	rezepte zu finden, die gepostet wurden, bevor das rezept für milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
was ist das neueste rezept	was ist das neueste rezept	was ist der neueste rezept	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )
wie lange dauert die zubereitung von milchreis?	wie lange dauert die zubereitung von reispudding	wie lange dauert milchreis nehmen, um prep	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) )
kochzeit des rezepts	kochzeit des rezepts	garzeit rezept	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ) ) )
welches rezept ist das älteste	welches rezept ist das älteste	was ist das älteste rezept	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )
welche art von küche ist milchreis	welche art von küche ist reispudding	welche art von küche ist reis pudding	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) )
welche zutaten werden nur zum mittagessen verwendet	welche zutaten nur zum mittagessen verwendet werden	was für zutaten verwendet werden, nur für das mittagessen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ) )
was ist ein rezept, das keine milch als zutat verwendet	was ist ein rezept, das milch nicht als zutat verwendet	was ist ein rezept, das nicht verwenden milch als zutat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string ! = ) en.ingredient.milk ) )
welches rezept erfordert die zutaten von milchreis	welches rezept die zutaten von reispudding erfordert	was rezept erfordert die zutaten von milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) ) )
welche rezepte teilen mindestens zwei zutaten	welche rezepte mindestens zwei zutaten teilen	welche rezepte teilen mindestens zwei zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
rezepte anzeigen, deren veröffentlichungsdatum auf oder vor 2004 liegt	rezepte anzeigen, deren gebuchtes datum auf oder vor 2004 liegt	zeigen rezepte, deren posted date ist am oder vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
zeig mir die gesamtzahl der rezepte	zeigen sie mir die gesamtzahl der rezepte	zeigen sie mir die gesamtzahl der rezepte	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
was ist die durchschnittliche garzeit für dieses gericht	was ist die durchschnittliche garzeit für dieses gericht	was ist die durchschnittliche kochzeit für dieses gericht	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ) ) )
wann wurde das rezept für milchreis veröffentlicht?	wann wurde das rezept für reispudding gepostet	wann wurde das rezept für milchreis gepostet	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) )
welches rezept benötigt milch oder spinat	welches rezept milch oder spinat erfordert	was rezept erfordert, milch oder spinat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( call SW.concat en.ingredient.milk en.ingredient.spinach ) ) )
zeig mir rezept für eine mahlzeit für eine einzelne person	zeigen sie mir rezept, um eine mahlzeit für eine einzelne person zu tun	zeigen sie mir rezept zu machen eine mahlzeit für eine einzelne person	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
welche mahlzeit hat mehr als zwei rezepte	welche mahlzeit hat mehr als zwei rezepte	welches essen hat mehr als zwei rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welche rezepte brauchen weniger zeit für die zubereitung als für die zubereitung von milchreis	welche rezepte weniger zeit in anspruch nehmen, als reispudding zu kochen	die rezepte nehmen weniger zeit zur vorbereitung als zu kochen milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
was ist die gesamtkochzeit des rezepts	was ist die gesamte garzeit des rezepts	was ist die gesamte garzeit für das rezept	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ) ) )
wie viele zutaten	wie viele zutaten	wie viele zutaten	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
finden sie ein rezept zum mittagessen, das mit milch zubereitet wird	finden sie ein mittagessen rezept, das mit milch zubereitet wird	finden sie ein mittagessen rezept, zubereitet mit milch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string meal ) ( string = ) en.meal.lunch ) )
welches rezept braucht die gleiche oder eine geringere zeit, um milchreis zuzubereiten	welches rezept dauert die gleiche oder weniger zeit, um reispudding vorzubereiten	was rezept dauert gleiche oder weniger zeit für die zubereitung milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
was ist eine zutat in einem rezept, das im jahr 2004 veröffentlicht wurde	was ist eine zutat in einem rezept gefunden, die im jahr 2004 veröffentlicht wurde	was ist eine zutat gefunden in einem rezept, das veröffentlicht wurde im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
zeige mir rezepte, die vor 2010 gepostet wurden	zeigen sie mir rezepte vor 2010 veröffentlicht	zeige mir rezepte veröffentlicht, bevor 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
zeig mir alle rezepte aus dem jahr 2004	zeigen sie mir alle rezepte im jahr 2004 veröffentlicht	zeige mir alle rezepte gepostet 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
für welche mahlzeit ist das rezept, das milch als eine seiner zutaten hat	für welche mahlzeit ist das rezept, das milch als einen seiner zutaten hat	für welche mahlzeit ist das rezept, das hat sich milch als eine der zutaten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ) )
welches rezept macht etwas zum mittagessen	welches rezept etwas für das mittagessen ausmacht	was macht rezept etwas für das mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string meal ) ( string = ) en.meal.lunch ) )
welches rezept kocht in kürzerer zeit als milchreis	welches rezept in weniger zeit kocht als reispudding	was rezept kocht in weniger zeit als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
welches rezept benötigt weniger zeit für die zubereitung als milchreis	welches rezept weniger zeit für die zubereitung benötigt als reispudding	was rezept dauert weniger zeit, um prep als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
wie lang ist die durchschnittliche vorbereitungszeit für das rezept?	wie lange ist die durchschnittliche zubereitungszeit für das rezept	wie lange ist die durchschnittliche vorbereitungszeit für das rezept	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )
welches rezept wurde im jahr 2004 nicht veröffentlicht	welches rezept wurde 2004 nicht veröffentlicht	was rezept nicht gepostet wurde, im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string ! = ) ( date 2004 -1 -1 ) ) )
welches rezept ist für mehr als zwei mahlzeiten ausgelegt	welches rezept für mehr als zwei mahlzeiten entwickelt wurde	was rezept ist ausgelegt für mehr als zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
welche mahlzeit ist für nur ein rezept	welche mahlzeit für nur ein rezept ist	welches essen ist für sie nur ein rezept	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches rezept hat milch als zutat	welches rezept milch als zutat hat	was rezept ist milch als zutat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string requires ) ( string = ) en.ingredient.milk ) )
zeig mir rezepte mit der längsten kochzeit	zeigen sie mir rezepte mit der längsten garzeit	zeige mir rezepte mit der längsten garzeit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )
zeigen sie mir rezepte, die milch oder spinat benötigen	zeigen sie mir rezepte, die milch oder spinat benötigen	zeigen sie mir rezepte, die erfordern, dass milch oder spinat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( call SW.concat en.ingredient.milk en.ingredient.spinach ) ) )
zeigen sie mir rezepte, die eine kürzere zubereitungszeit haben als milchreis	zeigen sie mir rezepte, die eine kürzere zubereitungszeit als reispudding haben	zeigen sie mir die rezepte, die haben eine kürzere zeit der vorbereitung als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
welches rezept dauert nicht länger als reispudding vorzubereiten	welches rezept nicht länger zuzubereiten dauert als reispudding	was rezept nimmt nicht mehr vorbereiten als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
welche rezepte haben mindestens 2 küchen	welche rezepte haben mindestens 2 küchen	welche rezepte haben mindestens 2 gerichte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string >= ) ( number 2 ) ) )
welche rezepte brauchen milch?	welche rezepte milch brauchen	welche rezepte brauchen milch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) )
ein rezept, das weniger als zwei zutaten benötigt	ein rezept, das weniger als zwei zutaten erfordert	ein rezept, dass weniger als zwei zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
was ist die vorbereitungszeit für dieses rezept	was ist die vorbereitungszeit für dieses rezept	was ist die vorbereitungszeit für dieses rezept	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )
zeig mir ein rezept für die geringste anzahl von mahlzeiten	zeigen sie mir ein rezept für die geringste anzahl von mahlzeiten	zeigen sie mir ein rezept für die geringste anzahl von mahlzeiten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
für welches gericht wird der milchreis verwendet?	für welche mahlzeit ist das gericht reispudding verwendet	für die mahlzeit wird der teller milchreis verwendet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) )
welche mahlzeit kann durch zwei rezepte gemacht werden	welche mahlzeit kann durch zwei rezepte gemacht werden	welche mahlzeit kann gebildet werden, indem zwei rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
zeigen sie mir rezepte, deren garzeit der zubereitungszeit von milchreis entspricht	zeigen sie mir rezepte, die eine garzeit haben, die der zubereitungszeit von reispudding entspricht	zeigen sie mir rezepte, die zum kochen zeit gleich der zeit der vorbereitung des reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )
welches rezept kann weniger als zwei mahlzeiten machen	welches rezept weniger als zwei mahlzeiten machen kann	was rezept kann weniger als zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
zeigen sie mir rezepte mit vorbereitungszeiten, die länger sind als die kochzeit von milchreis	zeigen sie mir rezepte mit zubereitungszeiten länger als kochzeit von reispudding	zeigen sie mir die rezepte mit zubereitung mal länger als die kochzeit von reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
wie lange dauert die zubereitung von milchreis?	wie viel zeit es braucht, um reispudding zuzubereiten	wie viel zeit es braucht, um vorzubereiten milchreis	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) )
welches rezept macht die wenigsten arten von küche	welches rezept die wenigsten arten von küche macht	was macht rezept die wenigsten arten von küche	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string cuisine ) ) )
welches rezept verwendet milch oder spinat als zutat	welches rezept verwendet milch oder spinat als zutat	welche rezept verwendet milch oder spinat als zutat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( call SW.concat en.ingredient.milk en.ingredient.spinach ) ) )
welche rezepte teilen die küche von milchreis	welche rezepte teilen die küche von reispudding	welche rezepte teilen sich die küche, die von reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) ) )
zeigen rezepte, die mindestens die vorbereitungszeit von milchreis benötigen	zeigen rezepte, die mindestens die zubereitungszeit des reispuddings dauern	zeigen rezepte auf, die mindestens die zeit der vorbereitung von milchreis zu tun	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
welches rezept können sie in der gleichen zeit oder in kürzerer zeit zubereiten, als es zum kochen von milchreis erforderlich ist?	welches rezept können sie in der gleichen oder weniger zeit vorbereiten, als es braucht, um reispudding zu kochen	was rezept können sie sich vorbereiten, in gleicher oder weniger zeit als es dauert, um zu kochen reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
zeigen sie mir zutaten für milchreis und quiche	zeigen sie mir zutaten für reispudding und quiche benötigt	zeigen sie mir zutaten für milchreis und quiche	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) ) )
nennen sie die zutat nach mindestens zwei rezepten	benennen sie die zutat, die für mindestens zwei rezepte erforderlich ist	name der zutat erforderlich, die von mindestens zwei rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
finden sie rezepte, die vor 2004 oder 2010 veröffentlicht wurden	finden sie rezepte, die vor 2004 oder 2010 veröffentlicht wurden	rezepte zu finden, die gepostet wurden, bevor sie 2004 oder 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
ein rezept, dessen zubereitung länger dauert als die zubereitungszeit für milchreis	ein rezept, das länger zum kochen braucht als die zubereitungszeit für reispudding	ein rezept, das länger dauert, um zu kochen, als die vorbereitungszeit für reis pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
das rezept ist für zwei mahlzeiten	der receipe ist für zwei mahlzeiten	das rezept ist für zwei essen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
welches rezept kocht für die gleiche oder weniger zeit als milchreis	welches rezept für gleiche oder weniger zeit kocht als reispudding	was rezept kocht, für gleiche oder weniger zeit als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
wie viel zeit wird benötigt, um dieses gericht zu kochen	wie viel zeit benötigt wird, um dieses gericht zu kochen	wie viel zeit wird benötigt, um dieses gericht kochen	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ) ) )
welches rezept enthält die meisten zutaten?	welches rezept die meisten zutaten hat	was rezept, die meisten zutaten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
welches rezept wurde vor reispudding rezept gepostet	welches rezept wurde vor reispuddings rezept gepostet	was rezept wurde geschrieben, bevor die reispudding rezept	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
welches rezept wurde nach reispudding rezept gebucht	welches rezept wurde nach reispuddings rezept gepostet	was rezept wurde geschrieben, nachdem reispudding rezept	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
welches rezept wurde im jahr 2004 veröffentlicht	welches rezept im jahr 2004 veröffentlicht wurde	das rezept wurde veröffentlicht in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
welches mittagsrezept benötigt milch?	was mittagessen rezept braucht milch	was mittagessen rezept benötigt milch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string meal ) ( string = ) en.meal.lunch ) )
was ist ein rezept in zwei oder mehr küchen gefunden	was ist ein rezept in zwei oder mehr küchen gefunden	was ist ein rezept gefunden, in zwei oder mehr gerichte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string >= ) ( number 2 ) ) )
rezept mit zwei küchen	zwei küche rezept	zwei gerichterezept	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string = ) ( number 2 ) ) )
welches rezept war das gleiche datum wie das milchreis rezept gebucht	welches rezept wurde das gleiche datum wie der reispudding rezept gebucht	was rezept gepostet wurde, das gleiche datum wie die reispuddingrezept	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) )
rezepte für mittag oder abendessen	rezepte für mittag oder abendessen	rezepte für mittagoder abendessen	( call SW.listValue ( call SW.concat en.meal.lunch en.meal.dinner ) )
finde ein rezept, das bis 2004 gepostet wurde	finden sie ein rezept, das von 2004 gepostet wurde	finden sie ein rezept, das veröffentlicht wurde von 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
was erfordert das rezept aus dem jahr 2004?	was erfordert das 2004 veröffentlichte rezept?	was macht das rezept gepostet 2004 erfordern	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
entweder 2004 oder 2010	entweder 2004 oder 2010	entweder 2004 oder 2010	( call SW.listValue ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) )
zeig mir die zutaten, die für die meisten rezepte benötigt werden	zeigen sie mir zutaten für die meisten rezepte erforderlich	zeigen sie mir benötigten zutaten für die meisten rezepte	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
finde ein rezept für zwei mahlzeiten	rezept für zwei mahlzeiten finden	finden rezept für zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
welche mahlzeit hat die wenigsten rezepte	welche mahlzeit hat die wenigsten rezepte	welches essen hat am wenigsten rezepte	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welche rezepte haben zwei küchen	welche rezepte haben zwei küchen	die rezepte von zwei gerichten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string = ) ( number 2 ) ) )
welches rezept ist für ein mittagessen	welches rezept für eine mittagsmahlzeit ist	das rezept ist für ein mittagessen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ) )
rezepte, die zur zubereitung die gleiche zeit benötigen wie milchreis	rezepte, die die gleiche zeit benötigen, um als reispudding zuzubereiten	rezepte, die erfordern, gleichen zeit zur vorbereitung als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )
zeig mir rezepte mit weniger als zwei zutaten	zeigen sie mir rezepte mit weniger als zwei zutaten	zeige mir rezepte mit weniger als zwei zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
zeige mir rezepte aus dem jahr 2004, die milch verwenden	zeigen sie mir rezepte im jahr 2004, die milch verwenden	zeige mir rezepte veröffentlicht im jahr 2004, dass mit milch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string requires ) ( string = ) en.ingredient.milk ) )
welche zutaten braucht milchreis nicht?	welche zutaten braucht reispudding nicht	welche inhaltsstoffe enthält der milchreis nicht brauchen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string ! = ) en.recipe.rice_pudding ) )
welches rezept zum mittagessen wurde im jahr 2004 veröffentlicht	welches lunchrezept im jahr 2004 veröffentlicht wurde	was mittagessen rezept wurde veröffentlicht in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string meal ) ( string = ) en.meal.lunch ) )
welches rezept hat weniger kochzeit wie milchreis	welches rezept weniger garzeit wie reispudding hat	das rezept hat weniger kochzeit wie der reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
ein rezept für die wenigsten arten von mahlzeiten	ein rezept für die wenigsten arten von mahlzeiten	ein rezept für die wenigsten arten von mahlzeiten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
welches rezept erfordert weniger vorbereitungszeit als milchreis	welches rezept weniger vorbereitungszeit benötigt als reispudding	was rezept erfordert weniger vorbereitungszeit als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
welche rezepte werden zur gleichen zeit wie milchreis gekocht	welche rezepte in der gleichen zeit wie reispudding gekocht werden	welche rezepte gekocht werden, in der gleichen zeit wie reis pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )
welches rezept hat die geringste anzahl von küchen	welches rezept die geringste anzahl an küchen hat	das rezept hat die wenigsten küchen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string cuisine ) ) )
zeig mir rezepte für die meisten küchen	zeigen sie mir rezepte für die meisten küchen	zeige mir rezepte für die küche	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string cuisine ) ) )
was ist die durchschnittliche garzeit für dieses rezept	was ist die durchschnittliche garzeit für dieses rezept	was ist die durchschnittliche kochzeit für das rezept	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ) ) )
zeig mir ein rezept mit der gleichen vorbereitungszeit wie milchreis	zeigen sie mir ein rezept mit der gleichen vorbereitungszeit wie reispudding	zeigen sie mir ein rezept mit der gleichen zubereitung wie reis pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )
rezepte anzeigen, die am selben datum oder später als milchreis veröffentlicht wurden	rezepte anzeigen, die am selben datum oder später als reispudding gebucht wurden	zeigen rezepte gepostet, die auf das gleiche datum sind, oder höher als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
welches rezept ist für die geringste anzahl von mahlzeiten gedacht	welches rezept für die geringste anzahl von mahlzeiten bestimmt ist	das rezept ist gedacht für die geringste anzahl von mahlzeiten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
zeig mir rezept, das mindestens zwei küchen hat	zeigen sie mir rezept, das mindestens zwei küche hat	zeigen sie mir, rezept, das hat mindestens zwei küche	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string >= ) ( number 2 ) ) )
ein rezept, das erst 2004 oder 2010 veröffentlicht wurde	ein rezept, das frühestens 2004 oder 2010 veröffentlicht wurde	ein rezept gepostet, die nicht früher als 2004 oder 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
was rezept erfordert weniger als zwei zutaten	welches rezept weniger als zwei zutaten erfordert	welche rezeptanrufe für weniger als zwei zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
dieses rezept dauert länger als milchreis	welches rezept länger zum kochen braucht als reispudding	das rezept dauert länger, um zu kochen als reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
rezept von höchstens zwei küchen	rezept von höchstens zwei küchen	rezept von höchstens zwei küche	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string <= ) ( number 2 ) ) )
was rezept erfordert die wenigsten zutaten	welches rezept die wenigsten zutaten fordert	was rezept fordert für die wenigsten zutaten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
wann wurde milchreis rezept gebucht	wann wurde reispudding rezept gepostet	wann wurde reispuddingrezept gepostet	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) )
welche rezepte garzeit ist größer als die von milchreis	welche rezepte kochzeit ist größer als die von reispudding	was rezepte kochen zeit ist größer als das von reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
zeigen sie mir zutaten, die für mindestens zwei rezepte erforderlich sind	zeigen sie mir zutaten, die für mindestens zwei rezepte erforderlich sind	zeigen sie mir die zutaten erforderlich, die von mindestens zwei rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches rezept hat eine garzeit wie die von milchreis	welches rezept eine garzeit hat wie der reispudding	das rezept hat eine kochzeit wie der reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
welche rezepte können zwei mahlzeiten machen	welche rezepte zwei mahlzeiten zubereiten können	die rezepte können zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
welche rezepte zubereitungszeit ist kürzer als die kochzeit von milchreis	welche rezepte zubereitungszeit ist kleiner als die garzeit von reispudding	welche rezepte die zeit der vorbereitung ist weniger als die garzeit des milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
welches rezept wurde im jahr 2004 veröffentlicht	welches rezept im jahr 2004 veröffentlicht wurde	das rezept gepostet wurde, während 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
welches rezept fällt unter die wenigsten arten von küche	welches rezept unter die wenigsten arten von küche fällt	das rezept fällt unter die wenigsten arten von küche	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string cuisine ) ) )
welche zutat wird von zwei rezepten verwendet	welche zutat wird von zwei rezepten verwendet	welche zutat verwendet wird um zwei rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches rezept für milch wurde im jahr 2004 veröffentlicht	welches rezept, das milch fordert, wurde 2004 veröffentlicht	was rezept aufruf für milch wurde veröffentlicht in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string requires ) ( string = ) en.ingredient.milk ) )
welches rezept im jahr 2004 veröffentlicht macht ein mittagessen	welches rezept aus dem jahr 2004 eine mittagsmahlzeit macht	was rezept veröffentlicht in 2004 macht ein mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string meal ) ( string = ) en.meal.lunch ) )
zutat von zwei rezepten	zutat von zwei rezepten	zutat zwei rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welche mahlzeit hat zwei oder weniger rezepte	welche mahlzeit hat zwei oder weniger rezepte	welches essen hat zwei oder weniger rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welche mahlzeit erfordert keinen milchreis	welche mahlzeit nicht nach reispudding ruft	welches essen tut den aufruf für reis pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string ! = ) en.recipe.rice_pudding ) )
welche zutat wird in weniger als zwei rezepten benötigt?	welche zutat in weniger als zwei rezepten benötigt wird	welche zutat benötigt wird, in weniger als zwei rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
zeig mir die zutaten für milchreis	zeigen sie mir die zutaten für reispudding	zeigen sie mir die zutaten für milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) )
welche lebensmittel werden benötigt, um milchreis zuzubereiten?	welche lebensmittel für die herstellung von reispudding benötigt werden	welche lebensmittel werden benötigt, um milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) )
welches rezept wurde am frühesten gebucht	welches rezept wurde am frühesten veröffentlicht	was rezept veröffentlicht wurde, sind die frühesten	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )
was ist die durchschnittliche zeit für die zubereitung des gerichts	was ist die durchschnittliche zeit, die für die zubereitung des gerichtes benötigt wird	was ist die durchschnittliche zeit, die notwendig für die vorbereitung der schale	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ) ) )
welches rezept benötigt mindestens zwei zutaten	welches rezept mindestens zwei zutaten erfordert	was rezept erfordert mindestens zwei zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
welche rezepte können schneller zubereitet werden als milchreis	welche rezepte schneller zubereitet werden können als reispudding	welche rezepte können zubereitet werden, schneller als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
welche mahlzeit hat zwei oder mehr rezepte	welche mahlzeit hat zwei oder mehr rezepte	die mahlzeit hat zwei oder mehr rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welche rezepte haben drei oder mehr küche	welche rezepte haben drei oder mehr küche	welche rezepte haben drei oder mehr küche	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string > ) ( number 2 ) ) )
was ist die kochzeit für milchreis	was ist die kochzeit für reispudding	was ist die kochzeit für reis pudding	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) )
was ist die gesamtzahl der rezepte	wie hoch ist die gesamtzahl der rezepte	was ist die gesamtzahl der rezepte	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
was ist die übliche zeit, um das rezept zu beenden	was ist die übliche zeit, die benötigt wird, um das rezept zu beenden	was ist die übliche zeit, die erforderlich ist, um das rezept fertig stellen	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )
welche zutat wird für die geringste menge an rezepten verwendet?	welche zutat für die geringste menge an rezepten verwendet wird	welche zutaten verwendet man für die wenigsten rezepte	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches rezept ist für eine mahlzeit zu zweit	welches rezept ist für eine mahlzeit für zwei	was rezept ist für eine mahlzeit für zwei	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welche rezepte nicht nach milch verlangen	welche rezepte nicht nach milch rufen	welche rezepte dont call für milch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string ! = ) en.ingredient.milk ) )
welche mahlzeit hat über zwei rezepte	welche mahlzeit hat über zwei rezepte	welches essen hat über zwei rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
rezept von weniger als zwei mahlzeiten	rezept von weniger als zwei mahlzeiten	rezept von weniger als zwei essen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
gibt es irgendwelche rezepte, die 2004 zweimal veröffentlicht wurden?	gibt es rezepte, die zweimal im jahr 2004 gebucht wurden	gibt es irgendwelche rezepte, die gepostet wurden zweimal in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
zu welcher küche gehört reispudding?	zu welcher küche reispudding gehört	an die küche milchreis gehören	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) )
welche rezepte unter weniger als drei küchen fallen	welche rezepte unter weniger als drei küche kommt	welche rezepte kommt unter weniger als drei küche	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string <= ) ( number 2 ) ) )
welche rezepte wurden nach 2004 oder 2010 veröffentlicht?	welche rezepte nach 2004 oder 2010 veröffentlicht wurden	die rezepte, die gepostet wurden, die nach 2004 oder 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
finde eine mahlzeit mit zwei rezepten	finden sie eine mahlzeit mit zwei rezepten	suchen sie eine mahlzeit mit zwei rezepten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
rezepte bis 2004 gepostet	bis 2004 veröffentlichte rezepte	rezepte gepostet bis 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
finde rezepte, die nach 2004 veröffentlicht wurden	finden sie rezepte nach 2004 veröffentlicht	finden rezepte gepostet, die nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
rezept in der vorbereitungszeit von milchreis oder mehr gekocht	rezept in vorbereitungszeit von reispudding oder mehr gekocht	rezept gekocht in der zeit der vorbereitung von milchreis oder mehr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
zeig mir das rezept mit der kürzesten garzeit	zeigen sie mir das rezept, das die kürzeste garzeit hat	zeigen sie mir das rezept, das hat die kürzeste garzeit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )
was ist ein rezept mit milch oder spinat als zutat	was ist ein rezept mit milch oder spinat als zutat	was ist ein rezept mit milch oder spinat als zutat	( call SW.listValue ( call SW.concat en.ingredient.milk en.ingredient.spinach ) )
welches rezept hat eine küche mit milchreis	welches rezept hat eine küche mit reispudding	was rezept hat eine küche, darunter reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) ) )
zeigen sie mir rezepte, die weniger als zwei zutaten benötigen	zeigen sie mir rezepte, die weniger als zwei zutaten erfordern	zeigen sie mir rezepte, die erfordern, dass weniger als zwei zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
zeige mir rezepte, die nach 2004 veröffentlicht wurden	zeigen sie mir rezepte nach 2004 veröffentlicht	zeige mir rezepte gepostet, die nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
welche zutat wird in mehr als einem rezept benötigt?	welche zutat in mehr als einem rezept benötigt wird	welche zutat benötigt wird, in mehr als einer rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
ein rezept, dessen zubereitung mindestens so lange dauert wie bei milchreis	ein rezept, das mindestens so lange dauert, um wie reispudding zu kochen	ein rezept, das dauert mindestens so lange zu kochen als reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
welches rezept braucht die meiste zeit zum kochen	welches rezept die meiste zeit braucht, um zu kochen	was rezept nimmt am meisten zeit, um zu kochen	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )
welches rezept braucht mehr zeit als milchreiszubereitung	welches rezept mehr zeit benötigt als die reispuddingzubereitung	das rezept braucht mehr zeit als milchreis zubereitung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
zeig mir rezepte, die milch erfordern	zeigen sie mir rezepte, die milch erfordern	zeige mir rezepte erfordern, milch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string requires ) ( string = ) en.ingredient.milk ) )
zeige mir rezepte zum mittagessen, die 2004 veröffentlicht wurden	zeigen sie mir mittagessen rezepte, die im jahr 2004 veröffentlicht	zeigen sie mir mittagessen rezepte, die posted in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string meal ) ( string = ) en.meal.lunch ) )
welche rezepte kochzeit ist am größten die kochzeit von milchreis	welche rezepte kochzeit ist am besten die garzeit von reispudding	was rezepte kochen zeit ist die größte der garzeit des milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
nach welchem rezept werden höchstens zwei zutaten verwendet	was sind das rezept, das höchstens zwei zutaten verwendet	was sind das rezept, das höchstens zwei zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
welche mahlzeit hat quiche und milchreis	welche mahlzeit quiche und reispudding hat	welches essen hat quiche und milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) ) )
rezept mit buchungsdatum nicht nach buchungsdatum des milchreises	rezept mit buchungsdatum nicht nach dem buchungsdatum des reispuddings	rezept mit buchungsdatum, nicht nach buchungsdatum milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
zeig mir ein rezept, das genauso viel zeit in anspruch nimmt wie milchreis	zeigen sie mir rezept, das so viel zeit wie reispudding nehmen	zeigen sie mir das rezept, die nehmen so viel zeit wie milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )
rezept für nur eine mahlzeit	rezept für nur eine mahlzeit	rezept für nur eine mahlzeit	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
welche zutat ist in milchreis gefunden	welche zutat findet sich in reispudding	welche zutat gefunden in milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) ) )
finden sie ein rezept, das milch für die zubereitung benötigt	finden sie ein rezept, das milch für seine zubereitung benötigt	ein rezept braucht milch für seine herstellung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string requires ) ( string = ) en.ingredient.milk ) )
welche rezepte erfordern das zur selben zeit oder als milchreis	welche rezepte die gleiche zeit oder als reispudding erfordern	welche rezepte erfordern die gleiche zeit oder als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
welche zutaten brauchen die rezepte für das mittagessen?	welche zutaten essen mittagsrezepte	welche zutaten machen mittagessen rezepte aufruf für	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ) )
für welche mahlzeit wird milchreis verwendet	für welche mahlzeit wird reispudding verwendet	für das, was mahlzeit milchreis verwendet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) )
welche rezepte sind zum mittag oder abendessen gedacht?	welche rezepte zum mittag oder abendessen bestimmt sind	die rezepte sind bestimmt für mittagoder abendessen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( call SW.concat en.meal.lunch en.meal.dinner ) ) )
welche rezepte erfordern nicht mehr als zwei zutaten	welche rezepte nicht mehr als zwei zutaten erfordern	welche rezepte benötigen nicht mehr als zwei zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
wie viele rezepte	wie viele rezepte	wie viele rezepte	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
zeig mir ein rezept, das nur zwei zutaten benötigt	zeigen sie mir ein rezept, das nur zwei zutaten erfordert	zeigen sie mir ein rezept, das erfordert nur zwei zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
zeigen sie mir die zutaten, die für rezepte benötigt werden, die milch benötigen	zeigen sie mir zutaten, die von rezepten benötigt werden, die milch benötigen	zeigen sie mir benötigten zutaten von rezepte, die erfordern, milch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ) )
was rezepte zubereitungszeit ist nicht mehr als die kochzeit von milchreis	welche rezepte zubereitungszeit ist nicht mehr als die garzeit von reispudding	welche rezepte zubereitungszeit beträgt nicht mehr als die garzeit des milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
zeige mir rezepte, die zwei zutaten oder weniger enthalten	zeigen sie mir rezepte, die zwei zutaten oder weniger verwenden	zeigen sie mir rezepte, bei denen zwei oder weniger zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
welche rezepte brauchen milch und ist im jahr 2004 gebucht	welche rezepte milch benötigen und wird im jahr 2004 veröffentlicht	welche rezepte brauchen milch und ist veröffentlicht in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
zeig mir rezepte zum mittag oder abendessen	zeigen sie mir rezepte für das mittagessen oder abendessen	zeige mir rezepte für mittagoder abendessen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( call SW.concat en.meal.lunch en.meal.dinner ) ) )
nennen sie die zutat in den meisten rezepten	nennen sie die zutat in den meisten rezepten	name der zutat in den meisten rezepten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
zeigen sie mir rezepte, die die kochzeit von milchreis erfordern	zeigen sie mir rezepte, die die garzeit von reispudding erfordern	zeigen sie mir rezepte, die erfordern, dass die garzeit von reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )
zeige mir rezepte aus den jahren 2004 und 2010	zeigen sie mir rezepte in 2004 und 2010 veröffentlicht	zeigen sie mir rezepte, geschrieben in den jahren 2004 und 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) )
rezept in mehr zeit als kochzeit von milchreis vorbereitet	rezept in mehr zeit als kochzeit von reispudding zubereitet	rezept vorbereitet, in mehr zeit als die garzeit von reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
die garzeit dieses rezepts entspricht der von milchreis	welches rezept kocht zeit gleich der von reispudding	die s rezept garzeit ist die gleiche wie die von milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
zeigen sie mir rezepte zum mittagessen, die milch brauchen	zeigen sie mir mittagessen rezepte, die milch brauchen	zeigen sie mir mittagessen rezepte, die milch brauchen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string meal ) ( string = ) en.meal.lunch ) )
welche mahlzeiten haben zwei rezepte	welche mahlzeiten haben zwei rezepte	welche mahlzeiten haben zwei rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
was sind die rezepte, die mit milch gemacht werden	was sind die rezepte, die mit milch gemacht werden	was sind die rezepte mit milch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) )
welches rezept wird für die meisten mahlzeiten verwendet	welches rezept für die meisten mahlzeiten verwendet wird	das rezept ist für die meisten mahlzeiten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
wie lange braucht der milchreis zum kochen?	wie lange dauert reispudding zum kochen	wie lange dauert milchreis nehmen, um zu kochen	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) )
finden sie rezepte aus den jahren 2004 oder 2010	finden sie rezepte veröffentlicht in 2004 oder 2010	rezepte zu finden, veröffentlicht im jahr 2004 oder 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) )
zeig mir mahlzeiten mit weniger als zwei rezepten	zeigen sie mir mahlzeiten mit weniger als zwei rezepten	zeigen sie mir die mahlzeiten mit weniger als zwei rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
ein rezept, das die wenigsten zutaten benötigt	ein rezept, das die wenigsten zutaten erfordert	ein rezept erfordern den wenigsten zutaten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
welches rezept wurde vor oder am selben tag wie milchreis veröffentlicht?	welches rezept vor oder am selben tag wie reispudding gepostet wurde	was rezept wurde geschrieben, bevor oder am selben tag wie milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
welche mahlzeit kann nach dem rezept aus dem jahr 2004 zubereitet werden?	welche mahlzeit kann durch das rezept im jahr 2004 veröffentlicht gemacht werden	welches essen gemacht werden können, indem das rezept gepostet 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
zeige mir rezepte für das mittagessen, die 2004 veröffentlicht wurden	zeigen sie mir rezepte für das mittagessen im jahr 2004 veröffentlicht	zeige mir rezepte für das mittagessen gebucht 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
zeige mir rezepte, die nicht früher als 2004 veröffentlicht wurden	zeigen sie mir rezepte nicht früher als 2004 gebucht	zeige mir rezepte gepostet, die nicht älter als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
zeigen sie mir rezepte, die genauso lange brauchen, um sich als milchreis vorzubereiten	zeigen sie mir rezepte, die die gleiche zeit nehmen, um als reispudding vorzubereiten	zeigen sie mir rezepte, die die gleiche zeit zur vorbereitung als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )
welche mahlzeit hat maximale rezepte	welche mahlzeit maximale rezepte hat	welches essen hat die maximale rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches rezept im jahr 2004 veröffentlicht wurde, setzt milch als zutat voraus	welches rezept aus dem jahr 2004 milch als zutat benötigt	was rezept veröffentlicht in 2004 erfordert, milch als zutat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string requires ) ( string = ) en.ingredient.milk ) )
welches rezept braucht mehr als zwei zutaten	welches rezept mehr als zwei zutaten benötigt	das rezept braucht mehr als zwei zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
welche rezepte sind für weniger als zwei mahlzeiten	welche rezepte sind für weniger als zwei mahlzeiten	welche rezepte sind für weniger als zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
zeig mir rezepte mit der zutat milch	zeigen sie mir rezepte, die die zutat milch erfordern	zeige mir rezepte erfordern, die die zutat milch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ) )
zeig mir rezepte mit zwei zutaten	zeigen sie mir rezepte mit zwei ingedients	zeige mir rezepte mit zwei zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string = ) ( number 2 ) ) )
zutat nach rezept, dessen buchungsdatum 2004 ist	zutat nach rezept erforderlich, dessen buchungsdatum 2004 ist	zutat benötigt rezept, dessen buchungsdatum 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
wann wurde das milchreisrezept veröffentlicht?	wann wurde das reispuddingrezept gepostet?	wann wurde die reispuddingrezept gepostet	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) )
welche rezepte erfordern mindestens zwei zutaten	welche rezepte mindestens zwei zutaten erfordern	die rezepte benötigt man mindestens zwei zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
welche rezepte haben eine garzeit, die mindestens so lang ist wie die zubereitungszeit von milchreis	welche rezepte eine garzeit haben, die mindestens so lang ist wie reispuddings zubereitungszeit	welche rezepte haben eine garzeit, die mindestens so lang ist wie reispudding zubereitungszeit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
welche rezepte brauchen länger zum kochen als milchreis	welche rezepte länger brauchen als reispudding	die rezepte, die länger dauern, um zu kochen als reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
was für mahlzeiten sind rezepte für das mittagessen	welche mahlzeiten rezepte für das mittagessen sind	welche mahlzeiten sind rezepte für das mittagessen für	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ) )
welches rezept verwendet milch als zutat	welches rezept milch als zutat verwendet	das rezept verwendet milch als zutat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) )
welche rezeptzutat benötigt dieses mittagessen?	welche rezepte zutat erfordert dieses mittagessen	welche rezepte zutat macht dieses mittagessen benötigen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ) )
wie viele rezepte gibt es insgesamt?	wie viele gesamtrezepte gibt es	wie viele rezepte sind da	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches rezept nimmt die maximale vorbereitungszeit	welches rezept die maximale zubereitungszeit in anspruch nimmt	das rezept nimmt die maximale zeit der vorbereitung	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )
welches rezept hat die meisten küche	welches rezept die meisten küchen hat	welches rezept die meisten der küche	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string cuisine ) ) )
zeigen sie mir rezepte, deren zubereitung genauso lange dauert wie die zubereitung von milchreis	zeigen sie mir rezepte, die die gleiche menge an zeit zubereiten, wie reispudding tut, um zu kochen	zeigen sie mir rezepte, die nehmen die gleiche menge an zeit, um sich vorzubereiten, da der milchreis nicht zu kochen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )
für welche mahlzeit ist milchreis	für welche mahlzeit ist reispudding	für das, was mahlzeit ist reis pudding	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) )
für welche mahlzeit ist milchreis oder quiche	für welche mahlzeit ist reispudding oder quiche	für das, was mahlzeit milchreis oder quiche	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) ) )
zeig mir rezepte mit einer garzeit, die dem milchreis entspricht	zeigen sie mir rezepte mit kochzeit gleich reispudding	zeige mir rezepte mit kochen die zeit gleich milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )
zeig mir rezepte für mehr als zwei mahlzeiten	zeigen sie mir rezepte für mehr als zwei mahlzeiten	zeige mir rezepte für mehr als zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
zeig mir rezepte aus der gleichen küche wie milchreis	zeigen sie mir rezepte aus der gleichen küche wie reispudding	zeige mir rezepte aus der gleichen küche wie milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) ) )
welche zutaten gehören zum milchreis?	welche zutaten in reispudding gehen	welche inhaltsstoffe gehen in milchreis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) )
welches rezept braucht spinat oder milch für die zubereitung	welches rezept spinat oder milch für seine zubereitung benötigt	was rezept braucht, spinat oder milch für seine herstellung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( call SW.concat en.ingredient.milk en.ingredient.spinach ) ) )
rezepte für das mittagessen wurden 2004 veröffentlicht	lunchrezepte veröffentlicht im jahr 2004	mittagessen rezepte veröffentlicht 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
zeige das erste gepostete rezept	das erste gebuchte rezept anzeigen	zeigen sie das erste rezept gepostet	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )
welches rezept datum ist weniger als das von milchreis	welche rezepte buchungsdatum ist kleiner als die von reispudding	welche rezepte buchungsdatum ist kleiner als die der reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
zeige rezepte, die vor dem milchreis gepostet wurden	rezepte anzeigen, die vor reispudding gepostet wurden	zeigen rezepte gepostet, bevor milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
zeig mir zwei rezepte für eine mahlzeit	zeigen sie mir zwei rezepte für eine mahlzeit	zeigen sie mir zwei rezepte für eine mahlzeit	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
was ist die gesamtzeit für die zubereitung des gerichts	was ist die gesamtzeit für die zubereitung des gerichtes	was ist die insgesamt benötigte zeit für die zubereitung der speisen	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )
zeigen sie mir rezepte, die kochzeit erfordern, die mehr als milchreis ist	zeigen sie mir rezepte, die kochzeit erfordern, die mehr als reispudding ist	zeigen sie mir rezepte, die erfordern, dass das kochen von zeitdas ist mehr als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
welches rezept ist nach dem buchungsdatum von milchreis gebucht	welches rezept nach dem buchungsdatum des reispuddings gebucht wird	das rezept ist geschrieben nach dem buchungsdatum milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
welches rezept wurde zuletzt gepostet	welches rezept zuletzt veröffentlicht wurde	das rezept gepostet wurde zuletzt	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )
welches rezept hat die gleiche garzeit von milchreis	welches rezept die gleiche garzeit von reispudding hat	das rezept hat die gleiche garzeit des milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )
was rezeptvorbereitungszeit ist, ist mindestens die des milchreises	welche rezepte zubereitungszeit ist mindestens die von reispudding	welche rezepte die zeit der vorbereitung ist zumindest, dass der reis pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
rezepte für milchreis oder quice	rezepte für reispudding oder quice	rezepte für reispudding oder quice	( call SW.listValue ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) )
welche rezepte haben die meisten mahlzeiten	welche rezepte die meisten mahlzeiten haben	welche rezepte haben die anzahl der mahlzeiten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
nennen sie zutaten, die für milchreis nicht benötigt werden	namenszutaten, die für reispudding nicht benötigt werden	name inhaltsstoffe, nicht erforderlich für reis pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string ! = ) en.recipe.rice_pudding ) )
nennen sie das rezept mit einer garzeit, die mindestens der garzeit von milchreis entspricht	nennen sie das rezept mit einer garzeit mit mindestens der garzeit von reispudding	nennen sie das rezept mit einer garzeit mit mindestens der garzeit des milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
zeig mir alle rezepte die nach 2010 gepostet wurden	zeigen sie mir alle rezepte nach 2010 veröffentlicht	zeige mir alle rezepte geschrieben, nach 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
zeigen sie mir rezepte, die zwei küchen betreffen	zeigen sie mir rezepte, die zwei küchen beinhalten	zeigen sie mir die rezepte umfassen zwei küchen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string = ) ( number 2 ) ) )
dieses rezept hat eine vorbereitungszeit, die nicht länger ist als die vorbereitungszeit für milchreis	welches rezept eine vorbereitungszeit nicht größer als die vorbereitungszeit für reispudding hat	das rezept ist eine zubereitungszeit von nicht mehr als die vorbereitungszeit für reis pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
zeig mir rezepte, die milch als zutat haben	zeigen sie mir rezepte, die milch als eine ihrer zutaten hat	zeigen sie mir rezepte, die milch hat als einen seiner bestandteile	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) )
was ist ein rezept, das nicht mehr zeit zum kochen braucht als milchreis	was ist ein rezept, das nicht mehr zeit braucht, um zu kochen als reispudding	was ist ein rezept, das dauert keine zeit mehr zu kochen als reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
welche zutat wird am häufigsten verwendet?	welche zutat am häufigsten verwendet wird	welche zutat ist am meisten benutzt	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
was ist eine andere mahlzeit als milchreis	was ist eine andere mahlzeit als reispudding	was ist eine mahlzeit, die andere als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string ! = ) en.recipe.rice_pudding ) )
das ist das lebensmittel, das in zwei rezepten benötigt wird	das ist das lebensmittel, das in zwei rezepten benötigt wird	das ist die nahrung, die benötigt wird, in zwei rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches rezept erfordert die gleiche zutat wie milchreis	welches rezept die gleiche zutat wie reispudding erfordert	das rezept erfordert den gleichen wirkstoff wie milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) ) )
welches rezept wurde im jahr 2004 veröffentlicht	welches rezept wurde im jahr 2004 veröffentlicht	was rezept gepostet wurde, während 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
was ist eine zutat in milchreis gefunden	was ist eine zutat in reispudding gefunden	was ist eine zutat gefunden in milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) )
welches ist das letzte veröffentlichte rezept	das ist das zuletzt gebuchte rezept	das ist das letzte rezept gepostet	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )
zeigen sie mir die rezepte für mahlzeiten, einschließlich milchreis	zeigen sie mir mahlzeit rezepte einschließlich reispudding	zeigen sie mir essen rezepte, darunter milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) ) )
was rezepte kochzeit ist die vorbereitungszeit von milchreis	welche rezepte kochzeit ist die zubereitungszeit von reispudding	was rezepte kochen zeit ist die zeit der vorbereitung des reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )
welches rezept macht zwei arten von küche	welches rezept macht zwei arten von küche	was macht rezept zwei arten von küche	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string = ) ( number 2 ) ) )
welches rezept hat zwei oder mehr arten von küche	welches rezept hat zwei oder mehr arten von küche	was rezept zwei oder mehr arten von küche	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string >= ) ( number 2 ) ) )
was ist die garzeit von milchreis	was ist die garzeit des reispuddings	was ist die garzeit von reispudding	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) )
welche zutat wird in den wenigsten rezepten verwendet?	welches ingrediant in den wenigsten rezepten verwendet wird	was ingrediant verwendet wird, in der die wenigsten rezepte	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
zeige mir rezepte mit einer zubereitungszeit, die gleich oder länger ist als milchreis	zeigen sie mir rezepte mit zubereitungszeit gleich oder länger als reispudding	zeige mir rezepte mit zubereitungszeit, die gleich oder länger als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
was rezept über zwei zutaten erfordert	welches rezept über zwei zutaten erfordert	was rezept fordert für sie mehr als zwei zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
welches rezept wurde am selben tag wie das von milchreis veröffentlicht	welches rezept am selben tag wie das von reispudding gepostet wurde	das rezept gepostet wurde, auf den gleichen tag wie die reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) )
wie lange dauert die zubereitung des rezepts?	wie lange dauert die zubereitung des rezepts	wie lange dauert das rezept nehmen, um prep	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )
welche zutat ist in als zwei rezepten	welche zutat ist in als zwei rezepte	was die zutat ist, als zwei rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
nennen sie die zutaten, die nur in ein oder zwei rezepten verwendet werden	namenszutaten, die nur in einem oder zwei rezepten verwendet werden	name zutaten verwendet, die nur in ein oder zwei rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches rezept hat über zwei arten von küche	welches rezept hat über zwei arten von küche	was rezept verfügt über zwei arten von küche	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string > ) ( number 2 ) ) )
finden sie ein rezept, das eine längere garzeit als milchreis hat	finden sie ein rezept, das eine längere garzeit als reispudding hat	finden sie eine rezept, die hat eine längere garzeit als reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
welches rezept braucht milch und ist zum mittagessen	welches rezept milch braucht und ist für das mittagessen	was rezept braucht milch und zum mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string meal ) ( string = ) en.meal.lunch ) )
zu welchen mahlzeiten passt der milchreis nicht?	welche mahlzeiten reispudding nicht mit	was die mahlzeiten hat der milchreis nicht mit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string ! = ) en.recipe.rice_pudding ) )
welches rezept hat eine kochzeit weniger als die kochzeit von milchreis	welches rezept hat eine kochzeit weniger als die kochzeit von reispudding	was rezept hat eine kochzeit weniger als die kochzeit von reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
zeigen sie mir das rezept mit der größten vorbereitungszeit	zeigen sie mir das rezept, das die größte präperationszeit hat	zeigen sie mir das rezept, das hat den größten preperation zeit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )
welches rezept war am frühesten gebucht	welches rezept am frühesten veröffentlicht wurde	das rezept gepostet wurde, die frühesten	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )
was ist ein rezept, das für mehr als zwei verschiedene mahlzeiten ist	was ist ein rezept, das für mehr als zwei verschiedene mahlzeiten ist	was ist ein rezept, das für mehr als zwei verschiedene gerichte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
hier finden sie die rezepte für das mittagessen aus dem jahr 2004	finden sie die lunchrezepte im jahr 2004 veröffentlicht	finden sie die mittagessen rezepte veröffentlicht 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string meal ) ( string = ) en.meal.lunch ) )
ein rezept mit milch als zutat	ein rezept mit milch als zutat	ein rezept mit milch als zutat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ) )
welches rezept wurde vor 2004 veröffentlicht?	welches rezept wurde vor 2004 veröffentlicht	was rezept wurde geschrieben, bevor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
welche zutat ist in nur einem rezept erforderlich	welche zutat in nur einem rezept benötigt wird	welche zutat ist erforderlich, nur ein rezept	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welche zutat wird für milchreis oder quiche benötigt?	welche zutat in reispudding oder quiche benötigt wird	welche zutat ist erforderlich, entweder milchreis oder quiche	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) ) )
welche zutaten werden für die rezepte benötigt, die im jahr 2004 veröffentlicht wurden?	was sind die zutaten für rezepte im jahr 2004 veröffentlicht	was sind die zutaten für die rezepte veröffentlicht 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
wie viele mahlzeiten haben wir jeden tag?	wie viele mahlzeiten haben wir jeden tag	wie viele mahlzeiten haben wir täglichen	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
was ist die durchschnittliche vorbereitungszeit eines rezepts	was ist die durchschnittliche zubereitungszeit eines rezepts	was ist die durchschnittliche vorbereitungszeit für ein rezept	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )
zeig mir rezepte, die vor dem milchreis gepostet wurden	zeigen sie mir rezepte vor reispudding gepostet	zeigen sie mir rezepte, die geschrieben werden, bevor milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
zeige mir rezepte aus dem jahr 2004	zeigen sie mir rezepte im jahr 2004 veröffentlicht	zeige mir rezepte veröffentlicht 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
was sind die rezepte für das mittagessen	was sind die rezepte für das mittagessen	was sind die rezepte für das mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string meal ) ( string = ) en.meal.lunch ) )
welches rezept buchungsdatum ist 2004	welches rezeptbuchungsdatum ist 2004	welche rezepte buchungsdatum 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
welches rezept zum mittagessen verwendet milch als zutat	welches mittagessen rezept verwendet milch als zutat	was mittagessen rezept verwendet milch als zutat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string requires ) ( string = ) en.ingredient.milk ) )
wie lange braucht dieses rezept, um zu kochen?	wie lange dauert dieses rezept zu kochen	wie lange dauert dieses rezept nehmen, um zu kochen	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ) ) )
finden sie ein rezept, das zum mittag oder abendessen geeignet ist	finden sie ein rezept, das gut für mittag oder abendessen ist	finden sie eine rezept, das ist gut für mittagoder abendessen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( call SW.concat en.meal.lunch en.meal.dinner ) ) )
welche mahlzeit ist das rezept im jahr 2004 veröffentlicht	welche mahlzeit ist das rezept im jahr 2004 veröffentlicht	welche mahlzeit ist das rezept gepostet 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
welches rezept hat die geringste vorbereitungszeit	welches rezept die geringste vorbereitungszeit hat	das rezept hat die geringste vorbereitungszeit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )
welches rezeptbuchungsdatum ist das größte im jahr 2004?	welche rezepte buchungsdatum ist am größten im jahr 2004	welche rezepte buchungsdatum ist am größten im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
für welche mahlzeit die meisten rezepte gemacht sind	für welche mahlzeit die meisten rezepte gemacht	was essen die meisten rezepte für die	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
rezept von mindestens zwei küche	rezept von mindestens zwei küchen	rezept von mindestens zwei küche	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string >= ) ( number 2 ) ) )
welches rezept erfordert die wenigsten zutaten	welches rezept die wenigsten zutaten benötigt	was rezept erfordert den geringsten zutaten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
was ist die küche von milchreis	was ist die küche von reispudding	was ist die küche von milchreis	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) )
rezepte mit nur zwei zutaten	rezepte mit nur zwei zutaten	rezepte mit nur zwei zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
nennen sie eine zutat, die für zwei verschiedene rezepte benötigt wird	benennen sie eine zutat, die durch zwei verschiedene rezepte benötigt wird	name der zutat erforderlich, die durch zwei verschiedene rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches rezept ist in kürzerer zeit als milchreis gekocht	welches rezept in weniger zeit als reispudding gekocht wird	was wird das rezept gekocht in weniger zeit als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
zeigen rezepte mit milch als zutat und ist im jahr 2004 veröffentlicht	zeigen rezepte mit milch als zutat und wird im jahr 2004 veröffentlicht	zeigen rezepte mit milch als zutat und ist veröffentlicht in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string requires ) ( string = ) en.ingredient.milk ) )
welches rezept gehört zu weniger küchen	welches rezept weniger küchen gehört	das rezept gehört zu geringer anzahl von küchen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string cuisine ) ) )
welche zutat wird für weniger als zwei rezepte benötigt?	welche zutat für weniger als zwei rezepte benötigt wird	welche zutaten benötigt man für weniger als zwei rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
rezept der anzahl der zutaten	rezept der anzahl der zutaten	rezept von der anzahl der zutaten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
was reispudding oder quiche bevorzugen	was reispudding oder quiche bevorzugen	was bevorzugen milchreis oder quiche	( call SW.listValue ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) )
welches rezept hat die geringste vorbereitungszeit	welches rezept die geringste vorbereitungszeit hat	was rezept hat die wenigsten vorbereitungszeit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )
ein rezept, das aus zwei oder mehr zutaten besteht	ein rezept, das zwei oder mehr zutaten verwendet	ein rezept, das verwendet zwei oder mehr zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
mahlzeit mit mehr als zwei rezepten	mahlzeit mit mehr als zwei rezepten	mahlzeit mit mehr als zwei rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
finde ein rezept, das die maximale anzahl von lebensmitteln benötigt	finden sie rezept, das die maximale anzahl von lebensmitteln benötigt	finden rezept, das muss die maximale anzahl von lebensmitteln	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
finden sie rezepte aus dem jahr 2004	finden rezepte veröffentlicht im jahr 2004	rezepte zu finden, veröffentlicht im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
welche rezepte in kürzerer zeit zubereitet werden tan rice pudding	welche rezepte in weniger zeit tan reispudding zubereitet werden	welche rezepte sind bereit, in weniger zeit tanreispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
welche zeit kann in der gleichen zeit wie milchreis vorbereitet werden	welche zeit in der gleichen zeit wie reispudding vorbereitet werden kann	was die zeit sein kann, desinfiziert werden, in der gleichen zeit wie reis pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )
zeige mir rezepte mit der meisten vorbereitungszeit	zeigen sie mir rezepte mit der meisten zubereitungszeit	zeige mir rezepte mit der meisten zeit der vorbereitung	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )
welche mahlzeiten haben rezepte, die milch verwenden	welche mahlzeiten rezepte haben, die milch verwenden	was essen, rezepte, milch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ) )
für welche mahlzeit gibt es mindestens zwei rezepte?	welche mahlzeit finden sie mindestens zwei rezepte für	was essen sie mindestens zwei rezepte für	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
zeige mir rezepte für das mittagessen, die 2004 veröffentlicht wurden	zeigen sie mir rezepte für das mittagessen im jahr 2004 veröffentlicht	zeige mir rezepte für das mittagessen gebucht 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
zeige rezepte, deren buchungsdatum nicht 2004 ist	rezepte anzeigen, deren buchungsdatum nicht 2004 ist	zeigen rezepte, deren buchungsdatum nicht 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string ! = ) ( date 2004 -1 -1 ) ) )
finde rezepte, die vor 2004 gepostet wurden	rezepte finden, die vor 2004 veröffentlicht wurden	rezepte zu finden, die geschrieben werden, bevor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
zeig mir rezepte mit den wenigsten zutaten	zeigen sie mir rezepte, die die wenigsten zutaten haben	zeigen sie mir die rezepte, die haben die wenigsten zutaten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
welches rezept braucht mindestens so lange für die zubereitung wie milchreis	welches rezept dauert mindestens so lange wie reispudding zuzubereiten	was rezept dauert mindestens so lange vorbereiten wie milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
zeig mir milchfreie rezepte	zeigen sie mir milchfreie rezepte	zeigen sie mir milkfree rezepte	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string ! = ) en.ingredient.milk ) )
zeigen sie mir rezepte, die die gleiche oder eine längere zubereitungszeit haben als milchreis	zeigen sie mir rezepte, die die gleiche oder längere zubereitungszeit wie reispudding haben	zeigen sie mir die rezepte, die die gleiche oder eine längere vorbereitungszeit als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
was ist eine mahlzeit mit der meisten anzahl von rezepten	was ist eine mahlzeit mit den meisten rezepten	was ist eine mahlzeit, die mit der anzahl der rezepte	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches rezept ist ein rezept für das mittagessen	welches rezept ist ein rezept für das mittagessen	was das rezept ist ein rezept für das mittagessen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ) )
rezepte gesamtvorbereitungszeit	rezepte gesamtvorbereitungszeit	rezepte gesamtvorbereitungszeit	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )
zeig mir rezepte für die meisten mahlzeiten	zeigen sie mir rezepte für die meisten mahlzeiten	zeige mir rezepte für die mahlzeiten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
rezepte, die die gleiche oder mehr zeit benötigen, um als milchreis vorzubereiten	rezepte, die die gleiche oder mehr zeit benötigen, um als reispudding zuzubereiten	rezepte, die erfordert, dass die gleiche oder mehr zeit für die vorbereitung als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
welche zutat wird in zwei oder mehr rezepten benötigt?	welche zutat in zwei oder mehr rezepten benötigt wird	welche zutaten benötigt, die in zwei oder mehr rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
was ist die durchschnittliche vorbereitungszeit für das rezept	was ist die durchschnittliche vorbereitungszeit für das rezept	was ist die durchschnittliche vorbereitungszeit für das rezept	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )
welches rezept wurde während oder vor 2004 veröffentlicht?	welches rezept während oder vor 2004 gepostet wurde	was rezept gepostet wurde, die sich während oder vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
zeig mir rezepte nicht zum mittagessen	zeigen sie mir rezepte nicht zum mittagessen	zeigen sie mir rezepte, die nicht für das mittagessen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string ! = ) en.meal.lunch ) )
welche rezepte wurden vor milchreis geschrieben	welche rezepte vor reispudding gepostet wurden	die rezepte, die gepostet wurden, bevor milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
zeige mir rezepte mit veröffentlichungsdaten von 2004 oder später	zeigen sie mir rezepte mit buchungsdaten aus 2004 oder höher	zeige mir rezepte mit den buchungsdaten aus, die 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
was rezept erfordert zwei zutaten	welches rezept zwei zutaten verlangt	was rezept fordert zwei zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
zeig mir rezepte, die mehr als zwei zutaten erfordern	zeigen sie mir rezepte, die mehr als zwei zutaten erfordern	zeigen sie mir rezepte, die rufen sie für mehr als zwei zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
welches rezept ist für nicht mehr als zwei mahlzeiten	welches rezept ist für nicht mehr als zwei mahlzeiten	was rezept ist für nicht mehr als zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
dieses rezept hat eine längere garzeit als die vorbereitungszeit für milchreis	welches rezept eine größere garzeit hat als die fürdierekzeit für reispudding	das rezept hat eine größere garzeit als die vorbereitung benötigte zeit für milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
rezepte zeigen, die weniger zubereitung erfordern als milchreis	rezepte zeigen, die eine geringere zubereitung als reispudding erfordern	zeigen rezepte, die erfordert weniger vorbereitung als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
welches rezept braucht keine milch	welches rezept keine milch braucht	was rezept nicht brauchen milch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string ! = ) en.ingredient.milk ) )
welches rezept braucht am wenigsten zutaten	welches rezept am wenigsten zutaten benötigt	was rezept muss mindestens zutaten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
was ist das rezept für eine mahlzeit	was ist rezept für eine mahlzeit	was ist das rezept für eine mahlzeit	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
welche rezepte zubereitungszeit ist größer als die von milchreis	welche rezepte zubereitungszeit ist größer als die von reispudding	welche rezepte vorbereitungszeit ist größer als das von reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
erzählen rezepte mit milch zum mittagessen	rezepte mit milch zum mittagessen erzählen	sagen rezepte mit milch zum mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string requires ) ( string = ) en.ingredient.milk ) )
nennen sie das rezept, das zum mittagessen zubereitet wird	nennen sie das rezept, das für das mittagessen vorbereitet wird	nennen sie das rezept, das bereit ist für das mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string meal ) ( string = ) en.meal.lunch ) )
zeigen sie mir das rezept mit den meisten anforderungen	zeigen sie mir das rezept, das die meisten anforderungen hat	zeigen sie mir das rezept, das hat die meisten anzahl von anforderungen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
zeig mir rezepte für milchreis oder quiche	zeigen sie mir rezepte für reispudding oder quiche	zeige mir rezepte für milchreis oder quiche	( call SW.listValue ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) )
welches rezept kann für mindestens zwei mahlzeiten verwendet werden	welches rezept für mindestens zwei mahlzeiten verwendet werden kann	was rezept kann verwendet werden, für mindestens zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
zeige mir rezepte aus dem jahr 2004, die milch erfordern	zeigen sie mir rezepte im jahr 2004 veröffentlicht, die milch	zeige mir rezepte veröffentlicht im jahr 2004 erfordern milch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string requires ) ( string = ) en.ingredient.milk ) )
welche zutat wird von einem rezept aus dem jahr 2004 verlangt?	welche zutat durch ein 2004 veröffentlichtes rezept gefordert wird	welche zutat ist gefordert, ein rezept gepostet 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
wie viele mahlzeiten gibt es insgesamt?	wie viele gesamtmahlzeiten es gibt	wie viele mahlzeiten gibt es	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
welches rezept hat nicht weniger als zwei küchen	welches rezept nicht weniger als zwei küchen hat	was rezept hat nicht weniger als zwei küchen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string >= ) ( number 2 ) ) )
welches rezept benötigt die geringste garzeit?	welches rezept die geringste garzeit benötigt	das rezept erfordert den geringsten garzeit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )
welche rezepte zubereitungszeit ist das gleiche wie milchreis	welche rezepte zubereitungszeit ist die gleiche wie reispudding	welche rezepte die zeit der vorbereitung ist die gleiche wie milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )
welche rezepte brauchen länger, um zu kochen, als reispudding zuzubereiten	welche rezepte länger zum kochen als zum zubereiten von reispudding	die rezepte, die länger dauern, um zu kochen als vorbereitung milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
welches rezept braucht mindestens genauso viel zeit zum kochen wie milchreis?	welches rezept braucht gleiche oder mehr zeit zum kochen als reispudding	was rezept nimmt gleich oder mehr zeit, um zu kochen als reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
zeig mir rezepte, die mindestens drei zutaten benötigen	zeigen sie mir rezepte, die mindestens drei ingrediants benötigen	zeigen sie mir rezepte, die brauchen mindestens drei ingrediants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
rezepte, die weniger oder weniger zeit benötigen als die zeit, die für die zubereitung von milchreis benötigt wird	rezepte, die weniger oder die gleiche zeit als die zeit benötigen, die für die zubereitung von reispudding benötigt wird	rezepte, die erfordern weniger oder die gleiche zeit als die zeit, die zur vorbereitung milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
zeig mir rezepte, die ein oder zwei küchen folgen	zeigen sie mir rezepte, die ein oder zwei küchen folgt	zeigen sie mir rezepte, die folgt, eine oder zwei küchen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string <= ) ( number 2 ) ) )
zeigen sie mir rezepte, die weniger zeit zum kochen benötigen als milchreis	zeigen sie mir rezepte, die weniger kochzeit als reispudding erfordern	zeigen sie mir rezepte, die benötigen weniger garzeit als reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
zeige mir rezepte, die vor dem posten für milchreis gepostet wurden	zeigen sie mir rezepte vor jedem posting für reispudding gepostet	zeigen sie mir rezepte, die geschrieben werden, bevor ein posting für reis pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
welches rezeptbuchungsdatum ist höchstens 2004 oder 2010?	welches rezeptbuchungsdatum ist höchstens 2004 oder 2010	welche rezepte buchungsdatum ist bei den meisten von 2004 oder 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
was ist das buchungsdatum für milchreis	was ist das buchungsdatum für reispudding	was ist das buchungsdatum für reis pudding	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) )
welches rezeptbuchungsdatum ist größer als das des milchreises?	welche rezepte buchungsdatum ist größer als die von reispudding	welche rezepte postingdatum ist größer als das von reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
zeig mir rezepte mit der am wenigsten vertretenen küche	zeigen sie mir rezepte mit der küche am wenigsten vertreten	zeige mir rezepte mit der küche, die beine vertreten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string cuisine ) ) )
was ist die küche von milchreis	was ist die küche von reispudding	was ist die küche von milchreis	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) )
welches rezept benötigt keine milch?	welches rezept keine milch benötigt	was rezept doesnt erfordern milch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string ! = ) en.ingredient.milk ) )
welches rezept dauert länger als milchreis zuzubereiten	welches rezept dauert länger zu kochen, als reispudding braucht, um vorzubereiten	was rezept dauert länger, um zu kochen als reispudding braucht, um prep	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
hier finden sie ein rezept für ein mittagessen aus dem jahr 2004	finden sie ein mittagessen rezept von 2004	finden sie ein mittagessenrezept von 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string meal ) ( string = ) en.meal.lunch ) )
was ist die durchschnittliche zubereitungszeit für alle rezepte	was ist die durchschnittliche zubereitungszeit für alle rezepte	was ist die durchschnittliche zeit der vorbereitung auf alle rezepte	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )
für welche mahlzeit ist das rezept milchreis	für welche mahlzeit ist das rezept reispudding für	welche mahlzeit ist das rezept für milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) ) )
zeige mir rezepte aus den jahren 2004 und 2010	zeigen sie mir rezepte in 2004 und 2010 veröffentlicht	zeigen sie mir rezepte, geschrieben in den jahren 2004 und 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) )
welches rezept benötigt weniger als zwei lebensmittel für die zubereitung	welches rezept weniger als zwei lebensmittel für seine zubereitung benötigt	das rezept benötigt weniger als zwei lebensmittel, für ihre zubereitung	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
für welches gericht sind zwei rezepte vorgesehen	welche mahlzeit hat zwei rezepte für sie bestimmt	die mahlzeit hat zwei rezepte, die für es	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
mahlzeit als milchreis wird nicht eingenommen	mahlzeit als reispudding nicht eingenommen wird	essen als reispudding wird nicht übernommen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string ! = ) en.recipe.rice_pudding ) )
zeigen sie mir rezepte, die länger zum kochen brauchen als milchreis	zeigen sie mir rezepte, die längere zeit zum kochen als reispudding erfordern	zeigen sie mir rezepte, die erfordern mehr zeit, um zu kochen als reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
welches rezept hat die kleinste vorbereitungszeit	welches rezept die kleinste zubereitungszeit hat	was rezept hat die kleinste zeit der vorbereitung	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )
was ist die garzeit von milchreis	was ist die garzeit des reispuddings	was ist die garzeit von reispudding	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) )
nennen sie eine zutat, die für mehr als zwei rezepte erforderlich ist	benennen sie eine zutat, die in mehr als zwei rezepten benötigt wird	name der zutat erforderlich, die in mehr als zwei rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welche zutaten werden am wenigsten in rezepten verwendet	welche zutaten am wenigsten in rezepten verwendet werden	welche inhaltsstoffe werden verwendet, zumindest in den rezepten, die	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welche zutaten werden von mindestens zwei rezepten verwendet?	welche zutaten in mindestens zwei rezepten verwendet werden	welche zutaten werden verwendet, um mindestens zwei rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
rezepte garzeit	rezepte kochzeit	rezepte kochen zeit	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ) ) )
welches rezept fällt unter zwei küchen	welches rezept unter zwei küchen fällt	was rezept fällt unter zwei küchen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string = ) ( number 2 ) ) )
welche rezepte haben die gleiche kochzeit wie milchreis	welche rezepte die gleiche garzeit wie reispudding haben	welche rezepte haben die gleiche garzeit als reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )
zeig mir rezepte, die nicht zum mittagessen genommen werden können	zeigen sie mir rezepte, die nicht zum mittagessen genommen werden können	zeigen sie mir rezepte, die getroffen werden kann, für das mittagessen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string ! = ) en.meal.lunch ) )
welches rezept hat ein buchungsdatum kleiner als 2004 oder 2010	welches rezept ein buchungsdatum hat, das kleiner als 2004 oder 2010 ist	das rezept hat ein buchungsdatum kleiner als 2004 oder 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
mahlzeit als milchreis oder quiche hat	mahlzeit als reispudding oder quiche	mahlzeit, als milchreis oder quiche	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) ) )
welche rezepte gibt es zum mittag oder abendessen?	welche rezepte sind zum mittag oder abendessen	die rezepte sind für mittagoder abendessen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( call SW.concat en.meal.lunch en.meal.dinner ) ) )
zeigen sie mir rezepte mit kochzeiten, die länger sind als die kochzeit von milchreis	zeigen sie mir rezepte mit kochzeiten größer als kochzeit von reispudding	zeigen sie mir die rezepte von kochenmal größer als die garzeit von reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
zeig mir rezepte für milchreisgerichte	zeigen sie mir rezepte für reispuddingmahlzeiten	zeige mir rezepte für milchreis mahlzeiten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) ) )
welche zutat ist nicht erforderlich, um milchreis zu machen	welche zutat nicht zur herstellung von reispudding benötigt wird	welche zutat ist nicht erforderlich, um milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string ! = ) en.recipe.rice_pudding ) )
zeig mir rezepte mit zwei oder weniger zutaten	zeigen sie mir rezepte, die zwei oder weniger zutaten erfordern	zeige mir rezepte erfordern zwei oder weniger zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
zeige mir rezepte mit buchungsdatum vor 2010	mir rezepte mit buchungsdatum vor 2010 anzeigen	zeige mir rezepte mit buchungsdatum vor 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
zeig mir die durchschnittliche garzeit für alle rezepte	zeigen sie mir die durchschnittliche garzeit für alle rezepte	zeigen sie mir die durchschnittliche kochzeit für alle rezepte	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ) ) )
zeige rezepte, die höchstens als milchreiszubereitung benötigt werden	zeigen sie rezepte, die höchstens als reispuddingzubereitung benötigen	zeigen rezepte, die erfordern am meisten zeit wie milchreis zubereitung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
welches rezept ist am schnellsten gekocht	welches rezept am schnellsten gekocht wird	was rezept ist am schnellsten zubereitet	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )
wie viele zutaten werden benötigt?	wie viele zutaten benötigt werden	wie viele zutaten benötigt werden	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
welches rezept hat die gleiche kochzeit wie milchreis	welches rezept die gleiche garzeit wie reispudding hat	was rezept hat die gleiche kochzeit wie der reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )
für welche mahlzeit wird reispudding gegessen	für welche mahlzeit reispudding ist	für die mahlzeit ist reis pudding hatte	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) )
welche zutat wird von vielen rezepten benötigt?	welche zutat durch viele rezepte benötigt wird	welche zutat benötigt, die durch viele rezepte	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches rezept hat eine kürzere garzeit als reispudding?	welches rezept hat eine kochzeit niedriger als die von reispudding	was rezept eine garzeit niedriger als die des reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
für welche rezepte im jahr 2004 wird milch benötigt	welche rezepte aus dem jahr 2004 milch benötigen	welche rezepte veröffentlicht im jahr 2004 erfordern milch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
was ist ein rezept mit einer vorbereitungszeit weniger als die kochzeit von milchreis	was ist ein rezept mit einer vorbereitungszeit weniger als die garzeit von reispudding	was ist ein rezept mit einer zubereitungszeit von weniger als die garzeit des milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
zeigen rezepte, die höchstens zwei küchen haben	zeigen rezepte, die höchstens zwei küche haben	zeigen die rezepte, die am meisten haben zwei küche	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string <= ) ( number 2 ) ) )
zeig mir rezepte mit der geringsten kochzeit	zeigen sie mir rezepte mit der geringsten garzeit	zeige mir rezepte mit der geringsten garzeit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )
zutaten in milchreis	zutaten in reispudding	zutaten von reispudding	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) )
was ist die garzeit für milchreis	was ist die garzeit für reispudding	was ist die garzeit für reis pudding	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) )
zeige mir rezepte, die zum selben datum wie milchreis gepostet wurden	zeigen sie mir rezepte am selben tag wie reispudding gepostet	zeige mir rezepte gepostet am gleichen tag wie milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
ein rezept für milchreis	ein rezept für reispudding	ein rezept für milchreis	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) )
für welche mahlzeit wird reispudding verwendet?	für welche mahlzeit ist reispudding verwendet	für das, was mahlzeit milchreis verwendet für	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) )
rezepte ohne milch	rezepte ohne milch	rezepte ohne milch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string ! = ) en.ingredient.milk ) )
nennen sie zutaten, die in drei oder mehr rezepten benötigt werden	name zutaten, die in drei oder mehr rezepten erforderlich ist	name zutaten, die erforderlich ist, drei oder mehr rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches rezeptbuchungsdatum ist in 2004 oder 2010	welches rezeptbuchungsdatum ist 2004 oder 2010	welche rezepte buchungsdatum in 2004 oder 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) )
welche rezepte brauchen zwei zutaten	welche rezepte zwei zutaten benötigen	welche rezepte brauchen zwei zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
zeige mir rezepte, die nach 2004 oder nach 2010 veröffentlicht wurden	zeigen sie mir rezepte nach 2004 oder nach 2010 gepostet	zeige mir rezepte gepostet, die nach 2004 oder nach 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
was rezept ist nicht mittagessen	welches rezept ist nicht mittagessen	was rezept ist noch nicht mittag	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string ! = ) en.meal.lunch ) )
wie lange dauert es, reispudding zuzubereiten?	wie lange dauert es, reispudding zu machen	wie lange dauert es, um milchreis	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) )
zeig mir ein rezept, das länger zum kochen braucht als milchreis	zeigen sie mir rezept, das längere zeit zum kochen als reispudding erfordern	zeigen sie mir, rezept benötigen mehr zeit, um zu kochen als reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
welches rezept benötigt die niedrigste garzeit?	welches rezept die niedrigste garzeit erfordert	was rezept erfordert den geringsten garzeit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )
rezept mit mehr als zwei küchen	rezept mit mehr als zwei küche	rezept mit mehr als zwei küche	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string > ) ( number 2 ) ) )
nennen sie das rezept für das mit milch zubereitete mittagessen	nennen sie das rezept für das mittagessen mit milch zubereitet	name des rezepts verwendet für das mittagessen an, zubereitet mit milch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string requires ) ( string = ) en.ingredient.milk ) )
zeige rezepte mit der maximalen anzahl von küchen	zeigen rezepte mit der maximalen anzahl von küchen	zeigen rezepte mit der maximalen anzahl von gerichten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string cuisine ) ) )
was rezepte mindestens zwei zutaten erfordern	welche rezepte benötigen, wenn sie zwei zutaten	welche rezepte erfordern an leas zwei zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
das ist die am häufigsten verwendete zutat in rezepten	die am häufigsten verwendete zutat in rezepten	welche ist die am häufigsten verwendete zutat in rezepten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
was ist das buchungsdatum von milchreis	was ist das buchungsdatum von reispudding	was ist das buchungsdatum von milchreis	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) )
welches rezept hat die geringste anzahl von küche	welches rezept hat die wenigsten küche	was rezept hat die geringste anzahl von küche	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string cuisine ) ) )
für welche mahlzeit ist das rezept mit datum im jahr 2004	für welche mahlzeit ist das rezept mit postdatum im jahr 2004	für welche mahlzeit ist das rezept mit dem postdatum 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
dieses rezept benötigt weniger zeit für die zubereitung als milchreis	welches rezept weniger zeit in anspruch nimmt als reispudding	das rezept nimmt weniger zeit zur vorbereitung als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
eine zutat, die nach mindestens zwei rezepten erforderlich ist	eine zutat, die für mindestens zwei rezepte erforderlich ist	eine zutat erforderlich, die von mindestens zwei rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
zeige rezepte, die keine milch enthalten	zeigen sie rezepte, die keine milch als einen ihrer zutaten haben	zeigen sie rezepte, die keine milch als einen seiner bestandteile	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string ! = ) en.ingredient.milk ) )
wie lange dauert es, ein rezept vorzubereiten?	wie viel zeit es braucht, um rezept vorzubereiten	wie viel zeit es braucht, um vorzubereiten rezept	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )
welches rezept dauert am längsten zuzubereiten	welches rezept am längsten zuzubereiten dauert	was rezept dauert am längsten vorbereiten	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )
wie lange dauert die zubereitung des rezepts?	wie lange dauert die zubereitung des rezepts	wie lange ist das rezept zu bereiten	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )
zeig mir das älteste rezept	zeigen sie mir das älteste rezept	zeigen sie mir die älteste rezept	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )
finden sie essensrezepte zum mittagessen	finden sie essen rezepte für das mittagessen	finden mahlzeit rezepte für das mittagessen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ) )
was rezept kocht weniger zeit als milchreis zuzubereiten	welches rezept für weniger zeit kocht, als reispudding zur zubereitung benötigt	was rezept kocht für weniger zeit als milchreis braucht, um prep	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
welche mahlzeit hat die meisten rezepte	welche mahlzeit hat die meisten rezepte	welches essen hat die meisten anzahl von rezepten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches rezept braucht die kürzeste zeit zum kochen	welches rezept dauert die kürzeste zeit zu kochen	was rezept nimmt die kürzeste zeit, um zu kochen	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )
zeigen sie mir rezepte mit einer vorbereitungszeit, die länger ist als milchreis	zeigen sie mir rezepte mit einer zubereitungszeit größer als reispudding	zeige mir rezepte mit einer zubereitungszeit größer als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
welcher tag war reispudding gebucht	an welchem tag wurde reispudding gepostet	was für ein tag war der milchreis gepostet	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) )
welche mahlzeit hat zwei oder mehr rezepte	welche mahlzeit hat zwei oder mehr rezepte	welches essen hat zwei oder mehr rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welche zutaten werden für das mittagessen rezepte benötigt	welche zutaten für mittagsrezepte benötigt werden	welche zutaten sind erforderlich für mittagrezepte	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ) )
was ist die gesamtvorbereitungszeit aller rezepte	was ist die gesamte zubereitungszeit aller rezepte	was ist die gesamte zubereitungszeit aller rezepte	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )
finden sie einige rezepte zum mittagessen	finden sie einige mittagessen rezepte	finden sie einige rezepte mittagessen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) )
welches rezept wurde im jahr 2004 veröffentlicht	welches rezept wurde im jahr 2004 veröffentlicht	was rezept wurde veröffentlicht in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
welches rezept wurde nicht später als der milchreis rezept veröffentlicht	welches rezept wurde spätestens als das reispuddingrezept gepostet	was rezept gepostet wurde, nicht später als die reispuddingrezept	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
wie viele rezepte verwenden mehr als zwei zutaten	wie viele rezepte mehr als zwei zutaten verwenden	wie viele rezepten mehr als zwei zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
welches rezept hat die kürzeste vorbereitungszeit	welches rezept die kürzeste zubereitungszeit hat	das rezept hat die kürzeste vorbereitung zeit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )
wie viele mahlzeiten gibt es	wie viele mahlzeiten es gibt	wie viele mahlzeiten gibt es	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
rezepte mit oder nach dem posten von milchreis	rezepte, die mit oder nach dem posten von reispudding gebucht wurden	rezepte gepostet mit oder nach der veröffentlichung milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
was ist die meiste zutat, die dieses rezept benötigt	was ist die größte zutat, die dieses rezept erfordert	was ist die zutat, die das rezept erfordert	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches rezept hat die garzeit von milchreis	welches rezept die garzeit des reispuddings hat	das rezept hat die garzeit von reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
zeigen sie mir rezepte, die eine zutat aus milchreis erfordern	zeigen sie mir rezepte, die eine zutat aus reispudding erfordern	zeige mir rezepte erfordern eine zutat von reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) ) )
was ist eine zutat in nicht mehr als zwei rezepten gefunden	was ist eine zutat in nicht mehr als zwei rezepten gefunden	was ist eine zutat gefunden in nicht mehr als zwei rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
zeigen sie mir rezepte mit einer garzeit, die der vorbereitungszeit für milchreis entspricht	zeigen sie mir rezepte mit kochzeit gleich vorbereitungszeit für reispudding	zeigen sie mir die rezepte mit kochzeit gleich der zeit der vorbereitung für reis pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )
was ist die gesamte vorbereitungszeit für die rezepte	was ist die gesamte vorbereitungszeit für die rezepte	was ist die gesamte vorbereitungszeit für die rezepte	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )
welche rezepte erfordern die gleichen zutaten wie milchreis	welche rezepte die gleichen zutaten wie reispudding erfordern	die rezepte benötigt man die gleichen zutaten wie reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) ) )
welche rezepte brauchen milch oder spinat?	welche rezepte milch oder spinat benötigen	welche rezepte brauchen milch oder spinat	( call SW.listValue ( call SW.concat en.ingredient.milk en.ingredient.spinach ) )
welche mahlzeit hat weniger als zwei rezepte, um es zu machen	welche mahlzeit hat weniger als zwei rezepte, um es zu machen	welches essen hat weniger als zwei rezepte zu machen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welche rezepte erfordern die geringste menge an zutaten	welche rezepte die geringste menge an zutaten erfordern	die rezepte, die erfordern die geringste menge an zutaten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
dieses rezept benötigt weniger garzeit als milchreiszubereitung	welches rezept weniger garzeit als reispuddingzubereitung erfordert	das rezept benötigt weniger garzeit als reispudding zubereitung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
welches rezeptbuchungsdatum ist größer als 2004 oder 2010?	welches rezeptbuchungsdatum größer als 2004 oder 2010 ist	welche rezepte buchungsdatum größer ist als 2004 oder 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
welches rezept benötigt die längste vorbereitungszeit?	welches rezept den längsten zubereitungstome benötigt	das rezept muss die längste vorbereitung tome	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )
welches rezept hat die größte kochzeit	welches rezept die größte garzeit hat	was rezept hat den größten garzeit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )
welches rezept gehört zur küche des milchreises	welches rezept zur küche des reispuddings gehört	das rezept gehört zu der küche, die von reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) ) )
zeig mir rezepte ohne milch	zeigen sie mir rezepte ohne milch	zeige mir rezepte ohne milch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string ! = ) en.ingredient.milk ) )
welches rezept hat eine kochzeit gleich der vorbereitungszeit von milchreis	welches rezept eine kochzeit hat, die der vorbereitungszeit von reispudding entspricht	was rezept hat ein koch die zeit gleich für die zubereitung von milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )
finden sie die rezepte der vielfältigen küche	finden sie die rezepte der multiplen küche	finden sie die rezepte für mehrere gerichte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string >= ) ( number 2 ) ) )
zeige mir zutaten, die für mehr als zwei rezepte benötigt werden	zeigen sie mir zutaten, die für mehr als zwei rezepte erforderlich sind	zeigen sie mir die zutaten benötigt, um mehr als zwei rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welche rezepte brauchen drei oder mehr zutaten	welche rezepte drei oder mehr zutaten benötigen	welche rezepte brauchen sie drei oder mehr zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
welche rezepte wurden nach 2004 veröffentlicht?	welche rezepte nach 2004 veröffentlicht wurden	die rezepte, die gepostet wurden, die nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
rezepte für weniger als drei mahlzeiten	rezepte für weniger als drei mahlzeiten	rezepte für weniger als drei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
zeige rezepte, die zwischen 2004 und 2010 veröffentlicht wurden	rezepte anzeigen, die zwischen 2004 und 2010 veröffentlicht wurden	zeigen rezepte gepostet auf termine zwischen 2004 und 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
zeigen sie mir die zutaten, die für die rezepte zum mittagessen benötigt werden	zeigen sie mir zutaten, die für mittagsrezepte erforderlich sind	zeigen sie mir benötigten zutaten von mittagessen rezepte	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ) )
zeigen rezepte, deren garzeit der von milchreis entspricht	rezepte zeigen, deren garzeit mit der von reispudding identisch ist	zeigen rezepte, deren kochzeit ist die gleiche wie milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )
was sind die rezepte in 2004 oder 2010 veröffentlicht	was sind die rezepte in2004 oder 2010 veröffentlicht	was sind die rezepte gepostet in2004 oder 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
welche mahlzeit hat die wenigsten rezepte gewidmet	welche mahlzeit hat die wenigsten rezepte, die ihm gewidmet sind	welche mahlzeit hat die wenigsten rezepte gewidmet	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches rezept ist das neueste?	welches rezept ist das neueste	was wird das rezept letzten	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )
rezepte mit mehr vorbereitungszeit als milchreis	rezepte mit mehr zubereitungszeit als reispudding	rezepte mit mehr vorbereitungszeit als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
welches rezept wurde im jahr 2004 veröffentlicht und braucht milch	welches rezept im jahr 2004 veröffentlicht wurde und milch benötigt	was rezept wurde veröffentlicht in 2004 und muss milch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string requires ) ( string = ) en.ingredient.milk ) )
hier finden sie rezepte aus dem jahr 2005	finden rezepte veröffentlicht im jahr 2005	rezepte zu finden, veröffentlicht im jahr 2005	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
zeige mir rezepte, die noch am selben tag wie milchreis oder früher veröffentlicht wurden	zeigen sie mir rezepte am selben tag wie reispudding oder vor	zeige mir rezepte gepostet am selben tag, wie milchreis oder vor	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
welche rezepte benötigen milch?	welche rezepte milch benötigen	die rezepte erfordern milch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ) )
was ist eine zutat in mehr als zwei rezepten	was ist eine zutat in mehr als zwei rezepten verwendet	was ist ein inhaltsstoff, der in mehr als zwei rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches rezept wurde in 2004 oder 2010 veröffentlicht	welches rezept 2004 oder 2010 veröffentlicht wurde	das rezept wurde veröffentlicht in 2004 oder 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
für dieses rezept sind mindestens zwei zutaten erforderlich	welches rezept mindestens zwei zutaten benötigt	das rezept erfordert mindestens zwei zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
was ist eine zutat nicht in milchreis gefunden	was ist eine zutat nicht in reispudding gefunden	was ist eine zutat, die nicht in milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string ! = ) en.recipe.rice_pudding ) )
was ist die durchschnittliche kochzeit des rezepts	was ist die durchschnittliche kochzeit des rezepts	was ist die durchschnittliche garzeit rezept	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ) ) )
zeige mir rezepte, die in oder nach 2004 oder in oder nach 2010 veröffentlicht wurden	zeigen sie mir rezepte in oder nach 2004 oder in oder nach 2010 gepostet	zeigen sie mir rezepte, die posted in oder nach 2004 oder in oder nach 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
zeig mir rezepte für mindestens zwei mahlzeiten	zeigen sie mir rezepte für mindestens zwei mahlzeiten	zeige mir rezepte für mindestens zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
welche zutaten brauchen die rezepte von 2004?	welche zutaten tun rezepte im jahr 2004 veröffentlicht rufen für	welche inhaltsstoffe rezepte gepostet 2004 call for	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
nennen sie die zutat, die in milchreis nicht benötigt wird	nennen sie die zutat, die im reispudding nicht benötigt wird	name der zutat nicht erforderlich, milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string ! = ) en.recipe.rice_pudding ) )
was ist ein rezept aus der gleichen küche wie milchreis	was ist ein rezept aus der gleichen küche wie reispudding	was ist ein rezept aus der gleichen küche wie milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) ) )
welche rezepte wurden veröffentlicht, als milchreis veröffentlicht wurde?	welche rezepte gepostet wurden, als reispudding gepostet wurde	die rezepte wurden gebucht, wenn der milchreis gepostet wurde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
welche rezepte im jahr 2004 veröffentlicht werden, erfordert milch	welche rezepte im jahr 2004 gebucht werden, erfordert milch	welche rezepte veröffentlicht im jahr 2004 erfordern milch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
was für eine mahlzeit ist ein rezept, für das milch benötigt wird	welche mahlzeit ist ein rezept, das milch für	welche mahlzeit ist ein rezept, das erfordert, dass die milch für	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ) )
zeigen sie mir rezepte, deren zubereitung so lange dauert wie die von milchreis	zeigen sie mir rezepte, die so lange dauern, um wie reispudding vorzubereiten	zeigen sie mir rezepte, die so lange vorbereiten wie milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
welches rezept wurde am selben tag wie milchreis veröffentlicht	welches rezept wurde am selben tag wie reispudding gepostet	was rezept wurde veröffentlicht am selben tag wie milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) )
welche rezepte sind für maximal zwei mahlzeiten	welche rezepte für höchstens zwei mahlzeiten sind	die rezepte sind für zwei mahlzeiten bei den meisten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
zeige mir rezepte, die nach 2004 veröffentlicht wurden	zeigen sie mir rezepte nach 2004 veröffentlicht	zeige mir rezepte gepostet, die nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
welches rezeptbuchungsdatum ist größer als 2004?	welches rezeptbuchungsdatum größer als 2004 ist	welche rezepte buchungsdatum größer ist als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
finden sie die rezepte für die gleiche küche wie milchreis	finden sie die rezepte für die gleiche küche wie reispudding	finden sie die rezepte für die gleiche küche wie milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) ) )
was für eine küche ist milchreis?	was für eine küche ist reispudding	welche art der küche ist reis pudding	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) )
welche zutat wird nur in einem einzigen rezept verwendet	welche zutat nur in einem einzigen rezept verwendet wird	welche zutaten werden verwendet, nur in einem einzigen rezept	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches rezept wurde nach 2004 veröffentlicht?	welches rezept nach 2004 veröffentlicht wurde	was rezept gepostet wurde, die nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
rezepte gebucht, bis milchreis gebucht wird	rezepte gepostet, bis reispudding gebucht wird	rezepte gepostet, bis der milchreis ist gebucht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
zeige mir rezepte von 2004 und früher	zeige mir rezepte gepostet 2004 und früher	zeige mir rezepte gepostet 2004 und früher	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
finde ein rezept für eine mahlzeit, das im jahr 2004 veröffentlicht wurde	finden sie ein essen rezept im jahr 2004 veröffentlicht	eine mahlzeit finden rezept gepostet 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
zeigen sie mir rezepte, deren zubereitungszeit am meisten der kochzeit von milchreis entspricht	zeigen sie mir rezepte, deren zubereitungszeit ist eine die meiste kochzeit von reispudding	zeigen sie mir rezepte, deren zubereitung zeit ist ein großteil der garzeit des milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
zeig mir mahlzeiten mit den wenigsten rezepten	zeigen sie mir mahlzeiten mit den wenigsten rezepten	zeigen sie mir die mahlzeiten mit den wenigsten rezepten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
wie viele zutaten werden verwendet?	wie viele zutaten verwendet werden	wie viele zutaten verwendet werden	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
zeigen sie mir rezepte, deren zubereitungszeit unter der kochzeit von milchreis liegt	zeigen sie mir rezepte, die eine zubereitungszeit weniger als die garzeit von reispudding haben	zeige mir rezepte haben eine zubereitungszeit von weniger als die garzeit des milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
welches rezept wurde vor milchreis geschrieben	welches rezept wurde vor reispudding gepostet	was rezept wurde geschrieben, bevor milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
wann wurde milchreis gebucht	wann wurde reispudding gepostet	wann war der milchreis gepostet	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) )
rezepte für die geringste anzahl von mahlzeiten	rezepte für die geringste anzahl von mahlzeiten	rezepte für die am wenigsten anzahl der mahlzeiten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
zeig mir rezepte für weniger als zwei mahlzeiten	zeigen sie mir rezepte für weniger als zwei mahlzeiten	zeige mir rezepte für weniger als zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
was ist ein rezept, dessen garzeit mit milchreis identisch ist?	was ist ein rezept, dessen garzeit ist die gleiche wie reispudding	was ist ein rezept, dessen garzeit ist die gleiche wie milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )
zeigen rezepte aus dem jahr 2004 und hat milch als eine seiner zutaten	zeigen rezepte im jahr 2004 veröffentlicht und hat milch als eine ihrer zutaten	zeigen rezepte veröffentlicht im jahr 2004 und hat sich milch als eine der zutaten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
welches rezept hat die kürzeste garzeit	welches rezept die kürzeste garzeit hat	was rezept hat die kürzeste garzeit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )
mahlzeit mit milchrezept	mahlzeit mit milchrezept	mahlzeit mit milchrezept	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ) )
welches rezept kann frühestens zubereitet werden	welches rezept frühestens vorbereitet werden kann	das rezept kann vorbereitet werden, frühestens	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )
ein rezept für ein mittagessen, das 2004 veröffentlicht wurde	ein mittagessen rezept im jahr 2004 veröffentlicht	ein mittagessen rezept gepostet 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
welche rezepte zum mittagessen enthalten milch?	welche mittagsrezepte milch enthalten	was mittagessen rezepte milch enthalten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string meal ) ( string = ) en.meal.lunch ) )
zeigen sie mir mahlzeiten einschließlich milchreis	zeigen mir mahlzeiten einschließlich reispudding	zeigen sie mir speisen wie milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) )
dieses rezept wird in der gleichen zeit wie der milchreis zubereitet	welches rezept mit der gleichen zeit wie reispudding zubereitet wird	das rezept ist bereit, mit der gleichen menge an zeit, die der reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
liste rezepte, die milch benötigen	rezepturen auflisten, die milch benötigen	liste der rezepte, die erfordern, milch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ) )
welches rezept wurde spätestens 2004 oder 2010 veröffentlicht	welches rezept spätestens 2004 oder 2010 veröffentlicht wurde	was rezept gepostet wurde, nicht später als 2004 oder 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
rezept für drei oder mehr mahlzeiten	rezept für drei oder mehr mahlzeiten	rezept für drei oder mehr mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
welche zutat ist in über zwei rezepten	welche zutat in über zwei rezepten ist	welche zutat ist in über zwei rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welche rezepte so lange dauern wie reispudding zubereiten	welche rezepte so lange dauern, wie reispudding zubereiten	die rezepte nehmen, solange vorzubereiten milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
finde zwei essensrezepte	finden sie zwei mahlzeiten rezepte	finden sie zwei essen rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches rezept hat zwei oder weniger arten von küche	welches rezept zwei oder weniger arten von küche hat	was rezept zwei oder weniger arten von küche	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string <= ) ( number 2 ) ) )
rezept benötigt weniger als drei zutaten	rezept erfordert weniger als drei zutaten	rezept benötigt weniger als drei zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
welches rezept dauert länger als milchreis zuzubereiten	welches rezept dauert länger als reispudding zu bereiten	was rezept dauert länger, prep als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
zeige mir rezepte, die später als 2004 veröffentlicht wurden	zeigen sie mir rezepte, die später als 2004 veröffentlicht wurden	zeigen sie mir die rezepte, die gepostet wurden, die später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
zeigen sie mir rezepte mit einer vorbereitungszeit, die der kochzeit von milchreis entspricht	zeigen sie mir rezepte mit einer zubereitungszeit gleich der garzeit von reispudding	zeige mir rezepte mit einer zubereitungszeit gleich die garzeit von reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )
nach rezepten suchen, die nach 2004 oder 2010 veröffentlicht wurden	finden sie rezepte, die später als 2004 oder 2010 veröffentlicht wurden	finden rezepte gepostet, die später als 2004 oder 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
zeigen sie mir rezepte, die die gleiche vorbereitungszeit haben wie milchreis	zeigen sie mir rezepte, die die gleiche zubereitungszeit wie reispudding haben	zeigen sie mir rezepte, die die gleiche vorbereitungszeit milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )
zeige mir das rezept für milch aus dem jahr 2004	zeigen sie mir rezept erfordert milch im jahr 2004 gebucht	zeigen sie mir rezept erfordern milch posted in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
rezepte veröffentlicht nach 2003	rezepte veröffentlicht nach 2003	rezepte gepostet, nachdem 2003	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
quiche oder milchreis	quiche oder reispudding	quiche oder dem reispudding	( call SW.listValue ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) )
zeig mir rezepte, die zwei oder mehr küchen folgen	zeigen sie mir rezepte, die zwei oder mehr küchen folgt	zeige mir rezepte folgt, dass zwei oder mehr gerichte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string >= ) ( number 2 ) ) )
zeigen sie mir rezepte, deren zubereitungszeit kürzer ist als die kochzeit von milchreis	zeigen sie mir rezepte, deren zubereitungszeit kürzer ist als reispuddings kochzeit	zeigen sie mir die rezepte, deren zubereitung zeit kürzer ist als reis pudding kochen zeit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
welche rezepte haben die gleiche oder längere zubereitungszeit als milchreis?	welche rezepte die gleiche oder längere zubereitungszeit wie reispudding haben	welche rezepte haben die gleiche oder eine längere vorbereitungszeit als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
welche anderen zutaten benötigen rezepte, die milch verwenden?	welche anderen zutaten rezepte, die milch verwenden, erfordern	welche anderen inhaltsstoffe rezepten, die milch erfordern	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ) )
welches rezept wird in den meisten küchen verwendet?	welches rezept in der größten anzahl von küchen verwendet wird	welche rezept verwendet wird, in der die größte anzahl von gerichten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string cuisine ) ) )
welches rezept dauert am längsten zuzubereiten	welches rezept am längsten zuzubereiten dauert	das rezept dauert am längsten vorbereiten	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )
zeig mir rezepte zum mittagessen	zeigen sie mir rezepte für das mittagessen	zeige mir rezepte für das mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string meal ) ( string = ) en.meal.lunch ) )
zeig mir mahlzeiten mit mehr als zwei rezepten	zeigen sie mir mahlzeiten mit mehr als zwei rezepten	zeigen sie mir die mahlzeiten mit mehr als zwei rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welche rezepte haben höchstens zwei küchen	welche rezepte haben höchstens zwei küchen	welche rezepte haben höchstens zwei küchen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string <= ) ( number 2 ) ) )
zeig mir rezepte mit zwei zutaten	zeigen sie mir rezepte mit zwei zutaten	zeige mir rezepte mit zwei zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
ein rezept, das nach 2004 oder 2010 veröffentlicht wurde	ein rezept, das nach 2004 oder 2010 veröffentlicht wurde	ein rezept gepostet, die nach 2004 oder 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
zeig mir zutaten, die für höchstens zwei rezepte benötigt werden	zeigen sie mir zutaten für höchstens zwei rezepte erforderlich	zeigen sie mir benötigten zutaten für zwei rezepte bei den meisten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
was ist eine mahlzeit mit einem rezept aus dem jahr 2004?	was ist eine mahlzeit mit einem rezept im jahr 2004 veröffentlicht	was ist eine mahlzeit, die mit einem rezept veröffentlicht 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
rezepte, deren zubereitung weniger zeit in anspruch nimmt als milchreis	rezepte, die weniger zeit für die zubereitung benötigen als reispudding	rezepte, die benötigen weniger zeit zum kochen als reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
finde mir alle rezepte die milch benötigen	finden sie mich alle rezepte, die milch benötigen	finden mich alle rezepte, die erfordern, milch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) )
welche rezepte wurden im jahr 2004 zum mittagessen veröffentlicht	welche rezepte im jahr 2004 für das mittagessen gebucht wurden	die rezepte, die gepostet wurden im jahr 2004 für das mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
was ist ein rezept, das mindestens so lange dauert wie milchreis zu machen	was ist ein rezept, das mindestens so lange dauert, um reispudding zu machen	was ist ein rezept, das dauert mindestens so lange zu machen, wie milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
welches rezept wurde zuletzt gepostet	welches rezept wurde zuletzt veröffentlicht	das rezept gepostet wurde, die neueste	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )
was ist ein rezept, das spätestens 2004 veröffentlicht wurde	was ist ein rezept, das spätestens 2004 veröffentlicht wurde	was ist ein rezept, das veröffentlicht wurde, nicht später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
wie viele zutaten insgesamt in allen rezepten verwendet werden	wie viele gesamtzutaten in allen rezepten verwendet werden	wie viele zutaten verwendet werden, in der alle rezepte	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
für die zubereitung dieses rezepts wird am wenigsten zeit benötigt	welches rezept die geringste zeit für die zubereitung benötigt	das rezept nimmt die geringste menge an zeit, um sich vorzubereiten	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )
welches rezept erfordert entweder milch oder spinat	welches rezept entweder milch oder spinat erfordert	welche rezeptanrufe für entweder milch oder spinat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( call SW.concat en.ingredient.milk en.ingredient.spinach ) ) )
welche zutat wird von den meisten rezepten verlangt?	welche zutat von den meisten rezepten verlangt wird	das, was bestandteil ist von den meisten rezepten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welches rezept ist schneller als milchreis gekocht	welches rezept schneller gekocht wird als reispudding	was rezept gekocht ist schneller als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
zeig mir mahlzeiten mit den meisten rezepten	zeigen sie mir mahlzeiten mit den meisten rezepten	zeigen sie mir die mahlzeiten mit den meisten rezepten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
zeig mir mahlzeiten mit mindestens zwei rezepten	zeigen sie mir mahlzeiten mit mindestens zwei rezepten	zeigen sie mir die mahlzeiten mit mindestens zwei rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
finden sie rezepte, die für mehr als zwei mahlzeiten verwendet werden können	finden sie rezepte, die für mehr als zwei mahlzeiten verwendet werden können	finden sie rezepte, die verwendet werden können für mehr als zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
rezepte veröffentlicht vor 2004	rezepte, die vor 2004 veröffentlicht wurden	rezepte gepostet vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
zeigen rezepte zum mittag oder abendessen	rezepte zum mittag oder abendessen anzeigen	zeigen rezepte für mittagoder abendessen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( call SW.concat en.meal.lunch en.meal.dinner ) ) )
was ist eine zutat in einem mittagessen rezept gefunden	was ist eine zutat in einem mittagessen rezept gefunden	was ist eine zutat gefunden in der ein mittagessen rezept	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ) )
welche rezepte wurden bis 2004 gepostet	welche rezepte bis 2004 gebucht wurden	die rezepte die gepostet wurden bis zum jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
was die kochzeit der rezepte ist, ist die des milchreises am niedrigsten	welche rezepte kochzeit ist am niedrigsten als reispudding	was rezepte kochen zeit ist am niedrigsten, die von milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
welches rezept wurde vor 2010 gepostet	welches rezept wurde vor 2010 veröffentlicht	was rezept wurde geschrieben, bevor sie 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
welches rezept erfordert die höchste anzahl von zutaten	welches rezept die höchste anzahl an zutaten erfordert	was rezept erfordert höchste anzahl von zutaten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
dieses rezept benötigt mehr als zwei zutaten	dieser receipe erfordert mehr als zwei zutat	dieses rezept erfordert mehr als zwei zutat	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
welche rezepte erfordern ein oder zwei zutaten	welche rezepte ein oder zwei zutaten erfordern	welche rezepte erfordern eine oder zwei zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
welche rezepte erfordern höchstens zwei zutaten	welche rezepte höchstens zwei zutaten erfordern	die rezepte benötigen höchstens zwei zutaten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
rezept, dessen buchungsdatum mindestens das buchungsdatum für milchreis ist	rezept, dessen buchungsdatum mindestens das buchungsdatum für reispuddings ist	rezept deren buchungsdatum ist zumindest reis pudding buchungsdatum	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
welches rezept kann weniger als zwei arten von küche machen	welches rezept kann weniger als zwei arten von küche machen	was rezept kann weniger als zwei arten von küche	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string < ) ( number 2 ) ) )
welche rezepte wurden zur gleichen zeit wie milchreis geschrieben	welche rezepte gleichzeitig mit reispudding gepostet wurden	die rezepte werden geschrieben in der gleichen zeit wie reis pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) )
welche zutaten werden in zwei rezepten benötigt?	welche zutaten in zwei rezepten benötigt werden	welche zutaten erforderlich sind, in zwei rezepte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
welche rezepte haben weniger als zwei küchen	welche rezepte haben weniger als zwei küchen	welche rezepte haben weniger als zwei küchen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string < ) ( number 2 ) ) )
welche rezepte garzeit ist kürzer als die zubereitungszeit von milchreis	welche rezepte kochzeit ist niedriger als die zubereitungszeit von reispudding	was rezepte kochen zeit niedriger ist als die zeit der vorbereitung des reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
welches rezept kann für zwei oder mehr mahlzeiten verwendet werden	welches rezept für zwei oder mehr mahlzeiten verwendet werden kann	das rezept kann verwendet werden, für zwei oder mehr mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
zubereitungszeit des rezepts nicht mehr als die des milchreises	zubereitungszeit des rezepts nicht mehr als die von reispudding	die zeit der vorbereitung des rezepts nicht mehr als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
welche rezepte brauchen mehr zeit für die zubereitung als milchreis?	welche rezepte mehr zeit in anspruch nehmen als reispudding	welche rezepte nehmen mehr zeit zur vorbereitung als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
welche rezepte haben eine vorbereitungszeit so lange wie die kochzeit von milchreis	welche rezepte eine zubereitungszeit haben, solange die garzeit von reispudding	welche rezepte haben die zeit der vorbereitung so lange wie die kochzeit von reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )
was ist ein rezept mit den meisten zutaten	was ist ein rezept mit den meisten zutaten	was ist ein rezept mit den wichtigsten zutaten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string cuisine ) ) )
welche zutaten werden in milchreis oder quiche verwendet?	welche zutaten in reispudding oder quiche verwendet werden	welche zutaten werden in reispudding oder quiche	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) ) )
zeigen sie mir die zutaten, die für die 2004 veröffentlichten rezepte benötigt werden	zeigen sie mir zutaten nach rezepten im jahr 2004 veröffentlicht	zeigen sie mir benötigten zutaten von rezepte veröffentlicht 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
welches rezept dauert am längsten zu kochen	welches rezept am längsten zum kochen braucht	was rezept dauert am längsten, um zu kochen	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )
welches rezept kochen sie weniger zeit als milchreis?	welches rezept kochen sie für weniger zeit als reispudding	was rezept kocht man für weniger zeit als milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
welches rezept dauert genauso lange oder kürzer als milchreis, um es zuzubereiten	welches rezept braucht die gleiche oder weniger zeit zum kochen als reispudding zur zubereitung	was rezept nimmt die gleiche oder weniger zeit zu kochen als reispudding braucht, um prep	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
zutaten für mittagsrezepte anzeigen	zutaten für mittagsrezepte anzeigen	inhaltsstoffe anzeigen inhaltsstoffe für mittagessen rezepte	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ) )
wie viele mahlzeiten macht das?	wie viele mahlzeiten macht dies	wie viele mahlzeiten macht	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
zeigen sie mir rezepte mit einer garzeit, die kürzer als die vorbereitungszeit für milchreis ist	zeigen sie mir rezepte mit kochzeit weniger als die zubereitungszeit für reispudding	zeigen sie mir die rezepte mit kochzeit kleiner als die zeit der vorbereitung für reis pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
zeigen sie mir rezepte, die kürzere garzeiten haben als milchreis	zeigen sie mir rezepte, die kürzere kochzeiten als reispudding haben	zeigen sie mir rezepte, die kürzere garzeit als reispudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
welches datum für die veröffentlichung von rezepten ist im jahr 2004 und welche zutaten werden dafür benötigt?	welche rezepte buchungsdatum ist im jahr 2004 und welche zutaten es benötigt	welche rezepte buchungsdatum im jahr 2004 und welche zutaten braucht es,	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
welche rezepte benötigen milch und sind zum mittagessen	welche rezepte milch benötigen und zum mittagessen sind	welche rezepte benötigen milch und zum mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string requires ) ( string = ) en.ingredient.milk ) )
welches rezept wird in der vorbereitungszeit von milchreis oder früher zubereitet	welches rezept in der zubereitungszeit von reispudding oder früher zubereitet wird	was rezept, das bereit ist, in der zeit der vorbereitung des reispudding oder früher	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
zeigen sie mir mahlzeiten für einen	zeigen sie mir mahlzeiten für eine	zeigen sie mir die mahlzeiten für eine	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
zeige mir rezepte, die in oder vor 2004 oder in oder vor 2010 veröffentlicht wurden	zeigen sie mir rezepte in oder vor 2004 oder in oder vor 2010 gepostet	zeige mir rezepte veröffentlicht, die in oder vor dem jahr 2004 oder im oder vor dem jahr 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
was für eine mahlzeit ist milchreis oder quiche	welche mahlzeit ist reispudding oder quiche in	welche mahlzeit ist reispudding oder quiche in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) ) )
zeigen sie mir rezepte, die unter die gleiche küche fallen wie milchreis	zeigen sie mir rezepte, die unter die gleiche küche wie reispudding fallen	zeigen sie mir rezepte, die fallen unter die gleiche küche wie milchreis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) ) )
ist das rezept für mittag oder abendessen	ist das rezept für mittag oder abendessen	ist das rezept für ein mittagoder abendessen	( call SW.listValue ( call SW.concat en.meal.lunch en.meal.dinner ) )
rezepte für zwei mahlzeiten	rezepte für zwei mahlzeiten	rezepte für zwei essen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
hotel mit 3 sternen	hotel mit 3 sternen	hotel, welches einem 3sternebewertung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
welche küche wird von den wenigsten restaurants serviert	welche küche von den wenigsten restaurants serviert wird	was küche serviert, die von den wenigsten restaurants	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string cuisine ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
listen sie alle restaurants auf, die entweder thailändisch oder italienisch sind	liste aller restaurants, die entweder thai oder italienisch sind	liste aller restaurants, die entweder thai oder italienisch	( call SW.listValue ( call SW.concat en.cuisine.thai en.cuisine.italian ) )
restaurant, dessen küche thailändisch ist und das gut für kinder ist	restaurant, dessen küche thai ist und das ist gut für kinder	restaurant, dessen küche ist thai und dass ist gut für kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string kids ) ) )
welches restaurant eine preisbewertung größer oder gleich dem thailändischen cafe	welches restaurant eine preisbewertung größer oder gleich dem thaicafé	was restaurant eine preisbewertung größer oder gleich dem thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )
welche nachbarschaften haben restaurants, die im freien dienen	welche viertel restaurants haben, die im freien dienen	welche stadtteile haben die restaurants im freien	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ) )
welche kulinarischen möglichkeiten gibt es unter den kinderfreundlichen restaurants?	welche küche optionen gibt es unter den kinderfreundlichen restaurants	was kücheoptionen gibt es in der kinderfreundlichen restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ) )
welches dreisternerestaurant verfügt über sitzgelegenheiten im freien	das 3sternerestaurant hat sitzgelegenheiten im freien	die dreisternerestaurant hat sitzplätze im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
das 3sternerestaurant ist gut für kinder	das 3sternerestaurant ist gut für kinder	das 3sternerestaurant ist gut für kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
welches restaurant hat 3 oder 2 menüpunkte	welches restaurant 3 oder 2 menüpunkte hat	was restaurant hat 3 oder 2 menüpunkte	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )
restaurants in midtown west, die thailändisches essen servieren	restaurants in midtown west, die thaiküche servieren	restaurants in midtown west, die dazu dienen, thaifood	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
thairestaurants, die zum mitnehmen haben	thairestaurants, die takeout haben	thairestaurants haben takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string takeout ) ) )
restaurant in midtown west, die liefern	restaurant in midtown west, das liefern	restaurant in midtown west liefern	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string delivery ) ) )
welches restaurant nimmt reservierungen und hat zum mitnehmen	welches restaurant reservierungen nimmt und hat takeout	was das restaurant nimmt reservierungen und hat takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string takeout ) ) )
was ist die durchschnittliche sternebewertung?	was ist die durchschnittliche sternebewertung	was ist die durchschnittliche sternebewertung	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ) ) )
ein restaurant, das mindestens zwei sterne hat und zum mitnehmen ist	ein restaurant, das mindestens eine zweisternebewertung hat und	ein restaurant, in dem mindestens ein zweisternebewertung und tut takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
welche nachbarschaft hat die meisten thailändischen restaurants	welche nachbarschaft hat die meisten thairestaurants	in welchem viertel die meisten thairestaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ) )
welches 3sternerestaurant hat kellnerservice	was 3sternerestaurant hat kellnerservice	was 3sternerestaurantkellnerservice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
toller ort für gruppen und reservierungen	toller platz für gruppen und nimmt reservierungen	großartiger ort für gruppen und nimmt reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string groups ) ) )
was 2dollarzeichen restaurant nimmt kreditkarte	was 2 dollar zeichen restaurant nimmt kreditkarte	was 2 dollarzeichen restaurant nimmt kreditkarte	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string credit ) ) )
küche, die wie ein thailändisches cafe oder eine pizzeria juno ist	küche, die wie thai café oder pizzeria juno ist	küche wie thaicafe oder pizzeria juno	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno ) ) )
welche thailändischen restaurants nehmen reservierungen entgegen	welche thairestaurants reservierungen vornehmen	was thairestaurants nehmen reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string reserve ) ) )
welche mahlzeit serviert ein thailändisches café nicht	welche mahlzeit tut ein thaicafé nicht servieren	die mahlzeit enthält ein thaicafé nicht dienen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string ! = ) en.restaurant.thai_cafe ) )
restaurants höher bewertet als thailändisches café	restaurants werden mit mehr als thaicafé bewertet	restaurants besser bewertet als thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )
küche, die küche des restaurants ist, dessen nachbarschaft midtown west ist	küche, die küche des restaurants ist, dessen nachbarschaft midtown west ist	küche, die küche des restaurants, dessen nachbarschaft midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )
welches restaurant serviert zwei küchen	welches restaurant zwei küchen serviert	was restaurant serviert zwei küchen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( number 2 ) ) )
wie viele restaurants gibt es insgesamt?	wie viele restaurants es insgesamt gibt	wie viele restaurants gibt es insgesamt	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
listen sie alle restaurants auf, die take away und lieferservice anbieten	liste aller restaurants, die takeout und lieferung haben	liste aller restaurants, die imbissund lieferbedingungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string delivery ) ) )
in diesem restaurant kann man eine ziemlich preiswerte thailändische küche kaufen	eine ziemlich preiswerte thaiküche kann in diesem restaurant gekauft werden	eine relativ preiswerte thaiküche kann erworben werden in diesem restaurant	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
thairestaurants mit 3 sternen bewertet	thai restaurants bewertet 3 sterne	thairestaurants mit 3 sternen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
welche restaurants haben eine 3sternebewertung und 2dollarpreisbewertung	welche restaurants haben eine 3sternebewertung und 2 dollar preisbewertung	die restaurants haben eine 3sternebewertung und 2dollarpreis bewertung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
welches restaurant ist gut für gruppen	welches restaurant ist gut für gruppen	was das restaurant ist gut für gruppen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string groups ) ) )
was 3sternerestaurant bietet lieferung	was 3sternerestaurant bietet lieferung	was 3sternerestaurant bietet lieferung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
in welchen restaurants stehen mehr als zwei mahlzeiten auf der speisekarte	welche restaurants mehr als zwei mahlzeiten auf der speisekarte haben	welche restaurants hat mehr als zwei gerichte auf der speisekarte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
3sternerestaurant, das reservierungen akzeptiert	3sternerestaurant, das reservierungen akzeptiert	3sternerestaurant nimmt reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string reserve ) ) )
welche restaurants in midtown west liefern	welche restaurants in midtown west liefern	die restaurants in midtown west liefern	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string delivery ) ) )
ein gruppenfreundliches thailändisches restaurant	ein gruppenfreundliches thairestaurant	eine gruppe freundliche thairestaurant	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
restaurant, dessen nachbarschaft midtown west ist und das kreditkarten akzeptiert	restaurant, dessen nachbarschaft midtown west ist und das kreditkarten nimmt	restaurant, deren nachbarschaft midtown west, und das nimmt kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string credit ) ) )
restaurant in der gegend, das ein 2dollarzeichen hat	restaurant in der umgebung, die eine 2dollarzeichenpreisbewertung hat	restaurant in der gegend, hat eine 2dollarzeichenpreis bewertung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ) )
nachbarschaft, die nachbarschaft des restaurants ist, dessen küche thailändisch ist	nachbarschaft, die nachbarschaft von restaurant ist, dessen küche thai ist	nachbarschaft, der nachbarschaft von restaurant, dessen küche ist thai	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ) )
welche restaurants haben höhere preisklassen als zwei oder drei dollar	welche restaurants preisbewertungen haben, die höher als zwei oder drei dollar sind	die restaurants haben preises bewertungen höher als zwei oder drei dollarzeichen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )
restaurants, die gut für kinder sind	restaurants, die gut für kinder sind	restaurants, die gut für kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string kids ) ) )
listen sie alle restaurants mit 3 oder 5 sternen auf	liste aller restaurants mit 3 oder 5 sterne bewertungen	liste aller restaurants, die mit 3oder 5sternebewertungen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )
welche restaurants servieren mittagessen und haben einen essbereich im freien	welche restaurants mittagessen servieren und einen essbereich im freien haben	die restaurants servieren mittagund haben einen essbereich im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string meals ) ( string = ) en.food.lunch ) )
ein restaurant mit kellnerservice	ein restaurant mit kellnerservice	ein restaurant mit kellnerservice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string waiter ) ) )
restaurant mit kellnern	restaurant mit kellnern	restaurant die kellner	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) )
welches restaurant nimmt kreditkarten und ist kinderfreundlich	welches restaurant kreditkarten nimmt und ist kinderfreundlich	was ein restaurant braucht, kreditkarten und ist kinderfreundlich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string kids ) ) )
was ist die sternebewertung des thailändischen cafés	was ist die sternebewertung von thai café	was die sternebewertung von thai cafe	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) )
welche restaurants haben sitzgelegenheiten im freien und akzeptieren kreditkarten	welche restaurants sitzen im freien haben und kreditkarten akzeptieren	welche restaurants haben sitzgelegenheiten im freien und kreditkarten akzeptieren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string credit ) ) )
restaurant, dessen preisklasse 2dollarzeichen ist und das gut für kinder ist	restaurant, dessen preisbewertung 2 dollar zeichen ist und das ist gut für kinder	restaurant, deren preis rating ist mit 2 dollarzeichen und das ist gut für kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string kids ) ) )
restaurants mit einem preis von mehr als 3 dollar	restaurants mit einem preisvon mehr als 3 dollar zeichen	restaurants mit einem preisbewertung mit mehr als 3 dollar zeichen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )
welches restaurant ist gut für kinder und bietet sitzgelegenheiten im freien	welches restaurant ist gut für kinder und bietet sitzgelegenheiten im freien	was das restaurant ist gut für kinder und bietet sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string kids ) ) )
das restaurant in der innenstadt serviert thailändisches essen	das restaurant, das midtown ist, serviert thailändische küche	das restaurant midtown serviert thailändische speisen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
welche restaurants bieten kellnerservice	was restaurants kellnerservice bieten	welche restaurants bieten kellnerservice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) )
liste alle 3 sterne bewerteten thailändischen restaurants auf	liste aller 3 sterne bewerteten thairestaurants	listen sie alle 3sterne thairestaurants	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
welches restaurant bietet sitzgelegenheiten im freien und zum mitnehmen	welches restaurant sitzgelegenheiten im freien bietet	was restaurant bietet sitzgelegenheiten im freien und imbiss	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string outdoor ) ) )
restaurants mit mittagessen und nimmt reservierungen entgegen	restaurants mit mittagessen und nimmt reservierungen	restaurants mit mittagessen und nimmt reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string reserve ) ) )
restaurants, die reservierungen annehmen und kellner haben	restaurants, die reservierungen vornehmen und kellner haben	restaurants, die reservierungen nehmen und kellner	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string waiter ) ) )
ein dreisternerestaurant, das mittagessen serviert	ein dreisternerestaurant, das mittagessen serviert	ein dreisternerestaurant, das zum mittag	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
restaurants mit mehr als einer küche	restaurants mit mehr als einer küche	restaurants, die mehr als eine küche	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( number 2 ) ) )
restaurant, das gut für gruppen ist	restaurant, das gut für gruppen ist	restaurant ist gut für gruppen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) )
hotel, das die mindestanzahl an mahlzeiten serviert	hotel, das die minimale anzahl von mahlzeiten serviert	hotel, das die minimale anzahl von mahlzeiten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( string meals ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
welches restaurant serviert zwei mahlzeiten	welches restaurant zwei mahlzeiten serviert	was restaurant serviert zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurant, dessen sternebewertung die sternebewertung des thailändischen cafés ist	restaurant, dessen sternebewertung die sternebewertung des thaicafés ist	restaurant mit sternesternebewertung ist bewertung thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) )
welche restaurants haben ein preisrating von mindestens zwei oder drei dollar	welche restaurants eine preisbewertung von mindestens zwei oder drei dollarzeichen haben	die restaurants haben eine preisbewertung von mindestens zwei oder drei dollarzeichen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )
welches restaurant serviert die meisten mahlzeiten	welches restaurant die meisten mahlzeiten serviert	was das restaurant serviert die mahlzeiten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( string meals ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
hotel, das den geschmack von kindern trifft und am besten für gruppen geeignet ist	hotel, das den geschmack von kindern passt und das am besten für gruppenessen ist	hotel passt, die den geschmack der kinder und welche ist am besten für die gruppe essen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string groups ) ) )
welche restaurants haben zum mitnehmen und lieferung	welche restaurants takeout und lieferung haben	die restaurants haben takeout und anlieferung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string delivery ) ) )
welches thailändische restaurant nimmt reservierungen entgegen	was thai restaurant nimmt reservierungen	was thairestaurant nimmt reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
restaurants, die zum mitnehmen haben und reservierungen annehmen	restaurants, die takeout haben und reservierungen nehmen	restaurants, die imbissund takereservierung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string reserve ) ) )
ein auslieferndes restaurant mit kellnern	ein lieferrestaurant mit kellnern	eine bereitstellung restaurant mit kellner	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string waiter ) ) )
wie hoch ist die gesamtbewertung aller restaurants?	was ist die gesamtbewertung des sternes aller restaurants	was ist die gesamtsternebewertung aller restaurants	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ) ) )
finden sie ein 3sternerestaurant mit bedienung	finden sie ein 3sternerestaurant mit kellnerservice	finden sie ein 3 sternerestaurant mit kellnerservice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
restaurants mit 5 sternen und niedrigeren preisklassen	restaurants mit 5 sternen und niedrigeren preisbewertungen	restaurants mit 5sterneund unteren preises bewertungen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )
hotel mit einem thailändischen oder italienischen restaurant	hotel mit thailändischem oder italienischem restaurant	hotel mit thailändischen oder italienischen restaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.concat en.cuisine.thai en.cuisine.italian ) ) )
liste alle 3 sterne restaurants auf	liste aller 3 sterne restaurants	listen sie alle 3sternerestaurants	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
welches restaurant serviert die geringste menge an mahlzeiten	welches restaurant die geringste menge an mahlzeiten serviert	was restaurant serviert die wenigsten mahlzeiten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string meals ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
welches restaurant ist in der geringsten anzahl von stadtteilen	welches restaurant in der geringsten anzahl von nachbarschaften ist	was restaurant ist in der geringsten anzahl von nachbarschaften	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( string neighborhood ) ) )
welche mahlzeit wird von weniger als zwei restaurants serviert	welche mahlzeit von weniger als zwei restaurants serviert wird	welches essen wird serviert von weniger als zwei restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
welche restaurants sind gut für gruppen und haben sitzgelegenheiten im freien	welche restaurants sind gut für gruppen und haben sitzgelegenheiten im freien	die restaurants sind gut für gruppen und haben sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string outdoor ) ) )
restaurant mit kellnerservice und einem preis von 2dollarzeichen	restaurant, das kellnerservice hat und dessen preisbewertung 2 dollar zeichen ist	restaurant, kellnerservice und dessen preis rating ist mit 2 dollarzeichen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
was sind die küchen aller 3sternerestaurants	was sind die küchen aller 3sternebewertungsrestaurants	was sind die küchen alle 3sternebewertung restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ) )
restaurants mit einem 2dollarzeichen	restaurants mit einem 2dollarzeichen preisrating	restaurants mit 2 dollarzeichen preis bewertung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
restaurant mit 3 sternen und 3 sternen	restaurant, dessen sternebewertung 3 sterne ist und dessen sternebewertung 3 sterne ist	restaurant mit sternebewertung ist 3 sterne und deren sternebewertung ist 3 sterne	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
was midtown west restaurant bietet reservierungen	was midtown west restaurant bietet reservierungen	was midtown west restaurantreservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
restaurants, die kellner haben und gut für kinder sind	restaurants, die kellner haben und sind gut für kinder	restaurants, die kellner sind gut für kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string kids ) ) )
welche restaurants mit kellnerservice haben lieferung	welche restaurants mit kellnerservice geliefert haben	die restaurants mit kellnerservicelieferung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string delivery ) ) )
was ist die durchschnittliche preisbewertung eines restaurants?	was ist die durchschnittliche preisbewertung eines restaurants	was ist der durchschnittliche preis bewertung eines restaurants	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ) ) )
restaurant mit bedienung und gut für kinder	restaurant, das kellnerservice hat und das ist gut für kinder	restaurant, kellnerservice, und das ist gut für kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string kids ) ) )
familienfreundliche restaurants, in denen sie draußen sitzen können	familienfreundliche restaurants, in denen sie draußen sitzen können	familienfreundliche restaurants, wo man draussen sitzen kann	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string outdoor ) ) )
was ist die nachbarschaft mit den meisten restaurants, die gut für kinder sind	was ist die nachbarschaft mit den meisten restaurants, die gut für kinder sind	was ist der stadtteil mit den meisten restaurants, die sind gut für kinder	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ) )
was midtown west restaurant hat eine 3sternebewertung	welches midtown west restaurant hat eine 3sternebewertung	was midtown west restaurant ist ein 3sternebewertung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
restaurant, das lieferung hat	restaurant, das geliefert wurde	restaurant, lieferung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) )
hotel in der gegend von midtown west, das mittagessen serviert	hotel in der gegend von midtown west, das mittagessen serviert	hotel im viertel midtown west serviert mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
welche küche passt zu der des thailändischen cafés?	welche küche mit der des thaicafés übereinstimmt	die küche mit der des thai cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) en.restaurant.thai_cafe ) ( call SW.reverse ( string cuisine ) ) ( string = ) en.restaurant.thai_cafe ) )
was ist die küche der restaurants mit drei sternen	was ist die küche der restaurants mit dreisternebewertungen	was ist die küche des restaurants mit dreisternebewertungen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ) )
liste alle restaurants mit mindestens 3 sternen auf	liste aller restaurants, die mindestens 3 sterne sind	liste aller restaurants, die mindestens 3 sterne	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )
wie viele verschiedene arten von küchen gibt es?	wie viele verschiedene arten von küchen gibt es	wie viele verschiedene arten von gerichten gibt es	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ) )
in welcher nachbarschaft befindet sich das thailändische café?	welche nachbarschaft ist thai café befindet sich in	was nachbarschaft ist thai cafe befindet sich in	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string neighborhood ) ) )
restaurant mit zwei küchen	restaurant mit zwei küchen	restaurant mit zwei küchen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( number 2 ) ) )
restaurant, dessen preisklasse 2dollarzeichen ist und das auch kreditkarten akzeptiert	restaurant, dessen preisbewertung 2 dollar zeichen ist und auch kreditkarten akzeptieren	restaurant, deren preis rating ist mit 2 dollarzeichen und auch die kreditkarten akzeptieren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
welche mahlzeit serviert der kellner im restaurant?	welche mahlzeit serviert der kellner im restaurant	was essen tut, die kellner servieren im restaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ) )
was sind einige restaurants bewertet 3dollarzeichen oder weniger	was sind einige restaurants mit 3 dollar zeichen oder weniger bewertet	was sind einige restaurants mit 3 dollar zeichen oder weniger	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )
finden sie ein restaurant mit mehr als 3 sternen	finden sie ein restaurant mit mehr als 3 sternen	finden sie ein restaurant mit mehr als 3 sternen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )
welches restaurant ist zum mittagessen geöffnet und ist gut für kinder	welches restaurant zum mittagessen geöffnet ist und gut für kinder ist	was das restaurant ist geöffnet zum mittagund ist gut für kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string kids ) ) )
restaurants preis bewertet 2 dollarzeichen oder weniger	restaurants preis bewertet 2 dollar zeichen oder weniger	restaurants preis rated 2 dollar zeichen oder weniger	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )
welches restaurant verfügt über sitzgelegenheiten im freien und hat eine preisempfehlung von 2 dollar	welches restaurant hat sitzgelegenheiten im freien und hat eine preisbewertung des 2dollarzeichens	was das restaurant verfügt über sitzgelegenheiten im freien und hat einen preis bewertung des 2dollarzeichen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
restaurant, dessen sternebewertung größer als 3 sterne oder 5 sterne ist	restaurant, dessen sternebewertung größer als 3 sterne oder 5 sterne ist	restaurant mit sternebewertung ist größer als 3 sterne oder 5 sterne	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )
welche restaurants akzeptieren kreditkarten?	welche restaurants kreditkarten akzeptieren	welche restaurants akzeptieren kreditkarten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) )
welches restaurant in der nachbarschaft ist gut für eine gruppe von menschen	welches nachbarschaftsrestaurant ist gut für eine gruppe von menschen	die nachbarschaft restaurant ist gut für eine gruppe von menschen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ) )
restaurant, das mittagessen serviert und dessen preisklasse 2dollarzeichen ist	restaurant, das mittagessen serviert und dessen preisbewertung 2 dollar zeichen ist	restaurant, das zum mittagund deren preis rating ist mit 2 dollarzeichen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
restaurants mit weniger als 3 sternen	restaurants mit weniger als 3 sternen	bewertete restaurants weniger als 3 sternen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )
welches restaurant bietet zum mitnehmen	welches restaurant takeout bietet	was restaurant takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string takeout ) ) )
was 3sternerestaurant bietet mittagessen	was 3sternerestaurant bietet mittagessen	was 3sternerestaurant bietet mittag 	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string meals ) ( string = ) en.food.lunch ) )
welche restaurants nehmen reservierungen entgegen?	welche restaurants reservierungen vornehmen	die restaurants nehmen reservierungen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) )
welche restaurants sind kinderfreundlich	welche restaurants kinderfreundlich sind	welche restaurants sind kinderfreundlich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string kids ) ) )
welches restaurant ist kinderfreundlich und nimmt reservierungen entgegen	welches restaurant freundlich zu kindern ist und reservierungen entgegennimmt	das restaurant ist freundlich gegenüber kindern und nimmt reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string reserve ) ) )
was 2dollarzeichen bietet mittagessen	was 2 dollar zeichen bietet mittagessen	was 2 dollarzeichen bietet mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string meals ) ( string = ) en.food.lunch ) )
finden sie ein restaurant mit kellnerservice, das kreditkarten akzeptiert	finden sie einser mit kellnerservice, das kreditkarten nimmt	finden sie ein restaurant mit kellnerservice, die kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string waiter ) ) )
welche restaurants bieten die wenigsten mahlzeiten an?	welche restaurants die geringste anzahl von mahlzeiten servieren	die restaurants servieren die geringste anzahl von mahlzeiten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( string meals ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
restaurant mit lieferservice und thailändischer küche	restaurant, das lieferung hat und dessen küche thai ist	restaurant, lieferund deren küche ist die thai 	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
restaurants, die kreditkarten akzeptieren und kinderfreundlich sind	restaurants, die kreditkarten nehmen und kinderfreundlich sind	restaurants nehmen kreditkarten und sind kinderfreundlich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string kids ) ) )
das hotel bietet einen kellnerservice und sitzgelegenheiten im freien	welches hotel bietet kellnerservice und sitzgelegenheiten im freien	das hotel bietet kellnerserviceund outdoorsitzgelegenheiten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string outdoor ) ) )
welches restaurant ist gut mit gruppen und serviert mittagessen	welches restaurant ist gut mit gruppen und serviert mittagessen	was das restaurant ist gut mit gruppen und mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string meals ) ( string = ) en.food.lunch ) )
liste alle restaurants in midtown west auf	liste alle restaurants in midtown west	liste aller restaurants in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
welches restaurant hat 3 sterne und hat ein 2menü	welches restaurant hat 3 sterne und hat eine 2 menü	was restaurant hat 3 sterne und hat einen 2menü	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
ein restaurant in der nähe vieler stadtteile	ein restaurant in vielen vierteln	ein restaurant, um eine menge von nachbarschaften	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( string neighborhood ) ) )
welche 3sternerestaurants haben sitzgelegenheiten im freien	die 3sternerestaurants haben sitzgelegenheiten im freien	die 3sternerestaurants haben sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
restaurants mit kellnern und essbereichen im freien	restaurants mit kellnern und essbereichen im freien	restaurants, die kellnerund outdooressbereich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string waiter ) ) )
welche restaurants dienen gruppen und akzeptieren kreditkarten	welche restaurants gruppen servieren und kreditkarten akzeptieren	welche restaurants dienen gruppenund kreditkarten akzeptieren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string groups ) ) )
restaurant mit der meisten nachbarschaft	restaurant mit der meisten nachbarschaft	restaurant, dass die meisten in der nachbarschaft	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( string neighborhood ) ) )
küche, die küche der geringsten anzahl von restaurants ist	küche, die küche der geringsten anzahl von restaurant ist	küche, die küche der geringsten anzahl von restaurant	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string cuisine ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
welche restaurants akzeptieren kreditkarten und sind ein guter ort, um mit kindern zu gehen	welche restaurants kreditkarten akzeptieren und gute orte sind, um mit kindern zu gehen	die restaurants akzeptieren kreditkarten und sind gute orte, um mit kindern gehen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string credit ) ) )
welche vorspeisen bietet das café an?	was entrees bietet thai café	was die vorspeisen nicht thai cafe bieten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) )
finden sie ein restaurant mit bedienung	finden sie ein restaurant mit kellnerservice	finden sie ein restaurant mit kellnerservice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) )
welches 3sternerestaurant hat einen preis von 2dollarzeichen	was 3 sterne bewertet restaurant hat eine preisbewertung von 2 dollar zeichen	was 3sternerestaurant hat eine preisbewertung von 2 dollarzeichen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
restaurant mit einem preis von mindestens 2 dollar	restaurant mit mindestens 2 dollar preisbewertung	restaurant mit mindestens einem 2dollarpreis bewertung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )
was ist die sternebewertung des restaurants	was ist die sternebewertung des restaurants	was ist die sternebewertung des restaurants	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ) ) )
küche, die küche des restaurants, das für gruppen gut ist	küche, die küche des restaurants ist, die gut für gruppen ist	küche, die küche des restaurant ist für gruppen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ) )
listen sie alle restaurants auf, die teurer als 2dollarzeichen sind	liste alle restaurants, die teurer als 2 dollar zeichen sind	liste aller restaurants, die sind teurer als 2 dollarzeichen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )
welches restaurant ist gut für kinder und nimmt kreditkarten	welches restaurant ist gut für kinder und nimmt kreditkarten	was das restaurant ist gut für kinder, und sie nimmt kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string credit ) ) )
restaurants, die kreditkarten akzeptieren und mittagessen servieren	restaurants, die kreditkarten nehmen und mittagessen servieren	restaurants nehmen kreditkarten und dienen mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string meals ) ( string = ) en.food.lunch ) )
welche 3 sterne restaurants liefern	was 3sternerestaurants liefern	was 3sternerestaurants zu liefern	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string delivery ) ) )
welches 3sternerestaurant bietet kellnerservice	welches 3sternerestaurant bietet kellnerservice	was 3sternerestaurant bietet kellnerservice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string waiter ) ) )
restaurant, das für gruppen gut ist und das lieferung hat	restaurant, das gut für gruppen ist und das	restaurant ist gut für gruppen hat und die lieferung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string delivery ) ) )
welches restaurant bietet die größte auswahl an gerichten?	welches restaurant bietet die meisten arten von küche	das restaurant bietet die vielfalt der küche	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( string cuisine ) ) )
kein mittagsrestaurant	kein mittagsrestaurant	kein mittagessen restaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string ! = ) en.food.lunch ) )
restaurant, das reservierungsmöglichkeit bietet und mittagessen serviert	restaurant, das reservierungsmöglichkeit bietet und mittagessen serviert	restaurant, die angebote, reservierung, einrichtung und serviert mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string meals ) ( string = ) en.food.lunch ) )
restaurant, das höchstens zwei mahlzeiten serviert	restaurant, das höchstens zwei mahlzeiten serviert	restaurant, maximal zwei mahlzeit	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
welche mahlzeit ist gut für gruppen serviert werden	welche mahlzeit ist gut für gruppen serviert werden	welche mahlzeit ist gut, um bedient zu werden, für gruppen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ) )
ein restaurant mit mindestens 4 sternen	ein restaurant mit einer bewertung von 4 sternen oder höher	ein restaurant, ein 4sterneoder ein höheres rating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )
restaurant, das zum mitnehmen hat und das lieferung hat	restaurant, das takeout hat und das lieferung hat	restaurant, take away und lieferung hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string delivery ) ) )
restaurants, die die gleiche art von essen wie das thaicafé servieren	restaurants, die die gleiche art von essen wie thaicafé servieren	restaurants, die dazu dienen, die gleiche art von nahrung, wie thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) en.restaurant.thai_cafe ) ) )
restaurants mit einem preis von weniger als 2 dollar	restaurants mit preisbewertungen unter 2 dollar zeichen	restaurants mit preises bewertungen mit weniger als 2 dollarzeichen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )
restaurant, das gruppengerichte serviert	restaurant, das gruppenmahlzeiten serviert	restaurant, mahlzeiten gruppe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ) )
restaurants gut für gruppen und kinder	restaurants gut für gruppen und kinder	restaurants gut für gruppen und kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string kids ) ) )
welche restaurants erhielten 3 sterne und servieren mittagessen	welche restaurants erhielten 3 sterne und servieren mittagessen	welche restaurants erhielt 3 sterne und servieren mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
restaurant mit 3 sternen und das ist gut für kinder	restaurant, dessen sternebewertung 3 sterne ist und das ist gut für kinder	restaurant mit sternebewertung ist 3 sterne und das ist gut für kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string kids ) ) )
wie lautet die telefonnummer des restaurants?	was ist die telefonnummer des restaurants	was ist die telefonnummer des restaurants	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurant, dessen nachbarschaft midtown west ist und dessen sternebewertung 3 sterne ist	restaurant, dessen nachbarschaft midtown west ist und dessen sternebewertung 3 sterne ist	restaurant, deren nachbarschaft midtown west und deren sternebewertung ist 3 sterne	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
restaurants, die liefern und kellnerservice haben	restaurants, die liefern und kellnerservice haben	restaurants, die zu liefern und kellnerservice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string waiter ) ) )
restaurants mit 3 sternen, für die reservierungen erforderlich sind	restaurants, deren bewertungen 3 sterne sind und die reservierungen vornehmen	restaurants, deren bewertungen sind 3 sterne und nehmen reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string reserve ) ) )
restaurant mit weniger nachbarschaft	restaurant mit weniger nachbarschaft	restaurant mit kleiner anzahl in der nachbarschaft	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( string neighborhood ) ) )
welche nachbarschaft mit den meisten restaurants	welche nachbarschaft mit den meisten restaurants	in welchem viertel mit den meisten restaurants	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
ein restaurant in midtown west, das kreditkarten akzeptiert	ein restaurant in midtown west, das kreditkarten nimmt	ein restaurant in midtown west, nimmt kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string credit ) ) )
was ist besser eine 3 oder 5 sterne bewertung	was ist besser eine 3 oder eine 5 sterne bewertung	was ist besser, eine 3 oder eine 5 sternebewertung	( call SW.listValue ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) )
familienfreundliche restaurants in midtown west	familienfreundliche restaurants in midtown west	familienfreundliche restaurants in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
restaurant mit 3 oder 5 sternen	restaurant mit einer sternebewertung von 3 sternen oder 5 sternen	restaurant mit sternebewertung ist 3 sterne oder 5 sterne	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) )
hotel, das die sternebewertung des thailändischen cafés hat	hotel, das die sternebewertung von thai café hat	hotel hat die sternebewertung von thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )
welche restaurants haben eine sternebewertung kleiner als 3 sterne	welche restaurants haben eine sternebewertung kleiner als 3 sterne	die restaurants haben ein sternerating kleiner als 3 sterne	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )
midtown west restaurant, das zum mittagessen geöffnet ist	midtown west restaurant, das zum mittagessen geöffnet ist	midtown westrestaurant, das zum mittagessen geöffnet ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string meals ) ( string = ) en.food.lunch ) )
welches restaurant bietet zum mitnehmen und hat reservierungen	welches restaurant takeout anbietet und reservierungen hat	was ein restaurant bietet essen und hat vorbehalte	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string takeout ) ) )
was sind einige restaurants mit 2dollarzeichen oder mehr bewertet	was sind einige restaurants bewertet 2 dollar zeichen oder mehr	was sind einige restaurants bewertet, 2 dollarzeichen oder mehr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )
restaurant, das gut für gruppen und gut für kinder ist	restaurant, das gut für gruppen ist und das ist gut für kinder	restaurant ist gut für das gruppenund das ist gut für kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string kids ) ) )
welche restaurants werden gleich oder besser bewertet als das thailändische cafe	welche restaurants sind gleich oder besser als thaicafé bewertet	die restaurants bewertet werden, die gleich oder besser als thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )
welche restaurants nehmen kreditkarten und bieten kellnerservice an	welche restaurants kreditkarten nehmen und bietet kellnerservice	welche restaurants nehmen kreditkarten und bietet kellnerservice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string credit ) ) )
welche küche wird in nicht mehr als zwei restaurants serviert	welche küche in nicht mehr als zwei restaurants serviert wird	was die küche nicht mehr als zwei restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
welche restaurants haben mindestens 30 oder 40 bewertungen	welche restaurants mindestens 30 oder 40 bewertungen haben	welche restaurants haben mindestens 30 oder 40 bewertungen	( call SW.listValue ( call SW.concat ( number 30 en.review ) ( number 40 en.review ) ) )
restaurants mit kellnern und essbereichen im freien	restaurants mit kellnern und essbereiche im freien	restaurants mit kellnerund outdooressbereich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string outdoor ) ) )
welches restaurant in midtown west hat ein rating von zwei dollarzeichen	welches restaurant in midtown west hat eine bewertung von zwei dollar zeichen	was restaurant in midtown west hat eine bewertung von zwei dollarzeichen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
welche art von mahlzeiten servieren restaurants mit kellnerservice?	welche art von mahlzeiten tun restaurants mit kellnerservice dienen	welche art von mahlzeiten nicht restaurants mit kellnerservice dienen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ) )
die teuersten restaurants	die teuersten restaurants	die meisten teuren restaurants	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string price_rating ) ) ) )
in welcher nachbarschaft gibt es zwei oder weniger restaurants?	welche nachbarschaft zwei oder weniger restaurants hat	in welchem viertel hat zwei oder weniger restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurant, das mittagessen serviert	restaurant, das mittagessen serviert	das restaurant serviert mittagessen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) )
restaurant mit 3 sternen und das ist gut für gruppen	restaurant, dessen sternebewertung 3 sterne ist und das ist gut für gruppen	restaurant mit sternebewertung ist 3 sterne und das ist gut für gruppen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string groups ) ) )
welche mahlzeit serviert das restaurant mit einem 2dollarpreis	welche mahlzeit serviert das restaurant mit einem preis von 2 dollar	welches essen hat das restaurant mit einem 2dollarpreis bewertung dienen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ) )
welche restaurants haben eine bewertung besser als 3 oder 5 sterne	welche restaurants haben eine bewertung besser als 3 oder 5 sterne	welche restaurants haben eine bewertung besser als 3oder 5sterne	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )
welche restaurants haben sowohl sitzgelegenheiten im freien als auch zum mitnehmen	welche restaurants sowohl sitzgelegenheiten im freien als auch takeout haben	welche restaurants haben beide sitzgelegenheiten im freien und imbiss	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string outdoor ) ) )
welche restaurants haben die gleiche preisbewertung oder besser als das thailändische cafe	welche restaurants die gleiche preisbewertung haben oder besser als thaicafé	welche restaurants haben den gleichen preis, bewertung oder besser als thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )
nennen sie ein restaurant, das kein thailändisches essen anbietet	nennen sie ein restaurant, das keine thailändischen speisen anbietet	namen ein restaurant, das nicht bieten thaifood	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string ! = ) en.cuisine.thai ) )
welche art von essen servieren 3sternerestaurants?	welche art von mahlzeit tun 3sternerestaurants servieren	welche art von mahlzeit nicht mehr als 3 sterne restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ) )
wie viele stadtteile gibt es?	wie viele nachbarschaften gibt es	wie viele nachbarschaften gibt es	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ) )
liste alle restaurants ähnlich der küche von thai cafe auf	liste alle restaurants ähnlich der küche des thaicafé	liste aller restaurants, die ähnlich wie die küche der thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string cuisine ) ) ) )
was sind einige thailändische restaurants in midtown west	was sind einige thairestaurants in midtown west	was sind einige thairestaurants in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
welches restaurant bietet zum mitnehmen und ist gut für kinder	welches restaurant takeout bietet und ist gut für kinder	was restaurant takeout und ist gut für kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string takeout ) ) )
restaurants im 2 oder 3dollarbereich	restaurants in der preisspanne von 2 oder 3 dollar	restaurants in der 2 oder 3 dollarzeichen preisklasse	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) )
welche restaurants haben die gleiche sternebewertung wie das thailändische cafe	welche restaurants haben die gleiche sternebewertung wie thai café	die restaurants haben die gleiche sternebewertung als thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) )
welche restaurants servieren zwei mahlzeiten	welche restaurants zwei mahlzeiten servieren	die zwei restaurants servieren mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
welche küche hat die meisten restaurants	welche küche hat die meisten restaurants	welche küche hat die meisten restaurants	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string cuisine ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
wie viele stadtteile gibt es, die restaurants haben	wie viele stadtteile gibt es, die restaurants haben	wie viele nachbarschaften gibt es, die haben restaurants	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ) )
hier finden sie alle thailändischen restaurants	finden sie alle thairestaurants	finden sie alle thairestaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ) )
finden sie ein restaurant, dessen preis mindestens dem thailändischen café entspricht	finden sie ein restaurant mit einer preisbewertung gleich oder weniger als das thaicafé	finden sie ein restaurant mit einem preis rating gleich oder kleiner als die thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )
restaurants mit kellnern, die eine preisbewertung von 2 haben	restaurants mit kellnern, die eine preisbewertung von 2 haben	restaurants mit kellnern, die einen preis habenrating von 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string waiter ) ) )
was ist ein 3sternerestaurant, das kinderfreundlich ist	was ist ein 3sternerestaurant, das kinderfreundlich ist	was ist ein 3sternerestaurant, kinderfreundlich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
restaurants, die teurer sind als das thailändische café	restaurants, die teurer sind als thaicafé	restaurants sind teurer als thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )
restaurant mit lieferservice	restaurant mit lieferservice	restaurant, lieferservice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ) )
restaurants mit 2dollarauszeichnung für kinder	2 dollar signiert bewertet restaurants für kinder	2 dollar unterzeichnet restaurants für kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
restaurants mit 3 sternen bewertet	restaurants mit 3 sternen bewertet	restaurants mit 3 sternen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
welches restaurant ist zum mittagessen geöffnet und enthält sitzgelegenheiten im freien	welches restaurant zum mittagessen geöffnet ist und sitzgelegenheiten im freien enthält	was das restaurant ist zum mittagessen geöffnet und enthält sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string meals ) ( string = ) en.food.lunch ) )
hotel, das im voraus gebucht werden kann und ein preisrating von 2 dollar aufweist	hotel, das im voraus gebucht werden kann, mit einer preisbewertung von 2 dollar zeichen	das hotel kann im voraus gebucht werden, die eine preisbewertung von 2 dollarzeichen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
welches thailändische restaurant hat eine 2dollarbewertung	welches thairestaurant hat eine 2dollarbewertung	das thairestaurant hat eine bewertung 2dollarsign	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
welches hotel bietet lieferservices an?	welches hotel lieferdienste anbietet	das hotel bietet dienstleistungen für die lieferung von	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string delivery ) ) )
welche restaurants haben zum mitnehmen und akzeptieren kreditkarten	welche restaurants kreditkarten erhalten haben und akzeptieren	die restaurants haben takeoutund kreditkarten akzeptieren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string credit ) ) )
hotel mit mindestens 3 sternen	hotel mit einer mindestbewertung von 3 sternen	hotel: mindestens 3 sterne	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )
welche restaurants haben mahlzeiten im freien und sind kinderfreundlich	welche restaurants im freien speisen und kinderfreundlich sind	welche restaurants haben außengastronomie und sind kinderfreundlich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string outdoor ) ) )
was ist das beste restaurant für große gruppen in midtown west	was ist das beste restaurant für große gruppen in midtown west	was ist das beste restaurant für große gruppen in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string groups ) ) )
was für ein gutes kinderrestaurant ist in der midtown west gegend	was gutes kinderrestaurant ist in der midtown west bereich	was gute kinderrestaurant ist in der midtown west gegend	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
welche mahlzeit serviert das restaurant midtown west?	welche mahlzeit serviert das midtown west restaurant	welches essen tut den midtown west restaurant dienen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )
küche, die küche des thailändischen cafés und die küche des thailändischen cafés ist	küche, die küche von thaicafé ist und das ist küche von thaicafé	küche, die küche des thaicafe und das ist die küche des thaicafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) en.restaurant.thai_cafe ) ( call SW.reverse ( string cuisine ) ) ( string = ) en.restaurant.thai_cafe ) )
familienfreundliche restaurants mit kellnern	familienfreundliche restaurants mit kellnern	familienfreundliche restaurants, die kellner	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string kids ) ) )
welche küche bieten 3sternerestaurants an?	welche küche von 3sternerestaurants angeboten wird	was sind die küchen angeboten, die von 3sternerestaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ) )
restaurant in der nachbarschaft von midtown west mit sitzgelegenheiten im freien	restaurant, dessen nachbarschaft midtown west ist und das sitzgelegenheiten im freien hat	restaurant, deren nachbarschaft midtown west und das hat sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string outdoor ) ) )
welche restaurants haben sitzgelegenheiten im freien und akzeptieren kreditkarten	welche restaurants über sitzgelegenheiten im freien verfügen und kreditkarten akzeptieren	die restaurants haben sitzgelegenheiten im freien und kreditkarten akzeptieren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string credit ) ) )
5 sterne oder 3 sterne	5 oder 3 sterne	5 sterne oder 3 sterne	( call SW.listValue ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) )
welche art von mahlzeiten servieren 2dollarrestaurants?	welche art von mahlzeiten tun 2 dollar zeichen bewertet restaurants dienen	welche art von mahlzeiten nicht 2 dollarzeichen bewerteten restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ) )
gesamtbewertung des restaurants mit sternen	gesamtsternbewertung des restaurants	gesamtsternebewertung von restaurant	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ) ) )
welches thailändische restaurant hat lieferung	welches thairestaurant geliefert wird	das thairestaurant hat die lieferung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
in welcher nachbarschaft gibt es nicht mehr als zwei restaurants	welche nachbarschaft hat nicht mehr als zwei restaurants	welche nachbarschaft hat nicht mehr als zwei restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
was ist eine mahlzeit, die vom thailändischen café serviert wird?	was ist eine mahlzeit, die vom thaicafé serviert wird	was ist eine mahlzeit serviert, die von der thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) )
restaurants höher bewertet als thailändisches café	restaurants, die höher bewertet sind als thaicafé	restaurants höher bewertet als thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )
welche restaurants servieren mittagessen?	welche restaurants mittagessen servieren	die restaurants servieren mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string meals ) ( string = ) en.food.lunch ) )
welches restaurant ist kinderfreundlich und nimmt kreditkarten	welches restaurant ist kinderfreundlich und nimmt kreditkarten	was das restaurant ist kinderfreundlich und nimmt kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string credit ) ) )
welches restaurant hat mehr als zwei küchen	welches restaurant mehr als zwei küchen hat	was das restaurant hat mehr als zwei küchen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string >= ) ( number 2 ) ) )
welche restaurants haben kellner und eine preisbewertung von zwei dollar zeichen	welche restaurants kellner und eine preisbewertung von zwei dollarzeichen haben	die restaurants haben die kellner und eine preisbewertung von zwei dollarzeichen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
restaurants, in denen sie draußen sitzen können	restaurants, in denen sie draußen sitzen können	restaurants, wo man draussen sitzen kann	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) )
restaurants, die liefern und zum mittagessen geöffnet sind	restaurants, die liefern und zum mittagessen geöffnet sind	restaurants, die liefern und sind offen für das mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string delivery ) ) )
restaurant mit imbiss in midtown west	restaurant mit takeout in midtown west	restaurant mit imbiss in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
welche nachbarschaft hat weniger als zwei restaurants	welche nachbarschaft hat weniger als zwei restaurants	in welchem viertel hat weniger als zwei restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
welches restaurant ist gut für gruppen und nimmt reservierungen	welches restaurant ist gut für gruppen und nimmt reservierungen	was das restaurant ist für gruppen und nimmt reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string groups ) ) )
in welchem restaurant kann ich reservieren?	welches restaurant kann ich reservierungen vornehmen, die kreditkarten nehmen	was restaurant kann ich machen reservierungen bei, dass nimmt kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string reserve ) ) )
was ist die durchschnittliche preisbewertung eines restaurants?	was ist die durchschnittliche preisbewertung eines restaurants	was ist der durchschnittliche preis bewertung eines restaurants	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ) ) )
in welcher nachbarschaft gibt es zwei restaurants	welche nachbarschaft zwei restaurants enthält	was die nachbarschaft enthält zwei restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
welches restaurant bietet reservierungen und serviert mittagessen	welches restaurant reservierungen anbietet und mittagessen serviert	was restaurantreservierungen und mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string reserve ) ) )
welche restaurants sind gut für kinder und servieren mittagessen	welche restaurants sind gut für kinder und servieren mittagessen	welche restaurants sind gut für kinder und dienen mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string meals ) ( string = ) en.food.lunch ) )
restaurants gut für kinder und hat kellner	restaurants gut für kinder und hat kellner	restaurants gut für kinder und hat kellner	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string waiter ) ) )
restaurants in der preiskategorie mit 2dollarzeichen, die kreditkarten akzeptieren	restaurants in der 2dollarzeichenpreiskategorie, die kreditkarten akzeptieren	restaurants in der 2 dollarzeichen preiskategorie, die kreditkarten akzeptieren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string credit ) ) )
thailändisches restaurant mit 3 sternen	thai restaurant mit 3 sternen bewertung	thai restaurant ist ein 3sternebewertung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
restaurant, dessen nachbarschaft midtown west ist und das reservierungen entgegennimmt	restaurant, dessen nachbarschaft midtown west ist und das reservierungen erfordert	restaurant, deren nachbarschaft midtown west und nimmt reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string reserve ) ) )
ein restaurant mit 2dollarzeichen zum mittagessen	ein restaurant mit 2 dollar zeichen für das mittagessen bewertet	ein restaurant bewertet, 2 dollarzeichen für das mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string meals ) ( string = ) en.food.lunch ) )
welche küche ist mindestens zwei restaurants	welche küche ist mindestens zwei restaurants	welche küche wird auf mindestens zwei restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
welches hotel verfügt über sitzgelegenheiten im freien und bietet einen lieferservice	welches hotel verfügt über sitzgelegenheiten im freien und bietet lieferservice	das hotel verfügt über sitzgelegenheiten im freien einrichtungen und bietet dienstleistungen für die lieferung von	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string outdoor ) ) )
restaurants, die gut für gruppen sind und zum mitnehmen anbieten	restaurants, die gut für gruppen sind und takeout anbieten	restaurants, die sind gut für gruppen und bieten takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string groups ) ) )
welche restaurants haben zum mitnehmen	was restaurants haben takeout	welche restaurants haben takeout	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) )
küche in mindestens 2 restaurants	küche in mindestens 2 restaurants	küche in mindestens 2 restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
midtown west restaurant für viele leute	midtown west restaurant für viele menschen	midtown west restaurant für viele menschen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string groups ) ) )
restaurant mit mindestens 3 oder 5 sternen	restaurant mit einer sternebewertung von mindestens 3 sternen oder 5 sternen	restaurant mit sternebewertung ist mindestens 3 sterne oder 5 sterne	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )
thailändische restaurants, die reservierungen annehmen	thairestaurants, die reservierungen akzeptieren	thairestaurants, die reservierungen annehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
restaurant mit bedienung und reservierungen	restaurant, das kellnerservice hat und das reservierungen erfordert	restaurant, kellnerservice und nimmt reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string reserve ) ) )
was ist das essen in mindestens zwei restaurants serviert	was in mindestens zwei restaurants serviert wird	was ist essen, serviert in mindestens zwei restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurants mit 2dollarbewertung in midtown west	restaurants mit 2 dollar zeichen bewertung in midtown west	restaurants mit 2 dollarzeichen bewertung in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
3sternerestaurants für gruppen	3sternerestaurants, die gruppen einnehmen	3sternerestaurants, takegruppen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
restaurants in midtown west, die zum mitnehmen haben	restaurants in midtown west, die takeout haben	restaurants in midtown west, die takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string takeout ) ) )
restaurants mit einer kleineren sternebewertung als thailändisches café	restaurants mit einer kleineren sternebewertung als thaicafé	restaurants mit einem kleineren sternbewertung als thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )
welche restaurants in midtown west akzeptieren kreditkarten?	welche restaurants in midtown west kreditkarten akzeptieren	die restaurants in midtown west kreditkarten akzeptieren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
restaurants in der nähe des thaicafés	restaurants in der gleichen nachbarschaft wie thai café	restaurants in der gleichen nachbarschaft als thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno ) ) )
nachbarschaft, die nachbarschaft des restaurants, das kellnerservice hat	nachbarschaft, die nachbarschaft des restaurants ist, die kellnerservice hat	nachbarschaft, der nachbarschaft von restaurant, kellnerservice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ) )
restaurant mit lieferung und einem preis von 2 dollar	restaurant, das lieferung hat und dessen preisbewertung 2 dollar zeichen ist	restaurant, lieferund deren preis rating ist mit 2 dollarzeichen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
was midtown west restaurant ist gut für gruppen	was midtown west restaurant ist gut für gruppen	was midtown west restaurant ist gut für gruppen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
welches restaurant hat kellnerservice und nimmt reservierungen	welches restaurant kellnerdienst hat und reservierungen annimmt	das restaurant hat kellner und nimmt reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string reserve ) ) )
restaurant, das reservierungen entgegennimmt und das mittagessen serviert	restaurant, das reservierungen nimmt und das mittagessen serviert	restaurant nimmt reservierungen und serviert mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string meals ) ( string = ) en.food.lunch ) )
restaurants im viertel midtown west mit sitzgelegenheiten im freien	restaurants in der midtown west nachbarschaft mit sitzgelegenheiten im freien	restaurants in der midtown west gegend mit sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string outdoor ) ) )
restaurant, das die geringste anzahl von nachbarschaft hat	restaurant mit der geringsten anzahl von nachbarschaft	restaurant, dass hat die wenigsten nachbarschaft	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( string neighborhood ) ) )
restaurants, die speisen zum mitnehmen anbieten	restaurants, die takeout liefern und anbieten	restaurants, die zu liefern und bieten takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string takeout ) ) )
küche, die küche des restaurants, das reservierungen annimmt	küche, die küche des restaurants ist, die reservierungen nimmt	küche, die küche des restaurant nimmt reservierungen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ) )
was sind die hotels in midtown west oder chelsea	was sind die hotels in midtown west oder chelsea	was sind die hotels in midtown west oder chelsea	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.concat en.neighborhood.midtown_west en.neighborhood.chelsea ) ) )
restaurants mit der gleichen preisklasse wie das thailändische café	restaurants mit der gleichen preisbewertung wie thai café	restaurants mit dem gleichen preis bewertung als thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) )
restaurant mit weniger als zwei gerichten	restaurant, das weniger als zwei küche hat	restaurant, das weniger als zwei küche	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string < ) ( number 2 ) ) )
restaurants mit einem preis über 3dollarzeichen	restaurants mit einer preisbewertung über 3 dollarzeichen	restaurants mit preis bewertung über 3 dollarzeichen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )
ein restaurant mit mindestens 3 sternen, das liefert	ein restaurant mit mindestens 3 sternen, das	ein restaurant bewertet, mindestens 3 sterne, erzielt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string delivery ) ) )
durchschnittliche sternebewertung des restaurants	durchschnittliche sternebewertung des restaurants	durchschnittliche sternebewertung von restaurant	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ) ) )
was ist die küche von restaurants, die kellner haben	was ist die küche von restaurants, die kellner haben	was ist die küche des restaurants, die kellner	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ) )
welches hotel hat die höchste sternebewertung	welches hotel die höchste sternebewertung hat	das hotel hat die höchste sternerating	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string star_rating ) ) ) )
was ist der preis bewertung von thaicafé	was ist die preisbewertung von thai café	was ist der preis, bewertung thai cafe	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) )
welches restaurant hat 3 sterne?	welches restaurant küche hat 3 sterne bewertung	das restaurant s küche hat 3sternebewertung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ) )
welche restaurants bieten mittagessen an?	was restaurants mittagessen anbieten	welche restaurants bieten mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string meals ) ( string = ) en.food.lunch ) )
restaurants mit der gleichen oder einer niedrigeren preisklasse wie das thailändische café	restaurants mit der gleichen oder niedrigeren preisbewertung wie thai café	restaurants mit dem gleichen oder niedrigeren preis bewertung als thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )
restaurants mit bedienung	restaurants mit kellnerservice	restaurants mit kellnerservice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ) )
restaurants mit sitzgelegenheiten im freien, in denen das mittagessen serviert wird	restaurants mit sitzgelegenheiten im freien und servieren mittagessen	restaurants haben sitzgelegenheiten im freien, und mittag 	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string meals ) ( string = ) en.food.lunch ) )
restaurant im viertel midtown west mit 3 sternen	midtown west nachbarschaft restaurant mit 3 sterne bewertungen	midtown west nachbarschaft restaurant mit 3sternebewertungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
restaurant, das gut für kinder ist und reservierungen annimmt	restaurant, das gut für kinder ist und das reservierungen erfordert	restaurant ist gut für kinder und nimmt reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string reserve ) ) )
thailändisches restaurant mit sitzgelegenheiten im freien	thairestaurant mit sitzgelegenheiten im freien	thairestaurant bietet sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
welche restaurants akzeptieren reservierungen?	welche restaurants reservierungen akzeptieren	die restaurants, die reservierungen annehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string reserve ) ) )
welche nachbarschaften haben 3sternerestaurants	welche viertel 3sternerestaurants haben	die stadtteile haben 3sternerestaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ) )
finden sie ein gutes kinderrestaurant, das mittagessen serviert	finden sie ein gutes kinderrestaurant, das mittagessen serviert	suchen sie eine gute kinderrestaurant, das zum mittag	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string kids ) ) )
was 2dollarzeichen restaurant hat sitzgelegenheiten im freien	was 2 dollar zeichen restaurant hat sitzgelegenheiten im freien	was 2 dollarzeichen restaurant verfügt über sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string outdoor ) ) )
welche restaurants haben eine preisbewertung von zwei dollar zeichen und akzeptieren auch kreditkarten	welche restaurants eine preisbewertung von zwei dollarzeichen haben und auch kreditkarten akzeptieren	welche restaurants haben eine preisbewertung von zwei dollarzeichen und auch die kreditkarten akzeptieren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string credit ) ) )
in welcher nachbarschaft gibt es restaurants, die lieferservice anbieten	welche nachbarschaft restaurants enthält, die lieferung anbieten	was die nachbarschaft enthält restaurants, die bieten die lieferung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ) )
restaurants mit bedienung und take away	restaurants mit kellnerservice und takeout	restaurants mit kellnerservice und imbiss	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string takeout ) ) )
welches restaurant bietet mittagessen und lieferung	welches restaurant mittagessen und lieferung anbietet	was das restaurant bietet mittagund lieferbedingungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string delivery ) ) )
restaurant, dessen preisklasse 2dollarzeichen ist und das kreditkarten akzeptiert	restaurant, dessen preisbewertung 2 dollar zeichen ist und das nimmt kreditkarten	restaurant, deren preis rating ist mit 2 dollarzeichen und nimmt kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string credit ) ) )
billigste restaurants	billigste restaurants	günstigsten restaurants	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string price_rating ) ) ) )
restaurant, das kreditkarten akzeptiert und dessen preisklasse 2dollarzeichen ist	restaurant, das kreditkarten nimmt und dessen preisbewertung 2 dollar zeichen ist	restaurant, nimmt kreditkarten und deren preis rating ist mit 2 dollarzeichen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
restaurants mit sitzgelegenheiten im freien, die sich gut für große partys eignen	restaurants mit sitzgelegenheiten im freien und sind gut für große partys	restaurants haben sitzgelegenheiten im freien und sind gut für die großen parteien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string groups ) ) )
welches restaurant in midtown west hat eine 3sternebewertung	welches restaurant in midtown west hat eine 3sterne bewertung	welches restaurant in midtown west verfügt über eine 3star rating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
was ist eine mahlzeit, die von einem restaurant serviert wird, das gruppen beherbergt	was ist eine mahlzeit von einem restaurant serviert, das gruppen beherbergt	was ist eine mahlzeit serviert von einem restaurant, dass platz für gruppen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ) )
restaurants, die kreditkarten und reservierungen akzeptieren	restaurants, die kreditkarten und reservierungen nehmen	restaurants, die etwas auf kredit karten und reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string reserve ) ) )
welche kulinarischen möglichkeiten gibt es unter den gruppenfreundlichen restaurants?	welche küchenoptionen gibt es unter gruppenfreundlichen restaurants	was kücheoptionen gibt es unter gruppe freundliche restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ) )
restaurants, die speisen zum mitnehmen anbieten und reservierungen annehmen	restaurants, die takeout anbieten und reservierungen akzeptieren	gaststätten, take away und reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string takeout ) ) )
welches restaurant nimmt reservierungen entgegen und ist für gruppen geeignet	welches restaurant reservierungen nimmt und für gruppen geeignet ist	das restaurant nimmt reservierungen und ist geeignet für gruppen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string groups ) ) )
thairestaurants mit sitzgelegenheiten im freien	thairestaurants mit sitzgelegenheiten im freien	thairestaurants mit sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
welches restaurant bietet einen kellnerservice und ist gut für gruppen	welches restaurant bietet einen kellnerservice und ist gut für gruppen	was restaurant bietet kellnerservice und ist gut für gruppen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string waiter ) ) )
welches restaurant hat die größte speisekarte	welches restaurant das größte menü hat	was hat das restaurant größte menü	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( string meals ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
restaurant mit bedienung durch den kellner und in der nachbarschaft von midtown west	restaurant, das kellnerservice hat und dessen nachbarschaft midtown westlich ist	restaurant, kellnerservice und dessen nachbarschaft midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
in welchem thailändischen restaurant wird zu mittag gegessen?	was thai restaurant hat mittagessen	was thairestaurant mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
ein restaurant mit lieferung für eine große gruppe	ein restaurant mit lieferung für eine große gruppe	ein restaurant mit lieferung für eine große gruppe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string groups ) ) )
welche art von küche ist am häufigsten	welche küchenart am häufigsten ist	was küche typ ist am häufigsten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string meals ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
finden sie ein restaurant mit sitzgelegenheiten im freien, das kreditkarten akzeptiert	finden sie ein restaurant mit sitzgelegenheiten im freien, das kreditkarten nimmt	finden sie ein restaurant mit sitzgelegenheiten im freien nimmt kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string outdoor ) ) )
welche mahlzeit ist gut für gruppen	welche mahlzeit ist gut für gruppen	welches essen ist gut für gruppen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ) )
für zwei mahlzeiten geöffnet	offen für zwei mahlzeiten	öffnen sie für zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
welche restaurants nehmen kreditkarten	welche restaurants kreditkarten nehmen	die restaurants nehmen kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string credit ) ) )
restaurants mit zwei nachbarschaftsstandorten	restaurants mit zwei nachbarschaftsstandorten	restaurants mit zwei standorten nachbarschaft	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( number 2 ) ) )
restaurant, das reservierungen entgegennimmt	restaurant, das reservierungen nimmt	restaurant nimmt reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string reserve ) ) )
welche restaurants bieten kellnerservice	was restaurants kellnerservice bieten	welche restaurants bieten kellnerservice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ) )
hotel, das die mindeststernebewertung hat	hotel mit der mindestbewertung für sterne	hotel, das die minimumsternebewertung	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string star_rating ) ) ) )
was ist eine mahlzeit von nicht mehr als zwei restaurants serviert	was ist eine mahlzeit von nicht mehr als zwei restaurants serviert	was ist eine mahlzeit um nicht mehr als zwei restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurant, dessen sternebewertung höchstens der sternebewertung des thailändischen cafés entspricht	restaurant, dessen sternebewertung bei den meisten sternebewertung von thai café ist	restaurant mit sternebewertung ist bei den meisten starrating von thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )
was sind einige restaurants mit höchstens 3dollarzeichen bewertet	was sind einige restaurants mit höchstens 3 dollar zeichen bewertet	was sind einige restaurants bewertet bei den meisten 3dollarzeichen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )
welche restaurants servieren mittagessen und sind gut für gruppen	welche restaurants essen servieren und gut für gruppen sind	die restaurants servieren mittagund sind gut für gruppen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string groups ) ) )
thairestaurants mit 3 sternen	thairestaurants mit 3 sternebewertungen	thairestaurants mit 3star bewertungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
was für ein restaurant serviert dasselbe essen wie das thaicafé?	welche art von restaurant serviert das gleiche essen wie thaicafé	welche art von restaurant das gleiche essen wie thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) ) )
restaurants mit bedienung und sitzgelegenheiten im freien	restaurants mit kellnerservice und sitzgelegenheiten im freien	restaurants mit kellnerservice und sitzbereich im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string outdoor ) ) )
welche mahlzeit wird in einem restaurant mit sitzgelegenheiten im freien serviert	welche mahlzeit in einem restaurant mit sitzgelegenheiten im freien serviert wird	welches essen wird serviert in einem restaurant mit sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ) )
30 bewertungen oder 40 bewertungen	30 bewertungen oder 40 bewertungen	30 bewertungen oder 40 bewertungen	( call SW.listValue ( call SW.concat ( number 30 en.review ) ( number 40 en.review ) ) )
mahlzeit, die mehr als zwei restaurant serviert	mahlzeit, die mehr als zwei restaurants servieren	mahlzeit, die mehr als zwei restaurant serviert	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurants mit ähnlicher küche wie das thaicafé	restaurants mit ähnlichem essen wie thai café	restaurants mit ähnlichen lebensmitteln zu thai cafe	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string cuisine ) ) )
welche restaurants haben ein 2dollarzeichen preisklasse und sitzgelegenheiten im freien	welche restaurants haben eine 2dollarzeichenpreisbewertung und sitzgelegenheiten im freien	die restaurants haben eine 2 dollarzeichen ($preis, bewertung und sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
restaurants in midtown west, die zum mitnehmen anbieten	restaurants in midtown west, die takeout anbieten	restaurants in midtown west bieten takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string takeout ) ) )
thailändische restaurants im viertel midtown west	thairestaurants in der midtown west nachbarschaft	thairestaurants in der nachbarschaft midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
liste alle thailändischen restaurants in midtown west auf	liste alle thai restaurants in midtown west	liste mit allen thairestaurants in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
restaurant, das kreditkarten akzeptiert und dessen sternebewertung 3 sterne beträgt	restaurant, das kreditkarten nimmt und dessen sternebewertung 3 sterne ist	restaurant, nimmt kreditkarten und deren sternebewertung ist 3 sterne	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
welche mahlzeiten werden von mehr als zwei restaurants serviert	welche mahlzeiten von mehr als zwei restaurants serviert werden	was die mahlzeiten werden von mehr als zwei restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
in diesen thailändischen restaurants wird das mittagessen serviert	welche thairestaurants mittagessen servieren	die thairestaurants servieren mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
welche küche hat das thailändische cafe nicht	welche küche hat das thaicafé nicht	was die küche der thaicafe nicht haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string ! = ) en.restaurant.thai_cafe ) )
welche mahlzeit wird in mindestens 2 restaurants serviert	welche mahlzeit in mindestens 2 restaurants serviert wird	welches essen serviert wird, in mindestens 2 restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
was midtown west restaurant bietet sitzgelegenheiten im freien	welches midtown west restaurant bietet sitzgelegenheiten im freien	was midtown west restaurant bietet sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string outdoor ) ) )
welche nachbarschaft hat weniger als zwei restaurants	welche nachbarschaft hat weniger als zwei restaurants	in welchem viertel hat weniger als zwei restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
welche nachbarschaften haben restaurants, die mittagessen servieren	welche viertel restaurants haben, die mittagessen servieren	die nachbarschaften haben die restaurants mittagessen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ) )
welche restaurants haben sitzgelegenheiten im freien, die kreditkarten akzeptieren	welche restaurants im freien sitzen, die kreditkarten nehmen	welche restaurants haben sitzgelegenheiten im freien kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string outdoor ) ) )
welches thailändische restaurant hat eine gute sternebewertung	was thairestaurant hat eine gute sternebewertung	was thairestaurant hat eine gute sternebewertung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) )
3sternerestaurant, das zum mitnehmen anbietet	3sternerestaurant mit takeout	3sternerestaurant imbiss	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
welches restaurant nimmt reservierungen entgegen	welches restaurant reservierungen nimmt	was das restaurant nimmt reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string reserve ) ) )
finde ein thailändisches restaurant	finden sie ein thairestaurant	finden sie ein thairestaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
restaurants mit sitzgelegenheiten im freien, für die reservierungen erforderlich sind	restaurants mit sitzgelegenheiten im freien, die reservierungen vornehmen	restaurants mit sitzgelegenheiten im freien nimmt reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string outdoor ) ) )
was ist eine mahlzeit, die von einem restaurant serviert wird, das reservierungen akzeptiert?	was ist eine mahlzeit, die von einem restaurant serviert wird, das reservierungen akzeptiert	was ist eine mahlzeit in einer gaststätte, die akzeptiert reservierungen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ) )
restaurants, die einen höheren preis als das thaicafé haben	restaurants mit einer höheren preisbewertung als thai café	restaurants, die einen größeren preis bewertung als thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )
restaurant in der gegend um midtown west, das lieferservice anbietet	restaurant in der umgebung von midtown west, das lieferdienste anbietet	restaurant in der umgebung midtown west bietet dienstleistungen für die lieferung von	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
nennen sie ein thailändisches restaurant oder café	nennen sie ein thairestaurant oder café	name, ein thai restaurant oder cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string cuisine ) ) ) )
drei sterne restaurants, die liefern	dreisternerestaurants, die	dreisternerestaurants, die liefern	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
in welcher nachbarschaft gibt es die meisten restaurants mit bedienung?	welche nachbarschaft die meisten restaurants enthalten, die kellnerservice haben	was nachbarschaft enthalten die meisten restaurants, die kellnerservice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ) )
restaurant nicht im midtown west bereich	restaurant nicht in der mitte der stadt westbereich	restaurant nicht in der midtown west gegend	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string ! = ) en.neighborhood.midtown_west ) )
restaurant, das gut für kinder ist und kreditkarten akzeptiert	restaurant, das gut für kinder ist und das kreditkarten nimmt	restaurant ist gut für kinder, und das nimmt kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string credit ) ) )
welches restaurant hat 3 sterne und serviert mittagessen	welches restaurant hat 3 sterne und serviert mittagessen	was restaurant hat 3 sterne und bietet mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string meals ) ( string = ) en.food.lunch ) )
liste alle restaurants mit takeout auf	liste aller restaurants, die takeout anbieten	liste alle restaurants mit imbiss	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) )
welches restaurant hat sitzgelegenheiten im freien und eine 2dollarpreisklasse	welches restaurant über sitzgelegenheiten im freien und eine preisbewertung von 2 dollar verfügt	was das restaurant verfügt über sitzgelegenheiten im freien und eine 2dollarpreis bewertung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string outdoor ) ) )
was 2dollarzeichen restaurant enthält zum mitnehmen	was 2 dollar zeichen restaurant enthält takeout	was 2 dollarzeichen restaurant enthält mitnehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
restaurants, die das gleiche essen haben	restaurants, die die gleiche mahlzeit haben	restaurants, die die gleiche mahlzeit	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
welches restaurant hat eine dreisternebewertung und nimmt auch reservierungen entgegen	welches restaurant hat eine dreisternebewertung und nimmt auch reservierungen	das restaurant hat eine dreisternebewertung und nimmt auch reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
welche nachbarschaften haben thailändische restaurants	welche stadtteile thai restaurants haben	die stadtteile haben eine thairestaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ) )
wie lautet die nummer dieser mahlzeit?	wie viel ist die anzahl dieser mahlzeit	was ist die anzahl dieser mahlzeit	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
hotel mit einem preis von 2dollarzeichen oder 3dollarzeichen	hotel mit einem preisrating von 2 dollarzeichen oder 3dollarzeichen	das hotel hat ein preis rating 2 dollarzeichen oder 3dollarzeichen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) )
restaurants mit 2 und niedrigeren preisklasse	restaurants mit 2 und niedrigerer preisbewertung	restaurants mit 2 und niedriger preis bewertung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )
restaurants, die gut für kinder sind und kellner haben	restaurants, die gut für kinder und kellner sind	restaurants, die gut sind für kinder und haben kellner	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string kids ) ) )
anzahl der restaurants	anzahl der restaurants	anzahl der restaurant	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurant mit thailändischer küche	thai küche restaurant	thai küche restaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ) )
restaurant mit takeoutmöglichkeit und sitzgelegenheiten im freien	restaurant, das über die takeoutanlage verfügt und über sitzgelegenheiten im freien verfügt	restaurant, takeout und hat sitzplätze im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string takeout ) ) )
liste alle thailändischen restaurants auf, die takeout anbieten	liste aller thairestaurants, die takeout anbieten	liste mit allen thairestaurants, die bieten takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
was ist eine mahlzeit, die von einem restaurant mit takeawayservice serviert wird?	was ist eine mahlzeit, die von einem restaurant serviert wird, das einen takeoutservice bietet	was ist eine mahlzeit serviert von einem restaurant, imbissservice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ) )
welche restaurants haben zum mitnehmen und sind kinderfreundlich	welche restaurants takeout haben und sind kinderfreundlich	welche restaurants haben essen und sind kinderfreundlich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string kids ) ) )
kinderfreundliches restaurant mit einem preis von 2 dollar	kinderfreundliches restaurant mit einem preis gleich 2 dollar zeichen	kinderfreundliche restaurant mit einem preis in höhe von 2 dollarzeichen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
mindestens 3 sterne restaurants	mindestens 3sternerestaurants	mindestens 3sternerestaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )
restaurants in midtown west	restaurants in midtown west	restaurants in der midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
was ist eine mahlzeit aus einem restaurant mit sitzgelegenheiten im freien	was ist eine mahlzeit aus einem restaurant mit sitzgelegenheiten im freien	was ist eine mahlzeit aus einem restaurant mit sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ) )
thailändisches restaurant, das liefert	thairestaurant, das liefert	thairestaurant, das liefert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
welche küche bieten mehr als zwei restaurants an?	was sind einige küchen von mehr als zwei restaurants angeboten	was sind einige gerichte angeboten, die von mehr als zwei restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurants, die zum mitnehmen und liefern	restaurants, die takeout haben und liefern	restaurants, die imbiss und liefern	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string takeout ) ) )
welche mahlzeit liefert das restaurant?	welche mahlzeit liefert das restaurant	welches essen tut dem restaurant liefern	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ) )
listen sie alle restaurants auf, in denen weniger als zwei mahlzeiten serviert werden	liste aller restaurants, die weniger als zwei mahlzeiten serviert	liste aller restaurants, die dient weniger als zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
dreisternerestaurants in midtown west	dreisternerestaurants in midtown west	dreisternerestaurants in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
was ist die preisbewertung des thailändischen cafés	was ist die preisbewertung des thaicafés	was ist der preis, bewertung thai cafe	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) )
nennen sie ein restaurant in midtown, das kreditkarten akzeptiert	benennen sie ein restaurant in midtown, das kreditkarten akzeptiert	namen ein restaurant in midtown akzeptiert kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string credit ) ) )
restaurants, die kreditkarten liefern und akzeptieren	restaurants, die kreditkarten liefern und akzeptieren	restaurants, die zu liefern und akzeptieren kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string delivery ) ) )
restaurants namens thai cafe oder pizzeria juno	restaurants genannt thai café oder pizzeria juno	restaurants genannt thaicafe oder pizzeria juno	( call SW.listValue ( call SW.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno ) )
restaurants in midtown west mit sitzgelegenheiten im freien	restaurants in midtown west mit sitzgelegenheiten im freien	restaurants in midtown west mit sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string outdoor ) ) )
restaurants mit mindestens zwei küchen	restaurants mit mindestens zwei küchen	restaurants, die mindestens zwei gerichte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string > ) ( number 2 ) ) )
welches restaurant ist kinderfreundlich und hat zum mitnehmen	welches restaurant ist kinderfreundlich und hat takeout	was das restaurant ist kinderfreundlich und hat takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string takeout ) ) )
welches gute gruppenrestaurant nimmt reservierungen entgegen	was gutes gruppenrestaurant nimmt reservierungen	was gute gruppe restaurant nimmt reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string reserve ) ) )
was 2dollarzeichen restaurant nimmt reservierungen	was 2 dollar zeichen restaurant nimmt reservierungen	was 2 dollarzeichen restaurant nimmt reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
in welchem restaurant kann man draußen zu mittag essen?	welches restaurant können sie mittagessen draußen essen bei	was restaurant können sie zu mittag essen draußen an	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string meals ) ( string = ) en.food.lunch ) )
welche thailändischen restaurants haben zum mitnehmen	welche thairestaurants haben takeout	die thairestaurants haben takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
familienfreundliche thailändische restaurants	familienfreundliche thairestaurants	familienfreundliche thairestaurants	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string kids ) ) )
welche restaurants bieten mittagessen und ist gut für gruppen	welche restaurants mittagessen anbieten und ist gut für gruppen	welche restaurants bieten mittagund ist gut für gruppen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string groups ) ) )
ein thailändisches restaurant, das kreditkarten akzeptiert	ein thairestaurant, das kreditkarten nimmt	ein thairestaurant, das nimmt kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string credit ) ) )
was für ein restaurant ist gut für gruppen	welche art von restaurant ist gut für gruppen	welche art von restaurant ist gut für gruppen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ) )
restaurant, das für gruppen geeignet ist und dessen preisklasse 2dollarzeichen ist	restaurant, das gut für gruppen ist und dessen preisbewertung 2 dollar zeichen ist	restaurant ist gut für gruppen und deren preis rating ist mit 2 dollarzeichen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
das hotel verfügt über sitzgelegenheiten im freien und akzeptiert kreditkarten	hotel mit sitzgelegenheiten im freien und kreditkarten	hotel, outdoorsitzgelegenheiten und akzeptiert kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string outdoor ) ) )
welche restaurants bieten reservierungen und haben auch durchführung	welche restaurants reservierungen anbieten und auch	welche restaurants bieten reservierungen und auch carryout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string takeout ) ) )
welche art von mahlzeit wird in diesem café nicht serviert?	welche art von mahlzeit serviert thai café nicht	welche art von mahlzeit keine thai cafe nicht dienen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string ! = ) en.restaurant.thai_cafe ) )
ein gruppenfreundliches restaurant mit sitzgelegenheiten im freien	ein gruppenfreundliches restaurant mit sitzgelegenheiten im freien	eine gruppe freundliche restaurant mit sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string groups ) ) )
welche küche wird in zwei restaurants serviert	welche küche in zwei restaurants serviert wird	was küche genießen sie in zwei restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
welche restaurants haben eine preisbewertung von 2 bis 3 dollar zeichen	welche restaurants eine preisbewertung von 2 bis 3 dollar haben	die restaurants haben eine preisbewertung von 2 bis 3 dollar zeichen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )
was für ein thailändisches restaurant hat lieferung	was thai restaurant hat lieferung	was thairestaurant hat die lieferung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string delivery ) ) )
finden sie 3sterne oder 5sternerestaurant	finden sie 3sterne oder 5sternerestaurant	hier finden sie 3 sterneoder 5sternerestaurant	( call SW.listValue ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) )
thai cuisine restaurant mit 3 sternen	thai küche restaurant mit 3 sterne bewertung	thai cuisinerestaurant mit 3sternebewertung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
welches restaurant hat die geringste anzahl von küchen	welches restaurant die geringste anzahl an küchen hat	was das restaurant hat die kleinste anzahl von gerichten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( string cuisine ) ) )
thaicuisinerestaurant, das mittagessen serviert	thaiküche restaurant, das mittagessen serviert	thai küche restaurant, das mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string meals ) ( string = ) en.food.lunch ) )
restaurants mit einer gemeinsamen mahlzeit	restaurants mit einer gemeinsamen mahlzeit	restaurants mit einem gemeinsamen essen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
welches restaurant serviert küche und nimmt kreditkarten	welches restaurant küche serviert und kreditkarten nimmt	was die restaurantküche und nimmt kreditkarten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ) )
wie lautet die sternebewertung des thailändischen cafés?	was ist die sternebewertung des thaicafés	was ist die sternebewertung der thai cafe	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) )
welche nachbarschaften haben restaurants, die liefern	welche stadtteile restaurants haben, die	die nachbarschaften haben restaurants, die liefern	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ) )
finden sie ein thailändisches restaurant mit einem preis von 2 dollar	finden sie ein thairestaurant mit einem preis von 2 dollar	finden sie ein thairestaurant mit einem 2dollarpreis bewertung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
welches restaurant bietet lieferung und hat kellnerservice	welches restaurant bietet lieferung und hat kellnerservice	was restaurant bietet lieferung und hat kellnerservice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string delivery ) ) )
welches restaurant hat lieferung und ist gut für kinder	welches restaurant hat lieferung und ist gut für kinder	was das restaurant hat die lieferung und ist gut für kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string delivery ) ) )
küche wie das thailändische cafe pizzeria juno	küche wie thai café pizzeria juno	küche wie thaicafe pizzeria juno	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno ) ) )
welche arten von küche gibt es in restaurants mit sitzgelegenheiten im freien?	welche arten von küche gibt es in restaurants mit sitzgelegenheiten im freien	welche art von küche gibt es in restaurants mit sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ) )
nennen sie ein restaurant in mindestens zwei stadtteilen	nennen sie ein restaurant in mindestens zwei vierteln gefunden	namen ein restaurant gefunden in mindestens zwei stadtteilen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string >= ) ( number 2 ) ) )
das restaurant serviert mittagessen und ist gut für kinder	welches restaurant serviert mittagessen und ist gut für kinder	das restaurant serviert mittagund ist gut für kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string kids ) ) )
welche 3sternerestaurants haben kellner	die 3 sterne restaurants kellner haben	die 3sternerestaurants haben die kellner	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string waiter ) ) )
restaurant, dessen nachbarschaft midtown west ist und das mittagessen serviert	restaurant, dessen nachbarschaft midtown west ist und das mittagessen serviert	restaurant, deren nachbarschaft midtown west und serviert mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string meals ) ( string = ) en.food.lunch ) )
hotel in midtown west, das im voraus gebucht werden kann	hotel in midtown west, das im voraus gebucht werden kann	hotel in midtown west, die im voraus gebucht werden kann	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
nachbarschaft, die nachbarschaft des thailändischen cafés ist und die nachbarschaft des thailändischen cafés ist	nachbarschaft, die nachbarschaft von thaicafé ist und das ist nachbarschaft von thaicafé	nachbarschaft, der nachbarschaft von thaicafe und das ist eine nachbarschaft von thai cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.restaurant.thai_cafe ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.restaurant.thai_cafe ) )
welche nachbarschaft hat restaurants, die mittagessen servieren	welche nachbarschaft hat restaurants, die mittagessen servieren	welche nachbarschaft hat restaurants mit mittagessen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ) )
welches restaurant nimmt reservierungen entgegen und ist kinderfreundlich	welches restaurant reservierungen nimmt und ist kinderfreundlich	was das restaurant nimmt reservierungen und ist kinderfreundlich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string kids ) ) )
in welcher nachbarschaft gibt es am wenigsten restaurants?	welche nachbarschaft hat die geringste anzahl an restaurants	welche nachbarschaft hat die wenigsten restaurants	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
was ist der preis bewertung von thaicafé	was ist die preisbewertung von thai café	was ist der preis, bewertung thai cafe	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) )
restaurant, das mittagessen in midtown west serviert	restaurant, das mittagessen in midtown west serviert	das restaurant serviert mittagessen in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
lieferung ist möglich	lieferung ist verfügbar	lieferung ist verfügbar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) )
restaurants, die kreditkarten akzeptieren und im freien servieren	restaurants, die kreditkarten akzeptieren und im freien servieren	restaurants, die kreditkarten akzeptieren, und dienen im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string outdoor ) ) )
thailändische restaurants mit 2dollarbewertung	thai restaurants bewertet 2 dollar zeichen	thairestaurants bewertet, 2 dollarzeichen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
küche wie die des thailändischen cafés	küche wie die des thaicafés	küche wie thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) en.restaurant.thai_cafe ) )
restaurants mit sitzgelegenheiten im freien	restaurants mit sitzgelegenheiten im freien	restaurants haben sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ) )
restaurants, die lieferung haben und kreditkarten annehmen	restaurants, die lieferung haben und kreditkarten nehmen	restaurants, die lieferund kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string credit ) ) )
wie lautet die sternebewertung des thailändischen cafés?	was ist die sternebewertung des thaicafés	was ist die sternebewertung der thai cafe	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) )
restaurants, die kreditkarten mit einem preis von 2 akzeptieren	restaurants, die kreditkarten mit einer preisbewertung von 2	restaurants, die kreditkarten mit einem preisrating von 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
thailändisches restaurant in midtown west	thai restaurant in midtown west	thai restaurant in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
restaurants mit lieferung zum mittagessen	restaurants mit lieferung zum mittagessen	restaurants mit lieferservice für mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string meals ) ( string = ) en.food.lunch ) )
welches restaurant bietet nur eine küche	welches restaurant nur eine küche anbietet	was das restaurant bietet nur eine küche	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string < ) ( number 2 ) ) )
restaurants mit mitnahme für gruppen	restaurants mit takeout für gruppen	restaurants mit imbiss für gruppen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string takeout ) ) )
restaurant, dessen preisklasse 2dollarzeichen ist und das zum mitnehmen hat	restaurant, dessen preisbewertung 2 dollar zeichen ist und das takeout hat	restaurant, deren preis rating ist mit 2 dollarzeichen und das hat takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string takeout ) ) )
welches restaurant hat sitzgelegenheiten im freien und ist gut für kinder	welches restaurant hat sitzgelegenheiten im freien und ist gut für kinder	was das restaurant verfügt über sitzgelegenheiten im freien und ist gut für kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string kids ) ) )
restaurants mit 3 bis 5 sternen bewertet	restaurants mit 3 bis 5 sternen	restaurants bewertet mit 3 von 5 sternen	( call SW.listValue ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) )
was ist eine mahlzeit im thailändischen café serviert	was ist eine mahlzeit im thaicafé serviert	was ist eine mahlzeit in der thai cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) )
restaurant in midtown west für kinder	restaurant in midtown west für kinder	restaurant in midtown west für kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
restaurant, das mittagessen serviert und dessen küche thailändisch ist	restaurant, das mittagessen serviert und dessen küche thai	restaurant, das zum mittagund deren küche ist die thai 	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
restaurant mit nicht mehr als zwei küchen	restaurant mit nicht mehr als zwei küchen	restaurant mit nicht mehr als zwei gerichten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string <= ) ( number 2 ) ) )
thairestaurants mit essbereichen im freien	thairestaurants mit essbereichen im freien	thairestaurants, die outdooressbereich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string outdoor ) ) )
restaurants zwischen den stadtteilen	restaurants zwischen den stadtteilen	restaurants gelegen zwischen den stadtteilen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( number 2 ) ) )
restaurant in midtown west, das gut für gruppen ist	restaurant in midtown west, das gut für gruppen ist	restaurant in midtown west und das ist gut für gruppen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string groups ) ) )
restaurants mit mehr als zwei mahlzeiten	restaurants mit mehr als zwei mahlzeiten	restaurants mit mehr als zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
welche thailändischen restaurants akzeptieren kreditkarten?	welche thairestaurants kreditkarten nehmen	die thairestaurants nehmen kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string credit ) ) )
finde ein restaurant, bei dem ich reservierungen bekommen kann und das ein 2dollarpreisrating hat	finden sie ein restaurant, bei dem ich reservierungen erhalten kann, die eine 2dollarpreisbewertung haben	finden sie ein restaurant, in dem ich bekommen können reservierungen bei, die hat einen 2dollarpreis bewertung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
welches restaurant bietet mittagessen und zum mitnehmen	welches restaurant mittagessen und takeout anbietet	was restaurant bietet mittagessen und imbiss	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string meals ) ( string = ) en.food.lunch ) )
restaurants mit 2 preisklassen, die gruppenfreundlich sind	restaurants mit 2 preisbewertung, die gruppenfreundlich ist	restaurants mit 2 preisbewertung, die gruppe freundlich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
restaurants mit 2dollarbewertung	restaurants mit 2 dollar zeichen bewertung	restaurants mit 2 dollarzeichen bewertung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
in welcher nachbarschaft befindet sich das café nicht?	welche nachbarschaft ist nicht, wo dieses café befindet	die nachbarschaft ist nicht, wo sich das cafe befindet sich	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string ! = ) en.restaurant.thai_cafe ) )
was ist ein 3sternerestaurant, das mittagessen serviert	was ist ein 3sternerestaurant, das mittagessen serviert	was ist ein 3sternerestaurant, das zum mittag	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
restaurants mit 3 sternen und sitzgelegenheiten im freien	restaurants mit 3 sternen mit sitzgelegenheiten im freien	restaurants mit 3 sterne mit sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string outdoor ) ) )
restaurants in der nachbarschaft, die thailändisches café enthalten	restaurants in den vierteln, die thaicafé enthalten	restaurants in den vierteln, die enthalten thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.restaurant.thai_cafe ) ) )
was für ein gutes kinderrestaurant hat lieferung	was gutes kinderrestaurant hat lieferung	was gute kinderrestaurant hat die lieferung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string kids ) ) )
welche nachbarschaft hat ein restaurant, das sitzgelegenheiten im freien enthält	welche nachbarschaft hat ein restaurant, das sitzgelegenheiten im freien enthält	welche nachbarschaft hat ein restaurant, das enthält sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ) )
welche restaurants haben kellner und akzeptieren reservierungen	welche restaurants kellner haben und reservierungen akzeptieren	die restaurants haben die kellner und reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string reserve ) ) )
welches restaurant serviert diese küche?	welches restaurant diese küche serviert	das restaurant serviert ihnen diese küche	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurants mit sitzgelegenheiten im freien und einer preisbewertung	restaurants mit sitzgelegenheiten im freien und einer preisbewertung	restaurants mit sitzgelegenheiten im freien und eine preisbewertung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
welches restaurant hat 2 oder mehr dollarzeichen als preisklasse	welches restaurant 2 oder mehr dollarzeichen als preisbewertung hat	was restaurant hat 2 oder mehr dollarzeichen als seinen preis bewertung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )
restaurant mit take awayservice, das kreditkarten akzeptiert	restaurant mit takeoutservice, der kreditkarten akzeptiert	restaurant mit imbissservice, der akzeptiert kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string takeout ) ) )
liste alle restaurants mit bewertungen über 2 auf	liste aller restaurants, die bewertungen über 2 haben	liste aller restaurants, die bewertungen über 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string ! = ) ( number 2 en.dollar_sign ) ) )
in welcher nachbarschaft gibt es restaurants, die kreditkarten akzeptieren	welche nachbarschaft hat restaurants, die kreditkarten akzeptieren	was nachbarschaft gibt es restaurants, die kreditkarten akzeptieren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ) )
restaurant, das lieferungen und reservierungen durchführt	restaurant, das lieferung und reservierungen macht	restaurant, dauert die lieferung und reservierung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string reserve ) ) )
finden sie ein restaurant in der gleichen nachbarschaft wie das thaicafé	finden sie ein restaurant in der gleichen nachbarschaft wie das thaicafé	suchen sie ein restaurant in der gleichen nachbarschaft als die thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.restaurant.thai_cafe ) ) )
welches restaurant serviert mittagessen für gruppen	welches restaurant serviert mittagessen für gruppen	was restaurant, das mittagessen für gruppen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string groups ) ) )
welche restaurants haben kellner kreditkarten?	welche restaurants, die kellner haben, kreditkarten nehmen	die restaurants, die kellner nehmen kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string credit ) ) )
gruppenfreundliche restaurants in midtown west	gruppenfreundliche restaurants in midtown west	gruppe freundlich restaurants in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
restaurant, dessen preisklasse mehr als 2dollarzeichen oder 3dollarzeichen hat	restaurant, dessen preisbewertung größer als 2 dollar zeichen oder 3 dollar zeichen ist	ein restaurant, dessen preisrating größer als 2 dollarzeichen oder 3dollarzeichen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )
was 2dollarzeichen restaurant bietet mittagessen	was 2 dollar zeichen restaurant bietet mittagessen	was 2 dollarzeichenrestaurant bietet mittag 	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
welches restaurant in der nachbarschaft hat eine 3sternebewertung	welches nachbarschaftsrestaurant hat eine 3sternebewertung	die nachbarschaft restaurant ist ein 3sternebewertung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ) )
welche restaurants servieren mittagessen und haben kellnerservice	welche restaurants mittagessen servieren und kellnerservice haben	die restaurants servieren mittagund kellnerservice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string waiter ) ) )
restaurant, das gut für gruppen ist und zum mitnehmen hat	restaurant, das gut für gruppen ist und das takeout hat	restaurant ist gut für gruppen ist reservierung empfohlen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string takeout ) ) )
welche restaurants servieren weniger als zwei mahlzeiten	welche restaurants weniger als zwei mahlzeiten servieren	die restaurants dienen weniger als zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
was thailändisches restaurant nimmt kreditkarten	was thairestaurant nimmt kreditkarten	was thairestaurant nimmt kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
restaurant, das gut für gruppen ist und reservierungen annimmt	restaurant, das gut für gruppen ist und reservierungen erfordert	restaurant ist gut für gruppen und nimmt reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string reserve ) ) )
restaurant, das zwei mahlzeiten serviert	restaurant, das zwei mahlzeiten serviert	restaurant zwei essen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurant mit 3 bis 5 sternen	restaurant mit 3 bis 5 sternen	restaurant, das mit 3 bis 5 sternen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )
restaurants in midtown west mit bedienung	restaurants in midtown west mit kellnerservice	restaurants in midtown west mit kellnerservice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string waiter ) ) )
liste alle thailändischen oder italienischen restaurants auf	liste aller thailändischen oder italienischen restaurants	liste aller thailändischen oder italienischen restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.concat en.cuisine.thai en.cuisine.italian ) ) )
ein kinderfreundliches restaurant zum mittagessen	ein kinderfreundliches restaurant zum mittagessen	eine kinderfreundliche restaurant für das mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string meals ) ( string = ) en.food.lunch ) )
welches 3sternerestaurant ist gut für kinder	was 3sternerestaurant ist gut für kinder	was 3sternerestaurant ist gut für kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string kids ) ) )
welches restaurant bietet lieferung und nimmt kreditkarte	welches restaurant lieferung anbietet und nimmt kreditkarte	was restaurant bietet lieferung und dauert kreditkarte	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string delivery ) ) )
restaurant in der nachbarschaft von midtown west mit sitzgelegenheiten im freien	restaurant, dessen nachbarschaft midtown west ist und das sitzgelegenheiten im freien hat	restaurant, deren nachbarschaft midtown west und das hat sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string outdoor ) ) )
restaurant in der nachbarschaft von midtown west mit thailändischer küche	restaurant, dessen nachbarschaft midtown west ist und dessen küche thai ist	restaurant, deren nachbarschaft midtown west, und deren küche ist die thai 	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
welches restaurant hat ein 2dollarpreis rating und sitzgelegenheiten im freien	welches restaurant hat eine 2dollarpreisbewertung und sitzgelegenheiten im freien	was das restaurant verfügt über eine 2dollarpreis bewertung und sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string outdoor ) ) )
restaurants, die in der geringsten anzahl von stadtteilen ist	restaurants, die in der geringsten anzahl von nachbarschaften ist	restaurants in der geringsten anzahl von nachbarschaften	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( string neighborhood ) ) )
finden sie ein gutes gruppenrestaurant mit take away	finden sie ein gutes gruppenrestaurant mit takeout	suchen sie eine gute gruppe restaurant mit imbiss	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string takeout ) ) )
welches restaurant heißt kinder willkommen und verfügt über sitzgelegenheiten im freien	welches restaurant kinderempfängt und sitzplätze im freien hat	das restaurant empfängt die kinder und hat sitzplätze im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string kids ) ) )
was für ein thailändisches restaurant hat eine 3sternebewertung	welches thairestaurant hat eine 3sternebewertung	was thairestaurant ist ein 3sternebewertung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
restaurant, das reservierungen entgegennimmt und kellnerservice hat	restaurant, das reservierungen nimmt und der kellnerservice hat	restaurant nimmt reservierungen hat und die kellnerservice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string waiter ) ) )
restaurants mit 3 oder 5 sternen	restaurants mit einer 3 oder 5sternebewertung	restaurants mit 3oder 5sternebewertung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) )
was sind die arten von küche in der midtown west nachbarschaft	was sind die arten von küche in der midtown west nachbarschaft	was sind die arten von küche zur verfügung in der nachbarschaft midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )
restaurants mit kellnern und einem preis von 2 dollar	restaurants, die kellner haben und haben 2 dollar zeichen preisbewertung	restaurants, die kellner und haben 2 dollarzeichen preis bewertung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string waiter ) ) )
restaurant, das weniger als zwei nachbarschaft hat	restaurant, das weniger als zwei nachbarschaft hat	restaurant, das weniger als zwei viertel	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string < ) ( number 2 ) ) )
restaurant, das mittagessen serviert und reservierungen annimmt	restaurant, das mittagessen serviert und das reservierungen erfordert	restaurant, das zum mittagund nimmt reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string reserve ) ) )
restaurants mit mindestens 30 oder 40 bewertungen	restaurants mit mindestens 30 oder 40 bewertungen	restaurants mit mindestens 30 oder 40 bewertungen	( call SW.listValue ( call SW.concat ( number 30 en.review ) ( number 40 en.review ) ) )
dreisternerestaurants, die kreditkarten akzeptieren	dreisternerestaurants, die kreditkarten nehmen	dreisternerestaurants, die kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
restaurants mit sitzgelegenheiten im freien und ist gut für gruppen	restaurants mit sitzgelegenheiten im freien und ist gut für gruppen	restaurants mit sitzgelegenheiten im freien und ist gut für gruppen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string groups ) ) )
was ist eine mahlzeit, die das thailändische café oder die pizzeria juno serviert	was ist eine mahlzeit, die das thaicafé oder pizzeria juno serviert	was ist eine mahlzeit, die die thaicafe oder pizzeria juno serviert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno ) ) )
welches restaurant bietet reservierungen und kreditkarten	welches restaurant reservierungen anbietet und kreditkarten nimmt	was restaurantreservierungen und nimmt kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string credit ) ) )
welche restaurants bieten kellnerservice an und nehmen kreditkarten entgegen	welche restaurants kellnerservice anbieten und kreditkarten nehmen	welche restaurants bieten kellner und nimmt kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string waiter ) ) )
restaurants mit lieferung in midtown west	restaurants mit lieferung in midtown west	restaurants mit lieferung in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string delivery ) ) )
restaurant, dessen sternebewertung größer ist als die sternebewertung des thailändischen cafés	restaurant, dessen sternebewertung größer ist als sternebewertung von thai café	restaurant mit sternebewertung ist größer als sternerating von thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )
restaurants, die reservierungen annehmen	restaurants, die reservierungen akzeptieren	restaurants akzeptieren reservierungen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) )
restaurant mit bedienung und bedienung	restaurant, das kellnerservice hat und das kellnerservice hat	restaurant, kellnerservice und hat die kellnerservice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string waiter ) ) )
welche restaurants mit einem 2dollarpreis bieten zum mitnehmen	welche restaurants mit einem preisvon 2 dollar bieten takeout	die restaurants mit einem 2dollarpreis bewertung bieten takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
restaurant, dessen sternebewertung kleiner als 3 sterne ist	restaurant, dessen sternebewertung kleiner als 3 sterne ist	restaurant mit sternebewertung ist kleiner als 3 sterne	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )
welches essen serviert das 3sternerestaurant?	welche mahlzeit serviert das 3sternerestaurant	welches essen macht das 3sternerestaurant servieren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ) )
restaurants in midtown west mit essbereichen im freien	restaurants in midtown west mit essbereichen im freien	restaurants in midtown west, mit outdooressbereich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
welches restaurant hat 2 menüpunkte und nimmt kreditkarten	welches restaurant hat 2 menüpunkte und nimmt kreditkarten	was restaurant hat 2 menüelemente und nimmt kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string credit ) ) )
welches restaurant mit einem preis von zwei dollar ist ein guter ort für eine gruppe	welches restaurant mit einem preisvon zwei dollar zeichen ist ein guter ort für eine gruppe	was das restaurant mit einem preisbewertung von zwei dollarzeichen ist ein guter ort für eine gruppe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
nachbarschaft mit der geringsten anzahl von restaurants	nachbarschaft mit der geringsten anzahl von restaurants	nachbarschaft mit der geringsten anzahl von restaurants	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
das restaurant serviert mittagessen sowie thailändisches essen	das restaurant serviert mittagessen sowie thaigerichte	das restaurant serviert ihnen mittagsowie thaifood	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string meals ) ( string = ) en.food.lunch ) )
ein 3sternerestaurant, das gut für kinder ist	ein 3sternerestaurant, das gut für kinder ist	ein 3sternerestaurant, das ist gut für kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string kids ) ) )
welches restaurant ist in zwei stadtteilen	welches restaurant ist in zwei vierteln	was das restaurant ist in zwei stadtteile	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( number 2 ) ) )
chelsea oder midtown west	chelsea oder midtown west	chelsea oder midtown west	( call SW.listValue ( call SW.concat en.neighborhood.midtown_west en.neighborhood.chelsea ) )
welches restaurant ist gut für eine gruppe und hat auch kellner	welches restaurant ist gut für eine gruppe und hat auch kellner	das restaurant ist gut für eine gruppe und auch die kellner	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string waiter ) ) )
welche mahlzeit kann man entweder im thailändischen cafe oder in der pizzeria juno bekommen	welche mahlzeit können sie entweder im thaicafé oder in der pizzeria juno bekommen	was essen kann man entweder an der thaicafé oder in der pizzeria juno	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno ) ) )
wie hoch ist der gesamtpreis aller restaurants?	was ist die gesamtpreisbewertung aller restaurants	was ist das gesamtpreisbewertung aller restaurants	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ) ) )
restaurants, die die gleichen mahlzeiten wie das thaicafé servieren	restaurants, die die gleichen mahlzeiten wie thaicafé servieren	die restaurants der gleichen mahlzeiten wie thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) ) )
welches restaurant bietet sitzgelegenheiten im freien und nimmt reservierungen entgegen	welches restaurant sitzgelegenheiten im freien anbietet und reservierungen übernimmt	was restaurant bietet sitzgelegenheiten im freien und nimmt reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string reserve ) ) )
welches restaurant ist in über zwei stadtteilen	welches restaurant ist in über zwei nachbarschaften	was das restaurant ist über zwei nachbarschaften	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string > ) ( number 2 ) ) )
restaurants, die im voraus gebucht werden können und kreditkarten akzeptieren	restaurants, die im voraus gebucht werden können und kreditkarten akzeptiert	restaurants, im voraus gebucht werden kann und akzeptiert kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string credit ) ) )
welche küche nimmt kreditkarten	was küche nimmt kreditkarten	was küche nimmt kreditkarten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ) )
restaurant, das keine 3sternebewertung hat	restaurant, das keine dreisternebewertung hat	restaurant, das nicht haben eines dreisternebewertung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string ! = ) ( number 3 en.star ) ) )
welche restaurants nehmen kreditkarten und haben outdooreinstellungen	welche restaurants kreditkarten nehmen und outdooreinstellungen haben	welche restaurants nehmen kreditkarten und outdooreinstellungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string credit ) ) )
welches restaurant ist gut für kinder und hat lieferung	welches restaurant ist gut für kinder und hat lieferung	was das restaurant ist gut für kinder und hat die lieferung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string kids ) ) )
welches restaurant spricht kinder an und ist gut für gruppen geeignet	welches restaurant kinder anspricht und gut für gruppenessen ist	das restaurant appelliert an kinder und ist gut für die gruppe essen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string kids ) ) )
restaurant mit 3 sternen und einem preis von 2 dollar	restaurant, dessen sternebewertung 3 sterne ist und dessen preisbewertung 2 dollar zeichen ist	restaurant mit sternebewertung ist 3 sterne und deren preis rating ist mit 2 dollarzeichen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
gesamtpreisbewertung des restaurants	gesamtpreisbewertung des restaurants	gesamtpreis bewertung von restaurant	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ) ) )
welche art von mahlzeiten serviert das thailändische café?	welche art von mahlzeiten serviert thai café	welche art von mahlzeiten bedeutet thai cafe servieren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) )
finden sie ein gutes gruppenrestaurant mit bedienung	finden sie ein gutes gruppenrestaurant mit kellnerservice	suchen sie eine gute gruppe restaurant mit kellnerservice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string waiter ) ) )
restaurant mit der meisten küche	restaurant mit den meisten gerichten	restaurant, dass die meisten küche	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( string cuisine ) ) )
was ist die nachbarschaft des restaurants zum mitnehmen	was ist die nachbarschaft des takeoutrestaurants	was ist die nachbarschaft von imbissrestaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ) )
restaurants mit reservierungen und serviert mittagessen	restaurants mit reservierung und serviert mittagessen	restaurants mit reservierung und serviert mittag 	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string meals ) ( string = ) en.food.lunch ) )
welche 3sternerestaurants akzeptieren reservierungen	welche 3sternerestaurants reservierungen akzeptieren	was 3sternerestaurants, die reservierungen annehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string reserve ) ) )
welches thailändische restaurant nimmt kreditkarten	welches thairestaurant kreditkarten nimmt	das thairestaurant nimmt kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
restaurants mit imbiss, die sich gut für große partys eignen	restaurants, die takeout haben, die gut für große partys sind	restaurants, die essen, die sind gut für große parteien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string groups ) ) )
welche restaurants bieten die wenigsten mahlzeiten an?	welche restaurants die geringste anzahl von mahlzeiten servieren	die restaurants servieren die geringste anzahl von mahlzeiten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( string meals ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
restaurant mit sitzgelegenheiten im freien und in der nachbarschaft von midtown west	restaurant, das sitzgelegenheiten im freien hat und dessen nachbarschaft midtown west ist	restaurant, sitzgelegenheiten im freien und deren nachbarschaft midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
welches restaurant ist gut für gruppen und nimmt kreditkarten	welches restaurant ist gut für gruppen und nimmt kreditkarten	was das restaurant ist für gruppen und nimmt kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string groups ) ) )
finden sie ein restaurant zum mitnehmen	finden sie ein takeoutrestaurant	finden sie ein take away restaurant	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string takeout ) ) )
welches restaurant hat weniger als 5 sterne	welches restaurant weniger als 5 sterne hat	was restaurant hat weniger als 5 sterne	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )
restaurant in midtown west, das gut für gruppen ist	restaurant in midtown west, das gut für gruppen ist	restaurant in midtown west, das ist gut für gruppen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
hotel, das mittagessen anbietet und am besten für gruppen geeignet ist	hotel, das mittagessen und am besten für gruppenessen bietet	das hotel bietet das mittagund das am besten für gruppe essen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string meals ) ( string = ) en.food.lunch ) )
restaurant, dessen nachbarschaft midtown west ist und das zum mitnehmen hat	restaurant, dessen nachbarschaft midtown west ist und das takeout hat	restaurant, deren nachbarschaft midtown west und das hat takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string takeout ) ) )
was ist das teuerste restaurant	was ist das teuerste restaurant	was ist das teuerste restaurant	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string price_rating ) ) ) )
was ist das restaurant, das kein mittagessen serviert	was ist das restaurant, das kein mittagessen serviert	was ist das restaurant nicht dienen mittagessen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string ! = ) en.food.lunch ) )
restaurant mit imbiss und bedienung	restaurant, das takeout hat und das kellnerservice hat	restaurant, imbiss und das hat kellnerservice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string waiter ) ) )
restaurants, die mittagessen servieren und reservierungen annehmen	restaurants, die mittagessen servieren, die reservierungen akzeptieren	restaurants mit mittagessen, reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string meals ) ( string = ) en.food.lunch ) )
restaurants in midtown west mit einem essbereich im freien	restaurants in midtown west mit einem essbereich im freien	restaurants in midtown west, die mit ein essbereich im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string outdoor ) ) )
3sternerestaurants, die liefern	3sternerestaurants, die liefern	3star restaurants, die liefern	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
restaurant, dessen preis mindestens 2dollarzeichen oder 3dollarzeichen beträgt	restaurant, dessen preisbewertung mindestens 2 dollar zeichen oder 3 dollar zeichen ist	ein restaurant, dessen preisrating von mindestens 2 dollarzeichen oder 3dollarzeichen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )
was sind einige 3sternethairestaurants	was sind einige 3sternethairestaurants	was sind einige 3sterne thairestaurants	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
welches restaurant hat sowohl sitzgelegenheiten im freien und nimmt reservierungen	welches restaurant sowohl sitzplätze im freien hat als auch reservierungen	das restaurant hat sitzgelegenheiten im freien und nimmt reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string reserve ) ) )
gruppenfreundliche thairestaurants	gruppenfreundliche thairestaurants	gruppe freundliche thairestaurants	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
restaurants in der nachbarschaft von midtown west mit sitzgelegenheiten im freien	restaurants, die in der nachbarschaft von midtown west sind und im freien sitzgelegenheiten haben	restaurants in der nähe von midtown west und haben sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string outdoor ) ) )
restaurants mit 2 sternen oder weniger	restaurants mit 2 sternen oder weniger	restaurants mit 2 sternen oder weniger	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )
welches restaurant ist für kinder zugänglich und hat lieferung	welches restaurant für kinder zugänglich ist und	was restaurant ist offen für kinder und lieferung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string delivery ) ) )
listen sie alle restaurants auf, die billiger als 2dollarzeichen sind	liste alle restaurants, die billiger als 2 dollar zeichen ist	liste aller restaurants, die billiger ist als 2 dollarzeichen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )
in welchem restaurant werden nur zwei oder weniger mahlzeiten serviert?	welches restaurant nur zwei oder weniger mahlzeiten serviert	was restaurant serviert nur zwei oder weniger mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
restaurant, das zum mitnehmen hat und das mittagessen serviert	restaurant, das takeout hat und das mittagessen serviert	restaurant, imbiss und serviert mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string meals ) ( string = ) en.food.lunch ) )
welches restaurant hat kellner und bietet auch zum mitnehmen	welches restaurant kellner hat und auch takeout anbietet	welches restaurant hat der kellner und bietet auch mitnehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string takeout ) ) )
was ist die nachbarschaft des thailändischen restaurants	was ist die nachbarschaft des thairestaurants	was ist die nachbarschaft von der thairestaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ) )
liste alle restaurants auf, die thai cafe nicht ähnlich sind	liste alle restaurants, die nicht ähnlich wie thai café sind	liste aller restaurants, die sind nicht vergleichbar mit thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string ! = ) en.restaurant.thai_cafe ) )
welches restaurant verfügt über sitzgelegenheiten im freien und bietet einen kellnerservice	welches restaurant über sitzgelegenheiten im freien verfügt und einen kellnerservice bietet	was das restaurant verfügt über sitzgelegenheiten im freien und bietet kellnerservice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string waiter ) ) )
restaurants mit weniger als zwei mahlzeiten	restaurants mit weniger als zwei mahlzeiten	restaurants, die weniger als zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
3sternerestaurants und darunter	3 sterne restraunts und unter	3sternerestraunts und unter	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )
restaurant mit bedienung und reservierung	restaurant mit kellnerservice und reservierungen	restaurant mit kellnerservice und reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string waiter ) ) )
finden sie ein restaurant, das kreditkarten akzeptiert	finden sie ein restaurant, das kreditkarten nimmt	finden sie ein restaurant, das nimmt kreditkarten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) )
welche restaurants mit 2 preisklasse haben auch kellnerservice	welche restaurants mit 2 preisbewertung haben auch kellnerservice	welche restaurants mit 2 preisbewertung haben auch kellnerservice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string waiter ) ) )
welches restaurant ist gut für kinder und gruppen	welches restaurant ist gut für kinder und gruppen	was das restaurant ist gut für kinder und gruppen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string groups ) ) )
welches restaurant nimmt kreditkarten in midtown west	welches restaurant nimmt kreditkarten in midtown west bereich	was restaurant nimmt kreditkarten in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
welche 2dollarzeichen restaurants sind in der nachbarschaft von midtown west	was 2 dollar zeichen restaurants sind in der nachbarvon midtown west	was 2 dollarzeichen restaurants werden im nachbarmidtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
restaurants in midtown west, die liefern	restaurants in midtown west, die liefern	restaurants in midtown west liefern	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
restaurants mit der höchsten sternebewertung	restaurants mit höchstem stern	höchsten sternerestaurants	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string star_rating ) ) ) )
liste alle 2dollarzeichen restaurants	liste alle 2 dollar zeichen restaurants	liste aller 2 dollarzeichen, restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
ein thailändisches oder italienisches restaurant	ein thailändisches oder italienisches restaurant	einem thailändischen oder italienischen restaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.concat en.cuisine.thai en.cuisine.italian ) ) )
welche restaurants servieren mindestens zwei mahlzeiten	welche restaurants mindestens zwei mahlzeiten servieren	welche restaurants servieren mindestens zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
restaurant, das gut für gruppen ist und dessen küche thailändisch ist	restaurant, das gut für gruppen ist und dessen küche thai ist	restaurant ist gut für gruppen und deren küche ist die thai 	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
italienisch oder thailändisch	italienisch oder thai	italienisch oder thai	( call SW.listValue ( call SW.concat en.cuisine.thai en.cuisine.italian ) )
küche, die küche des restaurants ist, dessen küche thailändisch ist	küche, die küche des restaurants ist, dessen küche thai ist	küche, die küche des restaurants, dessen küche ist thai	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ) )
restaurants mit takeout und kreditkarten	restaurants mit takeout und nimmt kreditkarten	restaurants mit imbiss und nimmt kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string credit ) ) )
hotel mit mehr als drei sternen	hotel, das mehr als drei sterne bewertet hat	das hotel, das über mehr als ein dreisternebewertung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )
thailändisches café oder pizzeria juno	thai café oder pizzeria juno	thai cafe oder pizzeria juno	( call SW.listValue ( call SW.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno ) )
restaurant, das reservierungen annimmt und das zum mitnehmen hat	restaurant, das reservierungen nimmt und das takeout hat	restaurant nimmt reservierungen und das hat takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string takeout ) ) )
thairestaurants mit imbiss	thairestaurants mit takeout	thairestaurants mit take away	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string takeout ) ) )
restaurants, die reservierungen annehmen und mit 2dollarzeichen bewertet sind	restaurants, die reservierungen nehmen und mit 2 dollar zeichen bewertet werden	restaurants, die reservierungen nehmen und mit 2 dollarzeichen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string reserve ) ) )
welche gleichen mahlzeiten werden in allen anderen restaurants serviert?	welche mahlzeiten alle anderen restaurants servieren	was gleiche essen haben all die anderen restaurants servieren	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string meals ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
was für ein restaurant bietet ein outdoot und take away	welches restaurant bietet einen outdoot und takeout	was das restaurant bietet ein outdoot und imbiss	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string takeout ) ) )
was ist eine mahlzeit, die in einem dreisternerestaurant serviert wird?	was ist eine mahlzeit in einem dreisternerestaurant serviert	was ist eine mahlzeit, serviert auf einem threestar bewerteten restaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ) )
in welchem restaurant kann ich zu mittag essen und mit kreditkarte bezahlen?	welches restaurant kann ich essen mittagessen und bezahlen mit einer kreditkarte	was restaurant kann ich mittag essen und zahlen sie mit einer kreditkarte	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string meals ) ( string = ) en.food.lunch ) )
thairestaurants, die kinderfreundlich sind	thairestaurants, die kinderfreundlich sind	thairestaurants sind kinderfreundlich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
restaurant, dessen küche thailändisch ist und das zum mitnehmen hat	restaurant, dessen küche thai ist und das takeout hat	restaurant, dessen küche ist thai und hat, mitnehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string takeout ) ) )
was 2dollarzeichen restaurant bietet lieferung	was 2 dollar zeichen restaurant bietet lieferung	was 2 dollarzeichen restaurant bietet lieferung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
restaurants, die kreditkarten und zum mitnehmen anbieten	restaurants, die kreditkarten und takeout anbieten	gaststätten, kreditkarten und imbiss	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string takeout ) ) )
welches restaurant ist gut für gruppen und kinder	welches restaurant ist gut für gruppen und kinder	was das restaurant ist gut für gruppen und kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string kids ) ) )
was für ein thailändisches restaurant hat sitzgelegenheiten im freien	welches thairestaurant hat sitzgelegenheiten im freien	was thairestaurant hat sitzplätze im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string outdoor ) ) )
restaurants mit 2dollarzeichen, die reservierungen annehmen	restaurants mit 2 dollar zeichen, die reservierungen nehmen	restaurants rated 2 dollar zeichen, dass reservierungen nehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
welches restaurant gibt es nur in zwei stadtteilen	welches restaurant in nur zwei vierteln zu finden ist	was restaurant finden sie in nur zwei nachbarschaften	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string <= ) ( number 2 ) ) )
welche orte dienen essen, das nicht thailändisch ist	welche orte servieren lebensmittel, die nicht thai ist	was orte, servieren speisen, die nicht thai	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string ! = ) en.restaurant.thai_cafe ) )
welches 2dollarzeichen restaurant ist gut für kinder	was 2 dollar zeichen restaurant ist gut für kinder	was 2 dollarzeichen, das restaurant ist gut für kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string kids ) ) )
gruppenfreundliche restaurants mit 3 sternen	gruppenfreundliche restaurants mit 3 sternen	gruppe von schönen restaurants, die mit 3 sternen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string groups ) ) )
welche mahlzeiten serviert das café?	welche mahlzeiten serviert thai café	was die mahlzeiten nicht thai cafe servieren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) )
welche küche hat das midtown west restaurant?	welche küche hat das midtown west restaurant	welche küche hat das restaurant midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )
welche restaurants sind gut für gruppen und akzeptieren reservierungen	welche restaurants gut für gruppen sind und reservierungen akzeptieren	welche restaurants sind gut für gruppen und reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string reserve ) ) )
welches restaurant hat zwei mahlzeiten	welches restaurant zwei mahlzeiten hat	was das restaurant hat zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
welches restaurant hat zum mitnehmen und ein 2dollarpreisrating	welches restaurant takeout und eine 2dollarpreisbewertung hat	was für restaurant imbiss und eine 2dollarpreis bewertung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string takeout ) ) )
finden sie ein thailändisches oder italienisches restaurant	finden sie ein thailändisches oder italienisches restaurant	finden sie einen thailändischen oder italienischen restaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.concat en.cuisine.thai en.cuisine.italian ) ) )
was thailändisches restaurant lieferservice anbietet	was thai restaurant bietet lieferung	was thairestaurant bietet lieferung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
welches restaurant serviert mittagessen und bietet zum mitnehmen	welches restaurant serviert mittagessen und bietet takeout	was das restaurant serviert mittagund bietet takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string takeout ) ) )
ein thailändisches restaurant in der nachbarschaft von midtown	ein thairestaurant in der innenstadt	ein thairestaurant in midtown	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
restaurant dessen preis bewertung ist preis bewertung von thai cafe	restaurant, dessen preisbewertung die preisbewertung von thai café ist	restaurant, deren preis bewertung preis bewertung thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) )
restaurant für das mittagessen bewertet 2 dollarzeichen	restaurant für mittagessen bewertet 2 dollar zeichen	restaurant für mittagbewerteten 2dollarzeichen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
gruppenfreundliche restaurants	gruppenfreundliche restaurants	gruppe von schönen restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) )
restaurant, das für gruppen geeignet ist und dessen sternebewertung 3 sterne beträgt	restaurant, das gut für gruppen ist und dessen sternebewertung 3 sterne ist	restaurant ist gut für gruppen und deren sternebewertung ist 3 sterne	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
welches restaurant liefert und kellnerservice hat	was restaurant liefert und kellnerservice hat	was restaurant erzielt hat und kellnerservice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string waiter ) ) )
restaurant, das liefert und gut für gruppen ist	restaurant, das liefert und ist gut für gruppen	restaurant, erzielt und ist gut für gruppen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string delivery ) ) )
restaurant, das gut für kinder ist und dessen küche thailändisch ist	restaurant, das gut für kinder ist und dessen küche thai ist	restaurant ist gut für kinder und deren küche ist die thai 	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
wie viele restaurants gibt es?	wie viele restaurants	was ist die zahl der restaurants	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
was sind die nachbarschaften von restaurants, die reservierungen annehmen?	was sind die nachbarschaften von restaurants, die reservierungen nehmen	was sind die nachbarschaften von restaurants, die reservierungen nehmen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ) )
was ist die durchschnittliche sternebewertung aller restaurants	was ist die durchschnittliche sternebewertung aller restaurants	was ist die durchschnittliche sternebewertung aller restaurants	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ) ) )
dreisternerestaurants, die das mittagessen servieren	dreisternerestaurants, die mittagessen servieren	dreisternerestaurants mit mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
restaurants mit einer lieferung mit 2dollarzeichen	restaurants mit lieferung mit 2 dollar zeichen bewertet	restaurants mit lieferservice bewertet 2 dollarzeichen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string delivery ) ) )
welche restaurants sind zwischen 3 und 5 sternen bewertet	welche restaurants werden zwischen 3 und 5 sternen bewertet	die restaurants bewertet werden, zwischen 3 und 5 sternen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )
nennen sie ein hotel mit drei sternen, das für gruppen geeignet ist	nennen sie ein hotel, das eine dreisternebewertung hat und gut für gruppenessen	name eines hotels ein dreisternerating und gute für gruppe essen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string groups ) ) )
welches restaurant hat reservierungen und zum mitnehmen	welches restaurant reservierungen und takeout hat	was restaurantreservierungen und imbiss	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string reserve ) ) )
was für ein gutes kinderrestaurant hat sitzgelegenheiten im freien	was gutes kinderrestaurant hat sitzgelegenheiten im freien	was gute kinderrestaurant verfügt über sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string kids ) ) )
welche restaurants haben weniger als 3 sterne	welche restaurants weniger als 3 sterne bewerten	welche restaurants haben weniger als ein 3sternebewertung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string ! = ) ( number 3 en.star ) ) )
welche mahlzeit wird in den meisten restaurants serviert	welche mahlzeit in den meisten restaurants serviert wird	welches essen serviert wird, in den meisten restaurants	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string meals ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurant, das gut für gruppen ist und das mittagessen serviert	restaurant, das gut für gruppen ist und das mittagessen serviert	restaurant ist gut für gruppen und serviert mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string meals ) ( string = ) en.food.lunch ) )
welches restaurant bietet take away und lieferung	welches restaurant takeout und lieferung anbietet	was das restaurant bietet take away und lieferung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string takeout ) ) )
gruppenfreundliche restaurants, die reservierungen annehmen	gruppenfreundliche restaurants, die reservierungen akzeptieren	gruppe von schönen restaurants, die reservierungen annehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string groups ) ) )
welches restaurant in midtown west verfügt über sitzgelegenheiten im freien	welches restaurant in midtown west über sitzgelegenheiten im freien verfügt	welches restaurant in midtown west verfügt über sitzgelegenheiten im freien zur verfügung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
restaurants, die die gleiche küche servieren	restaurants, die die gleiche küche servieren	restaurants, die dazu dienen, die gleiche küche	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
welche restaurants in midtown west haben ein preisrating von 2 dollar	welche midtown west restaurants haben eine preisbewertung von 2 dollar zeichen	was midtown west restaurants haben eine preisbewertung von 2 dollarzeichen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
was ist der preis bewertung von thaicafé	was ist die preisbewertung von thai café	was ist der preis, bewertung thai cafe	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) )
küche, die küche des restaurants, das kreditkarten akzeptiert	küche, die küche des restaurants ist, die kreditkarten nimmt	küche, die küche des restaurants, das nimmt kreditkarten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ) )
welche nachbarschaft hat die wenigsten restaurants	welche nachbarschaft hat die wenigsten restaurants	welche nachbarschaft hat die wenigsten restaurants	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
welche restaurants beherbergen gruppen?	welche restaurants gruppen unterbringen	welche restaurants für gruppen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) )
restaurant in der nähe des thailändischen cafés	restaurant in der nähe von thaicafé	restaurant ist in der nähe von thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string neighborhood ) ) ) )
was für ein restaurant bietet sitzgelegenheiten im freien	welche art von restaurant bietet sitzgelegenheiten im freien	was für eine art restaurant bietet sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ) )
welche restaurants servieren mindestens zwei küchen	welche restaurants mindestens zwei küchen servieren	welche restaurants werden mindestens zwei gerichte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string >= ) ( number 2 ) ) )
eine nachbarschaft ähnlich wie thaicafés	ein viertel ähnlich thai cafés	eine nachbarschaft ähnlich wie thaicafés	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.restaurant.thai_cafe ) )
welches restaurant hat über zwei küchen	welches restaurant hat über zwei küchen	was das restaurant verfügt über zwei küchen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string > ) ( number 2 ) ) )
welches restaurant hat weniger als ein 2dollarpreis rating	welches restaurant weniger als 2 dollar preisbewertung hat	was restaurant hat weniger als 2 dollarpreis bewertung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )
ein restaurant mit vielen mahlzeiten	ein restaurant mit vielen mahlzeiten	ein restaurant mit eine menge von mahlzeiten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( string meals ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
welche mahlzeit serviert das restaurant zum mittagessen?	welche mahlzeit serviert das restaurant zum mittagessen	welches essen tut dem restaurant servieren zum mittag	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ) )
finden sie ein thailändisches restaurant mit sitzgelegenheiten im freien	finden sie ein thairestaurant mit sitzgelegenheiten im freien	finden sie ein thairestaurant mit sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
restaurant mit bedienung und lieferung	restaurant, das kellnerservice hat und das lieferung hat	restaurant, kellnerservice und lieferung hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string delivery ) ) )
welches restaurant ist gut für gruppen und hat kellnerservice	welches restaurant ist gut für gruppen und hat kellnerservice	was das restaurant ist für gruppen und hat die kellnerservice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string groups ) ) )
restaurants mit essen nicht wie thai cafe	restaurants mit essen nicht wie thaicafé	restaurants mit essen nicht wie thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string ! = ) en.restaurant.thai_cafe ) )
was gibt es für restaurants, in denen außer thaiküche auch andere gerichte serviert werden?	was sind einige restaurants, die jede küche außer thai	was sind einige der restaurants, der küche, außer thai	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string ! = ) en.cuisine.thai ) )
was midtown west restaurant nimmt kreditkarten	was midtown west restaurant nimmt kreditkarten	was midtown west restaurant nimmt kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string credit ) ) )
welche küche wird in nur zwei restaurants gezeigt	welche küche nur in zwei restaurants gezeigt wird	was wird die küche gezeigt, in nur zwei restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
welche küche gibt es in mehr als zwei restaurants?	welche küche in mehr als zwei restaurants vorhanden ist	was küche vorhanden ist, bei mehr als zwei restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurant mit einem preis gleich thai cafe	restaurant mit einer preisbewertung gleich thai café	restaurant mit einem preis bewertung gleich thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) )
nachbarschaft mit restaurants, die das mittagessen servieren	nachbarschaft mit restaurants, die mittagessen servieren	nachbarschaft mit restaurants mittagessen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ) )
was ist die küche des restaurants, das gruppenessen hat	was ist die küche des restaurants, das gruppenessen hat	was ist die küche von dem restaurant, gruppe essen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ) )
restaurants mit nicht mehr als 2 standorten	restaurants mit nicht mehr als 2 standorten	restaurants mit mehr als 2 standorten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string <= ) ( number 2 ) ) )
hat ein rating von 2 oder 3 dollar	hat ein 2 oder 3dollarzeichenrating	hat eine 2oder 3dollarzeichenrating	( call SW.listValue ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) )
finden sie ein 3sternerestaurant	finden sie ein 3sternerestaurant	finden sie ein 3 sternerestaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
welche restaurants kredit nehmen und eine gruppe unterbringen können	welche restaurants kredit nehmen und eine gruppe unterbringen können	die restaurants nehmen kreditkarten und bietet platz für eine gruppe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string groups ) ) )
was ist die nachbarschaft des restaurants, das eine preisbewertung von 2 dollarzeichen hat	was ist die nachbarschaft des restaurants, die eine preisbewertung von 2 dollar zeichen hat	was ist die nachbarschaft des restaurant, das eine preisbewertung von 2 dollarzeichen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ) )
restaurants in midtown west, die zum mitnehmen haben	restaurants in midtown west, die takeout haben	restaurants in midtown west, die takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string takeout ) ) )
hotel, das eine höhere sternebewertung als thailändisches café hat	hotel mit höherer sternebewertung als thaicafé	das hotel hat eine höhere sternebewertung als thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )
nennen sie einige thailändische restaurants, die für gruppen geeignet sind	nennen sie einige thairestaurants für gruppenessen gedacht	nennen sie einige thairestaurants bedeutete für die gruppe essen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
welches restaurant bietet die wenigsten arten von küche	welches restaurant die wenigsten arten von küche anbietet	das restaurant bietet die wenigsten arten von küche	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( string cuisine ) ) )
welches restaurant serviert das gleiche essen wie das thaicafé	welches restaurant das gleiche essen serviert wie das thaicafé	was restaurant das gleiche essen wie die thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) ) )
welche art von mahlzeiten werden in den restaurants in midtown west serviert?	welche mahlzeiten in den restaurants in midtown west serviert werden	welche gerichte werden in den restaurants in midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )
welche küche bieten restaurants mit sitzgelegenheiten im freien?	welche küche von restaurants angeboten werden, die sitzgelegenheiten im freien haben	was für gerichte werden angeboten durch die restaurants haben sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ) )
welche mahlzeit serviert das thailändische restaurant?	welche mahlzeit serviert das thairestaurant	was essen tut, das thairestaurant dienen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ) )
preisgünstige restaurants mit sitzgelegenheiten im freien	preisgünstige restaurants mit sitzgelegenheiten im freien	preiswerten restaurants haben sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string outdoor ) ) )
welche restaurants bieten das essen gut für kinder	was restaurants liefern, die essen gut für kinder servieren	was die restaurants zu liefern, die dazu dienen, lebensmittel gut für kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string delivery ) ) )
restaurants zum mittagessen für kinder	restaurants zum mittagessen für kinder	restaurants für das mittagessen für kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string meals ) ( string = ) en.food.lunch ) )
mahlzeit nicht von thailändischen café serviert	mahlzeit nicht von thai café serviert	essen nicht serviert thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string ! = ) en.restaurant.thai_cafe ) )
restaurants lage	lage der restaurants	restaurants lage	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string > ) ( number 2 ) ) )
restaurants mindestens mit einer 2dollarbewertung	restaurants mindestens mit einem preisvon 2 dollar	restaurants mindestens mit einem 2dollarpreis bewertung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )
ein gruppenfreundliches restaurant mit mittleren preisen	ein gruppenfreundliches restaurant, das mittelpreisig ist	eine gruppe freundliche restaurant, mittlere preisklasse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string groups ) ) )
welches 3sternerestaurant hat zum mitnehmen	das 3sterne restaurant hat takeoutservice	die 3star restaurant takeout service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string takeout ) ) )
welche nachbarschaft hat die meisten restaurants, die gut für gruppen sind	welche nachbarschaft hat die meisten restaurants, die gut für gruppen sind	in welchem viertel die meisten restaurants, die sich gut für gruppen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ) )
was ist eine mahlzeit, die von einem restaurant serviert wird, das kreditkarten akzeptiert?	was ist eine mahlzeit, die von einem restaurant serviert wird, das kreditkarten akzeptiert	was ist eine mahlzeit in einer gaststätte, die akzeptiert kreditkarten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ) )
welche restaurants haben kellner und bieten zum mitnehmen	welche restaurants kellner haben und takeout anbieten	die restaurants haben die kellner und bieten takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string waiter ) ) )
das dreisternerestaurant hat essen zum mitnehmen	das dreisternerestaurant hat takeoutessen	das dreisternerestaurant takeout essen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
welche restaurants sind gut für gruppen und kinder	welche restaurants sind gut für gruppen und kinder	welche restaurants sind beide gut für gruppen und kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string groups ) ) )
das 3 sterne restaurant ist gut für gruppen	das 3sternerestaurant ist gut für gruppen	das 3sternerestaurant für gruppen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
restaurants, die sitzgelegenheiten im freien haben und die liefern	restaurants, die sitzgelegenheiten im freien haben und	restaurants haben sitzgelegenheiten im freien und liefern	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string delivery ) ) )
restaurants, die kreditkarten akzeptieren und zum mitnehmen anbieten	restaurants, die kreditkarten akzeptieren und takeout anbieten	restaurants, die kreditkarten akzeptieren, und bieten takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string credit ) ) )
welches restaurant hat ein preisrating von zwei dollarzeichen und sitzgelegenheiten im freien	welches restaurant hat eine preisbewertung von zwei dollarschildern und hat sitzgelegenheiten im freien	das restaurant hat einen preis bewertung von zwei dollarzeichen und hat sitzplätze im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string outdoor ) ) )
restaurants, die reservierungen annehmen und gut für kinder sind	restaurants, die reservierungen nehmen und sind gut für kinder	restaurants, die reservierungen nehmen und sind gut für kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string kids ) ) )
listen sie alle restaurants mit mindestens 3 oder 5 sternen auf	liste aller restaurants mit mindestens 3sterne oder 5sternebewertungen	liste aller restaurants, die haben mindestens 3sterne oder 5sternebewertungen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) )
was ist eine mahlzeit, die ein restaurant, das zum mittagessen geöffnet ist, serviert	was ist eine mahlzeit, die ein restaurant, das zum mittagessen geöffnet ist serviert	was ist eine mahlzeit, die ein restaurant, das mittagessen wird serviert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ) )
restaurants für gruppen mit lieferung	restaurants für gruppen mit lieferung	restaurants für gruppen mit lieferung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string delivery ) ) )
welche küche bieten restaurants zum mitnehmen an?	welche küche von restaurants angeboten wird, die takeout anbieten	was für gerichte werden angeboten von gaststätten, imbiss	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ) )
in welcher nachbarschaft befindet sich das thailändische café?	welche nachbarschaft ist das thaicafé in	was nachbarschaft ist die thaicafe in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.restaurant.thai_cafe ) )
restaurants öffnen für mindestens zwei mahlzeiten pro tag	restaurants für mindestens zwei mahlzeiten pro tag geöffnet	restaurants für mindestens zwei mahlzeiten pro tag	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
thailändisches restaurant, das reservierungen entgegennimmt	thairestaurant, das reservierungen nimmt	thai restaurant nimmt reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string reserve ) ) )
dreisternerestaurants, die kreditkarten akzeptieren	dreisternerestaurants, die kreditkarten akzeptieren	dreisternerestaurants, die kreditkarten akzeptieren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string credit ) ) )
restaurant mit außenbestuhlung	restaurant, das außensitze liefert und anbietet	restaurant, erzielt und bietet sitzplätze draußen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string outdoor ) ) )
welche küche hat das restaurant mit reservierungen	welche küche hat das restaurant mit reservierungen	was die küche der restaurantmit reservierung haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ) )
restaurant mit sitzgelegenheiten im freien und einem preis von 2 dollar	restaurant mit sitzgelegenheiten im freien und deren preisbewertung 2 dollar zeichen	restaurant, sitzgelegenheiten im freien und deren preis rating ist mit 2 dollarzeichen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
welche restaurants nehmen kreditkarten und haben sitzgelegenheiten im freien	was resturanten kreditkarten nehmen und sitzgelegenheiten im freien haben	welche restaurants nehmen kreditkarten und haben sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string outdoor ) ) )
welche 3 sterne restaurants haben auch kellner	welche 3sternerestaurants auch kellner haben	was 3star restaurants haben auch kellner	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string waiter ) ) )
finden sie ein 3sternerestaurant oder weniger	finden sie ein 3 oder weniger sterne restaurant	finden sie eine 3 oder weniger sterne restaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )
mittags geöffnete restaurants, in denen kreditkarten akzeptiert werden	restaurants zum mittagessen geöffnet, die kreditkarten nehmen	restaurants zum mittagessen geöffnet, die nehmen kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string meals ) ( string = ) en.food.lunch ) )
welche restaurants bieten kellnerservice und zum mitnehmen	welche restaurants kellnerservice und takeout anbieten	welche restaurants bieten kellnerservice und imbiss	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string waiter ) ) )
restaurants, die gut für kinder sind und zum mitnehmen anbieten	restaurants, die gut für kinder sind und takeout anbieten	restaurants, die gut sind für kinder und bieten takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string kids ) ) )
welches restaurant hat ein preisrating von zwei dollarzeichen und hat kellner	welches restaurant hat eine preisbewertung von zwei dollarzeichen und hat kellner	das restaurant hat einen preis bewertung von zwei dollarzeichen und hat die kellner	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string waiter ) ) )
das thailändische restaurant akzeptiert kreditkarten	das thairestaurant nimmt kreditkarten	das thairestaurant nimmt kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string credit ) ) )
welche restaurants akzeptieren kreditkarten zur zahlung und haben auch einen takeoutservice	welche restaurants kreditkarten zur zahlung akzeptieren und auch takeoutservice haben	die restaurants akzeptieren kreditkarten und haben auch take awayservice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string takeout ) ) )
ein kinderfreundliches restaurant mit sitzgelegenheiten im freien	ein kinderfreundliches restaurant mit sitzgelegenheiten im freien	eine kinderfreundliche restaurant mit sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string outdoor ) ) )
restaurants mit 3 sternen in midtown west	restaurants mit 3 sternen in midtown west	restaurants mit 3 sterne in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
welches restaurant ist gut für gruppen	welches restaurant ist gut für gruppenessen	das restaurant ist gut für die gruppe essen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ) )
welches restaurant zum mitnehmen hat sitzgelegenheiten im freien	welches takeoutrestaurant über sitzgelegenheiten im freien verfügt	was takeoutrestaurant verfügt über sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string takeout ) ) )
ein restaurant, das kein thai serviert	ein restaurant, das nicht thai serviert	ein restaurant, nicht dienen thai	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string ! = ) en.cuisine.thai ) )
was ist die küche der meisten restaurants	was ist die küche der meisten restaurants	was ist die küche der meisten restaurants	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string cuisine ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurant, das einzigartige mahlzeiten serviert	restaurant, das einzigartige mahlzeiten serviert	restaurant serviert einzigartige speisen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurants, die das mittagessen anbieten und servieren	restaurants, die mittagessen liefern und servieren	restaurants, liefern und servieren mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string meals ) ( string = ) en.food.lunch ) )
bereich, der die mindestanzahl von restaurants hat	bereich mit der mindestanzahl an restaurants	bereich, der die minimale anzahl von restaurants	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
in welchen nachbarschaften ist thai cafe nicht	welche viertel ist thai café nicht in	die nachbarschaften ist die thaicafé nicht in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string ! = ) en.restaurant.thai_cafe ) )
welche nachbarschaften haben mindestens zwei restaurants	welche stadtteile haben mindestens zwei restaurants	welche stadtteile haben mindestens zwei restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurants in der nachbarschaft von midtown west mit einem 2dollarzeichen	restaurants in der midtown west nachbarschaft, die eine 2 dollar zeichen preisbewertung haben	restaurants in der midtown west gegend, die haben einen 2dollarzeichenpreis bewertung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
restaurants mit mindestens 3 sternen	restaurants mit mindestens 3 sternen bewertung	restaurants mit mindestens 3 sternen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )
restaurant, das gut für kinder ist und das zum mitnehmen hat	restaurant, das gut für kinder ist und das takeout hat	restaurant ist gut für kinder, und das hat takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string takeout ) ) )
restaurants mit 2 preisklassen, die mittagessen servieren	restaurants mit 2 preisleistungshotels, die mittagessen servieren	restaurants mit 2 preisbewertung, die dazu dienen mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string meals ) ( string = ) en.food.lunch ) )
welche küche wird von mehr als einem restaurant angeboten?	welche küche von mehr als einem restaurant angeboten wird	was für gerichte werden angeboten durch mehr als ein restaurant	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurants mit 3 sternen und sitzgelegenheiten im freien	restaurants mit 3 sternen und sitzgelegenheiten im freien	restaurants bewertet mit 3 sternen und haben sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string outdoor ) ) )
welche restaurants servieren mittagessen und haben eine 2dollarpreisbewertung	welche restaurants essen servieren und eine 2dollarzeichenpreisbewertung haben	die restaurants servieren mittagund haben einen 2dollarzeichenpreis bewertung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
welche art von küche gibt es in den restaurants, die das mittagessen servieren?	welche art von küche ist in den restaurants zu finden, die mittagessen servieren	welche art der küche wird in den restaurants mit mittagessen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ) )
restaurants, die für gruppen geeignet sind und im voraus gebucht werden können	restaurants, die gut für gruppenessen sind und im voraus gebucht werden können	restaurants, die gut für die gruppe, die restaurants und das können im voraus gebucht werden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string reserve ) ) )
was sind einige restaurants, die nicht thailändisch dienen	was sind einige restaurants, die nicht thai serviert	was sind einige restaurants, die nicht dienen thai	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string ! = ) en.cuisine.thai ) )
welches restaurant hat die niedrigste sternebewertung?	welches restaurant die niedrigste sternebewertung hat	welches restaurant hat die niedrigsten sternebewertung	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string star_rating ) ) ) )
thairestaurants, die liefern	thairestaurants, die liefern	thairestaurants, die liefern	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string delivery ) ) )
was ist die küche der meisten restaurants	was ist die küche der meisten restaurants	was ist die küche der meisten restaurants	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string cuisine ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
welches 3sternerestaurant hat sitzgelegenheiten im freien	welches 3sternerestaurant hat sitzgelegenheiten im freien	was 3sternerestaurant hat sitzplätze im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string outdoor ) ) )
welche restaurants haben mehr als zwei arten von küche	welche restaurants mehr als zwei arten von küche haben	welche restaurants haben mehr als zwei arten von küche	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string > ) ( number 2 ) ) )
wie hoch ist die gesamtbewertung aller restaurants?	was ist die gesamtbewertung des sternes aller restaurants	was ist die gesamtsternebewertung aller restaurants	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ) ) )
welche nachbarschaft hat restaurants, die sitzgelegenheiten im freien bieten	welche nachbarschaft hat restaurants, die sitzgelegenheiten im freien bieten	die nachbarschaft hat restaurants mit sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ) )
was ist eine mahlzeit, die von einem restaurant in midtown west serviert wird?	was ist eine mahlzeit von einem restaurant in midtown west serviert	was ist eine mahlzeit serviert von einem restaurant in midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )
restaurant, das mittag oder abendessen serviert	restaurant, das mittag oder abendessen serviert	restaurant, das zum mittagoder abendessen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) ( call SW.concat en.food.lunch en.food.dinner ) ) )
welche restaurants haben preiseinstufungen über oder unter zwei dollarzeichen	welche restaurants preisbewertungen über oder unter zwei dollarzeichen haben	die restaurants haben preises bewertungen über oder unter zwei dollarzeichen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string ! = ) ( number 2 en.dollar_sign ) ) )
restaurant, das kreditkarten akzeptiert und das zum mitnehmen hat	restaurant, das kreditkarten nimmt und das takeout hat	restaurant, nimmt kreditkarten und das hat takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string takeout ) ) )
was restaurant ist gut für kinder und gruppen	was resturant ist gut für kinder und gruppen	was resturant ist gut für kinder und gruppen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string groups ) ) )
welches restaurant serviert mehr als zwei mahlzeiten	welches restaurant mehr als zwei mahlzeiten serviert	was restaurant mehr als zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
restaurants, die liefern	restaurants, die liefern	restaurants, die zu liefern	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string delivery ) ) )
welche guten kinderrestaurants servieren thailändische küche	was gute kinderrestaurants thaiküche servieren	was gute kinderrestaurants servieren ihnen thailändische küche	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
restaurants mit take away und zustellung	restaurants mit takeout und lieferung	restaurants mit take away und lieferung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string delivery ) ) )
welche restaurants sind gleich oder niedriger bewertet als das thailändische cafe	welche restaurants werden die gleiche oder unter thai café bewertet	die restaurants bewertet werden, die gleichen oder unter thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )
welches restaurant in midtown west nimmt reservierungen entgegen	was midtown west restaurant nimmt reservierungen	was midtown west restaurant nimmt reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string reserve ) ) )
in welcher nachbarschaft gibt es restaurants, die kreditkarten akzeptieren	welche nachbarschaft restaurants enthält, die kreditkarten akzeptieren	was die nachbarschaft enthält restaurants, die kreditkarten akzeptieren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ) )
restaurants, die kinderfreundlich und günstig sind	restaurants, die kinderfreundlich und preiswert sind	restaurants, die kinderfreundlich und preiswert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string kids ) ) )
was ist die art der küche des thailändischen cafés	was ist die art der küche von thaicafé	was ist die art von küche, von thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) en.restaurant.thai_cafe ) ) )
dieses restaurant hat die meisten küchen	dieses restaurant hat die meisten küchen	das restaurant verfügt über die größte menge von gerichten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( string cuisine ) ) )
nachbarschaft, die nachbarschaft des restaurants ist, dessen preisbewertung 2dollarzeichen ist	nachbarschaft, die nachbarschaft von restaurant ist, dessen preisbewertung 2 dollar zeichen ist	nachbarschaft, die nachbarschaft des restaurants, deren preis rating ist mit 2 dollarzeichen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ) )
restaurants in der nähe von zwei stadtteilen	restaurants in der nähe von zwei vierteln	restaurants in der nähe von zwei nachbarschaften	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
hotel mit einer preisbewertung von 2 dollar und einer 3sternebewertung	hotel mit einer preisbewertung von 2 dollarzeichen und einem 3sternerating	das hotel hat ein preis rating 2 dollarzeichen und eine 3sternebewertung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
restaurants in weniger als zwei stadtteilen	restaurants in weniger als zwei vierteln	restaurants in weniger als zwei nachbarschaften	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string < ) ( number 2 ) ) )
welche drei sterne restaurants sind für kinder zugänglich	welche dreisternerestaurants für kinder zugänglich sind	die dreisternerestaurants sind offen für kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
nennen sie ein restaurant in der nähe des thailändischen cafés	nennen sie ein restaurant in der nachbarschaft von thaicafé	namen ein restaurant in der nähe von thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.restaurant.thai_cafe ) ) )
ein mittagsrestaurant mit take out	ein mittagessen serviert restaurant mit takeout	eine mittagportion, restaurant mit takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string meals ) ( string = ) en.food.lunch ) )
welches restaurant hat eine kleinere sternebewertung als das thailändische cafe	welches restaurant hat eine kleinere sternebewertung als thaicafé	das restaurant hat eine kleinere sterne als thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )
welche restaurants sind unter 3 sternen bewertet	welche restaurants unter 3 sternen bewertet werden	die restaurants bewertet werden, unter 3 sterne	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )
welches restaurant hat die höchste bewertung?	welches restaurant am besten bewertet ist	das restaurant ist der am meisten hoch bewertet	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string star_rating ) ) ) )
in welcher nachbarschaft ist thai cafe	in der nachbarschaft ist thai café	in der nachbarschaft ist thai cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.restaurant.thai_cafe ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.restaurant.thai_cafe ) )
welches restaurant ist nicht in midtown west	welches restaurant nicht in midtown west ist	was ein restaurant ist nicht in midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string ! = ) en.neighborhood.midtown_west ) )
welche restaurants sind in midtown west	was restaurants in midtown west sind	welche restaurants sind in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
ein restaurant in west midtown oder chelsea	ein restaurant in west midtown oder chelsea	ein restaurant in midtown west oder chelsea	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.concat en.neighborhood.midtown_west en.neighborhood.chelsea ) ) )
welche restaurants haben die gleiche sternebewertung wie das thailändische cafe	welche restaurants haben die gleiche sternebewertung wie thai café	die restaurants haben die gleiche sternebewertung als thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) )
restaurant, dessen küche thailändisch ist und das lieferung hat	restaurant, dessen küche thai ist und das lieferung hat	restaurant, dessen küche ist thai und hat, die lieferung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string delivery ) ) )
thailändisches restaurant mit kellnern	thai restaurant mit kellnern	thairestaurant mit kellner	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string waiter ) ) )
thailändische küche restaurant, das eine preisbewertung hat	thai küche restaurant, das eine preisbewertung hat	thailändische küche, restaurant, preis, bewertung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
welche restaurants haben höchstens zwei küchen	welche restaurants haben höchstens zwei küchen	welche restaurants haben am meisten zwei küchen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string <= ) ( number 2 ) ) )
welche restaurants haben eine bewertung von 2 dollar zeichen	welche restaurants eine bewertung von 2 dollar zeichen haben	welche restaurants haben eine bewertung von 2 dollarzeichen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ) )
restaurant in der nähe von midtown west, das mittagessen anbietet	restaurant, das um midtown west ist, das mittagessen anbietet	restaurant, rund um midtown west bietet mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string meals ) ( string = ) en.food.lunch ) )
restaurant, das zum mitnehmen hat und das gut für gruppen ist	restaurant, das takeout hat und das ist gut für gruppen	restaurant, imbiss, und das ist gut für gruppen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string groups ) ) )
welches restaurant hat ein 2dollarpreisrating und takeawayservice	welches restaurant hat eine 2dollarsigns preisbewertung und takeoutservice	das restaurant hat eine 2dollarsigns preis, bewertung und imbissservice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string takeout ) ) )
restaurants, die mittag und abendessen zum mitnehmen anbieten	restaurants, die mittagessen und takeout servieren	restaurants mit mittagessen und imbiss	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string takeout ) ) )
welches restaurant ist in mehreren stadtteilen	welches restaurant ist in mehreren nachbarschaften	was das restaurant ist in mehrere nachbarschaften	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string >= ) ( number 2 ) ) )
restaurants, die reservierungen annehmen	restaurants, die reservierungen akzeptieren	restaurants, die reservierungen akzeptiert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ) )
restaurant, dessen preisklasse höchstens 2dollarzeichen beträgt	restaurant, dessen preisbewertung höchstens 2 dollar zeichen ist	ein restaurant, dessen preisbewertung ist bei den meisten 2dollarzeichen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )
restaurants mit essbereich im freien	restaurants mit essbereich im freien	restaurants mit gastgarten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) )
kinderfreundliche restaurants, die reservierungen annehmen	kinderfreundliche restaurants, die reservierungen akzeptieren	kinderfreundliche restaurants, die reservierungen annehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string kids ) ) )
hotel, das lieferservice anbietet und ein preisrating von 2dollarzeichen hat	hotel, das lieferdienste anbietet und eine preisbewertung von 2 dollar zeichen hat	das hotel bietet dienstleistungen für die lieferung und hat einen preis bewertung von 2 dollarzeichen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
welches restaurant bietet mittagessen	welches restaurant mittagessend anbietet	das restaurant bietet mittag 	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) )
welches restaurant nimmt reservierungen entgegen und hat einen kellnerservice	welches restaurant reservierungen annimmt und kellnerservice hat	das restaurant nimmt reservierungen hat und kellnerservice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string waiter ) ) )
welches restaurant bietet reservierungen	welches restaurant reservierungen anbietet	was restaurantreservierungen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) )
in welchem restaurant wird eine ähnliche mahlzeit wie im thaicafé serviert?	welches restaurant eine mahlzeit serviert, die der im thaicafé ähnelt	was restaurant serviert eine mahlzeit gefunden, dass ähnlich wie bei der thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) ) )
nennen sie ein restaurant mit einem niedrigeren preis als das thaicafé	nennen sie ein restaurant mit einer niedrigeren preisbewertung als das thaicafé	namen ein restaurant mit einem niedrigeren preis bewertet als die thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )
restaurants mit der gleichen küche wie das thaicafé	restaurants mit der gleichen küche wie thaicafé	restaurants mit der gleichen küche wie thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string cuisine ) ) ) )
welche restaurants nehmen reservierungen entgegen und akzeptieren kreditkarten?	welche restaurants reservierungen entgegennehmen und kreditkarten akzeptieren	die restaurants nehmen reservierungen und akzeptieren kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string credit ) ) )
ein reservierungsrestaurant mit medium	ein reservierungsrestaurant mit mittlerem	eine reservierung im restaurant mit dem medium	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string reserve ) ) )
restaurant, das für gruppen geeignet ist und kreditkarten akzeptiert	restaurant, das gut für gruppenessen ist und kreditkarten akzeptiert	restaurant das ist gut für die gruppe, die essund akzeptiert kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string credit ) ) )
restaurant, dessen preisklasse 2dollarzeichen ist	restaurant, dessen preisbewertung 2 dollar zeichen ist	restaurant, deren preis rating ist mit 2 dollarzeichen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
thailändisches café mit der niedrigsten preisklasse	thai café mit geringster preisbewertung	thai cafe mit mindestens preis bewertung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )
restaurants, die mittagessen servieren und kreditkarten akzeptieren	restaurants, die mittagessen servieren und kreditkarten akzeptieren	restaurants servieren mittagund kreditkarten akzeptieren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string credit ) ) )
welche küche wird von weniger als zwei restaurants serviert	welche küche wird von weniger als zwei restaurants serviert	was küche serviert, die von weniger als zwei restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurant, dessen sternebewertung 3 sterne ist und das reservierungen entgegennimmt	restaurant, dessen sternebewertung ist 3 sterne und das nimmt reservierungen	restaurant mit sternebewertung ist 3 sterne und nimmt reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string reserve ) ) )
restaurant, das mittagessen serviert und reservierungen entgegennimmt	restaurant, das mittagessen serviert und reservierungen nimmt	restaurant, das zum mittagund nimmt reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string reserve ) ) )
thailändische restaurants, die günstig sind	thairestaurants, die preiswert sind	thairestaurants, die billig sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
restaurants mit imbiss und bedienung	restaurants mit takeout und kellnerservice	restaurants mit imbissund kellnerservice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string waiter ) ) )
restaurants, die gute mahlzeiten für kinder servieren	restaurants, die gute mahlzeiten für kinder servieren	restaurants mit gutem essen für kinder	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ) )
welches restaurant akzeptiert kinder und bietet zum mitnehmen	welches restaurant nimmt kinder an und bietet takeout	das restaurant akzeptiert kinder und bietet takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string takeout ) ) )
von welchem restaurant in midtown west kann ich etwas zum mitnehmen bekommen?	was midtown west restaurant kann ich takeout von	was midtown west restaurant kann ich mitnehmen aus	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
restaurant mit sitzgelegenheiten im freien und sitzgelegenheiten im freien	restaurant mit sitzgelegenheiten im freien und sitzgelegenheiten im freien	restaurant, sitzgelegenheiten im freien und verfügt über sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string outdoor ) ) )
restaurants mit 3 sternen, die kreditkarten akzeptieren	restaurants mit 3 sternen bewertet, die kreditkarten nehmen	restaurants mit 3 sternen, kredit karten,	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
was ist ein restaurant, das kinderfreundlich ist und kellner hat	was ist ein restaurant, das kinderfreundlich ist und kellner hat	was ist ein restaurant, dass ist kinderfreundlich und hat kellner	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string waiter ) ) )
welches restaurant hat die mehr küche als jedes andere	welches restaurant hat die mehr küche als jedes andere	was das restaurant hat die küche mehr als alle anderen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( string cuisine ) ) )
welche restaurants haben takeout und eine preisbewertung von 2 dollar zeichen	welche restaurants takeout und eine preisbewertung von 2 dollar zeichen haben	die restaurants haben essen und ein preis rating 2 dollarzeichen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string takeout ) ) )
restaurant mit sitzgelegenheiten im freien, das kreditkarten akzeptiert	restaurant mit sitzgelegenheiten im freien, das kreditkarten akzeptiert	restaurant mit sitzgelegenheiten im freien kreditkarten akzeptiert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string credit ) ) )
welches restaurant hat den niedrigeren preis bewertung	welches restaurant die niedrigere preisbewertung hat	was hat das restaurant niedrigeren preis bewertung	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string price_rating ) ) ) )
welches restaurant ist gruppenfreundlich und nimmt eine kreditkarte entgegen	welches restaurant gruppenfreundlich ist und eine kreditkarte nimmt	was restaurant wird die gruppe freundlich und nimmt eine kreditkarte	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string credit ) ) )
nachbarschaft des thailändischen cafés	nachbarschaft von thai café	nachbarschaft von thai cafe	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string neighborhood ) ) )
restaurants mit einem preis von 2 dollar	restaurants mit einem preis von 2 dollar	restaurants mit einer 2dollarpreis bewertung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
restaurants mit kellnern, die gerichte zum mitnehmen anbieten	restaurants mit kellnern, die takeout anbieten	restaurants mit kellnern, die bieten takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string takeout ) ) )
restaurant mit mindestens 3 sternen	restaurant mit mindestens 3 sternen	restaurant, mindestens 3sternebewertung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )
hotel im stadtteil midtown west mit sitzgelegenheiten im freien	hotel im midtown west bereich, das sitzgelegenheiten im freien bietet	hotel in der midtown west gegend, die outdoorsitzgelegenheiten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
restaurants mit 3sternebewertungen, die kellner haben	restaurants mit 3sternebewertungen, die kellner haben	restaurants mit 3star ratings kellner	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string waiter ) ) )
restaurant, das kein mittagessen serviert	restaurant, das nicht mittagessen datt	restaurant nicht serviert mittagessen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string ! = ) en.food.lunch ) )
welche restaurants mit 3 sternen nehmen reservierungen entgegen	welche restaurants mit 3 sternen reservierungen vornehmen	die restaurants mit 3 sternen nimmt reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string reserve ) ) )
welche restaurants sind kinderfreundlich und haben zum mitnehmen	welche restaurants kinderfreundlich sind und zum mitnehmen haben	welche restaurants sind kinderfreundlich und haben takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string kids ) ) )
das ist das thailändische restaurant in dieser nachbarschaft	das ist das thairestaurant in dieser nachbarschaft	das ist das thairestaurant in dieser gegend	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ) )
welche nachbarschaften haben kinderfreundliche restaurants	welche viertel kinderfreundliche restaurants haben	welche stadtteile haben eine kinderfreundliche restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ) )
welche nachbarschaft hat zwei restaurants	welche nachbarschaft hat zwei restaurants	die nachbarschaft hat zwei restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurants ab 3 preisklassen	restaurants mit 3 und höherer preisbewertung	restaurants mit 3undhöherepreis bewertung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )
finden sie ein 2dollarpreisbewertungsrestaurant mit lieferung	finden sie ein 2dollarpreisbewertungsrestaurant mit lieferung	finden sie eine 2dollarpreis bewertung restaurant mit lieferservice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
in welcher nachbarschaft gibt es nur ein oder zwei restaurants?	welche nachbarschaft hat nur ein oder zwei restaurants	in welchem viertel hat nur ein oder zwei restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
stadtviertel mit mehr als 2 restaurants	nachbarschaften mit mehr als 2 restaurants	stadtteile mit mehr als 2 restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
welches restaurant befindet sich nicht in midtown west	welches restaurant nicht in midtown west befindet	das restaurant befindet sich nicht in midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string ! = ) en.neighborhood.midtown_west ) )
was midtown west restaurant hat mittagessen	was midtown west restaurant zu mittag hat	was midtown west restaurant bietet mittag 	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
restaurants, die mahlzeiten servieren	restaurants, die essen serviert	restaurants das essen serviert	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
ein restaurant, das gruppenfreundlich ist	ein gruppenfreundliches restaurant	ein restaurant, das die gruppe freundlich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string groups ) ) )
was ist ein restaurant, das gut für gruppen ist und kellnerservice hat	was ist ein restaurant, das gut für gruppen ist und kellnerservice hat	was ist ein restaurant das ist gut für gruppen und hat die kellnerservice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string waiter ) ) )
liste alle restaurants in der umgebung von midtown west auf	liste aller restaurants in der nachbarschaft von midtown west	liste alle restaurants in der nachbarschaft midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
was ist eine art von küche von zwei restaurants	was ist eine art von küche von zwei restaurants	was ist eine art von küche der zwei restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurants mit 3 sternen, die reservierungen annehmen	restaurants mit 3sternen, die reservierungen vornehmen	restaurants mit 3 sterne, die reservierungen nehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
welche restaurants haben ein preisrating von höchstens zwei oder drei dollar	welche restaurants haben eine preisbewertung von höchstens zwei oder drei dollar zeichen	die restaurants haben eine preisbewertung von zwei oder drei dollarzeichen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )
welches restaurant ist gut für eine gruppe von menschen und dient auch mittagessen	welches restaurant ist gut für eine gruppe von menschen und serviert auch mittagessen	das restaurant ist gut für eine gruppe von personen und serviert auch mittag 	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string meals ) ( string = ) en.food.lunch ) )
3sternerestaurants nach stadtviertel auflisten	liste 3 sterne restaurants nach nachbarschaft	liste 3sternerestaurants von nachbarschaft	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ) )
hotel mit kellnerservice und einrichtungen zum mitnehmen	hotel mit kellnerservice und takeouteinrichtungen	hotel, kellnerservice und takeout einrichtungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string takeout ) ) )
welches restaurant serviert mindestens zwei küchen	welches restaurant mindestens zwei küchen serviert	was restaurant mindestens zwei gerichte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string >= ) ( number 2 ) ) )
welche restaurants haben eine sternebewertung von weniger als 3 oder 5 sternen?	welche restaurants haben eine sternebewertung kleiner als 3 oder 5 sterne	die restaurants haben eine sternebewertung, die kleiner als 3oder 5sterne	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )
hotels, die im voraus gebucht werden können und mittagessen anbieten	hotels, die im voraus gebucht werden können und bietet mittagessen	hotels können im voraus gebucht werden und bietet mittag 	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string meals ) ( string = ) en.food.lunch ) )
was ist die durchschnittliche preisbewertung aller restaurants	was ist die durchschnittliche preisbewertung aller restaurants	was ist der durchschnittliche preis bewertung aller restaurants	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ) ) )
welches restaurant bietet reservierungen und ist gut für kinder	welches restaurant reservierungen anbietet und ist gut für kinder	was restaurantreservierungen und ist gut für kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string reserve ) ) )
restaurant, das reservierungen annimmt und gut für gruppen ist	restaurant, das reservierungen nimmt und das ist gut für gruppen	restaurant nimmt reservierungen und das ist gut für gruppen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string groups ) ) )
restaurant in der nachbarschaft mit sitzgelegenheiten im freien	nachbarschaftsrestaurant mit sitzgelegenheiten im freien	neighborhood restaurant bietet sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ) )
finden sie ein restaurant in einer nachbarschaft	finden sie ein restaurant in einer nachbarschaft	ein restaurant in einer nachbarschaft	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string < ) ( number 2 ) ) )
restaurants, die im voraus gebucht werden können und für gruppen geeignet sind	restaurants, die im voraus gebucht werden können und gut für gruppenessen	restaurants, im voraus gebucht werden kann und gut für die gruppe essen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string groups ) ) )
welches restaurant hat kellnerservice und serviert mittagessen	welches restaurant kellnerservice hat und mittagessend serviert	was für restaurant kellnerservice und mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string meals ) ( string = ) en.food.lunch ) )
welches restaurant enthält die meisten küchen	welches restaurant die meisten küchen enthält	was restaurant enthält die anzahl der küchen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( string cuisine ) ) )
restaurant mit einem preis von 2 dollar und 3 sternen	restaurant, dessen preisbewertung 2 dollar zeichen ist und dessen sternebewertung 3 sterne ist	restaurant, deren preis rating ist mit 2 dollarzeichen und deren sternebewertung ist 3 sterne	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
thairestaurant, das gut für gruppen ist	thairestaurant, das gut für gruppenessen ist	thairestaurant, das gut für die gruppe essen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string groups ) ) )
welches restaurant hat eine preisbewertung von 2dollarzeichen	welches restaurant hat eine preisbewertung von 2 dollar zeichen	was das restaurant hat eine preisbewertung von 2 dollarzeichen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
was ist eine mahlzeit, die das thailändische café nicht serviert	was ist eine mahlzeit, die das thaicafé nicht serviert	was ist eine mahlzeit, die die thaicafe nicht dienen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string ! = ) en.restaurant.thai_cafe ) )
welches restaurant hat eine preisbewertung nicht höher als thai cafe	welches restaurant hat eine preisbewertung nicht höher als thaicafé	das restaurant hat einen preis bewertung nicht höher als thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )
restaurants ähnlich restaurants in midtown west	restaurants ähnlich wie restaurants in midtown west	restaurants ähnlich zu restaurants in midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )
welche restaurants haben die gleiche preisbewertung wie das thailändische cafe	welche restaurants eine preisbewertung haben, die die gleiche wie das thaicafé	die restaurants haben eine preisbewertung die gleichen wie die thaicafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) )
was sind einige restaurants, die 4 sterne oder besser sind	was sind einige restaurants, die 4 sterne oder besser sind	was sind einige restaurants, die mit 4 sternen oder besser	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )
welches restaurant hat zum mitnehmen und serviert mittagessen	welches restaurant hat takeout und serviert mittagessen	was für restaurant imbiss und mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string meals ) ( string = ) en.food.lunch ) )
welche art von mahlzeiten werden von restaurants serviert, die reservierungen annehmen?	welche art von mahlzeiten werden von restaurants serviert, die reservierungen vornehmen	welche art von speisen durch restaurants, die reservierungen nehmen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ) )
restaurants mit 2 oder 3 preisen	restaurants mit 2 oder 3 preisbewertung	restaurants mit 2 oder 3 preis bewertung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) )
was ist die preisbewertung des hotels	wie ist die preisbewertung des hotels	was ist der preis, bewertung des hotels	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ) ) )
nachbarschaft, die nachbarschaft des thailändischen cafés oder der pizzeria juno ist	nachbarschaft, die nachbarschaft von thaicafé oder pizzeria juno ist	nachbarschaft, der nachbarschaft von thaicafe oder pizzeria juno	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno ) ) )
welche restaurants servieren gutes essen für gruppen und haben zum mitnehmen	welche restaurants gutes essen für gruppen servieren und	welche restaurants servieren gutes essen für gruppen und imbiss	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string takeout ) ) )
ein 3sternerestaurant mit platz für gruppen	ein 3sternerestaurant mit platz für gruppen	ein 3sternerestaurant bietet platz für gruppen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string groups ) ) )
welche restaurants servieren mittag oder abendessen?	welche restaurants mittag oder abendessen servieren	die restaurants servieren mittagoder abendessen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) ( call SW.concat en.food.lunch en.food.dinner ) ) )
welche restaurants in der nachbarschaft haben zum mitnehmen	welche nachbarschaft restaurants haben takeout	die nachbarschaft restaurants imbiss	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ) )
welches restaurant hat einen niedrigeren preis als das thaicafé	welches restaurant eine niedrigere preisbewertung als das thaicafé hat	was das restaurant hat einen niedrigeren preis, bewertung als die thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )
was sind einige 3sternerestaurants, die das mittagessen servieren	was sind einige 3sternerestaurants, die mittagessen servieren	was sind einige 3sternerestaurants mit mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string meals ) ( string = ) en.food.lunch ) )
welche restaurantkette ist in den wenigsten gegenden zu finden?	welche restaurantkette in den wenigsten vierteln zu finden ist	die restaurantkette ist in den wenigsten stadtteilen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( string neighborhood ) ) )
restaurant, das mindestens 3 sterne hat und kinderfreundlich ist	restaurant, das mindestens 3 sterne und kinderfreundlich ist	restaurant, das mindestens 3 sterne und kinderfreundlich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
restaurant, dessen preisklasse 2dollarzeichen ist und das einen kellnerservice hat	restaurant, dessen preisbewertung 2 dollar zeichen ist und das kellnerservice hat	restaurant, deren preis rating ist mit 2 dollarzeichen und das hat kellnerservice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string waiter ) ) )
hotel mit einem preisrating von mehr als 2 dollar oder 3 dollar	hotel mit einer preisbewertung von mehr als 2dollar oder 3 dollar zeichen	das hotel hat ein preisbewertung von mehr als 2dollar oder 3dollarzeichen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )
was 3sternerestaurant hat lieferung	was 3sternerestaurant geliefert hat	was 3sternerestaurant hat die lieferung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
in welcher nachbarschaft gibt es restaurants, die mittagessen anbieten	welche nachbarschaft enthält restaurants, die mittagessen anbieten	was die nachbarschaft enthält restaurants mit mittagessen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ) )
thailändisches restaurant mit bedienung	thairestaurant, das kellnerdienstleistungen bietet	thairestaurant, bietet kellnerdienste	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
in welchen stadtteilen gibt es die wenigsten restaurants?	welche stadtteile die wenigsten restaurants haben	die nachbarschaften haben die wenigsten restaurants	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( string neighborhood ) ) )
restaurant, das mittagessen serviert und kreditkarten akzeptiert	restaurant, das mittagessen serviert und kreditkarten akzeptiert	das restaurant serviert mittagund akzeptiert kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string credit ) ) )
welches restaurant liefert und ist gut für kinder	was restaurant bietet und ist gut für kinder	was das restaurant bietet, und ist gut für kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string kids ) ) )
welche restaurants sind gut für gruppen und liefern auch	welche restaurants gut für gruppen sind und auch	die restaurants sind gut für gruppen und auch liefern	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string groups ) ) )
restaurant mit einem preis von 2 oder 3 dollar	restaurant mit einem preis von 2 oder 3 dollar	restaurant mit 2oder 3dollarpreis bewertung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) )
restaurant, das zum mitnehmen hat und reservierungen entgegen nimmt	restaurant, das takeout hat und das reservierungen erfordert	restaurant, take away und nimmt reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string reserve ) ) )
welches thailändische restaurant hat die höchste sternebewertung	welches thairestaurant die höchste sternebewertung hat	was thairestaurant hat die höchste sternerating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )
welches restaurant hat take away service	welches restaurant takeout service hat	das restaurant hat takeout service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string takeout ) ) )
restaurants mit der niedrigsten sternebewertung	restaurants mit der niedrigsten sternebewertung	restaurants mit der niedrigsten sternebewertung	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string star_rating ) ) ) )
was ist eine mahlzeit, die ein restaurant mit lieferservice hat	was ist eine mahlzeit, die ein restaurant mit lieferservice hat	was ist ein essen, das restaurant mit lieferservice hat	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ) )
listen sie die arten der küche für restaurants auf, die gerichte zum mitnehmen anbieten	liste der arten von küche für restaurants, die takeout anbieten	liste der arten von küche für gaststätten, imbiss	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ) )
restaurant mit zwei küchen	restaurant mit zwei küchen	restaurant verfügt über zwei küchen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string > ) ( number 2 ) ) )
kinderfreundliche restaurants, die mit 3 sternen bewertet sind	kinderfreundliche restaurants mit 3 sternen	kinderfreundliche restaurants sind mit 3 sternen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string kids ) ) )
finden sie ein 3sternerestaurant, das für gruppen geeignet ist	finden sie ein 3sternerestaurant, das gut für gruppen ist	finden sie ein 3sternerestaurant, das ist gut für gruppen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
welche küche bietet zum mitnehmen	was die küche takeout bietet	was die küche bietet takeout	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ) )
restaurants mit imbiss, die kellner haben	restaurants mit takeout, die kellner haben	restaurants mit take away, die kellner	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string waiter ) ) )
restaurant mit bedienung und gut für kinder	restaurant, das kellnerservice hat und das ist gut für kinder	restaurant, kellnerservice, und das ist gut für kinder	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string kids ) ) )
welches restaurant bietet lieferung und nimmt reservierungen	welches restaurant lieferung anbietet und reservierungen entgegennimmt	was restaurant bietet lieferung und nimmt reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string reserve ) ) )
restaurant mit sitzgelegenheiten im freien und bedienung durch den kellner	restaurant, das sitzgelegenheiten im freien hat und kellnerservice hat	restaurant, sitzgelegenheiten im freien, und das hat kellnerservice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string waiter ) ) )
thailändische oder italienische restaurants	thailändische oder italienische restaurants	thailändische oder italienische restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.concat en.cuisine.thai en.cuisine.italian ) ) )
restaurant mit imbiss und thailändischer küche	restaurant, das takeout hat und dessen küche thai ist	restaurant, take away und deren küche ist die thai 	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
restaurant mit höchstens zwei gerichten	restaurant, das höchstens zwei küchen hat	restaurant, die hat bei den meisten zwei küche	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string <= ) ( number 2 ) ) )
finden sie ein restaurant mit weniger sternen als das thaicafé	finden sie ein restaurant mit weniger sternen als das thaicafé	finden sie ein restaurant mit weniger sternen als der thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )
das thailändische cafe ist in welcher nachbarschaft	das thaicafé ist in der nachbarschaft	die thaicafe in der nachbarschaft	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string neighborhood ) ) )
hotels mit einem mindestpreis von 2 dollar	hotels mit einem mindestpreis von 2 dollar zeichen	hotels, die einen mindestpreis bewertung des 2dollarzeichen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )
welche restaurants servieren mittagessen und bieten zum mitnehmen	welche restaurants mittagessen servieren und takeout anbieten	welche restaurants servieren mittagund bieten takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string meals ) ( string = ) en.food.lunch ) )
welches restaurant serviert nicht nur mittagessen, sondern hat lieferung	welches restaurant nicht nur das mittagessen serviert, sondern auch geliefert hat	das restaurant dient nicht nur zu mittag, hat aber lieferzeit	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string delivery ) ) )
restaurants zum mittagessen geöffnet	restaurants zum mittagessen geöffnet	restaurants zum mittagessen geöffnet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) )
restaurants mit sitzgelegenheiten im freien und zum mitnehmen	restaurants mit sitzgelegenheiten im freien und takeout	restaurants mit sitzgelegenheiten im freien und imbiss	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string takeout ) ) )
restaurants mit imbiss, die kinderfreundlich sind	restaurants mit takeout, die kinderfreundlich sind	restaurants mit imbiss sind kinderfreundlich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string kids ) ) )
was für ein gutes gruppenrestaurant hat lieferung	was gutes gruppenrestaurant hat lieferung	was gute gruppe restaurant hat die lieferung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string delivery ) ) )
finden sie ein thailändisches restaurant, das für gruppen geeignet ist	finden sie ein thairestaurant, das gut für gruppen ist	finden sie ein thairestaurant, das ist gut für gruppen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
welche restaurants akzeptieren kreditkarten und reservierungen	welche restaurants kreditkarten und reservierungen akzeptieren	welche restaurants akzeptieren kreditkarten und reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string credit ) ) )
midtown west nachbarschaft, die auch liefert	midtown west nachbarschaft, die auch liefert	midtown west nachbarschaft, die auch lieferungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string delivery ) ) )
welche restaurants mit essbereichen im freien akzeptieren reservierungen	welche restaurants mit essbereich im freien reservierungen akzeptieren	die restaurants mit gastgärten reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string reserve ) ) )
restaurant, dessen küche küche des thailändischen cafés ist	restaurant, dessen küche ist küche, die küche des thaicafé ist	restaurant, dessen küche ist küche, der küche des thaicafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) en.restaurant.thai_cafe ) ) )
restaurant, dessen küche thailändisch ist und dessen küche thailändisch ist	restaurant, dessen küche thai ist und dessen küche thai ist	restaurant, dessen küche ist thailändisch und deren küche ist die thai 	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
welches restaurant nimmt reservierungen und angebote zum mitnehmen	welches restaurant reservierungen und angebote takeout nimmt	was das restaurant nimmt reservierungen und angebote mitnehmen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string reserve ) ) )
restaurant mit der höchsten preisklasse	restaurant mit der größten preisbewertung	restaurant, das die größte preis bewertung	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string price_rating ) ) ) )
was sind die küchen aller midtown west restaurants	was sind die küchen aller midtown west restaurants	was sind die küchen aller restaurants der midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )
welche thailändischen restaurants sind kinderfreundlich	was thairestaurants sind kinderfreundlich	was thairestaurants sind kinderfreundlich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string kids ) ) )
welche restaurants servieren mittagessen und akzeptieren reservierungen	welche restaurants mittagessen servieren und reservierungen annehmen	die restaurants servieren mittagund reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string reserve ) ) )
restaurants mit mehreren küchen	restaurants mit mehreren küchen	restaurants mit mehreren küchen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( string cuisine ) ) )
hotel, das keine hat	hotel, das keine	hotel, das nicht über eine	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string ! = ) ( number 2 en.dollar_sign ) ) )
restaurant, das lieferung hat und das gut für gruppen ist	restaurant, das lieferung hat und das ist gut für gruppen	restaurant, lieferund dass ist gut für gruppen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string groups ) ) )
was ist die natur der küche des thailändischen cafés	was ist die natur der küche des thaicafé	was ist die natur der küche des thaicafe	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string cuisine ) ) )
restaurant, das lieferservice und mittagessen serviert	restaurant, das lieferung hat und das mittagessen serviert	restaurant, lieferung und serviert mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string meals ) ( string = ) en.food.lunch ) )
welches gruppenrestaurant nimmt kreditkarten	welches gruppenrestaurant kreditkarten nimmt	welche gruppe restaurant nimmt kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string groups ) ) )
finden sie ein restaurant für gruppen mit einem preis von 2 dollar	finden sie ein restaurant gut für gruppen, die eine 2dollarpreisbewertung hat	finden sie ein restaurant für gruppen, die einen 2dollarpreis bewertung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string groups ) ) )
welches restaurant bietet lieferung und sitzgelegenheiten im freien	welches restaurant lieferung und eine sitzgelegenheit im freien anbietet	was restaurant bietet lieferung und ein sitzbereich im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string delivery ) ) )
restaurant mit der geringsten anzahl an gerichten	restaurant mit der geringsten anzahl an küche	restaurant, dass hat die wenigsten küche	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( string cuisine ) ) )
was midtown west restaurant bietet mittagessen	was midtown west restaurant bietet mittagessen	was midtown west restaurant bietet mittag 	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
restaurants, die liefern und für große parteien gut sind	restaurants, die geliefert werden und gut für große partys sind	restaurants, die liefern und sind gut für die großen parteien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string delivery ) ) )
restaurants in der midtown west nachbarschaft, die kellner haben	restaurants in der midtown west nachbarschaft, die kellner haben	restaurants in der midtown west gegend, die kellner haben	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
welche nachbarschaften haben restaurants, die zum mitnehmen anbieten	welche viertel restaurants haben, die takeout anbieten	die nachbarschaften haben gaststätten, imbiss	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ) )
was sind einige kinderfreundliche restaurants, die kreditkarten akzeptieren	was sind einige kinderfreundliche restaurants, die kreditkarten akzeptieren	was sind einige kinderfreundliche restaurants, die kreditkarten akzeptieren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string credit ) ) )
restaurants mit einem preis von 2 oder 3 dollar	restaurants mit einem 2 oder 3 dollar zeichen preisbewertung	restaurants mit 2 oder 3 dollarzeichen preis bewertung	( call SW.listValue ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) )
hotel, das eine preisbewertung oder mehr als 2 dollar hat	hotel mit einer preisbewertung oder mehr als 2 dollar	hotel, das hat einen preis, bewertung oder mit mehr als 2 usdollar	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )
restaurant, das für zwei mahlzeiten geöffnet ist	restaurant, das für zwei mahlzeiten geöffnet ist	restaurant, das offen ist für zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
welche restaurants befinden sich in midtown west	welche restaurants sich in midtown west befinden	welche restaurants befinden sich in midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )
was ist eine mahlzeit aus einem restaurant, das gut für kinder ist	was ist eine mahlzeit aus einem restaurant, das gut für kinder ist	was ist eine mahlzeit aus einem restaurant, ist gut für kinder	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ) )
welches restaurant hat zwei verschiedene küchen	welches restaurant zwei verschiedene küchen hat	was das restaurant hat zwei verschiedene küchen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string <= ) ( number 2 ) ) )
welches thailändische restaurant hat eine sternebewertung von 3 sternen	welches thairestaurant hat eine sternebewertung von 3 sterne	was thairestaurant hat eine sternebewertung von 3 sternen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
restaurant, das liefert und einen sitzbereich im freien hat	restaurant, das liefert und über einen sitzbereich im freien verfügt	restaurant, erzielt und hat einen sitzbereich im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string outdoor ) ) )
ein restaurant mit der höchsten sternebewertung	ein restaurant mit der höchsten sternebewertung	ein restaurant, das die höchste sternerating	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string star_rating ) ) ) )
in welchen restaurants stehen mindestens 2 mahlzeiten auf der speisekarte	welche restaurants mindestens 2 mahlzeiten auf der speisekarte haben	welche restaurants haben mindestens 2 gerichte auf der speisekarte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
das thailändische restaurant hat lieferung	das thairestaurant hat lieferung	das thairestaurant hat die lieferung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string delivery ) ) )
welche restaurants bieten sitzgelegenheiten im freien und nimmt reservierungen entgegen	welche restaurants sitzgelegenheiten im freien anbieten und reservierungen vornehmen	welche restaurants bieten sitzgelegenheiten im freien und nimmt reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string outdoor ) ) )
ein lieferungsrestaurant mit mittleren preisen	ein lieferrestaurant mit mittleren preisen	ein lieferrestaurant mit medium preise	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string delivery ) ) )
restaurant in der gegend von midtown west, das gut für gruppen geeignet ist	restaurant in der gegend von midtown west, das gut für gruppenessen ist	restaurant in der umgebung midtown west, das ist gut für die gruppe essen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string groups ) ) )
ein thailändisches café in der nachbarschaft	ein thaicafé in der nachbarschaft	eine thaicafe in der nachbarschaft	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.restaurant.thai_cafe ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.restaurant.thai_cafe ) )
welches restaurant hat die gleiche sternebewertung wie das thaicafé?	welches restaurant hat eine sternebewertung das gleiche wie thaicafé	was das restaurant hat eine sternebewertung das gleiche wie thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )
welche restaurants haben sitzgelegenheiten im freien und sind gruppenfreundlich	welche restaurants im freien bestuhlt und gruppenfreundlich sind	die restaurants haben sitzgelegenheiten im freien und gruppe freundlich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string outdoor ) ) )
welche stadtteile haben die meisten 3sternerestaurants	welche viertel haben die meisten 3 sterne bewerteten restaurants	welche stadtteile haben die meisten 3sterne restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ) )
welche restaurants bieten lieferservice und servieren mittagessen	welche restaurants lieferung anbieten und serviert mittagessen	welche restaurants bieten die lieferung und mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string meals ) ( string = ) en.food.lunch ) )
welches restaurant ist das teuerste?	welches restaurant als das teuerste eingestuft wird	das restaurant gilt als teuerste	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string price_rating ) ) ) )
welches restaurant nimmt reservierungen entgegen	welches restaurant reservierungen nimmt	was das restaurant nimmt reservierungen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) )
restaurant mit lieferung, die eine 2dollarbewertung hat	restaurant mit lieferung, die eine 2dollarzeichenbewertung hat	restaurant mit lieferservice hat eine 2 dollarzeichen bewertung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
restaurants mit den meisten standorten in der region	restaurants mit den meisten standorten in der umgebung	restaurants mit den meisten orten in der umgebung	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( string neighborhood ) ) )
was ist die sternebewertung des thailändischen cafés?	was ist die sternebewertung von thai café	was ist die sternebewertung von thai cafe	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) )
restaurants, die weniger als eine mahlzeit servieren	restaurants, die weniger als eine mahlzeit servieren	die restaurants weniger als eine mahlzeit	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurant mit 3 sternen und thailändischer küche	restaurant, dessen sternebewertung 3 sterne ist und dessen küche thai ist	restaurant mit sternebewertung ist 3 sterne und deren küche ist die thai 	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
restaurant serviert mittagessen, das liefern kann	restaurant serviert mittagessen, das liefern kann	restaurant, das mittagessen, die sie liefern kann	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string meals ) ( string = ) en.food.lunch ) )
restaurant, das thailändisches essen serviert	restaurant, das thaimahlzeit serviert	restaurant, thailändisches essen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ) )
ein drei sterne kinderfreundliches restaurant	ein dreisternekinderfreundliches restaurant	ein dreisternekinderfreundliche restaurant	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string kids ) ) )
von welchem restaurant kann ich reservierungen erhalten und eine lieferung erhalten?	welches restaurant kann ich reservierungen und erhalten lieferung von	was restaurant kann ich reservierungen und erhalten sie die lieferung von	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string reserve ) ) )
restaurants mit 30 bis 40 bewertungen	restaurants mit 30 bis 40 bewertungen	restaurants haben zwischen 30 und 40 bewertungen	( call SW.listValue ( call SW.concat ( number 30 en.review ) ( number 40 en.review ) ) )
restaurants mit nicht mehr als zwei küchen	restaurants mit nicht mehr als zwei küchen	restaurants mit nicht mehr als zwei gerichten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string <= ) ( number 2 ) ) )
restaurants, die zum mitnehmen haben und gut für gruppen sind	restaurants, die takeout haben und sind gut für gruppen	restaurants, die imbissund sind gut für gruppen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string groups ) ) )
restaurant mit imbiss und sitzgelegenheiten im freien	restaurant, das takeout hat und das sitzgelegenheiten im freien hat	restaurant, imbiss und hat sitzplätze im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string outdoor ) ) )
küche, die küche eines restaurants mit einem preis von 2dollarzeichen	küche, die küche des restaurants ist, dessen preisbewertung 2 dollar zeichen ist	küche, die küche des restaurants, deren preis rating ist mit 2 dollarzeichen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ) )
was thailändisches restaurant mittagessen anbietet	was thai restaurant bietet mittagessen	was thairestaurant bietet mittag 	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
welche thailändischen restaurants bieten einen kellnerservice an	welche thairestaurants einen kellnerservice anbieten	was thairestaurants bieten einem kellnerservice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
welche thailändischen restaurants haben sitzgelegenheiten im freien	welche thairestaurants im freien sitzen	die thairestaurants haben sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
thairestaurants mit optionalen sitzgelegenheiten im freien	thairestaurants mit optionalen sitzgelegenheiten im freien	thairestaurants mit sitzgelegenheiten im freien optional	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string outdoor ) ) )
welches hotel spricht kinder an und akzeptiert kreditkarten?	welches hotel kinder anspricht und kreditkarten akzeptiert	das hotel appelle an kinder und akzeptiert kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string credit ) ) )
restaurant, das kreditkarten akzeptiert und das ausgeliefert wird	restaurant, das kreditkarten nimmt und das	restaurant, nimmt kreditkarten hat und die lieferung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string delivery ) ) )
welche thailändischen restaurants nehmen reservierungen entgegen	welche thairestaurants reservierungen vornehmen	die thairestaurants nehmen reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
restaurant, das reservierungen entgegennimmt und über sitzgelegenheiten im freien verfügt	restaurant, das reservierungen nimmt und die außensitze hat	restaurant nimmt reservierungen und hat sitzplätze im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string outdoor ) ) )
restaurants, die zum mitnehmen anbieten und mit 2dollarzeichen bewertet sind	restaurants, die takeout anbieten und mit 2 dollarzeichen bewertet sind	gaststätten, essen und preis bewerteten 2dollarzeichen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string takeout ) ) )
welches restaurant akzeptiert kreditkarten?	welches restaurant kreditkarten akzeptiert	das restaurant akzeptiert kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string credit ) ) )
restaurant mit take away und kreditkarten	restaurant, das takeout hat und das kreditkarten nimmt	restaurant, take away und nimmt kreditkarten	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string credit ) ) )
welches restaurant hat kellner und zum mitnehmen	welches restaurant kellner und takeoutservice hat	das restaurant hat kellner und imbissservice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string waiter ) ) )
familienfreundliche restaurants mit preisklasse zwei	familienfreundliche restaurants mit einer preisbewertung von zwei	familienfreundliche restaurants mit preis bewertung von zwei	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string kids ) ) )
welches restaurant ist gut für gruppen und bietet zum mitnehmen	welches restaurant ist gut für gruppen und bietet takeout	was das restaurant ist für gruppen und bietet takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string groups ) ) )
welche art von küche hat mindestens zwei restaurants	welche art von küche hat mindestens zwei restaurants	welche art der küche hat mindestens zwei restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurants in midtown west mit 3 sternen bewertet	restaurants in midtown west bewertet 3 sterne	restaurants in midtown west rated 3 stars	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
welche restaurants haben speisen im freien	welche restaurants im freien speisen	welche restaurants haben außengastronomie	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) )
restaurant, das zum mittag und abendessen geöffnet ist	restaurant, das zum mittag und abendessen geöffnet ist	restaurant, geöffnet für mittagund abendessen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) ( call SW.concat en.food.lunch en.food.dinner ) ) )
preisbewertung des thailändischen cafés	preisbewertung von thai café	preis bewertung von thai cafe	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) )
welches restaurant ist gut zum mittag oder abendessen	welches restaurant zum mittag oder abendessen gut ist	was das restaurant ist gut für mittagoder abendessen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) ( call SW.concat en.food.lunch en.food.dinner ) ) )
hotel für kinder mit lieferservice	hotel, das den geschmack von kindern passt und bietet lieferservice	hotel passt, die den geschmack der kinder und bietet dienstleistungen für die lieferung von	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string delivery ) ) )
welche restaurants sind in der preisklasse von zwei dollar zeichen	welche restaurants sich im preisratingniveau von zwei dollarzeichen befinden	welche restaurants sind in der preisbewertung niveau von zwei dollarzeichen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
in welcher nachbarschaft gibt es mindestens zwei restaurants	welche nachbarschaft enthält mindestens zwei restaurants	was die nachbarschaft enthält mindestens zwei restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
welche restaurantkette ist in den meisten stadtteilen zu finden?	welche restaurantkette in den meisten vierteln zu finden ist	die restaurantkette liegt in den meisten stadtteilen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( string neighborhood ) ) )
restaurant mit essbereich im freien, in dem das mittagessen serviert wird	restaurant mit essbereich im freien, der das mittagessen serviert	restaurant mit essbereich im freien, das zum mittag	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string outdoor ) ) )
restaurants mit imbiss, die sich gut für große partys eignen	restaurants mit takeout, die gut für große partys sind	restaurants mit imbiss sind gut für große parteien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string takeout ) ) )
welches restaurant nimmt gruppenreservierungen entgegen?	welches restaurant gruppenreservierungen nimmt	was das restaurant nimmt reservierungen für gruppen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string reserve ) ) )
thailändisches café, das pizzeria serviert	thai café, das pizzeria serviert	thai cafe thats dient pizzeria	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno ) ) )
restaurant, das billiger ist als das thaicafé	restaurant, das billiger ist als thaicafé	restaurant, die billiger ist als thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )
welche restaurants sind nicht in midtown west	was restaurants nicht in midtown west sind	welche restaurants sind nicht in midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string ! = ) en.neighborhood.midtown_west ) )
eine nachbarschaft mit zwei restaurants	ein viertel mit zwei restaurants	eine nachbarschaft mit zwei restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
in welcher nachbarschaft befinden sich die meisten restaurants?	in welcher nachbarschaft die meisten restaurants zu finden sind	was nachbarschaft ist die heimat der meisten restaurants	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
nachbarschaft, die nachbarschaft des restaurants, das lieferung hat	nachbarschaft, die nachbarschaft des restaurants ist, die lieferung hat	nachbarschaft, der nachbarschaft von restaurant, lieferung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ) )
welches restaurant nimmt reservierungen entgegen und hat sitzgelegenheiten im freien	welches restaurant reservierungen und sitzplätze im freien hat	was das restaurant nimmt reservierungen und hat sitzplätze im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string reserve ) ) )
restaurant mit sitzgelegenheiten im freien	restaurant mit sitzgelegenheiten im freien	restaurant, sitzgelegenheiten im freien	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ) )
midtown west restaurants mit 2dollarzeichen preisklasse	midtown west restaurants mit 2 dollar zeichen preisbewertung	midtown west restaurants mit 2 dollarzeichen preis bewertung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
welche restaurants servieren mindestens zwei mahlzeiten	welche restaurants mindestens zwei mahlzeiten servieren	die restaurants servieren mindestens zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
nimmt reservierungen an	akzeptiert reservierungen	akzeptiert reservierungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string reserve ) ) )
welches restaurant in midtown west hat kellnerservice	welches restaurant in midtown west kellnerservice hat	welches restaurant in midtown west bietet kellnerservice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
was für ein restaurant in midtown west haben kellnerservice	welches restaurant in midtown west kellnerservice haben	was restaurant in midtown west haben sich kellnerdienstleistungen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
welche restaurants sind mit 3 oder 5 sternen bewertet	welche restaurants mit 3 oder 5 sternen bewertet werden	die restaurants sind mit 3 oder 5 sternen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) )
in welchen stadtteilen gibt es restaurants, die sich für große partys eignen?	welche nachbarschaften restaurants haben, die gut für große partys sind	welche stadtteile haben restaurants, die gut sind für die großen parteien	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ) )
welches restaurant hat thailändische küche	welches restaurant thaiküche hat	was für restaurant thaiküche	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
welche restaurants servieren die gleiche küche wie das thailändische cafe	welche restaurants die gleiche küche wie thaicafé servieren	was restaurants servieren die gleichen küche wie thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) en.restaurant.thai_cafe ) ) )
restaurants, die reservierungen annehmen und zum mitnehmen anbieten	restaurants, die reservierungen annehmen und takeout anbieten	restaurants, die reservierungen und bieten takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string reserve ) ) )
welches restaurant hat zum mitnehmen und kellnerservice	welches restaurant takeout und kellnerservice hat	was restaurant takeout und kellnerservice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string takeout ) ) )
welche mahlzeit kann man im restaurant einnehmen?	welche mahlzeit können sie für das essen im restaurant zu nehmen	welche mahlzeit kann man für nehmen im restaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ) )
restaurants mit den meisten optionen	restaurants mit den meisten optionen	restaurants mit den meisten optionen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( string meals ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
welche nachbarschaft sind die restaurants, die in midtown west sind	welche nachbarschaft sind die restaurants, die in midtown west sind	in welchem viertel sind die restaurants, die sich in midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )
restaurant, das mittagessen anbietet und eine dreisternebewertung hat	restaurant, das mittagessen anbietet und eine dreisternebewertung hat	restaurant bietet mittagessen und hat ein dreisternebewertung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string meals ) ( string = ) en.food.lunch ) )
restaurants mit 3 sternen und einem 2dollarzeichen	restaurants mit 3 sternen mit einem 2dollarzeichen preisbewertung bewertet	restaurants mit 3 sternen mit einer 2dollarzeichenpreis bewertung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
welche restaurants nehmen reservierungen entgegen und bieten take away an?	welche restaurants reservierungen vornehmen und takeout anbieten	welche restaurants nehmen reservierungen und bieten takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string takeout ) ) )
was für ein thailändisches restaurant hat lieferung	was thai restaurant hat lieferung	was thairestaurant hat die lieferung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string delivery ) ) )
welche nachbarschaft hat die geringste anzahl von restaurants	welche nachbarschaft hat die geringste anzahl von restaurants	die nachbarschaft hat die geringste anzahl von restaurants	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
welches restaurant nimmt kreditkarten und ist gut für gruppen	welches restaurant kreditkarten nimmt und ist gut für gruppen	was ein restaurant braucht, kreditkarten und ist gut für gruppen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string groups ) ) )
welches restaurant in midtown west ist gut für gruppen	welches restaurant in midtown west ist gut für gruppen	was restaurant in midtown west ist gut für gruppen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string groups ) ) )
welches restaurant hat kein 2dollarzeichen	welches restaurant kein 2dollarzeichen hat	was restaurant nicht über eine 2 dollarzeichen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string ! = ) ( number 2 en.dollar_sign ) ) )
restaurant, dessen nachbarschaft midtown west ist und das lieferung hat	restaurant, dessen nachbarschaft midtown west ist und das lieferung hat	restaurant, deren nachbarschaft midtown west und das hat lieferung	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string delivery ) ) )
ein restaurant, das mittagessen und lieferservice anbietet	ein restaurant, das mittag und lieferservice anbietet	ein restaurant, das mittagund lieferservices	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string delivery ) ) )
welches restaurant befindet sich in midtown west	welches restaurant befindet sich in midtown west	das restaurant befindet sich in midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
was ist ein gutes kinderrestaurant	was ist ein gutes kinderrestaurant	was ist ein guter kinderrestaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) )
liste nach art der küche die restaurants, die das mittagessen servieren	liste nach art der küche die restaurants, die mittagessen servieren	liste nach art der küche des restaurants mit mittagessen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ) )
welches restaurant hat die niedrigste sternebewertung	welches restaurant die niedrigste sternebewertung hat	was hat das restaurant niedrigsten sternebewertung	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string star_rating ) ) ) )
restaurants mit 3 bis 5 sternen	restaurants mit 3 bis 5 sternen bewertungen	restaurants mit 3bis 5sternebewertungen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )
welches restaurant bietet mittagessen	welches restaurant mittagessen anbietet	was das restaurant bietet mittag 	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) )
das restaurant ist kinderfreundlich und verfügt über einen essbereich im freien	restaurant, das kinderfreundlich ist und über einen essbereich im freien verfügt	restaurant ist kinderfreundlich und verfügt über einen essbereich im freien	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string outdoor ) ) )
welche restaurants haben schlechtere bewertungen als das thailändische cafe	welche restaurants haben niedrigere bewertungen, dass thai café	welche restaurants haben eine niedrigere ratings, thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )
das restaurant akzeptiert kreditkarten und serviert mittagessen	das restaurant nimmt kreditkarten und serviert mittagessen	das restaurant nimmt kreditkarten und mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string credit ) ) )
finden sie die art des essens aller restaurants, die reservierungen annehmen	finden sie die art des essens aller restaurants, die reservierungen nehmen	finden sie die art der nahrung, der alle restaurants, die reservierungen nehmen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ) )
welches restaurant hat zum mitnehmen und ein mittagsmenü	welches restaurant takeout und ein mittagsmenü hat	was für restaurant imbiss und ein mittagessenmenü	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string takeout ) ) )
ein restaurant zum mitnehmen	ein takeoutrestaurant	ein takeout restaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) )
restaurant, das zum mitnehmen hat und das gut für gruppen ist	restaurant, das takeout hat und das ist gut für gruppen	restaurant, imbiss, und das ist gut für gruppen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string groups ) ) )
welche restaurants servieren mehr als zwei mahlzeiten	welche restaurants mehr als zwei mahlzeiten servieren	die restaurants servieren mehr als zwei mahlzeiten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
welche restaurants in midtown west servieren mittagessen	welche restaurants in midtown west mittagessen servieren	welche restaurants in midtown west dienen mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
liste alle thailändischen restaurants auf, die mittagessen anbieten	liste aller thairestaurants, die mittagessen anbieten	liste mit allen thairestaurants mit mittagessen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string meals ) ( string = ) en.food.lunch ) )
restaurant, das mittagessen serviert und dessen sternebewertung 3 sterne beträgt	restaurant, das mittagessen serviert und dessen sternebewertung 3 sterne ist	restaurant, das zum mittagund derensternebewertung ist 3 sterne	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
nachbarschaft, die nachbarschaft des restaurants, das das mittagessen serviert	nachbarschaft, die nachbarschaft des restaurants ist, das mittagessen serviert	nachbarschaft, der nachbarschaft von restaurant, das zum mittag	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ) )
3sternerestaurants, die kreditkarten akzeptieren	3sternerestaurants, die kreditkarten akzeptieren	3sternerestaurants, die kreditkarten akzeptieren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string credit ) ) )
welche nachbarschaft ist thai cafe oder pizzeria juno in	welche nachbarschaft ist thai café oder pizzeria juno in	was nachbarschaft ist thai cafe oder pizzeria in juno	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno ) ) )
mitarbeiter, der nach alice begann verlassen	mitarbeiter, der nach alice gestartet ging	mitarbeiter, die nach links nach alice begann	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie mitarbeiter mit enddaten, die nicht größer sind als mitarbeiter alice	suchen von mitarbeitern mit enddaten, die nicht größer als mitarbeiteralice sind	finden mitarbeiter mit enddaten, die sind nicht größer als angestellter alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist alices arbeitgeber seit 2004	der seit 2004 arbeitgeber von alice ist	wer ist alice arbeitgeber seit 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employer ) ) )
in welcher stadt ist eine person geboren, die mindestens 180 cm groß ist?	welche stadt einen geburtsort einer person hat, die mindestens 180 cm groß ist	in welcher stadt ist das geburtsort einer person, die mindestens 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
menschen, die am oder nach dem datum geboren wurden, an dem alice zu arbeiten begann	menschen, die am oder nach dem datum geboren wurden, in dem alice zu arbeiten begann	menschen geboren, die am oder nach dem datum, alice anfing zu arbeiten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) )
hier finden sie alle im jahr 2004 geborenen alleinstehenden	finden sie alle alleinstehenden, die 2004 geboren wurden	finden sie alle einzigen menschen, die 2004 geboren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
mitarbeiter, deren letzter tag vor alice liegt	mitarbeiter, deren letzter tag vor alice	mitarbeiter, deren letzten tag bevor alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde freunde von studenten, deren letzter tag vor 2004 liegt	freunde von studenten finden, deren letzter tag vor 2004 ist	finden freunde von studenten, deren letzten tag vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen, die vor alice geboren wurden	menschen, die vor alice geboren wurden	menschen geboren, bevor alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )
welches mitarbeiterstartdatum ist das selbe wie alice	welches startdatum der mitarbeiter mit alice identisch ist	die mitarbeiter startdatum ist das gleiche wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche mitarbeiter am letzten tag waren frühestens am ersten tag von alice	welche mitarbeiter am letzten tag nicht früher als alices erster tag waren	die mitarbeiter letzte tag war nicht früher, als alice das erste tag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist alice's enddatum, als sie studentin war?	was ist alices enddatum, als sie studentin war	was ist alice ' s end date, wenn sie ein student war	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) )
wer ist mit studenten befreundet, deren startdatum 2004 ist?	wer ist mit studenten befreundet, die das datum 2004 beginnen	wer ist befreundet mit schüler / innen startdatum 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welches geschlecht hat der arbeitnehmer, der im jahr 2004 angefangen hat?	welches geschlecht ist die mitarbeiterin, die 2004 begonnen hat	was ist das geschlecht der mitarbeiter, die im jahr 2004 begonnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
woher kamen die menschen, die nach 2004 zu arbeiten begannen?	wo waren die menschen, die nach 2004 zu arbeiten begannen, geboren	wo waren die menschen, die arbeiten begonnen, die nach 2004 geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welcher mitarbeiter hat ein enddatum, das vor dem enddatum von alice liegt?	welcher mitarbeiter ein enddatum hat, das vor dem enddatum von alice liegt	welche mitarbeiter hat ein enddatum, das vor dem enddatum von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die bei mckinsey oder google arbeiten	personen, die bei mckinsey oder google arbeiten	menschen, die die arbeit bei mckinsey oder google	( call SW.listValue ( call SW.concat en.company.mckinsey en.company.google ) )
in welcher stadt wurden mindestens zwei personen geboren?	in welcher stadt mindestens zwei personen geboren wurden, die in	die stadt waren mindestens zwei menschen geboren, die in	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
finde mich die freunde des mitarbeiters, der vor 2004 angefangen hat	finden sie mich die freunde des mitarbeiters, der vor 2004 begonnen hat	finden mich die freunde, die mitarbeiter, die bereits vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
geschlecht des arbeitnehmers, dessen eintrittstermin nicht 2004 ist	geschlecht des arbeitnehmers, dessen startdatum nicht 2004 ist	geschlecht des mitarbeiters, dessen startdatum ist nicht 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wann ist alice an die brown university gekommen	wann hat alice an der braunen universität beigetreten	wann hat alice join an der brown university	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string education_start_date ) ) )
finden sie die geburtsstadt der schüler, deren startdatum nach 2004 liegt	finden sie die geburtsstadt von studenten, die ein startdatum nach 2004 haben	finden sie die geburtsstadt stadt der studenten, die ein startdatum später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie menschen mit einer höhe von 180 cm, die das gleiche geschlecht wie alice haben	finden sie menschen mit einer höhe von 180 cm, die das gleiche geschlecht wie alice sind	finden sie personen mit einer höhe von 180 cm, die das gleiche geschlecht haben wie alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string gender ) ) ( string = ) en.person.alice ) )
alice freunde, die singles sind	alices freunde, die singles sind	alice ' s freunden, die singles	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
mitarbeiter, die vor 2004 angefangen haben	mitarbeiter, die vor 2004	mitarbeiter, die bereits vor 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
2004 absolventen freunde	2004 absolventen freunde	2004absolventen, freunde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
ein mitarbeiter endet vor oder nach dem ende von alice	ein mitarbeiter endet vor oder wenn alice endet	ein mitarbeiter beenden, bevor oder wenn alice endet	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
geburtsort des arbeitnehmers, dessen enddatum nicht nach 2004 liegt	geburtsstadt des arbeitnehmers, dessen enddatum nicht nach 2004 liegt	geburtsstadt der mitarbeiter, deren endedatum ist nicht nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die in der gleichen stadt wie alice geboren wurden	menschen, die in der gleichen stadt wie alice geboren wurden	menschen, die geboren wurden, in der gleichen stadt wie alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) ) )
menschen, die für weniger als zwei arbeitgeber arbeiten	personen, die für weniger als zwei arbeitgeber arbeiten	menschen, die arbeit für weniger als zwei arbeitgeber	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist in einer stadt geboren, in der alice geboren ist?	der in einer stadt geboren wird, in der alice geboren wird	wer ist geboren in einer stadt, wo alice ist geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) ) )
wer hat mehr als zwei geschlechter	die mehr als zwei geschlechter hat	wer mehr als zwei geschlechter	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string > ) ( number 2 ) ) )
freunde von alice	freunde von alice	freunde von alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
studenten, die vor 2004 ihren abschluss nicht gemacht haben	studierende, die vor 2004 keinen abschluss gemacht haben	studenten, die halblizentiat, kein abschluss vor 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie geburtsorte von studenten, deren letzter tag im jahr 2004 oder später war	geburtshäuser von studenten finden, deren letzter tag 2004 oder später war	finden geburtsstätten von studenten, deren letzten tag wurde im jahr 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
alle leute, die gerade online sind	alle personen, die derzeit online sind	alle menschen, die derzeit online sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) )
geschlecht, das geschlecht von weniger als drei personen ist	geschlecht, das geschlecht von weniger als drei personen ist	geschlecht die geschlecht mit weniger als drei personen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
welche person ist ein 180 cm großer rüde	welche person ist ein 180 cm großer rüde	welche person ist 180 cm groß männlich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string gender ) ( string = ) en.gender.male ) )
welche schüler haben ein startdatum, das dem von schüler alice entspricht?	welche kursteilnehmer ein startdatum haben, das mit der von den schülern identisch ist	was die studierenden haben ein startdatum, das ist das gleiche als student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die freunde haben und nach 2004 anfingen zu arbeiten	personen, die freunde haben und nach 2004 mit der arbeit begonnen haben	menschen, die freunde haben, und begann mit der arbeit, die nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wer ist mit der person befreundet, die kein softwareingenieur ist?	der mit der person befreundet ist, die kein softwareingenieur ist	wer freunde mit der person, die nicht einen softwareingenieur	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wo waren arbeitende menschen, die nicht aufgehört haben, im jahr 2004 geboren	wo waren arbeitende menschen, die nicht aufgehört im jahr 2004 geboren	wo waren die arbeitenden menschen, die nicht aufhören, im jahr 2004 geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
männer, mit denen alice befreundet ist	männchen, mit denen alice befreundet ist	männer, die alice ist befreundet mit	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string gender ) ( string = ) en.gender.male ) )
ein student, der vor 2004 oder 2010 angefangen hat	ein student, der vor 2004 oder 2010 begonnen hat	ein student, der bereits vor 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher mitarbeiter früher als 2004 endete	welcher mitarbeiter vor 2004 endete	die mitarbeiter endete früher als 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
hier finden sie alle beziehungsstatus von mitarbeitern, die ihren job nach 2004 begonnen haben	finden sie alle beziehungsstatus von mitarbeitern, die nach 2004 ihre arbeit aufgenommen haben	finden sie mich die ganze beziehung status der mitarbeiter, die begonnen arbeit nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
geburtsorte von menschen, die nach 2004 ihren arbeitsplatz gekündigt haben	geburtsorte von menschen, die nach 2004 ihren arbeitsplatz aufgeben	geburtsorte von menschen, die ihre jobs aufgegeben, nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter, deren enddatum nach dem startdatum von alice liegt	mitarbeiter, deren enddatum nach dem startdatum von alice liegt	mitarbeiter, deren endedatum ist später als alice startdatum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welches geschlecht hat die meisten menschen?	welches geschlecht die meisten menschen hat	welches geschlecht hat die meisten menschen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string gender ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
in welcher stadt wurden 180 cm große menschen geboren?	welche stadt waren menschen, die 180 cm groß sind, geboren in	die stadt waren leute, die 180 cm groß geboren in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
nennen sie einen mitarbeiter, der gekündigt hat, bevor alice geboren wurde	benennen sie einen mitarbeiter, der gekündigt hat, bevor alice geboren wurde	name eines mitarbeiters, beenden sie, bevor sie geboren wurde alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welches geschlecht haben die mitarbeiter, die 2004 noch nicht angefangen haben?	was für ein geschlecht sind die mitarbeiter, die 2004 nicht angefangen haben	welches geschlecht haben die mitarbeiter, die nicht in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wann hat alice angefangen, die schule zu besuchen?	wann hat alice angefangen, die schule zu besuchen	wann hat alice start an der schule	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) )
suche nach schülern, die am oder nach alice's letztem tag beginnen	finden sie studenten, die am oder nach dem letzten tag von alice beginnen	finden sie studierenden, die am oder nach alice der letzte tag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche studenten vor dem abschluss von alice angefangen haben	welche studenten vor dem tag begonnen haben alice graduiert	die schüler begannen, bevor der tag alice schloss	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
listen sie den beziehungsstatus von personen auf, die ihre arbeit vor 2005 gekündigt haben	liste des beziehungsstatus von personen, die vor 2005 ihren arbeitsplatz gekündigt haben	liste der beziehungsstatus von menschen, die ihre arbeitsplätze verlassen, bevor 2005	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was für leute haben ein enddatum von 2004 und eine größe von 180 cm	was menschen haben ein enddatum von 2004 und höhe von 180 cm	was die leute haben ein endedatum von 2004 und höhe von 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )
welche mitarbeiterin hat den gleichen geburtstag wie alice	welcher mitarbeiter denselben geburtstag wie alice hat	was für mitarbeiter hat den gleichen geburtstag wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie mitarbeiter mit einem startdatum, das mindestens dem enddatum von mitarbeiter alice entspricht	suchen von mitarbeitern mit einem startdatum, das mindestens dem enddatum von employee alice entspricht	finden sie mitarbeiter, die ein startdatum, das mindestens die gleiche wie mitarbeiteralice ' s enddatum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
leute, die nach alice in die schule kamen, fingen an zu arbeiten	menschen, die die schule begannen, nachdem alice angefangen zu arbeiten begann	menschen, die mit der schule begonnen, nachdem alice anfing zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die mit jemandem befreundet sind, der seine arbeit in oder vor 2004 aufgenommen hat	personen, die mit jemandem befreundet sind, der in oder vor 2004 zu arbeiten begann	leute, dass sind freunde mit jemandem, der angefangen zu arbeiten, in oder vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
beziehungsstatus des mitarbeiters, dessen startdatum nicht nach 2004 liegt	beziehungsstatus eines mitarbeiters, dessen startdatum nicht nach 2004 liegt	beziehungsstatus der mitarbeiter, deren startdatum nicht nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
geschlecht des studenten, dessen enddatum mindestens 2004 ist	geschlecht des studierenden, dessen enddatum mindestens 2004 ist	geschlecht der schüler, deren endedatum ist mindestens 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
mitarbeiter, deren letzter tag vor oder am letzten tag von alice war	mitarbeiter, deren letzter tag vor oder am letzten tag von alice war	mitarbeiter, deren letzte tag war, bevor alice der letzte tag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus der studierenden, die vor 2004 geendet haben?	wie hoch ist der beziehungsstatus der studierenden, der vor 2004 endete	was ist das schülerbeziehung der status, die endete früher als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
studenten, die nicht im jahr 2004 begonnen haben	studenten, die 2004 nicht gestartet sind	studenten, die nicht in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde freunde von menschen, die im jahr 2004 geboren wurden	freunde von menschen finden, die 2004 geboren wurden	freunde finden von menschen, die geboren wurden in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )
person mit den meisten freunden	person mit den meisten freunden	person mit den meisten freunden	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( string friend ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
person, die nach dem abschluss von alice geboren wurde	person geboren nach alice graduiert	person geboren nach alice schloss	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) )
finde alle freunde von alice, die gerade online sind	finden sie alle freunde von alice, die derzeit online sind	suche alle von alice ' s freunde, die derzeit online sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string friend ) ( string = ) en.person.alice ) )
welcher mitarbeiter zuletzt eingestellt wurde	welcher mitarbeiter zuletzt eingestellt wurde	was mitarbeiter angestellt wurde letzten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
online männliches mitglied	online männliches mitglied	online männlich mitglied	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string gender ) ( string = ) en.gender.male ) )
student, der vor 2004 oder 2010 endet	student, der vor 2004 oder 2010 endet	schüler, die oberflächen vor dem jahr 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
nennen sie eine 2004 geborene person, die mit alice befreundet ist	nennen sie eine person, die im jahr 2004 geboren wurde, die mit alice befreundet ist	nennen sie eine person geboren im jahr 2004, wer ist befreundet mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
ist die einzelne person	ist die person single	ist die person single	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )
personen mit der geringsten anzahl von beziehungsstatus	personen mit der geringsten anzahl von beziehungsstatus	menschen, die die geringste anzahl von beziehung status	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( string relationship_status ) ) )
welcher mitarbeiter hat ein startdatum, das dem enddatum von alice entspricht?	welcher mitarbeiter über ein startdatum verfügt, das mit dem enddatum von alice identisch ist	welche mitarbeiter hat ein startdatum, das ist das gleiche wie das endedatum von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus von personen, die gerade online sind?	welche beziehungsstatus haben personen, die sich derzeit online befinden?	was sind die beziehung der status von personen, die derzeit online sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
finden sie mitarbeiter, deren starttag mit dem geburtsdatum von alice übereinstimmt	mitarbeiter finden, die gleichzeitig mit dem geburtsdatum von alice einen starttag haben	finden sie mitarbeiter, die ein starttag, zur gleichen zeit wie alice geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche personen sind mit mitarbeitern befreundet, die vor 2004 angefangen haben?	welche personen mit mitarbeitern befreundet sind, die vor 2004 begonnen haben	die menschen sind freunde mit mitarbeitern, die bereits vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
die person, die angemeldet ist und die im jahr 2004 geboren wurde	die eingeloggte person, die 2004 geboren wurde	die person angemeldet, der ist 2004 geboren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string logged_in ) ) )
wie ist der status der mitarbeiterbeziehung, die im jahr 2004 endete?	wie sieht der beziehungsstatus der arbeitnehmer aus, der 2004 endete	was ist das mitarbeiterbeziehung stand, die endete im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
alle 180 cm großen menschen, die informatik studiert haben	alle 180 cm großen menschen, die informatik studiert haben	alle 180 cm hoch, leute, die informatik studiert	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) )
menschen, die zur braunen universität gingen und ledig sind	menschen, die an die braune universität gegangen sind und	menschen, die ging an der brown university und der einzel 	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string university ) ( string = ) en.university.brown ) )
finden sie geburtsorte von studenten ab 2004 und später	geburtshäuser von studierenden ab 2004 und später finden	finden geburtsorte der schüler ab 2004 und später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finde mich nach dem geschlecht der studenten, die keine braune universität besucht haben	finden sie mich das geschlecht der studenten, die nicht an der braunen universität besucht haben	mich finden das geschlecht des studenten, die nicht an der brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
was hat alice studiert, als sie 2004 ihren abschluss gemacht hat?	was hat alice studiert, als sie 2004 seinen abschluss machte	was hat alice studie, bei der sie 2004 ihren abschluss	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string field_of_study ) ) )
studenten, die am selben datum wie alice begannen	studenten, die am selben datum wie alice begonnen haben	studenten, die an dem gleichen datum wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
person, die einen geburtstag vor alice absolventen hat	person, die einen geburtstag vor alice absolventen hat	person, die geburtstag hat, bevor alice absolventen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) )
eine person, die mit studenten befreundet ist, die in und nach 2004 mitgemacht haben	person, die mit studenten befreundet ist, die nach 2004 beigetreten sind	person, die freunde mit studierenden, die sich in und nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
der nach alices kündigung eingestellt wurde	der nach alice quit eingestellt wurde	wer angestellt wurde, nachdem alice beenden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
ein freund von jemandem, der nach 2004 angestellt war	ein freund von jemandem, der nach 2004 beschäftigt ist	ein freund, der jemanden beschäftigt, die nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die nach 2004 oder nach 2010 aufgehört haben zu arbeiten	menschen, die nach 2004 oder nach 2010 ihre arbeit eingestellt haben	menschen, die aufgehört zu arbeiten, die nach 2004 oder nach 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
suche nach schülern, deren letzter tag nach dem ersten tag von alice liegt	finden sie studenten, deren letzter tag nach alices erstem tag ist	finden sie studenten, deren letzten tag, nachdem alice das erste tag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wann hat alice den job angetreten, den sie im jahr 2004 verlassen hat?	wann hat alice den job angemacht, den sie 2004 verlassen hat	wann hat alice starten sie den job, den sie links im jahr 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_start_date ) ) )
welches geschlecht hat die onlineperson?	welches geschlecht die onlineperson ist	was gender ist die onlineperson	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
suche mir den schüler, der die schule vor alice verlassen hat	finden sie mich die schüler, die die schule verlassen, bevor alice begann	mich finden die schüler, die die schule verlassen, bevor alice begann	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
woher kamen die schüler aller fachrichtungen außer der informatik?	wo waren die studenten aller fachgebiete außer informatik geboren	wo waren die schüler jeden bereich, aber die informatik geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
mitarbeiter, die vor oder gleichzeitig mit alice anfangen	mitarbeiter, die vor oder gleichzeitig mit alice beginnen	mitarbeitern, die vor oder zeitgleich zu alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche mitarbeiter haben spätestens am abschlusstag von alice angefangen	welche mitarbeiter spätestens am aliceabschlusstag begonnen haben	die mitarbeiter an, die nicht später als alice ' s graduation day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist vor 2004 geboren	wer vor 2004 geboren wurde	wer geboren ist vor dem jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
personen, die vor 2004 oder vor 2010 eingeschult wurden	personen, die in oder vor 2004 oder vor 2010 mit der schule begonnen haben	menschen, die in die schule kam oder noch vor dem jahr 2004 oder im oder vor dem jahr 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
leute, die vor alice in die schule kamen, hörten auf zu arbeiten	menschen, die mit der schule begannen, bevor alice aufhörte zu arbeiten	menschen, die mit der schule begonnen, bevor alice aufgehört zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
leute, die aufhörten zu arbeiten, als alice die schule abbrach oder früher	menschen, die nicht mehr arbeiteten, wenn alice die schule beendete oder	menschen, die aufgehört zu arbeiten, als alice aufhörte schule oder vor	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche mitarbeiter haben ein enddatum, das nach 2004 oder 2010 liegt?	welche mitarbeiter ein enddatum haben, das später als 2004 oder 2010 liegt	was die mitarbeiter haben ein endedatum, das später als entweder 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
woher kamen menschen, die nach 2004 aufgehört haben zu arbeiten?	wo waren menschen, die nach 2004 nicht mehr arbeiteten, geboren	wo waren die menschen, die aufgehört zu arbeiten, die nach 2004 geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche stadt ist der geburtsort der mitarbeiter vor 2004?	welche stadt ist der geburtsort der mitarbeiter vor 2004	in welcher stadt ist der geburtsort des beschäftigten vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was sind die anfangs und enddaten der anstellung von alice?	was sind die anfangs und endbeschäftigungstermine von alice	was sind die startund endebeschäftigung stammt von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist der beziehungsstatus einer person, die nicht bei mckinsey beschäftigt ist?	wie hoch ist der beziehungsstatus der person, die nicht bei mckinsey beschäftigt ist?	was ist der beziehungsstatus der person, die nicht erfüllungsgehilfen von mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welcher mitarbeiter hat die meisten berufsbezeichnungen?	welcher mitarbeiter die meisten berufsbezeichnungen hat	welcher mitarbeiter hat die meisten berufsbezeichnungen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie den geburtsort eines studenten, der keine informatik studiert	geburtsort eines studenten finden, der kein informatikstudium studiert	finden, geburtsort der schüler, die nicht informatik studiert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welches geschlecht haben mindestens zwei personen?	welches geschlecht haben mindestens zwei personen	was gendermindestens zwei leute haben	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
studenten, die nach 2004 und spätestens 2010 beginnen	studenten, die nach 2004 und spätestens 2010 beginnen	die studierenden beginnen nach 2004 und nicht später als 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche person hat den gleichen beziehungsstatus wie alice?	welche person einen beziehungsstatus hat, der mit alice identisch ist	welche person hat eine beziehung status das gleiche wie alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( call SW.getProperty en.person.alice ( string relationship_status ) ) ) )
welche männer sind 180 cm groß	welche männer sind 180 cm groß	die männer sind 180 cm hoch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string gender ) ( string = ) en.gender.male ) )
mitarbeiter, die nicht bei mckinsey beschäftigt sind	mitarbeiter, die nicht bei mckinsey beschäftigt sind	mitarbeiter, die nicht erwerbstätig sind, die von mckinsey	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die vor 2004 aufgehört haben zu arbeiten	personen, die vor 2004 nicht mehr arbeiteten	menschen, die aufgehört zu arbeiten, bevor 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche personen sind mit studenten befreundet, die ihren abschluss erst 2004 gemacht haben?	welche menschen mit studenten befreundet sind, die frühestens 2004 ihren abschluss gemacht haben	die menschen sind freunde mit studenten, graduierte, die nicht älter als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche studenten nach 2004 ihren abschluss machen	welche studenten nach 2004 ihren abschluss machen	die absolventen, die nach 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
geschlecht des studenten, dessen universität keine braune universität ist	geschlecht von studierenden, deren universität nicht braune universität	geschlecht von studenten, deren universität nicht der brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie mitarbeiter freunde mit einem letzten tag im jahr 2004 oder früher	finden mitarbeiter freund mit einem letzten tag im jahr 2004 oder vor	finden mitarbeiterfreund mit einem letzten tag im jahr 2004 oder vor	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mit welchen menschen alice befreundet ist, sind befreundet mit alice	mit welchen personen alice befreundet ist, sind freunde mit alice	die menschen, die alice freunde sind freunde mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
welche 2004 geborene person ist 180 cm groß	welche person, die 2004 geboren wurde, 180 cm groß ist	welche person 2004 geboren, ist 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
was die schüler im selben jahr schulabschluss machten, begann alice	was schüler abgeschlossen schule im gleichen jahr alice begann	was die schüler beendet die schule im selben jahr begann alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
freunde von mitarbeitern, die ihren abschluss in oder nach 2004 haben	freunde von mitarbeitern, die in oder nach 2004 fertig sind	freunde der mitarbeiter finishing im jahr 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wer ist mit dem mitarbeiter befreundet, der spätestens 2004 angefangen hat	der mit dem mitarbeiter befreundet ist, der spätestens 2004 begonnen hat	wer ist freunde mit dem mitarbeiter, der begann spätestens 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finden sie den beziehungsstatus von mitarbeitern, deren enddatum größer als 2004 ist	finden sie den beziehungsstatus von mitarbeitern, deren enddatum größer als 2004 ist	finden sie den beziehungsstatus der mitarbeiter, denen ein enddatum, das größer ist als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die am oder vor dem schulbeginn die schule abgebrochen haben	menschen, die die schule am oder vor dem tag alice begann schule gestoppt	menschen, die nicht mehr die schule, die am oder vor dem tag von alice in die schule kam	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher student hat mindestens 2 universität zu gehen	der student mindestens 2 universitäten hat, an die	die schüler mindestens 2 universität zu gehen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string university ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
freunde von alice, die 180 cm groß sind	freunde von alice, die 180 cm groß sind	freunde von alice, die sind 180 cm hoch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
welche leute sind mit alice befreundet und 180 cm groß	welche leute sind mit alice befreundet und 180 cm groß	die menschen sind freunde mit alice und ist 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
wie ist der beziehungsstatus von menschen, die ab 2004 zu arbeiten begonnen haben?	wie hoch ist der beziehungsstatus von personen, die in oder nach 2004 angefangen haben	was ist der beziehungsstatus von menschen, begann im jahr 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was ist das geschlecht des mitarbeiters, der nach 2004 angefangen hat?	was ist das geschlecht der mitarbeiterin, die nach 2004 begonnen hat	was ist das geschlecht des mitarbeiter, die nach 2004 begonnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter, die vor oder nach alices ende anfangen	mitarbeiter, die vor oder nach abschluss von alice beginnen	mitarbeiter, die vor oder bei alice abgeschlossen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus von menschen, die im oder nach dem schuljahr 2004 eingeschult wurden?	wie hoch ist der beziehungsstatus von personen, die in oder nach 2004 mit der schule begonnen haben?	was ist der beziehungsstatus von menschen, die in die schule kamen im jahr 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wo ist die person geboren, die 180 cm groß ist?	wo war die geborene person, die 180 cm groß ist	wo wurde die person geboren, ist 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
mitarbeiter, der am oder nach dem beitritt von alice abgereist ist	mitarbeiter, der auf oder nach alice gegangen ist, ist beigetreten	mitarbeiter, die linken, die am oder nach alice kam	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, deren startdatum vor oder am enddatum von alice liegt	mitarbeiter, deren startdatum vor oder am enddatum von alice liegt	mitarbeiter, deren startdatum vor oder auf alice ' s enddatum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
der im jahr 2004 geboren wurde	geboren 2004	wer wurde 2004 geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
wie ist der status der mitarbeiterbeziehung, die spätestens 2004 begonnen hat?	wie hoch ist der beziehungsstatus der mitarbeiter, der spätestens 2004 begonnen hat?	was ist das mitarbeiterbeziehung stand, die begann spätestens 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche mitarbeiter ein enddatum haben, das nicht höher ist als das startdatum von student alice	welche mitarbeiter ein enddatum haben, das nicht größer ist als das startdatum der studentenalice	was die mitarbeiter haben ein enddatum, das nicht größer als das startdatum der student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welches geschlecht haben schüler, die vor 2004 eingeschult wurden?	was ist das geschlecht der schüler, die vor 2004 mit der schule begonnen haben	was ist das geschlecht des studenten, die die schule vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
fein mir mitarbeiter, die vor alice geburtstag verlassen werden	fine me mitarbeiter, die vor alice geburtstag verlassen	fein mir mitarbeiter, die verlassen vor alices geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, die das unternehmen frühestens zum beginn von alice verlassen	mitarbeiter, die das unternehmen nicht früher als das startdatum von alice verlassen	mitarbeiter verlassen das unternehmen, die nicht älter als alice startdatum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die mit jemandem befreundet sind, der 2004 noch nicht angefangen hat	personen, die mit jemandem befreundet sind, der 2004 nicht angefangen hat	menschen, die freunde sind mit einer person, die nicht in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was ist die universität einer person mit einer größe von 180 cm?	was ist die universität einer person, deren höhe 180 cm beträgt	was ist die universität eine person, deren höhe von 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.university ) ( string ! type ) ) ( call SW.reverse ( string university ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
mitarbeiter, die nach alice kündigten, verließen die schule	mitarbeiter, die nach alice die schule verlassen haben	mitarbeiter, die aufhören, nachdem alice die schule abbrechen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
schüler, die am selben tag oder vor dem beginn der schulzeit noch am leben waren, fingen an	schüler, die am selben tag mit der schule begonnen haben, an dem oder vor dem leben	studenten, die die schule am gleichen tag oder vor am leben gestartet	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
studenten, deren enddatum das enddatum von alice ist oder später	studenten, deren enddatum am enddatum von alice oder höher liegt	studierende, deren endedatum ist auf alice ' s enddatum oder später	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
leute, die vor alice in die schule kamen	menschen, die die schule begonnen haben, bevor alice aufhörte	menschen, die mit der schule begonnen, bevor alice gestoppt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche studenten gehen zur braunen universität oder ucla	welche studenten gehen an die braune universität oder ucla	die studenten nehmen an der brown university oder der ucla	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.concat en.university.brown en.university.ucla ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer war der erste, der anfing zu arbeiten?	der als erster mit der arbeit begonnen hat	wer war die erste person, die mit der arbeit zu beginnen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
studenten, deren startdatum nicht später als das von alice ist	studenten, deren startdatum nicht später als alices	studierende, deren startdatum nicht später als alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
in welcher stadt wurde der angestellte geboren, der kein softwareingenieur ist?	in welcher stadt der mitarbeiter war, der kein softwareingenieur ist, der	in welcher stadt wurde der arbeitnehmer, der nicht einen softwareingenieur geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
der geburtsort eines mitarbeiters, der nicht im jahr 2004 endet	der geburtsort eines arbeitnehmers, der 2004 nicht endet	der geburtsort des arbeitnehmers nicht ende 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
geschlecht der arbeitnehmer, die in oder nach 2004 beginnen	geschlecht der arbeitnehmer ab 2004	geschlecht von mitarbeitern, beginnend im jahr 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welcher student hat am selben tag seinen abschluss gemacht wie alice?	welcher student am selben tag wie alice graduierte	welche studentin absolvierte am selben tag, wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter, die an dem tag angefangen haben, an dem alice ihren abschluss gemacht hat	mitarbeiter, die an dem tag begannen, an dem alice graduierte	mitarbeiter, die begann an dem tag, alice schloss	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
schüler, die am geburtstag von alice fertig sind	studenten, die an alices geburtstag enden	schüler schlichten auf alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche von alices freunden wurden in new york geboren	welche von alices freunden in new york geboren wurden	die von "alice' s freunde waren in new york geboren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string birthplace ) ( string = ) en.city.new_york ) )
welche leute sind mit alices freunden befreundet	welche leute mit alices freunden befreundet sind	die menschen sind freunde mit alice ' s freunde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
student, der am selben tag wie alice geburtstag begann	student, der am selben tag wie alice geburtstag begann	student, begann am selben tag, wie alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die mit studenten befreundet sind, die ihren abschluss nicht im jahr 2004 gemacht haben	personen, die mit studenten befreundet sind, die 2004 keinen abschluss machen	menschen, die freunde sind mit studenten, die nicht diplom 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
beziehungsstatus des studenten, dessen startdatum vor 2004 liegt	beziehungsstatus des studierenden, dessen startdatum vor 2004 liegt	beziehung status der schüler, deren startdatum vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie die geburtsorte neuer mitarbeiter, die wir ab 2004 haben	die geburtsorte neuer mitarbeiter zu finden, die wir ab 2004 haben	finden sie die geburtsstätten von neuen mitarbeitern haben wir ausgehend von 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
der nach 2004 aufgehört hat zu arbeiten und verbindungen zu mir hat	die nach 2004 aufgehört hat zu arbeiten und verbindungen zu mir hat	wer aufgehört hat zu arbeiten nach 2004 und hat verbindungen zu mir	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finden sie menschen mit einer größe von 180 cm, die auch ein geburtsdatum von 2004 haben	menschen mit einer höhe von 180 cm finden, die auch ein geburtsdatum von 2004 haben	finden sie personen mit einer höhe von 180 cm, die auch ein geburtsdatum von 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
finde menschen, die mit alice befreundet und ledig sind	finden sie menschen, die mit alice befreundet sind und single sind	finden, menschen, die freunde sind mit alice und single sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
finde jemanden, der vor alice geboren wurde	jemanden finden, der vor alice geboren wurde	finden sie jemanden, der geboren wurde, bevor alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )
welche mitarbeiter haben einen starttermin von 2004 oder 2010?	welche mitarbeiter ein startdatum von 2004 oder 2010 haben	was die mitarbeiter haben ein startdatum entweder 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
geburtsstadt von alice's freundin	geburtsstadt von alices freund	geburtsstadt von alice ' s freund	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
welche mitarbeiterin hat gleich angefangen, als alice ihren job gekündigt hat	welcher mitarbeiter direkt anfing, als alice ihren job aufgab	die mitarbeiter kamen pünktlich, wenn alice ihren job beenden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus von mitarbeitern, deren letzter tag nicht vor 2004 lag?	wie hoch ist der beziehungsstatus von arbeitnehmern, deren letzter tag nicht früher als 2004 war	was ist der beziehungsstatus der mitarbeiter, deren letzten tag war nicht früher als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
beziehungsstatus aller studenten, deren enddatum 2004 ist	beziehungsstatus aller studenten, deren enddatum 2004 am	beziehung status aller schülerinnen und schüler, deren endedatum ist 2004 auf	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche studenten haben 2004 oder 2010 ihren abschluss gemacht?	was studenten in 2004 oder 2010 abgeschlossen haben	was schüler absolvierte im jahr 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie das studienfeld aller personen mit einer körpergröße von 180 cm	finden sie das studiengebiet aller personen mit einer höhe von 180 cm	finden sie den feld der studie alle personen, die eine höhe von 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.field ) ( string ! type ) ) ( call SW.reverse ( string field_of_study ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
menschen, die entweder mit alice oder bob befreundet sind	personen, die mit alice oder bob befreundet sind	menschen, die freunde sind entweder alice oder bob	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
ein student, der an dem tag ging, an dem alice es tat oder zuvor	ein student, der am tag alice tat oder vor	ein student, der links auf der tagalice getan hat, oder vor	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
person, die vor dem startdatum von alice geboren wurde	person, die vor alice startdatum geboren wurde	person, die geboren wurde, bevor alice startdatum	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )
welche mitarbeiter, die keine softwareingenieure sind	welche mitarbeiter, die keine softwareingenieure sind	was mitarbeiter, die nicht softwareingenieure	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche menschen haben einen geburtsort in new york, die auch mit alice befreundet sind	was menschen haben einen geburtsort von new york, die auch freunde mit alice sind	welche personen haben einen geburtsort von new york, die auch freunde mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
leute, die nicht mit alice befreundet sind	personen, die nicht mit alice befreundet sind	menschen, die nicht freund mit alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string ! = ) en.person.alice ) )
leute mit freunden finden, die vor 2004 in die schule gekommen sind	leute mit freunden finden, die vor 2004 mit der schule begonnen haben	die menschen finden sich mit freunden, ging zur schule, bevor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
was menschen mit einer körpergröße von 180 cm und einem studienfach haben, das informatik ist	was menschen haben eine höhe von 180 cm und studienbereich, das ist informatik	was die menschen haben eine höhe von 180 cm und bereich der studie, informatik	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) )
welches geschlecht hat die person, die 180 cm groß ist?	welches geschlecht ist die person, die 180 cm groß ist	was ist das geschlecht der person, die 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
studenten, die ihren abschluss nicht früher als am tag des beginns von alice gemacht haben	studenten, die erst am tag des beginns ihren abschluss machen	studierende, absolvent nicht früher als der tag begann alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
geburtsorte von alice's freunden	geburtsorte von alices freunden	geburtsorte von "alice' s freunde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
nennen sie die stadt, in der ein mitarbeiter geboren wurde, der spätestens 2004 seinen betrieb aufgenommen hat	nennen sie die stadt, in der ein mitarbeiter geboren wurde, der spätestens 2004 begonnen hat	name der stadt, wo ein mitarbeiter war geboren, begann spätestens 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
studenten, deren enddatum vor dem startdatum von alice liegt	studenten, deren enddatum vor dem startdatum von alice liegt	studierende, deren enddatum vor alices start datum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
ein student, der keine braune universität besucht	ein student, der keine braune universität besucht	ein student, der nicht teilnehmen brown university	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
studierende, die vor oder im jahr 2004 abschließen	studenten, die vor oder im jahr 2004 abgeschlossen haben	die studierenden beenden, bevor oder im jahre 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche schüler haben ein startdatum von 2004 oder später und wer sind ihre freunde?	welche schüler ein startdatum haben, das 2004 oder später ist und wer ihre freunde sind	was die studierenden haben ein startdatum, die 2004 oder später, und wer sind ihre freunde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen in der gleichen stadt wie alice geboren	menschen, die in der gleichen stadt wie alice geboren wurden	menschen geboren in der gleichen stadt wie alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) ) )
suche nach schülern, deren letzter tag 2004 oder später war	finden studenten, deren letzter tag war 2004 oder später	finden sie studenten, deren letzten tag war 2004 oder später	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter, die anfingen zu arbeiten bevor alice die schule beendete	mitarbeiter, die vor dem schulabschluss der alice mit der arbeit begonnen haben	mitarbeiter, die zu arbeiten begonnen haben, bevor alice die schule beendet	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
in welchen städten wurden die einzelnen menschen geboren?	welche städte die einzigen menschen waren, die in	welche städte waren die einzigen menschen, geboren in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )
mitarbeiter, die am selben tag oder nach dem schuleintritt von alice ihren job gekündigt haben	mitarbeiter, die ihren job am selben tag oder nach dem schulstart gekündigt haben	mitarbeiter beenden ihre arbeit, die am selben tag, oder nachdem alice in die schule kam	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche städte sind der geburtsort von studenten nach 2004?	welche städte sind der geburtsort von studenten nach 2004	welche städte sind die wiege der studenten, die später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche von alices freunden sind männlich	welche von alices freunden männlich sind	die von alice freunde sind männlich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string gender ) ( string = ) en.gender.male ) )
nennen sie alle schüler, die vor alice gekündigt haben	nennen sie alle schüler, die vor alice gekündigt haben	die namen aller studenten, die vor dem beenden alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie den beziehungsstatus von studenten mit einem startdatum nach 2004	finden sie die beziehungsstatus von kursteilnehmern mit einem startdatum nach dem 2004	die beziehung der status von studenten mit einem startdatum später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
geburtsort von nur einer person	geburtsort von nur einer person	geburtsort von nur einer person	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
hier finden sie alle beziehungsstatus der schüler, die im jahr 2004 und früher begonnen haben	alle beziehungsstatus der studierenden zu finden, die 2004 und vor	finden sie alle beziehung der status von schülerinnen und schülern, die im jahr 2004 begonnen und vor	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen mit mindestens zwei geschlechtern finden	menschen finden, die mindestens zwei geschlechter haben	menschen, die mindestens zwei geschlechter	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string >= ) ( number 2 ) ) )
ein mitarbeiter, der vor 2004 endete	ein mitarbeiter, der vor 2004 endet	ein mitarbeiter vor ende 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus von menschen, die nach 2004 in die schule gekommen sind?	wie hoch ist der beziehungsstatus von menschen, die nach 2004 mit der schule begonnen haben?	was ist der beziehungsstatus von menschen, die mit der schule begonnen, die nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wer ist eine person, deren fach informatik ist und deren größe 180 cm beträgt	wer ist eine person, deren studienbereich informatik ist und deren höhe 180 cm beträgt	wer ist eine person, deren studienrichtung ist informatik, und deren höhe von 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) )
menschen, die mit alice befreundet sind, deren größe 180 cm beträgt	personen, die mit alice befreundet sind, deren höhe 180 cm beträgt	menschen, die freunde sind mit alice, deren höhe von 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
welcher mitarbeiter wurde gekündigt, nachdem alice zu arbeiten anfing	welcher mitarbeiter gekündigt wurde, nachdem alice mit der arbeit begonnen hatte	was mitarbeiter wurde gekündigt, nachdem alice anfing zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
anzahl der städte, aus denen menschen stammen	anzahl der städte, die aus	anzahl der städte, die menschen sind von	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ) )
freunde von menschen finden, die 2004 nicht eingeschult wurden	freunde von menschen finden, die 2004 nicht die schule begonnen haben	freunde finden von menschen, die nicht die schule beginnen in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
die studenten haben spätestens am letzten arbeitstag von alice ihren abschluss gemacht	die studenten spätestens am letzten arbeitstag von alice abgeschlossen haben	die studienanfänger ihr studium nicht später als alice der letzte tag der arbeit	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
schüler, die die schule beendet hatten, nachdem alice zu arbeiten begonnen hatte	schüler, die die schule beendeten, nachdem alice mit der arbeit begonnen hatte	schüler beendet die schule nach alice anfing zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche mitarbeiter haben nach 2004 oder 2010 angefangen?	die mitarbeiter nach 2004 oder 2010	die mitarbeiter an, die nach 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, die ihre arbeit in oder vor 2010 aufgenommen haben	mitarbeiter, die in oder vor 2010 mit der arbeit begonnen haben	mitarbeiter, die begonnen arbeiten in oder vor 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, die nach alices arbeitsaufnahme anfingen, kündigten ihren job	mitarbeiter, die nach alice senkundbeendet haben, haben ihren job gekündigt	mitarbeiter, die zu arbeiten begonnen, nachdem alice ihren job beenden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
nennen sie eine einzelne person, die mit alice befreundet ist	benennen sie eine einzelne person, die mit alice befreundet ist	name einer einzelnen person, die freunde mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string friend ) ( string = ) en.person.alice ) )
wie ist der beziehungsstatus von studierenden, die nicht im jahr 2004 angefangen haben?	wie hoch ist der beziehungsstatus von studierenden, die 2004 nicht begonnen haben?	was ist der beziehungsstatus der studierenden, die nicht in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie die geburtsstadt der mitarbeiter mit einem startdatum nach 2004	die geburtsstadt der mitarbeiter mit einem startdatum nach 2004 zu finden	finden sie die geburtsstadt von mitarbeitern mit einem startdatum später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welcher mitarbeiter kündigte zuerst	welcher mitarbeiter zuerst gekündigt hat	die mitarbeiter beenden sie zuerst	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde einen von alices freunden, der in new york geboren wurde	finden sie einen von alices freunden, der in new york geboren wurde	finden einer von alices freunden, die in new york geboren wurde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string birthplace ) ( string = ) en.city.new_york ) )
freunde von studenten vor 2004	freunde von studenten vor 2004	freunde von studenten vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
geschlecht eines arbeitnehmers ab 2004	geschlecht eines mitarbeiters ab 2004	geschlecht des arbeitnehmers ab, bevor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finde menschen, die den gleichen geburtsort haben wie alice	menschen finden, die den gleichen geburtsort wie alice haben	menschen, die den gleichen geburtsort wie alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.getProperty en.person.alice ( string birthplace ) ) ) )
welcher student hat weniger als zwei studienfächer	welcher student weniger als zwei studienrichtungen hat	welcher schüler hat weniger als zwei studienrichtungen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
der vor alices letztem arbeitstag geboren wurde	der vor alices letztem arbeitstag geboren wurde	wer wurde geboren, bevor alice der letzte tag der beschäftigung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) )
wie ist der beziehungsstatus des studenten, der nicht informatik studiert?	wie hoch ist der beziehungsstatus des studenten, der kein informatikstudium studiert?	was ist der beziehungsstatus der studierenden, die nicht informatik studiert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
student, dessen enddatum nicht nach dem geburtsdatum von alice liegt	student, dessen enddatum nicht nach dem geburtsdatum von alice	schüler, deren endedatum ist nicht nach dem geburtsdatum von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
leute, die einen freund haben, der die schule in oder nach 2004 abgebrochen hat	menschen, die einen freund haben, der die schule in oder nach 2004 beendet hat	menschen, die einen freund haben, beendet die schule im jahr 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
leute, die anfingen zu arbeiten, bevor alice die schule abbrach	menschen, die vor alice begann enden, die schule zu stoppen	menschen, die arbeiten begonnen, bevor alice beendet die schule	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde singlestatusleute, die alice's freund sind	einzelstatuspersonen finden, die alices freund sind	finden singlestatus menschen, die alice ' s freund	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
menschen, die mit studenten befreundet sind, die 2004 nicht geendet haben	menschen, die mit studenten befreundet sind, die 2004 nicht endeten	menschen, die freunde sind mit studenten, die nicht ende 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen, die nach 2004 anfingen zu arbeiten	menschen, die nach 2004 mit der arbeit begonnen haben	menschen, die arbeiten begonnen, die nach 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche menschen wurden am selben ort wie alice geboren?	welche menschen am selben ort wie alice geboren wurden	die menschen, die geboren wurden, in der gleichen stelle, wie alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.getProperty en.person.alice ( string birthplace ) ) ) )
was ist der geburtsort von studenten, die keine braunen studenten sind	was ist der geburtsort von studenten, die keine braunen universitätsstudenten sind	was ist der geburtsort der schüler, die nicht an die brown university studenten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finde alices freund, der eingeloggt ist	finden alice s freund, der eingeloggt ist	finden sie alice ' s freund, wer eingeloggt ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string logged_in ) ) )
mitarbeiter, die so spät wie alice gekündigt haben	mitarbeiter, die so spät wie alice gekündigt haben	mitarbeiter, beenden sie so spät wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
person, die mit einem mitarbeiter befreundet ist, der seit 2004 arbeitet	person, die ein freund eines mitarbeiters ist, der seit 2004 gearbeitet hat	person, die einem freund von einem mitarbeiter, der gearbeitet hat, seit 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wer ist mit dem mitarbeiter befreundet, der das unternehmen bis 2004 verlässt?	der mit dem mitarbeiter befreundet ist, der das unternehmen bis 2004 verlässt	wer ist freunde mit dem mitarbeiter, der das unternehmen verlassen, die von 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
hier finden sie die namen aller studenten, die zwischen 2004 und 2010 ihren abschluss gemacht haben	finden sie die namen aller studenten, die zwischen 2004 und 2010 ihren abschluss gemacht haben	finde die namen aller studenten, die absolvierte zwischen 2004 und 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter, die nicht im jahr 2004 begonnen haben	mitarbeiter, die 2004 nicht anden,	mitarbeiter, die nicht in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche person ist mit einem studenten befreundet, der vor 2004 angefangen hat?	welche person mit einem studenten befreundet ist, der vor 2004 begonnen hat	die person ist freunde mit einem schüler, der schon früher begonnen als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche stadt ist der geburtsort des schülers, der die schule vor 2004 beendet hat?	welche stadt ist der geburtsort des schülers, der die schule vor 2004 beendet hat	in welcher stadt ist der geburtsort der schüler beendet die schule vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
suche nach personen mit zwei beziehungsstatus	personen finden, die zwei beziehungsstatus haben	finden menschen, die haben zwei beziehung status	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( number 2 ) ) )
schüler, der am oder vor dem tag kam, als alice ging	student, der am oder vor dem tag alice links beigetreten ist	schüler, die sich am oder vor dem tag, alice links	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist der geburtsort von mitarbeitern, deren letzter tag nicht im jahr 2004 war	was ist der geburtsort von arbeitnehmern, deren letzter tag nicht im jahr 2004 war	was ist der geburtsort von mitarbeitern, deren letzten tag war nicht 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wann hat alice angefangen, für mckinsey zu arbeiten?	wann hat alice angefangen, für mckinsey zu arbeiten	wann hat alice anfangen zu arbeiten für mckinsey	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string employment_start_date ) ) )
person namens alice, die informatik an einer universität studiert	person namens alice, die informatik an einer universität studiert	person namens alice, die ein studium der informatik an einer universität	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string university ) ) )
wie ist der beziehungsstatus eines mitarbeiters, der 2004 oder später gekündigt hat?	wie hoch ist der beziehungsstatus eines mitarbeiters, der 2004 oder später gekündigt hat?	was ist der familienstand eines arbeitnehmers, beendet im jahr 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was ist der geburtsort des studenten, der bis 2004 eingeschrieben wurde?	was ist die geburtsstadt der studenten, die bis 2004 eingeschrieben wurde	was ist der geburtsort der stadt von studenten, die immatrikuliert war von 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welcher mitarbeiter hat kürzlich gekündigt?	welcher mitarbeiter vor kurzem gekündigt hat	die mitarbeiter aufgehört	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, die einen arbeitsplatz mit lebendig teilen	mitarbeiter, die einen arbeitsplatz mit lebenden	mitarbeiter, die einen arbeitsplatz mit lebendig	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche studenten sind teil von zwei universitäten	welche studenten teil von zwei universitäten sind	was die studenten sind teil von zwei universitäten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string university ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde mich alle leute mit dem namen alice, die im laufe des jahres 2004 aufgehört haben	finden sie mich alle personen namens alice, die im jahr 2004 aufgehört haben	mich finden alle personen mit dem namen alice, die im jahr 2004 beenden	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string education_end_date ) ) )
welche schüler haben den frühesten starttermin	welche kursteilnehmer das früheste startdatum haben	was haben die studierenden die frühesten starttermin	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie geburtsorte von angestellten, die keine mckinseyangestellten sind	geburtshäuser von nichtmckinseymitarbeitern finden	finden geburtsorte nicht mckinseymitarbeiter	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
stadt, in der am wenigsten menschen geboren wurden	stadt, in der die geringste anzahl von menschen geboren wurde	stadt, wo die wenigsten menschen waren geboren	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string birthplace ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
arbeitnehmer, dessen arbeitgeber nicht mckinsey ist	arbeitnehmer, dessen arbeitgeber nicht mckinsey ist	arbeitnehmer, deren arbeitgeber nicht mckinsey	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde mich alle menschen mit dem gleichen geschlecht wie alice oder bob	finden sie mich alle menschen mit dem gleichen geschlecht wie alice oder bob	mich finden alle menschen mit dem gleichen geschlecht als alice oder bob	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
geschlecht der arbeitnehmer, die vor 2004 ausgeschieden sind	geschlecht der arbeitnehmer, die vor 2004 ausgereist sind	geschlecht der beschäftigten, die linke vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
der geborene ist 2004 und ist ein mann	geboren ist 2004 und ist ein männlicher	wer geboren wird, ist von 2004 und ist ein männchen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
wer ist befreundet mit alice und ist männlich	wer ist freundet mit alice und ist männlich	wer ist befreundet mit alice und ist männlich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string gender ) ( string = ) en.gender.male ) )
leute, die an dem tag angefangen haben, an dem alice ihren job gekündigt hat	menschen, die an dem tag zu arbeiten begannen, an dem alice ihren job aufgab	menschen, die mit der arbeit an den tag alice ihren job beenden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer hat die geringste anzahl von freunden	wer die geringste anzahl von freunden hat	wer hat die wenigsten freunde	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string friend ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
mitarbeiter, die gekündigt haben, nachdem alice ihren job angefangen hat	mitarbeiter, die nach alice senkchen ihren job beendet haben	mitarbeiter, die sie nach alice begann ihr job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter nicht ab 2004	mitarbeiter, die nicht im jahr 2004	mitarbeiter nicht ab 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche leute geboren wurden, nachdem alice ihren job verlassen hatte	welche menschen geboren wurden, nachdem alice ihren job verlassen hatte	die menschen, die geboren wurden, nachdem alice ließ ihr job	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) )
was ist das geschlecht, das das geschlecht von höchstens zwei personen ist	was ist das geschlecht, das das geschlecht von höchstens zwei menschen ist	was ist das geschlecht, das geschlecht von zwei menschen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
wer ist mit der einzelnen person befreundet?	wer mit der einzelperson befreundet ist	wer freunde mit der einzigen person	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )
suche nach mitarbeitern, die am oder nach dem geburtsdatum von alice beginnen	mitarbeiter finden, die am oder nach dem geburtsdatum von alice beginnen	finden sie mitarbeiter ab, die am oder nach alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus von studenten mit einem enddatum, das nicht 2004 liegt?	wie hoch ist der beziehungsstatus von studierenden mit einem enddatum, das nicht 2004 ist?	was ist der beziehungsstatus der studierenden mit einem enddatum, das nicht 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche schüler haben ein enddatum das vor dem startdatum von alice liegt	welche kursteilnehmer ein enddatum haben, das vor dem startdatum von alice liegt	was die studierenden haben ein endedatum ist früher als das startdatum von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher student ist im selben fach wie alice	welcher student sich im selben studienbereich befindet wie alice	welcher student ist in der gleichen studienrichtung als alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen mit freunden, die 2004 oder später mit der universität angefangen haben	menschen mit freunden, die 2004 oder später mit der universität begonnen haben	menschen mit freunden, die universität begann im jahr 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
freund eines mitarbeiters, dessen startdatum vor 2004 liegt	freund eines mitarbeiters, dessen startdatum vor 2004 liegt	freund der mitarbeiter, deren startdatum vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die nicht mit alice befreundet sind	personen, die nicht mit alice befreundet sind	menschen, die keine freunde mit alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string ! = ) en.person.alice ) )
geschlecht der studierenden, die zeitgleich mit oder vor 2004 beginnen	geschlecht der studierenden, die zeitgleich bis oder vor 2004 beginnen	geschlecht von studierenden gleichzeitig auf oder vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie personen, die mitarbeiter mit einem enddatum bis spätestens 2004 sind, und deren freunde	personen finden, die mitarbeiter mit einem enddatum spätestens 2004 sind, und ihre freunde	finden sie menschen, die mitarbeiter sind mit einem enddatum nicht später als 2004 und ihre freunde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
leute, die die schule abgebrochen haben, nachdem alice in die schule gekommen ist	menschen, die die schule nach alice begann schule gestoppt	menschen, die nicht mehr die schule, nachdem alice in die schule kam	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
geschlecht der arbeitnehmer, die vor oder in 2004 beginnen	geschlecht der arbeitnehmer, die vor oder im jahr 2004 beginnen	geschlecht der abhängig beschäftigten, die vor oder in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die 180 cm groß und single sind	personen, die 180 cm groß und ledig sind	menschen, die 180 cm groß und single sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
alleinerziehende, die 2004 geboren wurden	jeder single geboren im jahr 2004	jeder einzelne geboren in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
suche mir alle schüler, die zur selben zeit oder nach dem start von alice beginnen	finden sie mich alle studenten, die zur gleichen zeit oder nach alice beginnt beginnen	mich finden alle studenten, die zur gleichen zeit starten oder nach alice beginnt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde eine universität von menschen, die 180cm groß sind	universität von menschen zu finden, die 180cm groß sind	finden sie university der menschen, die 180cm groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.university ) ( string ! type ) ) ( call SW.reverse ( string university ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
person, die bei mckinsey oder google arbeitet	person, die bei mckinsey oder google arbeitet	person, die arbeitet bei mckinsey oder google	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string = ) ( call SW.concat en.company.mckinsey en.company.google ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher mitarbeiter nach 2004 verstorben ist	welcher mitarbeiter nach 2004 endete	die mitarbeiter endete nach 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, die zu ende gehen, wenn oder bevor alice beginnt	mitarbeiter, die fertig sind, wenn oder bevor alice beginnt	mitarbeiter, die fertig stellen, wenn oder bevor alice beginnt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist in den meisten beziehungen	wer in den meisten beziehungen ist	wer ist in den meisten beziehungen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string relationship_status ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
wie ist das geschlecht der arbeitnehmer, die nach 2004 angefangen haben?	was ist das geschlecht der mitarbeiter, die nach 2004 begonnen haben	was ist das geschlecht der mitarbeiter, die begann, nachdem 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mit wem war der mitarbeiter, mit dessen startdatum mindestens 2004 befreundet war?	der mitarbeiter ist, dessen startdatum mindestens 2004 freunde mit	wer ist der mitarbeiter, dessen startdatum war zumindest 2004 freunde mit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finden sie mitarbeiter, deren startdatum vor dem enddatum von student alice liegt	suchen von mitarbeitern mit einem startdatum vor dem enddatum der studentenalice	finden mitarbeiter mit einem startdatum älter als das endedatum der student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die am selben tag geboren wurden, sind in die schule gekommen	menschen, die am selben tag alice geboren wurden, begann die schule	menschen, die geboren wurden, den gleichen tag alice in die schule kam	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) )
finden sie die geburtsstädte von schülern mit einem startdatum ab 2004	die geburtsstädte von studenten zu finden, die ein startdatum im jahr 2004 oder mehr haben	finden sie die geburt der städte von studenten, die ein startdatum in 2004 oder höher	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
mit wem ist eine person, mit deren universität keine braunen universitätsfreunde sind?	die eine person ist, deren universität nicht braune universitätsfreunde mit	wer ist eine person, deren universität nicht der brown university freunden mit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wie ist der beziehungsstatus von mitarbeitern, die ihre arbeit vor 2004 aufgenommen haben?	wie ist der beziehungsstatus von arbeitnehmern, die vor 2004 mit der arbeit begonnen haben	was ist der beziehungsstatus der mitarbeiter, die mit der arbeit begonnen, vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die nach 2004 geboren wurden	menschen, die nach 2004 geboren wurden	menschen, die geboren wurden, nachdem 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
finden sie mitarbeiter freunde mit letzten tag nach 2004	mitarbeiter mit dem letzten tag nach 2004 anfreunden	mitarbeiter suchen freunde mit dem letzten tag nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wer hat mehr als zwei geschlechter	der mehr als zwei geschlechter hat	wer hat mehr als zwei geschlechter	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string > ) ( number 2 ) ) )
ist alice von mckinsey beschäftigt	ist alice employed von mckinsey	alice beschäftigt, die von mckinsey	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string employer ) ) )
finden sie mitarbeiter, deren enddatum mit dem von student alice übereinstimmt	mitarbeiter finden, deren enddatum mit dem von student alice identisch ist	finden sie mitarbeiter, deren enddatum ist das gleiche wie das von alice schüler	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus von schülern, die vor 2004 eingeschult wurden?	wie hoch sind die beziehungsstatus von schülern, die vor 2004 mit der schule begonnen haben?	was sind die beziehungen der status von studenten, die die schule vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
studenten freund, dessen universität nicht braun universität ist	studenten freund, dessen universität ist nicht braun universität	studenten freund, dessen universität nicht der brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche freunde haben 2004 aufgehört zu arbeiten?	welche freunde 2004 nicht mehr arbeiten	die freunde, die aufgehört zu arbeiten in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die mit jemandem befreundet sind, der 2004 noch nicht angefangen hat	personen, die mit jemandem befreundet sind, der 2004 nicht gestartet ist	menschen, die freunde sind, mit jemandem, der nicht in das geschäftsjahr 2004 gestartet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche mitarbeiter haben ein späteres enddatum als mitarbeiter alice?	welche mitarbeiter ein enddatum haben, das später als das von employee alice liegt	was die mitarbeiter haben ein endedatum, das später als mitarbeiter von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
geschlecht eines studenten, der keine braune universität besucht	geschlecht eines studenten, der keine braune universität besucht	geschlecht der schüler nicht an der brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
geschlecht, das weniger als zwei personen hat	geschlecht, das weniger als zwei personen hat	geschlecht, das weniger als zwei personen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
beziehungsstatus von studenten, die nicht an einer braunen universität studieren	beziehungsstatus von studierenden, die nicht an einer braunen universität studieren	beziehung, status der studierenden, die nicht das studium an der brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
geschlecht des studenten, dessen startdatum nicht 2004 ist	geschlecht der studierenden, deren startdatum nicht 2004 ist	geschlecht des schülers, dessen startdatum ist nicht 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
student mit startdatum nicht nach enddatum von student alice	student mit startdatum nicht nach demenddatum der studentenalice	student mit startdatum nicht nach dem enddatum der student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
ist die person ledig oder verheiratet	ist die alleinstehende oder verheiratete person	ist die person ledig oder verheiratet	( call SW.listValue ( call SW.concat en.relationship_status.single en.relationship_status.married ) )
wann hat alice aufgehört, für mckinsey zu arbeiten?	wann hat alice aufgehört, für mckinsey zu arbeiten	wann hat alice aufhören zu arbeiten für mckinsey	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string employment_end_date ) ) )
finde jeden, der zwei geschlechter hat	finden sie alle, die zwei geschlechter haben	finden alle, die zwei geschlechter	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( number 2 ) ) )
was ist das enddatum 2004 von alice?	was ist das enddatum 2004 der alice	was ist der alice aus dem jahr 2004 enddatum	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string education_end_date ) ) )
mit wem sind mitarbeiter mit einem startdatum nicht von 2004 befreundet?	die personen sind, die mitarbeiter mit einem startdatum sind, die nicht 2004 freunde mit	wer sind die menschen, die mitarbeiter sind mit einem startdatum nicht von 2004 mit freunden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche schüler haben ein enddatum, das nach dem startdatum von schüler alice liegt	welche kursteilnehmer ein enddatum haben, das nach dem startdatum der kursteilnehmeralice liegt	was die studierenden haben ein enddatum nach dem startdatum student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
geschlecht der mitarbeiter, die nicht als softwareentwickler tätig sind	geschlecht von mitarbeitern, die nicht als softwareingenieure arbeiten	geschlecht von mitarbeitern, die nicht so funktionieren, wie softwareingenieure	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wann hat alice als mitarbeiterin angefangen	wann begann alice als mitarbeiter	wann hat alice beginnen als mitarbeiter	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) )
wer ist kleiner als alice?	wer ist kürzer als alice	wer kürzer als alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )
wie ist der beziehungsstatus von menschen, die vor 2004 eingeschult wurden?	wie hoch ist der beziehungsstatus von menschen, die vor 2004 mit der schule begonnen haben?	was ist der beziehungsstatus von menschen, die in die schule kamen vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wie viele berufsbezeichnungen gibt es?	wie viele berufsbezeichnungen es gibt	wie viele titel sind es	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.job_title ) ( string ! type ) ) ) )
welcher student ist nicht von der braunen universität	welcher student nicht von der braunen universität stammt	welcher student nicht von der brown university	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer arbeitet für jemand anderen als mckinsey	wer für jemand anderen als mckinsey arbeitet	wer arbeitet für jemand anderen als mckinsey	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
schüler, die vor oder an alices letztem tag angefangen haben	studenten, die vor oder am letzten tag von alice begonnen haben	studenten, die vor oder bei alice der letzte tag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer wurde am oder nach alices letztem schultag geboren	der am letzten schultag oder nach alice geboren wurde	geboren am oder nach alice ' s letzten tag in der schule	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) )
menschen mit weniger als zwei freunden	menschen mit weniger als zwei freunden	menschen mit weniger als zwei freunde	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
finde mitarbeiter mit dem gleichen letzten tag wie student alice	finden sie mitarbeiter mit dem gleichen letzten tag wie student alice	finden mitarbeiter mit der gleichen letzten tag als studentin alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche mitarbeiter nach alice angefangen haben	welche mitarbeiter nach alice gestartet haben,	die mitarbeiter begannen nach alice hast	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
studenten, die anfangen, bevor alice fertig ist	schüler, die beginnen, bevor alice endet	studenten, die beginnen, bevor alice abgeschlossen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die an dem tag geboren wurden, als alice mit der arbeit begann	menschen, die an dem tag geboren wurden, an dem alice mit der arbeit begann	menschen, die geboren wurden, an dem tag alice mit der arbeit begonnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) )
in welcher stadt wurde der student geboren, der das enddatum 2004 hat?	welche stadt war der student geboren, die 2004 als enddatum geboren hat	in welcher stadt wurde der student geboren, die seit 2004 als enddatum	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche person ist mit einem mitarbeiter befreundet, der 2004 hier war?	welche person mit einem mitarbeiter befreundet ist, der 2004 hier war	die person ist befreundet mit einem mitarbeiter, der war hier in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
geburtsort von studenten, deren enddatum vor 2004 liegt	geburtsort von studierenden, deren enddatum vor 2004 liegt	geburtsort von studenten, deren enddatum vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche menschen sind 180 cm groß	welche personen sind 180 cm groß	die menschen sind 180 cm hoch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
finde mich studenten, deren startdatum entweder 2004 oder 2010 ist	finden sie mich studenten, deren startdatum entweder 2004 oder 2010 ist	mich finden studenten, deren startdatum ist entweder 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
such mir den studenten, der vor alice angefangen hat	finden sie mich die studentin, die vor alice begonnen	finden sie mich, den schüler, der beginnt, bevor alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher arbeitnehmer spätestens 2004 ausscheidet	welcher mitarbeiter spätestens 2004 endete	die mitarbeiter endete spätestens 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus eines mitarbeiters, dessen startdatum nach 2004 liegt?	wie hoch ist der beziehungsstatus eines mitarbeiters, dessen startdatum nach 2004 liegt?	was ist die beziehung der status eines mitarbeiters, dessen startdatum ist später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche studenten haben ein enddatum nicht früher als 2004	welche studierenden ein enddatum frühestens 2004 haben	was die studierenden haben ein endedatum nicht früher als 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wie groß ist alice?	wie groß ist alice	wie hoch ist alice	( call SW.listValue ( call SW.getProperty en.person.alice ( string height ) ) )
nenne einen mitarbeiter, der vor alices kündigung angefangen hat	benennen sie einen mitarbeiter, der vor dem beenden von alice begonnen hat	name eines mitarbeiters, der begann, bevor alice beenden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche von alices freunden ist 180 cm groß	welche von alices freunden 180 cm groß ist	die von "alice' s freunden ist 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
arbeitnehmer, dessen enddatum nicht nach 2004 liegt	mitarbeiter, dessen enddatum nicht nach 2004 liegt	mitarbeiter, deren endedatum ist nicht nach 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche mitarbeiter haben einen starttermin, der dem von schüler alice oder später entspricht?	welche mitarbeiter ein startdatum haben, das mit der von den schülern oder höher identisch ist	was mitarbeiter in ein startdatum, das ist das gleiche als student alice oder später	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wo ist der geburtsort des studenten, der vor 2004 angefangen hat?	wo ist der geburtsort des studenten, der vor 2004 begonnen hat?	wo ist der geburtsort des studierenden, die bereits vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche studenten haben nicht mehr als zwei majors	welche studenten nicht mehr als zwei haupt	die schüler haben nicht mehr als zwei majors	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer ist mit studenten befreundet, die vor 2004 angefangen haben?	der mit studenten befreundet ist, die vor 2004 begonnen haben	wer ist befreundet mit studenten, die vor dem jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
personen mit einem beziehungsstatus von mindestens zwei personen	personen mit beziehungsstatus von mindestens zwei personen	menschen mit familienstand von mindestens zwei personen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
welche studenten ihren abschluss spätestens 2004 oder 2010 machen	die studenten spätestens 2004 oder 2010 ihren abschluss machen	die absolventen, die nicht später als 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie alle menschen, die nicht in einer beziehung sind und im jahr 2004 geboren wurden	finden sie alle menschen, die nicht in einer beziehung sind und im jahr 2004 geboren wurden	finden sie alle personen, die nicht in einer beziehung und 2004 geboren wurden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
suche nach studenten mit weniger als zwei studienrichtungen	studierende finden, die weniger als zwei studienrichtungen haben	finden studenten, die weniger als zwei fachrichtung	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
in welchen städten in new york wurden menschen geboren?	welche städte in new york menschen geboren wurden, die in	welche städte in new york wurden menschen geboren, die in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )
freunde von studenten, die vor 2004 angefangen haben	freunde von studenten, die vor 2004 begannen	freunde von studenten, die früher begannen als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
student, der 2004 als datum hat	student, der 2004 als datum hat	student, der 2004 als datum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
geschlecht der schüler, die 2004 nicht eingeschult wurden	geschlecht von schülern, die 2004 nicht in die schule ein und schult sind	geschlecht von studenten, die didnt start der schule im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
freund eines mitarbeiters, dessen berufsbezeichnung nicht softwareingenieur ist	freund eines mitarbeiters, dessen berufsbezeichnung kein softwareingenieur ist	freund der mitarbeiter, deren jobtitel ist nicht software ingenieur	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
leute, die freunde haben, die gerade online sind	personen, die freunde haben, die derzeit online sind	menschen, die freunde, die derzeit online sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
suche mir eine person, die 2004 oder 2010 geboren wurde	finden sie mich eine person geboren in entweder 2004 oder 2010	suche mir eine person geboren in entweder 2004 oder 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) )
geschlecht der studierenden, die kein informatikstudium absolvieren	geschlecht von studierenden, die kein informatikstudium	geschlecht von studenten, die nicht informatik studiert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welcher mitarbeiter hat ein startdatum, das vor dem geburtsdatum von alice liegt?	welcher mitarbeiter ein startdatum hat, das vor dem geburtsdatum von alice liegt	welche mitarbeiter hat ein startdatum, das älter als das geburtsdatum von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche person wurde früher als die von alice geboren	welche person früher geboren wurde als die von alice	was die person geboren wurde früher als das von alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )
personen, die vor 2004 geboren wurden	vor 2004 geborene personen	personen geboren vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
welche studenten machen ihren abschluss vor alice?	welche studenten ihren abschluss machen, bevor alice	die absolventen vor alice tut	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wie ist der beziehungsstatus von menschen, die in new york geboren sind?	was ist der beziehungsstatus von menschen, die in new york geboren wurden	was ist der beziehungsstatus von menschen in new york geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )
wer sind freunde mit verbindung, die vor 2004 in die schule gekommen sind	die mit verbindung befreundet sind, die vor 2004 mit der schule begonnen haben	wer sind die freunde, mit verbindung wer mit der schule begonnen, bevor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
geschlecht des mitarbeiters, dessen enddatum vor 2004 liegt	geschlecht des arbeitnehmers, dessen enddatum vor 2004 liegt	geschlecht der mitarbeiter, deren enddatum vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welches mitarbeiter startdatum ist nicht 2004	welcher mitarbeiterstarttermin nicht 2004 ist	die mitarbeiter startdatum ist nicht 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter ab dem frühesten	mitarbeiter startet am schnellsten	mitarbeiter ab dem frühesten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
suche nach studenten, die nicht mehr als zwei studienrichtungen haben	studierende finden, die nicht mehr als zwei studienrichtungen haben	finden studenten, die nicht mehr als zwei felder von studie	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die studieren oder studiert haben, außer an einer braunen universität	menschen, die überall studieren oder studiert haben, außer an einer braunen universität	menschen, die studieren oder studiert haben, aber irgendwo brown university	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wessen freund ist eingeloggt	deren freund eingeloggt ist	deren freund angemeldet ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
jeder mann, der eingeloggt ist	alle männer, die eingeloggt sind	jeder mann, der angemeldet ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string logged_in ) ) )
welche person ist mit dem mitarbeiter befreundet, der vor 2004 eingestellt wurde?	welche person mit dem mitarbeiter befreundet ist, der vor 2004 eingestellt wurde	welche person befreundet ist mit dem mitarbeiter, der eingestellt wurde, bevor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter, die vor alice fertig sind	mitarbeiter, die vor alice enden	mitarbeiter, die abgeschlossen wurden, bevor alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist der beziehungsstatus von mitarbeitern mit einem anderen startdatum als 2004?	was ist der beziehungsstatus von mitarbeitern mit anderen startdaten als 2004	was ist beziehung, status der mitarbeiter mit startdaten andere als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
ein freund von alice, der eingeloggt ist	ein freund von alice, der eingeloggt ist	ein freund von alice, der angemeldet ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string logged_in ) ) )
liste der geburtsorte von personen, die ihr studium vor 2004 abgeschlossen haben	die geburtsorte von menschen auflisten, die ihr studium vor 2004 abgeschlossen haben	liste der geburtsorte der personen, die ihr studium vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
studierende mit den wenigsten studienrichtungen	studenten mit den wenigsten studienfeldern	studenten mit den wenigsten studienrichtungen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
personen, die vor 2004 geboren wurden	personen, die vor 2004 geboren wurden	personen geboren vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
welche mitarbeiter am letzten tag waren nach alices letztem tag	welche mitarbeiter letzten tag nach alices letztem tag waren	die mitarbeiter letzte tag war, nachdem alice der letzte tag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
arbeitnehmer, der den gleichen arbeitgeber mit der arbeitnehmerin alice teilt	arbeitnehmer, der denselben arbeitgeber mit dem mitarbeiter alice teilt	mitarbeiter, die aktienund demselben arbeitgeber mit dem mitarbeiter von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer arbeitet nicht für mckinsey?	wer nicht für mckinsey arbeitet	wer nicht arbeiten bei mckinsey	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die männlich sind und im jahr 2004 geboren	menschen, die männlich sind und im jahr 2004 geboren	menschen, die männliche und 2004 geboren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
finde mich alle mitarbeiter die am selben tag anfangen wie alice	finden sie mich alle mitarbeiter, die am selben tag wie alice beginnen	mich finden alle mitarbeiter, beginnen am selben tag, als alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche leute sind mit studenten befreundet, die ein startdatum von 2004 oder später haben?	welche menschen mit studenten befreundet sind, die ein startdatum von 2004 oder höher haben	was für menschen sind freunde mit studenten, die ein startdatum von 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
was sind die geburtsorte der angemeldeten personen?	was sind die geburtsorte von menschen, die eingeloggt sind	was sind die geburtsorte der personen angemeldet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
welche person hat weniger als zwei freunde	welche person weniger als zwei freunde hat	welche person hat weniger als zwei freunde	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
beziehungsstatus von nichtsoftwareingenieuren	beziehungsstatus von nichtsoftwareingenieuren	beziehung der status der nicht softwareingenieure	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wer mit alice befreundet ist, hat auch den beziehungsstatus single	wer mit dem alicefreunde ist, hat auch beziehungsstatus von single	wer ist alice freunde mit, die auch die beziehung stati der einzelnen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
menschen, die bei mckinsey arbeiten und 180 cm groß sind	menschen, die bei mckinsey arbeiten und 180 cm groß sind	menschen, die die arbeit bei mckinsey und sind 180 cm hoch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string employer ) ( string = ) en.company.mckinsey ) )
welcher softwareentwickler ist 180 cm groß?	welcher softwareingenieur 180 cm groß ist	welche softwareingenieur ist 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) )
welche studenten nach alice graduieren, beginnt ihren neuen job	welche studenten nach alice ihren neuen job beginnen	die studierenden ihr studium nach alice beginnt ihren neuen job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde eingeloggte personen, die alices freunde sind	finden sie personen, die eingeloggt sind, die freunde von alice sind	leute zu finden, die angemeldet sind, die alice ' s freunde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
welche studenten hauptfach informatik oder geschichte	welche studenten in informatik oder geschichte studieren	die studenten major in informatik oder geschichte	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.concat en.field.computer_science en.field.history ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
studenten, die nach alice fertig werden	studenten beenden nach alice	studenten vollenden, nachdem alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher mitarbeiter hat seinen job zuerst gekündigt?	welcher mitarbeiter seinen job zuerst aufgibt	die mitarbeiter beenden ihren ersten job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
beziehungsstatus des mitarbeiters, der seine tätigkeit vor oder nach 2004 beendet hat	beziehungsstatus des mitarbeiters, der zeitgleich zu oder nach 2004	beziehung status der arbeitnehmer finishing gleichzeitigen oder nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mit wem ist der student, mit dessen startdatum mindestens 2004 befreundet ist?	der student ist, dessen startdatum mindestens 2004 freunde mit	wer ist der student, dessen startdatum ist mindestens 2004 mit freunden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
geschlecht nur einer person	geschlecht von nur einer person	geschlecht von nur einer person	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
arbeitnehmer mit höchstens zwei berufsbezeichnungen	mitarbeiter mit höchstens zwei berufsbezeichnungen	mitarbeiter mit zwei jobtitel am meisten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist die durchschnittliche größe von allen	was ist die durchschnittliche höhe aller	was ist die durchschnittliche höhe der alle	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ) ) )
was ist das geschlecht der arbeitnehmer mit anderen letzten tagen als 2004?	was ist geschlechtlich von arbeitnehmern mit letzten tagen anders als 2004	was ist die gleichstellung der arbeitnehmer mit den letzten tagen andere als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter starten spätestens	mitarbeiter, die mit den neuesten	mitarbeitern die neuesten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, die ihren job kündigten, bevor alice zu arbeiten anfing	mitarbeiter, die ihren job aufgeben, bevor alice mit der arbeit begonnen hat	mitarbeiter beenden ihre arbeit, bevor alice anfing zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
suche nach schülern mit einem startdatum von 2004 oder später	studenten zu finden, die ein startdatum von 2004 oder höher haben	finden sie studenten, denen ein startdatum von 2004 oder später	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
ein student, der anfängt, bevor alice fertig ist	ein schüler, der beginnt, bevor alice beendet wird	ein student, der beginnt, bevor alice abgeschlossen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wo sind die menschen geboren, die ihre arbeit im oder nach dem jahr 2004 aufgenommen haben?	wo waren die menschen, die in oder nach 2004 ihre arbeit begannen, geboren	wo waren die menschen, die mit der arbeit begonnen, im jahr 2004 oder später geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
freunde von menschen finden, die ihre arbeit vor 2004 begonnen haben	freunde von menschen finden, die vor 2004 ihren job begonnen haben	finden freunde von menschen, die begonnen haben, ihren job vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was ist der beziehungsstatus aller, die kein softwareingenieur sind?	wie hoch ist der beziehungsstatus eines jeden, der kein softwareingenieur ist?	was ist der beziehungsstatus für alle, die nicht einen softwareingenieur	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die nur in new york geboren wurden	menschen, die überall geboren wurden, außer new york	menschen geboren, aber irgendwo new york	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string ! = ) en.city.new_york ) )
wer ist die person, mit der 180 cm befreundet sind?	wer ist die person, die 180 cm freunde mit	wer ist die person, die 180 cm mit freunden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
finden sie mitarbeiter, deren enddatum das startdatum von student alice oder später ist	mitarbeiter finden, deren enddatum das startdatum von student alice oder höher ist	finden sie mitarbeiter, deren enddatum ist das startdatum der student alice oder später	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist die geburtsstadt eines studenten, der während oder vor 2004 angefangen hat?	was ist die geburtsstadt eines studenten, der während oder vor 2004 begonnen hat?	was ist der geburtsort der stadt, ein student, der während oder vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welcher mitarbeiter hat früher als alices geburtsdatum angefangen	welcher mitarbeiter vor dem geburtsdatum von alice begonnen hat	die mitarbeiter früher begonnen als alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
singles, die im jahr 2004 geboren wurden	singles, die 2004 geboren wurden	singles, die geboren wurden, im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
der nach der studentin alice zu arbeiten begann	der nach der studentenalice zu arbeiten begann	wer arbeiten begonnen, nachdem die studentin alice hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
das enddatum des schülers ist größer als das startdatum von alice	welches kursteilnehmerenddatum größer ist als das startdatum von alice	die studenten endedatum größer ist als alice startdatum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die zwei oder weniger geburtsorte haben	menschen, die zwei oder weniger geburtshäuser haben	menschen, die zwei oder weniger geburtshäuser	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string <= ) ( number 2 ) ) )
welche person wurde in new york geboren und ist mit alice befreundet?	welche person in new york geboren wurde und mit alice befreundet ist	welche person wurde in new york geboren und ist befreundet mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string friend ) ( string = ) en.person.alice ) )
ein arbeiter, der ein softwareingenieur oder programmmanager ist	ein mitarbeiter, der softwareingenieur oder programmmanager ist	ein arbeitnehmer, der ein softwareingenieur oder programmmanager	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.concat en.job_title.software_engineer en.job_title.program_manager ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
kann nicht umschreiben	kann nicht paraphrasieren	nicht paraphrasieren	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
arbeitnehmer mit nicht mehr als zwei arbeitgebern	arbeitnehmer mit nicht mehr als zwei arbeitgebern	arbeitnehmer mit nicht mehr als zwei arbeitgeber	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde alle singleleute, die mit alice befreundet sind	finden sie alle einzelnen personen, die mit alice befreundet sind	finden sie alle einzelnen menschen, die freunde sind mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
studenten, die am oder nach dem geburtstag von alice ihren abschluss gemacht haben	studenten, die am geburtsdatum von alice oder nach alice graduiert haben	studierende, graduierte, die am oder nach alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welches geschlecht haben die mitarbeiter, die 2004 nicht gekündigt haben?	was für ein geschlecht sind die mitarbeiter, die 2004 nicht gekündigt haben	welches geschlecht haben die mitarbeiter, die nicht aufgeben in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was ist der beziehungsstatus eines mitarbeiters, der kein softwareingenieur ist?	wie hoch ist der beziehungsstatus eines mitarbeiters, der kein softwareingenieur ist?	was ist der familienstand eines arbeitnehmers, der nicht einen softwareingenieur	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter mit einer berufsbezeichnung	mitarbeiter mit einer berufsbezeichnung	mitarbeiter mit einem jobtitel	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus von schülern mit einem enddatum ab 2004?	welcher beziehungsstatus von studierenden ist, die ein enddatum haben, das aus dem jahr 2004 oder höher stammt?	was ist der beziehungsstatus der studierenden, die ein enddatum von 2004 oder höher	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finde die freunde von leuten, die gerade online sind	finden sie die freunde von menschen, die derzeit online sind	finden sie die freunde der menschen, die derzeit online sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
wer ist ein freund von alice?	wer ist freund von alice	wer ist der freund von alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string friend ) ( string = ) en.person.alice ) )
beziehungsstatus von mitarbeitern, deren enddatum nicht vor 2004 liegt	beziehungsstatus von arbeitnehmern, deren enddatum nicht vor 2004 liegt	beziehungsstatus der mitarbeiter, deren enddatum nicht älter als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
freund von jemandem, der vor 2004 gekündigt hat	freund von jemandem, der vor 2004 aufhörte	freund von jemandem, beenden, bevor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
der geburtsort eines studenten, der nicht im jahr 2004 begann	geburtsort eines studenten, der nicht 2004 beginnt	der geburtsort des studenten nicht ab 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
der 2004 in new york geboren wurde	der 2004 in new york geboren wurde	geboren in new york im jahre 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
finde mich menschen geboren im jahr 2004	finden sie menschen geboren in 2004	mich finden menschen geboren 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
finden sie den beziehungsstatus von 180 cm großen personen	finden sie den beziehungsstatus von personen, die 180 cm groß sind	finden sie die relation status von menschen, die sind 180 cm hoch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
studierende mit einem oder zwei studienrichtungen finden	studierende mit einem oder zwei studienrichtungen finden	finden sie studenten mit einem oder zwei studienrichtungen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
leute mit nur einem freund	menschen mit nur einem freund	leute mit nur einem freund	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
welcher mitarbeiter hat nicht mehr angefangen als alices	welcher mitarbeiter nicht größer als alice s	die mitarbeiter begannen, die nicht größer als alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche schülerin endete spätestens am geburtsdatum von alice	welcher student höchstens am geburtsdatum von alice endete	die schüler endete bei den meisten auf alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
beziehungsstatus wie die meisten personen	beziehungsstatus als die meisten personen	beziehung, status, da die meisten der personen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string relationship_status ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
wie viele geschlechter gibt es?	wie viele geschlechter es gibt	wie viele geschlechter gibt es	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ) )
wer ist softwareentwickler oder programmmanager?	wer ist softwareingenieur oder programmmanager	wer ist softwareingenieur oder programmmanager	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.concat en.job_title.software_engineer en.job_title.program_manager ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche städte sind der geburtsort von studenten, die 2004 noch nicht angefangen haben?	welche städte der geburtsort von studenten sind, die 2004 nicht begonnen haben	welche städte sind die wiege der studierenden, die nicht in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
studenten beenden gleichzeitig mit alice	studenten beenden zeitgleiche zu alice	schüler schlichten gleichzeitigen alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die zur selben zeit oder nach alice zu arbeiten begannen	personen, die zur gleichen zeit oder nach alice begonnen haben	menschen, die begonnen arbeiten der gleichen zeit oder nach alice hast	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde die leute, die ihren job gekündigt haben, bevor alice zu ihrem arbeitszimmer kam	finden sie die menschen, die ihren job gekündigt, bevor alice trat ihre studie	menschen zu finden, die beenden ihre arbeit, bevor alice trat in ihrer studie	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche mitarbeiter haben ein enddatum von 2004 oder später und wer sind ihre freunde?	welche mitarbeiter ein enddatum von 2004 oder später haben und wer ihre freunde sind	was die mitarbeiter haben ein endedatum von 2004 oder später, und wer sind ihre freunde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
angestellter, der als softwareingenieur oder manager arbeitet	mitarbeiter, der als softwareingenieur oder manager arbeitet	mitarbeiter, arbeitet als softwareingenieur oder manager	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.concat en.job_title.software_engineer en.job_title.program_manager ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche schüler haben die schule in den jahren 2004 und 2010 beendet?	welche schüler die schule 2004 und 2010 beendeten	die schüler beendeten die schule in den jahren 2004 und 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welches geschlecht hat die studentin, die ihren abschluss 2004 gemacht hat?	welches geschlecht ist die studentin, die bis 2004 ihren abschluss gemacht hat	was ist das geschlecht der schüler, absolvierte von 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
mitarbeiter, der am selben tag oder später als alice abreiste	mitarbeiter, der am selben tag oder später als alice	mitarbeiter, die links auf den gleichen tag oder später als alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter mit dem größten enddatum	mitarbeiter mit größtem enddatum	mitarbeiter des größten endedatum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
entweder alice oder bob	entweder alice oder bob	entweder alice oder bob	( call SW.listValue ( call SW.concat en.person.alice en.person.bob ) )
welcher mitarbeiter endete am selben tag wie alice	welcher mitarbeiter am selben tag endete wie alice	die mitarbeiter endeten am selben tag wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
derzeit angemeldete personen, die in new york geboren wurden	personen, die derzeit eingeloggt sind und in new york geboren wurden	personen derzeit angemeldet, die wurden in new york geboren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string birthplace ) ( string = ) en.city.new_york ) )
welcher student hat den job angefangen, bevor alice gekündigt hat?	welcher student den job gestartet hat, bevor alice beendet wurde	was der student mit der arbeit anfingen, bevor alice beenden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche mitarbeiter haben ein enddatum, das mit dem startdatum von mitarbeiter alice identisch ist?	mitarbeiter haben ein enddatum, das mit dem startdatum der mitarbeiteralice identisch ist	was die mitarbeiter haben ein enddatum, das ist das gleiche wie das startdatum des mitarbeiteralice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
student, der nicht weniger als ein studienfach hat	student, der nicht weniger als ein studienfach hat	schüler, die nicht weniger als ein feld der studie	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
arbeitnehmer, dessen startdatum nach 2004 liegt	mitarbeiter, dessen startdatum nach 2004 liegt	mitarbeiter, deren startdatum nach 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
suche nach schülern mit einem startdatum, das mit dem enddatum der mitarbeiterin alice übereinstimmt	finden sie studenten mit einem startdatum, das mit dem enddatum von employee alice identisch ist	finden sie studenten mit einem starttag die gleiche als angestellter alice ' s enddatum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
arbeitnehmer, dessen enddatum nicht 2004 ist	mitarbeiter, dessen enddatum nicht 2004 ist	mitarbeiter, deren endedatum ist nicht 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
ermitteln sie den beziehungsstatus von mitarbeitern, deren enddatum nicht älter als 2004 ist	finden sie die beziehungsstatus von mitarbeitern mit einem enddatum, das nicht mehr als 2004 ist	die beziehung der status von mitarbeitern, die ein enddatum, das nicht mehr als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finde menschen, die männlich sind	finden sie menschen, die männlich sind	finden sie menschen, die männlich sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )
suche mitarbeiter, die vor alice 'letztem tag beginnen	mitarbeiter finden, die vor dem letzten tag von alice beginnen	suchen mitarbeiter ab, bevor alice der letzte tag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, dessen startdatum nicht vor dem startdatum von mitarbeiter alice liegt	mitarbeiter, dessen startdatum nicht vor dem startdatum des mitarbeiters alice liegt	mitarbeiter, deren startdatum nicht vor dem startdatum des mitarbeiters alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus von studenten mit einem enddatum vor 2004?	wie hoch ist der beziehungsstatus von studierenden mit einem enddatum vor 2004	was ist der beziehungsstatus der studierenden mit einem endedatum älter als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen, die mit mitarbeitern befreundet sind, die keine softwareingenieure sind	personen, die mit mitarbeitern befreundet sind, die keine softwareingenieure sind	menschen, die freunde sind mit mitarbeitern, die nicht softwareingenieure	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche schüler haben ein enddatum, das größer ist als das von schüler alice	welche schüler ein enddatum haben, das größer ist als das von student alice	was die studierenden haben ein endedatum ist größer als das von alice schüler	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist die nummer einer person?	was ist die anzahl einer person	was ist die nummer von einer person	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
was ist das identifizierende geschlecht der transgenderperson?	was ist das identifizierende geschlecht der transgenderperson	was ist die identifizierung geschlecht von transgenderperson	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
freunde von studenten, die in jahren außer 2004 beigetreten sind	freunde von studenten, die in jahren außer 2004 beigetreten	freunde von studierenden, die sich in den jahren außer 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen geboren zwischen 2004 und 2010	zwischen 2004 und 2010 geborene menschen	menschen geboren, die zwischen 2004 und 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
mit was für einer person ist alice befreundet?	welche onlineperson ist alice freunde mit	was onlineperson ist alice freunde mit	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string logged_in ) ) )
was ist der geburtsort von studenten, die ihren abschluss im jahr 2004 nicht gemacht haben?	was ist der geburtsort von studenten, die 2004 keinen abschluss gemacht haben	was ist der geburtsort der studenten keinen abschluss in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welcher student hat einen starttermin bis spätestens 2004?	welcher student spätestens 2004 ein startdatum hat	welche studentin hat ein startdatum nicht später als 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wie ist der beziehungsstatus von menschen, die die schule vor 2004 beendet haben?	wie hoch ist der beziehungsstatus von menschen, die vor 2004 die schule abgeschlossen haben?	was ist der beziehungsstatus von menschen, die die schule abgeschlossen vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
geschlecht der studierenden, die 2004 nicht abgeschlossen haben	geschlecht der studierenden, die 2004 nicht abgeschlossen haben	geschlecht von studierenden endet nicht im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
suche nach schülern, die am selben tag beginnen wie alice	finden sie studenten, die am selben tag wie alice beginnen	finden die studierenden ab dem gleichen tag wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wie ist der beziehungsstatus von studierenden ab 2003 oder früher?	welchen beziehungsstatus der studierenden ab 2003 oder vor	was ist der beziehungsstatus der studierenden ab 2003 oder vor	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen in new york oder peking geboren	menschen geboren in new york oder beijing	menschen geboren in new york oder peking	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.concat en.city.new_york en.city.bejing ) ) )
welcher beziehungsstatus wird von der geringsten anzahl von personen aufgelistet?	welcher beziehungsstatus nach der geringsten anzahl von personen aufgeführt ist	welche beziehung status aufgeführt ist, die von den wenigsten menschen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string relationship_status ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
wo sind die leute online geboren	wo waren die menschen online geboren	wo waren die leute, die online geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
leute, die am selben tag aufgehört haben zu arbeiten, sind in die schule gekommen	menschen, die am selben tag aufgehört haben zu arbeiten alice begann schule	menschen, die aufgehört zu arbeiten am selben tag alice in die schule kam	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
das geschlecht eines studenten endet vor 2004	geschlecht eines studenten, der vor 2004 endet	das geschlecht der schüler vor ende 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie den beziehungsstatus von studenten, deren startdatum nicht später als 2004 liegt	beziehungsstatus von studierenden finden, die spätestens 2004 ein startdatum haben	finden beziehung status von studenten, die ein startdatum nicht später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
der männlich ist und mit alice befreundet ist	wer ist männlich und ist freundet mit alice	wer ist männlich und ist befreundet mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
mitarbeiter, dessen startdatum vor dem startdatum von student alice liegt	mitarbeiter, dessen startdatum vor dem startdatum der studentenalice liegt	mitarbeiter, deren startdatum vor dem startdatum der student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
ist diese person ledig oder verheiratet?	ist diese person alleinstehend oder verheiratet	ist diese person verheiratet oder nicht	( call SW.listValue ( call SW.concat en.relationship_status.single en.relationship_status.married ) )
mitarbeiter mit der gleichen berufsbezeichnung wie alice	mitarbeiter mit der gleichen berufsbezeichnung wie alice	mitarbeiter mit demselben jobtitel, als alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher mitarbeiter hat zeitgleich mit alice angefangen	welcher mitarbeiter gleichzeitig mit alice	die mitarbeiter begannen in der gleichen zeit wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche schüler haben ein enddatum, das nicht früher als alices geburtstag ist	welche schüler ein enddatum haben, das nicht früher als alices geburtstag ist	was die studierenden haben ein enddatum, das nicht früher als alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer ist mit dem studenten befreundet, der 2004 oder später seinen abschluss gemacht hat?	der mit dem studenten befreundet ist, der 2004 oder später seinen abschluss macht	wer ist befreundet mit dem student, der absolventen im jahr 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wie heißt die geburtsstadt aller mitarbeiter, deren enddatum unter 2004 liegt?	was ist die geburtsstadt aller mitarbeiter, die ein enddatum weniger als 2004 haben	was ist die geburtsstadt aller mitarbeiter, die ein endedatum weniger als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
arbeitnehmer mit höchstens zwei arbeitsplätzen	mitarbeiter mit höchstens zwei jobs	mitarbeiter mit zwei jobs	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche schülerin ist am letzten tag eingeschult worden alice hat gearbeitet	welcher schüler am letzten tag mit der schule begann, arbeitete	die schüler begann die schule am letzten tag alice arbeitete	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher arbeitnehmer hat für die wenigsten arbeitgeber gearbeitet?	welcher arbeitnehmer für die wenigsten arbeitgeber gearbeitet hat	welcher mitarbeiter gearbeitet hat, für die wenigsten arbeitgeber	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde mich freunde von studenten, die vor 2004 ihren abschluss gemacht haben	finden sie mich freunde von studenten, die vor 2004 graduieren	mich finden freunde der absolventen vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche schüler haben ein enddatum, das nicht höher ist als das startdatum von mitarbeiter alice?	welche kursteilnehmer ein enddatum haben, das nicht größer ist als das startdatum von employee alice	was die studierenden haben ein enddatum, das nicht größer ist als mitarbeiter von alice startdatum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was männlich ist single	was männlich ist single	was männlich ist single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string gender ) ( string = ) en.gender.male ) )
wer ist mit einem mitarbeiter befreundet, der nicht für mckinsey arbeitet	der mit einem mitarbeiter befreundet ist, der nicht für mckinsey arbeitet	wer freunde mit einem mitarbeiter, der nicht arbeiten bei mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche mitarbeiter haben ein startdatum, das nicht später als das geburtsdatum von alice liegt	welche mitarbeiter ein startdatum haben, das nicht später als das geburtsdatum von alice liegt	was mitarbeiter in ein startdatum, das nicht später als das geburtsdatum von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
suche nach schülern mit einem enddatum, das mit dem startdatum der mitarbeiterin alice identisch ist	finden sie studenten mit einem enddatum, das mit dem startdatum von employee alice identisch ist	finden sie studenten mit einem end datum das gleiche wie mitarbeiter von alice startdatum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche person hat den beziehungsstatus single?	welche person einen beziehungsstatus von	die person hat einen beziehungsstatus single	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
welche mitarbeiter am letzten tag sind, ist nicht früher als 2004	welche mitarbeiter am letzten tag nicht früher als 2004 sind	die mitarbeiter letzte tag ist, nicht früher als 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist das geschlecht der menschen, die vor 2004 eingeschult wurden?	was ist das geschlecht der menschen, die vor 2004 mit der schule begonnen haben	was ist das geschlecht der menschen, die schule vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
studenten, deren enddatum vor dem geburtsdatum von alice liegt	studenten, deren enddatum vor dem geburtsdatum von alice	studierende, deren endedatum liegt vor dem geburtsdatum von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche geschlechter sind die menschen, die vor 2004 in die schule gekommen sind?	welche geschlechter sind die menschen, die in oder vor 2004 mit der schule begonnen haben?	welche geschlechter sind die menschen, die in die schule kamen, in oder vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finde 180 cm große leute und besuche die braune universität	finden sie menschen, die 180 cm groß sind und die braune universität besuchen	finden sie menschen, die sind 180 cm hoch und an der brown university	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string university ) ( string = ) en.university.brown ) )
anfangsdatum der anstellung von alice, die im jahr 2004 endete	beginn der beschäftigung von alice, die 2004 endete	starttermin von "alice' s beschäftigung endete im jahr 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_start_date ) ) )
ermitteln sie das geschlecht der mitarbeiter, die nicht bei mckinsey beschäftigt sind	geschlecht von mitarbeitern zu finden, die nicht bei mckinsey beschäftigt sind	suchen sie das geschlecht der mitarbeiter, denen nicht bei mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
geschlecht von alices freundin	geschlecht von alices freund	geschlecht von "alice' s freund	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ) )
finde einen schüler, dessen letzter tag nach alice's geburtstag liegt	finden sie student, dessen letzter tag nach alices geburtstag ist	finden sie studenten, deren letzten tag nach alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist das geburtsdatum von 180 cm großen menschen?	was ist das geburtsdatum von menschen, die 180 cm groß sind	was ist der geburtstag von menschen, die sind 180 cm hoch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
welcher mitarbeiter hat am frühesten angefangen?	welcher mitarbeiter am frühesten begonnen hat	was mitarbeiter begann der früheste	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde alices freunde geboren im jahr 2004	finde alices freunde, geboren 2004	finden sie alice die freunde von geboren in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
unternehmen mit einer größe von 180 cm finden	finden unternehmen, das diejenigen beschäftigt, die 180 cm groß sind	finden sie unternehmen beschäftigt diejenigen, die 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.company ) ( string ! type ) ) ( call SW.reverse ( string employer ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
finde alle menschen, die geboren wurden, bevor alice anfing	finden sie alle menschen, die geboren wurden, bevor alice begann	finden alle menschen, die geboren wurden, bevor alice begann	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )
leute, die mit einer arbeitenden person befreundet sind, die kein softwareingenieur ist	personen, die mit einer arbeitenden person befreundet sind, die kein softwareingenieur ist	menschen, die freunde sind mit einer person, die nicht einen softwareingenieur	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welcher student hat informatik oder geschichte studiert?	welcher student informatik oder geschichte studiert hat	welcher student studiert informatik oder geschichte	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.concat en.field.computer_science en.field.history ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer ist mit dem studenten befreundet, der nicht informatik studiert?	der mit dem studenten befreundet ist, der kein informatikstudium studiert	wer ist befreundet mit dem student, der nicht studiert informatik	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
geschlecht der personen mit einer körpergröße von 180 cm	geschlecht von menschen mit einer körpergröße von 180cm	geschlecht von leuten, deren höhe 180cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
personen, die nach 2003 zum studium gekommen sind	personen, die nach 2003 dem studium beigetreten sind	menschen, die sich der studie nach 2003	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
personen, die am oder nach dem studienbeginn von alice geboren wurden	personen, die am oder nach studienbeginn geboren wurden	personen, die geboren wurden, die am oder nach dem starttermin von "alice' s studie	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )
personen, die größer als 200 cm sind	personen, die größer als 200 cm sind	menschen, die größer sind als 200 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) ) ) )
leute, die in new york geboren sind und gerade online sind	menschen, die in new york geboren und derzeit online	die menschen in new york geboren und derzeit online	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string logged_in ) ) )
zeig mir alle studenten, die 2004 oder 2010 gehen werden	zeigen sie mir alle studenten, die 2004 oder 2010 gehen werden	zeige mir alle studenten, die verlassen in den jahren 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie mitarbeiter ab 2004 und später	mitarbeiter ab 2004 und später finden	mitarbeiter suchen ab 2004 und später	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die mit jemandem befreundet sind, der nach 2004 aufgehört hat zu arbeiten	personen, die mit jemandem befreundet sind, der nach 2004 nicht mehr funktioniert	menschen, die freunde sind mit einer person, die aufgehört zu arbeiten, nachdem 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter, die mit oder nach alice beginnen	mitarbeiter, die mit oder nach alice beginnen	mitarbeiter, die mit oder nach alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie mitarbeiter, deren enddatum nach 2004 liegt, und deren freunde	mitarbeiter finden, die ein enddatum nach 2004 haben, und ihre freunde	finden sie mitarbeiter, die ein endedatum später als 2004 und ihre freunde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was ist alice und bob geschlecht	was ist alice und bobs geschlecht	was ist alice und bobs geschlecht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
welche leute sind mit studenten befreundet, die nicht früher als 2004 angefangen haben?	welche menschen mit studenten befreundet sind, die frühestens 2004 begonnen haben	die menschen sind freunde mit studenten, die nicht früher als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
mitarbeiter, die nicht im jahr 2004 begonnen haben	mitarbeiter, die 2004 nicht anden,	mitarbeiter, die nicht in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist das geschlecht eines individuums?	was ist das geschlecht eines individuums	was ist das geschlecht eines individuums	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
woher kommen meine freunde die 180 cm studieren für die universität	wo tun meine freunde, die 180 cm stud für die universität sind	wo tun meine freunde, die sind 180 cm bolzen für die universität	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.university ) ( string ! type ) ) ( call SW.reverse ( string university ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
was sind alice und bob beziehungsstatus	was sind alice und bobbeziehungsstatus	was sind alice und bobs beziehung status	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
menschen, die 2004 oder 2010 die schule abgebrochen haben	menschen, die 2004 oder 2010 die schule beendeten	menschen, die nicht mehr die schule im jahr 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter, die 2004 nicht fertig sind	mitarbeiter, die 2004 nicht fertig sind	mitarbeiter, die nicht fertig in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus des mitarbeiters, der nicht im jahr 2004 angefangen hat?	wie hoch ist der beziehungsstatus des mitarbeiters, der 2004 nicht gestartet wurde?	was ist der familienstand des arbeitnehmers, die nicht in das geschäftsjahr 2004 gestartet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welcher mitarbeiter hat das gleiche oder ein größeres enddatum von mitarbeiter alice	welcher mitarbeiter das gleiche oder größere enddatum der mitarbeiteralice hat	was arbeitnehmer die gleiche oder eine größere endedatum des mitarbeiteralice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie lautet die telefonnummer eines unternehmens?	was ist die telefonnummer eines unternehmens	was ist die telefonnummer der firma	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.company ) ( string ! type ) ) ) )
suche mir einen angestellten, der an zwei oder weniger arbeitsplätzen gearbeitet hat	finden sie mich als mitarbeiter, der in zwei oder weniger jobs gearbeitet hat	finden sie mich ein mitarbeiter, der gearbeitet hat, auf zwei oder weniger arbeitsplätze	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die seit 2004 in der schule sind	menschen, die in oder nach 2004 mit der schule begonnen haben	menschen, die in die schule kamen im jahr 2004 oder später	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
person, deren geburtsort der 180 cm großen person entspricht	person, deren geburtsort ist die gleiche wie person 180 cm groß	person, deren geburtsort identisch ist, die person, die 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
welcher student hat die gleiche beziehung wie der student, der nach 2004 angefangen hat?	welcher student die gleiche beziehung hat wie der student, der nach 2004 begonnen hat	welcher student hat die gleiche beziehung wie der student, der begann, nachdem 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche mitarbeiter haben ein startdatum nach dem startdatum von mitarbeiter alice	welche mitarbeiter ein startdatum nach dem startdatum der mitarbeiteralice haben	was die mitarbeiter haben ein startdatum nach dem startdatum des mitarbeiteralice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist alice's geschlecht?	was ist alices geschlecht	was ist alice ' s geschlecht	( call SW.listValue ( call SW.getProperty en.person.alice ( string gender ) ) )
was ist der geburtsort von studenten, die nach 2004 begannen?	was ist geburtsort von studenten, die nach 2004 begonnen haben	was ist der geburtsort der studenten, die nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
was leute mit denen befreundet sind, die mit alice befreundet sind	was menschen sind freunde mit denen, die freunde sind mit alice	was für menschen sind freunde diejenigen, die freunde mit alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ) )
der an zwei orten geboren wurde	der an zwei orten geboren wurde	wer geboren wurde in zwei orten	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( number 2 ) ) )
menschen, die am selben ort wie alice geboren wurden	menschen, die am selben ort wie alice geboren wurden	menschen, die geboren wurden in der gleichen stelle, wie alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.getProperty en.person.alice ( string birthplace ) ) ) )
wann ist das enddatum von alice?	wann ist das enddatum von alice	wann ist das endedatum von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist das geschlecht eines studenten, der nicht im jahr 2004 begann	was ist das geschlecht einer studentin, die 2004 nicht begonnen hat	was ist das geschlecht der schüler, der nicht begann in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
an welche universität gehen die 180 cm großen?	was universität tun, die 180 cm groß sind gehen	was die universität tun, die sind 180 cm hoch gehen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.university ) ( string ! type ) ) ( call SW.reverse ( string university ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
finden sie den beziehungsstatus von studenten, die nicht informatik studieren	beziehungsstatus von studenten finden, die kein informatikfach studieren	finden beziehung status der studierenden nicht das studium im bereich informatik	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
student, dessen enddatum vor dem startdatum von alice liegt	student, dessen enddatum vor dem startdatum der mitarbeiteralice liegt	schüler, deren enddatum vor dem startdatum des mitarbeiters alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer ist mit der person aus new york befreundet?	wer ist freundet sich mit der person aus new york	wer freunde mit der person, die von new york	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )
wo waren die arbeiter, die keine softwareingenieure sind?	wo waren die arbeitenden menschen, die keine softwareingenieure geboren sind	wo waren die arbeitenden menschen, die nicht softwareingenieure geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was ist das letzte date von alice, die an einer braunen universität studiert	was ist das letzte datum von alice, die ein student der braunen universität ist	was ist das letzte datum von alice, die ist ein student der brown university	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string education_end_date ) ) )
arbeitende person mit den wenigsten berufsbezeichnungen	berufstätige person mit den wenigsten berufsbezeichnungen	arbeitet die person mit den wenigsten berufsbezeichnungen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die ihre ausbildung abgeschlossen haben, bevor alice zur arbeit kam	personen, die eine ausbildung abgeschlossen haben, bevor alice in die arbeit eingetreten ist	menschen, die abgeschlossene ausbildung, bevor alice kam die arbeit	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde einen schüler, der zuerst angefangen hat	finden sie einen schüler, der zuerst angefangen hat	finden student, der zuerst gestartet wurde	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie mitarbeiter, die einen anderen arbeitgeber haben als alice	mitarbeiter finden, die einen anderen arbeitgeber haben als alice	finden sie mitarbeiter, die ein arbeitgeber verschieden von der alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
leute mit denen alice befreundet ist wurden auch im jahr 2004 geboren	menschen alice ist freunde, mit denen auch im jahr 2004 geboren wurden	leute alice ist freunde mit, die waren auch 2004 geboren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
welches geschlecht hat die wenigsten menschen?	welches geschlecht die wenigsten menschen hat	welches geschlecht hat die wenigsten leute	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string gender ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
welche menschen haben eine höhe von 180 cm und den gleichen verwandtschaftsstatus wie alice	was menschen haben eine höhe von 180 cm und den gleichen beziehungsstatus wie alice	was die menschen haben eine höhe von 180 cm und den gleichen familienstand wie alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) en.person.alice ) )
wo sind die menschen geboren, die vor 2004 angefangen haben zu arbeiten?	wo waren die menschen, die in oder vor 2004 zu arbeiten begannen, geboren	wo waren die menschen, die begonnen arbeiten in oder vor 2004 geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
geschlecht aller arbeitnehmer, die 2004 nicht gekündigt haben	geschlecht aller arbeitnehmer, die 2004 nicht gekündigt haben	die gleichstellung aller mitarbeiter, die nicht aufgeben in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wer ist eine person, mit deren studienbereich die informatik nicht befreundet ist?	eine person, deren studienbereich nicht informatikfreunde mit	wer ist die person, auf deren gebiet der studie ist nicht informatik freunden mit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
ein student, der nach alices beginn endet	ein student endet nach alice beginnt	ein student endet nach alice beginnt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
ist alice's berufsbezeichnung software engineer	ist alices berufsbezeichnung softwareingenieur	ist alice ' s jobtitel software engineer	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) ( string job_title ) ) )
menschen, die single sind und gerade online sind	personen, die alleinstehend und aktuell online sind	menschen, die single sind und derzeit online	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
geschlecht des mitarbeiters, der vor 2005 ausgeschieden ist	geschlecht des arbeitnehmers, der vor 2005 ausschied	geschlecht des mitarbeiters, die linke vor 2005	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finden sie 180 cm große personen, die das geschlecht von alice haben	finden sie menschen, die 180 cm groß sind, die alices geschlecht sind	finden sie menschen, die sind 180 cm hoch, die alice ' s geschlecht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string gender ) ) ( string = ) en.person.alice ) )
beziehungsstatus von zwei oder weniger personen	beziehungsstatus von zwei oder weniger personen	beziehung status von zwei oder weniger personen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
student, der mit oder nach alice ging	student, der mit oder nach alice gegangen ist	schüler, die links mit oder nach alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter, dessen letzter tag auch alices letzter tag war	mitarbeiter, dessen letzter tag auch alices letzter tag war	mitarbeiter, deren letzten tag war auch alice der letzte tag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
ein freund eines studenten, der im jahr 2004 oder früher beginnt	ein freund eines studenten, der 2004 oder vor	ein freund von einem schüler, der beginnt, die 2004 oder vor	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welcher student hat am frühesten angefangen?	was der student am frühesten begann	was schüler begann frühestens	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
alices freunde, die eingeloggt sind	freunde von alice, die eingeloggt sind	alice ' s freunde, die angemeldet sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
singles, die 180 cm groß sind	singles, die 180 cm groß sind	singles, die sind 180 cm hoch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
menschen, die vor 2004 oder vor 2010 angefangen haben zu arbeiten	personen, die vor 2004 oder vor 2010 mit der arbeit begonnen haben	menschen, die begann vor 2004 oder vor 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
in new york geborene menschen, die gerade online sind	menschen, die in new york geboren sind, die derzeit online sind	menschen geboren in new york, die derzeit online sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string birthplace ) ( string = ) en.city.new_york ) )
welche mitarbeiter haben vor 2004 oder 2010 angefangen?	welche mitarbeiter vor 2004 oder 2010 begonnen haben	die mitarbeiter begannen vor 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer hat freunde mit einem startdatum nach 2004	wer freunde mit einem startdatum nach 2004 hat	wer freunde hat mit einem startdatum, die nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
die person, die die meisten geschlechter hat	die person, die die meisten geschlechter hat	die person, die die meisten geschlechter	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( string gender ) ) )
welche mitarbeiter am letzten tag waren, war nicht später als 2004 oder 2010	welche mitarbeiter am letzten tag spätestens 2004 oder 2010	die mitarbeiter letzte tag war nicht später als 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, die vor alices geburtstag anfangen	mitarbeiter beginnen vor alices geburtstag	mitarbeiter ab vor alices geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
person, die zum ersten mal ihren job gekündigt hat	person, die ihren job zum ersten mal aufgibt	person, die zuerst beenden, seine arbeit	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher student hat nach alice's enddatum angefangen?	was der student nach alices enddatum begonnen hat	was studenten begann, nach alice ' s enddatum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer ist nicht mit alice befreundet?	der nicht mit alice befreundet ist	wer nicht freunde mit alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string ! = ) en.person.alice ) )
arbeitnehmer, der vor 2004 oder 2010 abgereist ist	mitarbeiter, der vor 2004 oder 2010 ausschied	mitarbeiter, der links vor dem jahr 2004 oder im jahr 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche mitarbeiter am selben tag oder nach alice ihren job gekündigt haben	welcher mitarbeiter seinen job am selben tag oder nach alice gekündigt hat	was mitarbeiter beenden ihre arbeit am gleichen tag oder nach alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie das geschlecht von mitarbeitern mit einem enddatum von 2004 oder später	das geschlecht der arbeitnehmer zu ermitteln, die ein enddatum haben, das 2004 oder höher ist	finden sie das geschlecht des mitarbeiter, die haben ein enddatum, das 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter mit demselben startdatum wie mitarbeiter alice	mitarbeiter mit demselben startdatum wie das von employee alice	mitarbeiter mit gleichen starttermin wie der mitarbeiter von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde die größe einer person	die höhe einer person finden	finden sie die höhe einer person	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ) ) )
wer hat die geringste anzahl von freunden	wer hat die geringste anzahl von freunden	wer hat die niedrigste anzahl von freunden	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( string friend ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
finde mich alle mitarbeiter hure startdatum ist entweder 2004 oder 2010	finden sie mich alle mitarbeiter hure startdatum ist entweder 2004 oder 2010	mich finden alle mitarbeiter, die hure startdatum ist entweder 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche person ist mit einem studenten befreundet, dessen enddatum 2004 oder später liegt?	welche person mit einem studenten befreundet ist, der ein enddatum von 2004 oder höher hat	welche person ist befreundet mit dem student, der ein enddatum von 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
personen, die mindestens 180 cm groß sind	personen, die mindestens 180 cm groß sind	menschen, die mindestens 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )
geburtsort des mitarbeiters, dessen berufsbezeichnung nicht software engineer ist	geburtsstadt eines mitarbeiters, dessen berufsbezeichnung nicht softwareingenieur ist	geburtsort des arbeitnehmers, dessen berufsbezeichnung ist nicht software ingenieur	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die den gleichen geburtstag haben wie alice	personen, die den gleichen geburtstag wie alice haben	leute, die haben am selben tag geburtstag wie alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) )
mit wem und mit welchen personen sind sie befreundet?	welche personen eingeloggt sind und mit wem sind sie befreundet	was die leute angemeldet sind und wem sind sie freunde mit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
mitarbeiter, dessen startdatum das geburtsdatum von alice ist	mitarbeiter, dessen startdatum das geburtsdatum von alice ist	mitarbeiter, deren startdatum ist das geburtsdatum von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche universität hat alice im jahr 2004 absolviert?	was universität hat alice absolvent in 2004	welche universität hat alice absolvent 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string university ) ) )
deren beziehungsstatus eindeutig ist	deren beziehungsstatus eindeutig ist	deren beziehungsstatus ist einzigartig	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string relationship_status ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
wer ist mit der person befreundet, die 2004 mit der arbeit begonnen hat?	der mit der person befreundet ist, die 2004 angefangen hat zu arbeiten	wer freunde mit der person, die begann im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
leute mit drei oder mehr freunden	menschen mit drei oder mehr freunden	leute mit drei oder mehr freunden	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
dieser schüler, der die schule fast zeitgleich mit alice beendet	dieser schüler, der die schule fast zur gleichen zeit wie alice beendet	dieser schüler, der die schule beendet, fast zur gleichen zeit wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
freunde von menschen, die ihr studium in einem anderen jahr als 2004 begonnen haben	freunde von menschen, die ihr studium in einem anderen jahr als 2004 begonnen haben	freunde von menschen, die begonnen haben, ihr studium in einem jahr andere als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
was sind geschlechter von studenten, die kein informatikfach studieren?	was sind geschlechter von studenten, die kein informatikfeld studieren	was sind die geschlechter der studierenden nicht das studium im bereich informatik	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
was ist das geschlecht der studierenden, die ihren abschluss im jahr 2004 nicht gemacht haben?	was ist das geschlecht von studenten, die 2004 keinen abschluss gemacht haben	was ist das geschlecht der studenten keinen abschluss in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wer hat die schule am frühesten beendet?	die die schule am frühesten beendet haben	wer mit der schule fertig der frühesten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher mitarbeiter endete nicht später als am startdatum von alice	welcher mitarbeiter nicht größer als alices startdatum beendet hat	die mitarbeiter endete nicht größer als alice startdatum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie personen mit einem startdatum von 2004 und einer größe von 180 cm	finden sie personen mit einem startdatum von 2004 und einer höhe von 180 cm	finden sie personen mit einem startdatum von 2004 und höhe von 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )
finde mich alle mitarbeiter, die bis zum geburtstag von alice angefangen haben	finden sie mich alle mitarbeiter, die mit alices geburtstag begonnen haben	mich finden alle mitarbeiterinnen und mitarbeiter, die begonnen haben, die von alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie lautet die berufsbezeichnung für 180 cm große personen?	was ist die 180 cm große personenjobbezeichnung	was dem 180 cm großen personen, die berufsbezeichnung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.job_title ) ( string ! type ) ) ( call SW.reverse ( string job_title ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
leute, die ihren job kündigten, bevor alice dazukam	personen, die ihren job gekündigt haben, bevor alice beitrat	menschen, die beenden ihre arbeit, bevor alice kam	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche mitarbeiter hatten ihre letzten frühestens 2004 oder 2010	die mitarbeiter ihre letzten nicht vor 2004 oder 2010 hatten	die mitarbeiter hatten ihre letzten frühestens 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche schüler haben vor 2004 oder 2010 angefangen?	welche studenten vor 2004 oder 2010 begonnen haben	die schüler begannen vor 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
nennen sie den freund eines mitarbeiters, der 2004 nicht gekündigt hat	nennen sie den freund eines mitarbeiters, der 2004 nicht gekündigt hat	name der freundin eines mitarbeiters, der nicht aufhören in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche leute sind mit alice befreundet und haben eine höhe von 180 cm	was menschen mit alice befreundet sind und eine höhe von 180 cm haben	was für menschen sind freunde mit alice und haben eine höhe von 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
der 180 cm misst und 2004 aufhörte	wer misst 180 cm und beendet im jahr 2004	wer misst 180 cm und kündigte im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )
menschen finden 180 cm groß	finden menschen 180 cm groß	finden sie personen 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
finde mich alle mitarbeiter die 2004 oder 2010 angefangen haben	finden sie mich alle mitarbeiter, die 2004 oder 2010 begonnen haben	mich finden alle mitarbeiter, die in 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist mit dem schüler befreundet, der spätestens 2004 die schule begonnen hat?	der mit dem schüler befreundet ist, der spätestens 2004 mit der schule begonnen hat	wer ist befreundet mit dem student, der begann, die schule nicht später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
geschlecht der studenten, die vor 2004 beitreten	geschlecht der studierenden, die vor 2004 beitraten	geschlecht von studierenden der beitritt vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
dieser mitarbeiter hat ein enddatum, das fast dem von alice entspricht	dieser mitarbeiter hat ein enddatum, das fast dem von alice entspricht	dieser mitarbeiter hat ein endedatum, das ist fast das gleiche wie alice ' s	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
das geschlecht eines studenten, der nicht in der informatik ist	das geschlecht eines studenten, der nicht in informatik ist	das geschlecht der schüler, die nicht in computer science	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wie ist der beziehungsstatus von mitarbeitern, die nach 2004 beginnen?	wie hoch ist der beziehungsstatus der mitarbeiter ab 2004	was ist beziehung, status der mitarbeiter ab, die nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
suche nach schülern mit dem letzten tag in 2004 oder 2010	finden studenten mit letzten tag in 2004 oder 2010	finden sie studenten mit dem letzten tag im jahr 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde freunde, die freunde haben, die 180 cm groß sind	finden sie freunde, die freunde haben, die 180 cm groß sind	finde freunde, die freunde haben, die sind 180 cm hoch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
studenten, die nach 2004 abschließen	studenten, die nach 2004 fertig sind	studenten, die nach 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
ein mitarbeiter, der 2004 oder früher abgereist ist	einen mitarbeiter, der 2004 oder vor	ein mitarbeiter, der links im jahr 2004 oder vor	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus von mitarbeitern, die vor 2004 angefangen haben?	wie hoch ist der beziehungsstatus von mitarbeitern, die vor 2004 begonnen haben?	was ist der beziehungsstatus der mitarbeiter, die bereits vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welcher schüler hat am oder vor alices geburtsdatum angefangen	welcher schüler am oder vor dem geburtsdatum von alice begonnen hat	die schüler begonnen, die am oder vor alices geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde mich alle studenten mit einem einzigen hauptfach	finden sie mich alle studenten mit einem einzigen haupt	mich finden alle studierende mit einem einzigen großen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde menschen, die in new york geboren sind und mit alice befreundet sind	finden sie menschen in new york geboren, die mit alice befreundet sind	finden sie menschen in new york geboren, dass sind freunde mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string friend ) ( string = ) en.person.alice ) )
finde mich alle leute, die einen freund haben, der in new york geboren ist	finden sie mich alle menschen, die einen freund in new york geboren hat	finden mich alle menschen, die hat einen freund in new york geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )
nennen sie eine person, die mit alice befreundet ist	benennen sie eine person, die mit alice befreundet ist	nennen sie eine person, die freunde mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string friend ) ( string = ) en.person.alice ) )
mitarbeiter, dessen enddatum nicht vor dem enddatum von alice liegt	mitarbeiter, dessen enddatum nicht vor dem enddatum der mitarbeiteralice liegt	mitarbeiter, deren enddatum nicht vor dem enddatum des mitarbeiteralice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
der am oder vor alices letztem anstellungstag geboren wurde	der am oder vor dem letzten arbeitstag von alice geboren wurde	wer geboren wurde oder vor alices letzten tag der beschäftigung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) )
menschen, die angaben, im jahr 2004 oder danach zu arbeiten	personen, die 2004 oder nach	leute, die genannten arbeiten im jahr 2004 oder nach	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist das geschlecht der arbeitnehmer, deren startdatum vor 2004 liegt?	welches geschlecht hat das geschlecht der arbeitnehmer, deren startdatum vor 2004 liegt	was ist das geschlecht von arbeitnehmern, deren startdatum ist früher als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter, die am geburtstag von alice fertig sind	mitarbeiter, die an alices geburtstag enden	mitarbeiter, die fertig auf alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist das geschlecht einer person, die vor 2004 begann	was ist das geschlecht einer person, die vor 2004 begonnen hat	was ist das geschlecht einer person, die bereits vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wie ist der beziehungsstatus des vor 2004 ausscheidenden studenten?	wie ist der beziehungsstatus des studenten, der vor 2004 ausscheidet	was ist der familienstand des studenten verlassen vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
nennen sie jemanden, der 180 cm groß ist	nennen sie jemanden, der 180 cm groß ist	name jemand, der 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
welcher student hat ein startdatum später als das enddatum von alice	welcher schüler ein startdatum nach dem enddatum von alice hat	welche studentin hat ein startdatum später als das enddatum von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die nach alices arbeit angefangen haben, haben die schule abgebrochen	menschen, die arbeitaufmachten, nachdem alice die schule eingestellt hatte	menschen, die mit der arbeit begonnen, nachdem alice beendet die schule	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
studenten, die 2004 noch nicht fertig waren	studenten, die 2004 nicht fertig wurden	studenten, die nicht fertig in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die 180 cm groß sind und softwareingenieure	menschen, die 180 cm groß sind und softwareingenieure sind	menschen, die sind 180 cm hoch und softwareingenieure	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) )
schüler, die vor alices geburtstag ihren abschluss gemacht haben	studenten, die vor alices geburtstag ihren abschluss gemacht haben	studierende, graduierte vor alices geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter, die vor der geburt von alice nicht aufgehört haben zu arbeiten	mitarbeiter, die nicht aufgehört haben zu arbeiten, bevor alice geboren wurde	mitarbeiter, die nicht aufhören zu arbeiten, bevor sie geboren wurde alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist mit einem mitarbeiter befreundet, dessen enddatum 2004 ist?	der mit einem mitarbeiter befreundet ist, dessen enddatum 2004 ist	wer freunde mit einem mitarbeiter, deren enddatum 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welcher student hat ein enddatum, das vor dem enddatum von alice liegt?	welcher schüler ein enddatum hat, das vor dem enddatum von alice liegt	welche studentin hat ein enddatum, das vor dem enddatum von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde freunde von studenten, die im jahr 2004 und danach angefangen haben	freunde von studenten zu finden, die 2004 und nach	finden freunde von studenten, die im jahr 2004 begonnen und nach	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wie lautet die stadtnummer?	was ist die stadtnummer	was ist die stadt die nummer	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ) )
welche personen sind mit mitarbeitern befreundet, die nach 2004 ihre arbeit aufgenommen haben?	welche personen mit mitarbeitern befreundet sind, die nach 2004 mit der arbeit begonnen haben	die menschen sind freunde mit mitarbeitern, die arbeiten begonnen, die nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wer hat die meisten freunde	wer hat die meisten freunde	wer hat die meisten freunde	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( string friend ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
welche mitarbeiter am letzten tag geboren wurden, entspricht alices geburtsdatum	welche mitarbeiter am letzten tag das gleiche sind wie das geburtsdatum von alice	die mitarbeiter letzte tag ist das gleiche wie alice ' s geburtsdatum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde die person mit den meisten freunden	finden sie die person mit den meisten freunden	suchen sie die person mit den meisten freunden	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string friend ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
welche mitarbeiterin hat ihre arbeit am selben tag wie alices geburtstag beendet	welcher mitarbeiter seinen job am selben tag wie alices geburtstag beendet hat	die mitarbeiter beendeten ihre arbeit am gleichen tag, als alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
zeig mir die schüler, die zur selben zeit oder nach alice anfangen	zeigen sie mir die studenten, die zur gleichen zeit oder nach alice beginnen	zeigen sie mir die schüler starten gleichzeitig oder nach alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
nennen sie eine 180 cm große person, die 2004 mit der arbeit begonnen hat	nennen sie eine 180 cm große person, die 2004 mit der arbeit begann	nennen sie eine person, die 180 cm hoch, die begann im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )
finde freunde von leuten, die die schule abgeschlossen haben, aber nicht im jahr 2004	freunde von menschen zu finden, die die schule abgeschlossen haben, aber nicht im jahr 2004	freunde finden von menschen, die absolvierte schule, aber nicht im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche person ist mit einem mitarbeiter befreundet, dessen startdatum nicht später als 2004 liegt?	welche person mit einem mitarbeiter befreundet ist, der spätestens 2004 ein startdatum hat	welche person ist befreundet mit einem mitarbeiter, der hat ein startdatum nicht später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wer hat maximal 2 freunde	wer hat maximal 2 freunde	wer hat maximal 2 freunde	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
menschen mit einem männlichen geschlecht und deren freunde finden	menschen mit einem geschlecht von männern und ihren freunden zu finden	finden menschen mit einer gleichstellung von mann und ihre freunde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )
leute finden, die nicht mehr als zwei freunde haben	menschen finden, die nicht mehr als zwei freunde haben	finden sie menschen, die nicht mehr als zwei freunde	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
beziehungsstatus von schülern, die nach 2004 abschließen	beziehungsstatus der studierenden, die nach 2004 abschließen	beziehungsstatus der studierenden nach beendigung 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
mitarbeiter, dessen startdatum nicht nach dem startdatum von student alice liegt	mitarbeiter, dessen startdatum nicht nach dem startdatum der studentenalice liegt	mitarbeiter, deren startdatum ist nicht nach dem startdatum von alice schüler	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die ihren job vor 2004 gekündigt haben	personen, die ihren arbeitsplatz vor 2004 gekündigt haben	menschen, die beenden ihre arbeit vor 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher mitarbeiter hat ein startdatum vor dem startdatum von alice	welcher mitarbeiter ein startdatum vor dem startdatum von alice hat	welche mitarbeiter hat ein startdatum früher als das startdatum von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher status ist der beziehungsstatus von weniger als zwei personen?	welcher status ist der beziehungsstatus von weniger als zwei personen	in welchem zustand ist der beziehungsstatus von weniger als zwei personen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
welche schüler sind nach 2004 oder 2010 eingeschult worden?	was die schüler entweder nach 2004 oder 2010 begonnen haben	was die studenten begannen, die schule entweder nach 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wann hat alice angefangen, informatik zu studieren?	wann begann alice mit dem studium der informatik	wann hat alice anfangen informatik zu studieren	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string education_start_date ) ) )
schüler, die am selben tag mit der schule begannen, kündigten alice ihren job	schüler, die am selben tag mit der schule begannen, gaben ihren job auf	studenten, die begann die schule am gleichen tag alice ihren job beenden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher mitarbeiter hat ein früheres enddatum als alice	welcher mitarbeiter ein enddatum vor alice hat	welcher mitarbeiter hat ein endedatum älter als alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie das geschlecht von nicht mehr als zwei personen	das geschlecht von nicht mehr als zwei personen finden	finden sie das geschlecht nicht mehr als zwei personen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
freunde von menschen, die in anderen jahren als 2004 ihren beruf angetreten haben	freunde von menschen, die in anderen jahren als 2004 in ihren beruf eingetreten sind	freunde von menschen, die sich ihre arbeitsplätze in anderen jahren, als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
alices freunde, die in new york geboren wurden	alices freunde, die in new york geboren wurden	alice ' s freunden, die in new york geboren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string birthplace ) ( string = ) en.city.new_york ) )
menschen, die ihre arbeit begonnen haben, bevor alice in die schule kam	menschen, die mit der arbeit begonnen haben, bevor alice mit der schule begann	menschen, die mit der arbeit begonnen, bevor alice in die schule kam	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde alices freunde	finde alices freunde	finden sie alice ' s freunde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
was ist die personennummer?	was ist die personennummer	was ist die personen anzahl	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
der 180 cm groß ist und sich in der gleichen beziehungssituation wie alice befindet	der 180 cm groß ist und in der gleichen beziehungssituation wie alice	whos 180 cm groß und in der gleichen art von beziehung, die situation, wie alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) en.person.alice ) )
welcher mitarbeiter hat nach dem mitarbeiter alice angefangen	welcher mitarbeiter nach dem mitarbeiter alice gestartet hat	die mitarbeiter gestartet, nachdem der mitarbeiter von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde jemanden jeden geschlechts	jemanden eines geschlechtsspezifischen geschlechts finden	jemanden zu finden, der jedem geschlecht	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( call SW.concat en.gender.male en.gender.female ) ) )
wer ist mit studenten befreundet, die 2004 begonnen haben?	wer mit studenten befreundet ist, die 2004 beginnen	wer ist freunde mit studierenden zu beginn vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welcher student hat die wenigsten studienfächer?	welcher student die wenigsten studienfelder hat	welcher student hat den wenigsten studienrichtungen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
ein student, der in oder nach 2004 angefangen hat	ein student, der in oder nach 2004 begann	ein schüler, begann im jahr 2004 oder später	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie die person, die 180 cm groß ist und in new york geboren wurde	finden sie die person, die 180 cm groß ist und in new york geboren wurde	suchen sie die person, die 180 cm groß und wurde in new york geboren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthplace ) ( string = ) en.city.new_york ) )
wer hat den gleichen verwandtschaftsstatus wie alice und ist 180 cm groß	der den gleichen beziehungsstatus wie alice hat und 180 cm groß ist	wer hat die gleiche beziehung status als alice und ist 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) en.person.alice ) )
personen, die mit den mitarbeitern befreundet sind, die das unternehmen nach 2004 verlassen	personen, die mit den mitarbeitern befreundet sind, die das unternehmen nach 2004 verlassen	menschen, die freunde sind mit dem mitarbeiter das unternehmen verlässt, nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finde den mitarbeiter, dessen letzter tag auf alices geburtsdatum lag	finden sie den mitarbeiter, dessen letzter tag am geburtsdatum von alice war	finden sie die mitarbeiter, deren letzten tag war auf alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
freunde von studierenden, die am oder nach dem jahr 2004 beginnen	freunde von studenten ab oder nach 2004	freunde von studierenden, die am oder nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wie ist der beziehungsstatus von studierenden, die nach 2004 ihren abschluss gemacht haben?	wie hoch ist der beziehungsstatus von studierenden, die nach 2004 ihren abschluss gemacht haben?	was ist der beziehungsstatus der studierenden, die studierte nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
leute, die nach alice angefangen haben, kündigten ihren job	personen, die nach alice begonnen haben, haben ihren job gekündigt	menschen, die begann, nachdem alice ihren job beenden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus eines studenten mit einem enddatum von 2004 oder später?	wie hoch ist der beziehungsstatus eines studenten mit einem enddatum von 2004 oder höher	was ist der beziehungsstatus von einem schüler mit einem endedatum von 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
nennen sie den freund eines studenten, der vor 2004 begonnen hat	nennen sie den freund eines studenten, der vor 2004 begann	name der freundin eines studenten, der begann vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche person ist 180 cm groß	welche person 180 cm groß ist	welche person ist 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
finden sie die geburtsstadt der mitarbeiter, deren startdatum unter 2004 liegt	die geburtsstadt von mitarbeitern zu finden, deren startdatum kleiner als 2004 ist	finden sie die geburtsstadt von mitarbeitern, deren startdatum ist weniger als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welches geschlecht haben die schüler, die 2004 noch nicht angefangen haben?	was für ein geschlecht sind die studenten, die 2004 nicht begonnen haben	welches geschlecht haben die studenten, die nicht in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
180 cm große menschen traten 2004 bei	180 cm große menschen kamen 2004	180 cm große personen, die 2004 beigetreten sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )
suche nach schülern, die am letzten tag von alice beginnen	finden sie studenten ab alices letztem tag	finden die studierenden ab alice der letzte tag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist die berufsbezeichnung von 180 cm großen menschen?	was ist die berufsbezeichnung von menschen, die 180 cm groß sind	was ist die berufsbezeichnung von menschen, die sind 180 cm hoch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.job_title ) ( string ! type ) ) ( call SW.reverse ( string job_title ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
menschen, die nach alices erstem schultag geboren wurden	menschen, die nach alices erstem schultag geboren wurden	menschen, die geboren wurden, nachdem alice ' s erster tag in der schule	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )
ist alice männlich oder weiblich	ist alice männlich oder weiblich	ist alice männlich oder weiblich	( call SW.listValue ( call SW.getProperty en.person.alice ( string gender ) ) )
finde alle leute mit freunden, die 2004 die schule beendet haben	finden sie alle menschen mit freunden, die schule im jahr 2004 beendet	finden sie alle menschen mit ihren freunden, die die schule beendet im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen mit beziehungsstatus als alice	personen mit beziehungsstatus als alice	menschen mit relationship status als alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( call SW.getProperty en.person.alice ( string relationship_status ) ) ) )
wann hat alice aufgehört, als softwareingenieur zu arbeiten?	wann hat alice die arbeit als softwareingenieur eingestellt	wann hat alice aufhören zu arbeiten als softwareingenieur	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) ( string employment_end_date ) ) )
180 cm große personen, die das geburtsdatum mit alice teilen	180 cm große personen, die ihr geburtsdatum mit alice teilen	180 cm großen personen, die den geburtstag mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string birthdate ) ) ( string = ) en.person.alice ) )
wer hat freunde, die online sind	wer hat freunde, die online sind	wer hat freunde, die online sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
welche person hat nur zwei freunde	welche person hat nur zwei freunde	welche person hat nur zwei freunde	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
in welcher stadt wurde der student geboren, der nach 2004 begann?	welche stadt war die studentin, die nach 2004 geboren in	in welcher stadt wurde der schüler, die nach 2004 geboren in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
geburtsort für die wenigsten menschen	geburtsort für die wenigsten menschen	ort der geburt für die wenigsten menschen	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string birthplace ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
finde mich menschen, die den gleichen beziehungsstatus haben wie menschen, die 180 cm groß sind	finden sie mich menschen, die den gleichen beziehungsstatus von menschen haben, die 180 cm groß sind	mich finden die leute, die die gleiche beziehung status von menschen, die sind 180 cm hoch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
was ist das geschlecht der meisten	was ist das geschlecht der meisten	was ist das geschlecht von den meisten	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string gender ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
finden sie den beziehungsstatus von mitarbeitern, die nicht die berufsbezeichnung softwareingenieur haben	finden sie die beziehungsstatus von mitarbeitern, die nicht die berufsbezeichnung softwareingenieur haben	die beziehung der status von mitarbeitern, die nicht den jobtitel software engineer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wo sind die absolventen von 2004 geboren	wo waren die absolventen von 2004 geboren	wo waren die absolventen des jahres 2004 geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welches geschlecht ist mehr als zwei personen	welches geschlecht mehr als zwei personen ist	welches geschlecht ist mehr als zwei menschen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
ein mitarbeiter ab 2004 oder 2010	ein mitarbeiter, der vor 2004 oder 2010 beginnt	ein mitarbeiter ab, bevor sie 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher arbeitgeber hat die geringste anzahl von arbeitnehmern?	welcher arbeitgeber die geringste anzahl von arbeitnehmern hat	die arbeitgeber hat die geringste anzahl von mitarbeitern	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche schüler sind nach 2004 oder 2010 eingeschult worden?	welche schüler nach 2004 oder 2010 mit der schule begonnen haben	die schüler mit der schule begonnen, die nach 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer ist die person, deren geburtsort new york ist und deren größe 180 cm beträgt?	wer ist die person, deren geburtsort ist new york und deren höhe 180 cm	wer ist die person, deren geburtsort ist new york und dessen höhe 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthplace ) ( string = ) en.city.new_york ) )
finde mich alle leute sind größer als 180 cm	finden sie mich alle menschen sind größer als 180 cm	finden mich alle menschen, die größer sind als 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) ) ) )
geburtsort des arbeitnehmers, dessen enddatum nicht 2004 liegt	geburtsstadt des arbeitnehmers, dessen enddatum nicht 2004 ist	geburtsstadt der mitarbeiter, deren endedatum ist nicht 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was ist das geschlecht eines studenten, dessen enddatum nicht 2004 ist?	was ist das geschlecht einer studentin, deren enddatum nicht 2004 ist	was ist das geschlecht der schüler, deren endedatum ist nicht 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wer ist die älteste person?	wer ist die älteste person	wer ist die älteste person	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string birthdate ) ) ) )
leute aus new york, die mit alice befreundet sind	leute von new york, die mit alice befreundet sind	menschen aus new york, die freunde sind mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
welche schüler haben ein enddatum, das niedriger als das startdatum von alice ist	welche kursteilnehmer ein enddatum haben, das niedriger ist als das startdatum von alice	was die studierenden haben ein enddatum, das niedriger ist als das startdatum von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
suche nach schülern, die nicht später als 2004 oder 2010 angefangen haben	studenten finden, die spätestens 2004 oder 2010 begonnen haben	finden studenten, die nicht später als 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
in welcher stadt wurde der mann geboren?	welche stadt war das männliche geboren	in welcher stadt war das männliche geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )
freunde von menschen finden, die ihren job im jahr 2004 gekündigt haben	freunde von menschen finden, die 2004 ihren job aufgeben	freunde finden von menschen, die ihre jobs aufgegeben, 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
in welcher stadt wurden mindestens zwei menschen geboren?	in welcher stadt mindestens zwei menschen geboren wurden, die in	in welcher stadt wurden mindestens zwei menschen geboren, die in	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
wer ist alice freunde mit dem ist 180 cm groß	wer ist alice freunde mit, dass ist 180 cm groß	wer ist alice freunde mit das ist 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string friend ) ( string = ) en.person.alice ) )
menschen, die mit mitarbeitern befreundet sind, die ihre arbeit vor 2004 begonnen haben	personen, die mit mitarbeitern befreundet sind, die vor 2004 ihre arbeit aufgenommen haben	menschen, die freunde sind mit mitarbeitern, die mit der arbeit begonnen, vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
der 2004 in new york geboren wurde	wer 2004 bei new york geboren wurde	wer ist 2004 geboren in new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string birthplace ) ( string = ) en.city.new_york ) )
person, die mit einem mitarbeiter befreundet ist, der mindestens 2004 in den ruhestand getreten ist	person, die mit einem mitarbeiter befreundet ist, der mindestens 2004 in den ruhestand getreten ist	person, die freunde mit einem mitarbeiter, die in den ruhestand mindestens 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finde mich alle menschen mit einer größe von 180 cm und jahrgang 2004	finden sie mich alle menschen, deren höhe 180 cm groß ist und im jahr 2004 geboren	finden mich alle leute, deren höhe von 180 cm und 2004 geboren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )
suche mir den schüler, dessen startdatum an alices geburtstag liegt	finden sie mich die studentin, deren startdatum ist am alice geburtstag	mich finden die schüler, deren starttermin auf alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde menschen mit einer höhe von 180 cm	finden menschen mit einer höhe von 180 cm	finden sie personen mit einer höhe von 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
welcher mitarbeiter hat die wenigsten jobs?	welcher mitarbeiter die wenigsten jobs hat	welcher mitarbeiter hat die wenigsten jobs	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie den beziehungsstatus von studenten, die keine informatik studieren	finden sie die beziehungsstatus von studenten, die keine informatik studieren	die beziehung der status von studenten, denen nicht informatik studieren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
leute, die am selben tag aufgehört haben zu arbeiten wie alice	personen, die am selben tag nicht mehr arbeiteten wie alice	menschen, die aufgehört zu arbeiten am selben tag, wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher schüler hielt an, bevor schüler alice anfing	welcher student angehalten hat, bevor student alice gestartet wurde	die schüler angehalten, bevor die studentin alice begann	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
student, der am geburtstag von alice begann	student, der am geburtsdatum von alice begann	student, begann auf den geburtstag von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist das geschlecht der arbeitnehmer mit einem enddatum größer als 2004	was ist das geschlecht der arbeitnehmer mit einem enddatum größer als 2004	was ist das geschlecht der beschäftigten mit einem enddatum größer als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche leute sind mit studenten befreundet, deren startdatum nicht gleich 2004 ist?	welche menschen mit studenten befreundet sind, die ein startdatum haben, das nicht gleich 2004 ist	was für menschen sind freunde mit studenten, die ein startdatum nicht gleich 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen, die das geschlecht von alice freunde sind	menschen, die das geschlecht von alices freunden sind	menschen, die das geschlecht von "alice' s freunde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
menschen, die anfingen zu arbeiten, als alice aufhörte zu arbeiten	personen, die mit der arbeit begonnen haben, als alice aufhörte zu arbeiten	menschen, die begann, als alice hörte auf zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus von mitarbeitern, die nicht bei mckinsey beschäftigt sind?	wie hoch ist der beziehungsstatus von mitarbeitern, die nicht bei mckinsey beschäftigt sind?	was ist der beziehungsstatus der mitarbeiter, die nicht bei mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welcher arbeitnehmer hat nicht mehr als zwei arbeitgeber	welcher arbeitnehmer nicht mehr als zwei arbeitgeber hat	die mitarbeiter haben nicht mehr als zwei arbeitgeber	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die ledig und in new york geboren sind	menschen, die ledig sind und in new york geboren sind	menschen, die single sind und in new york geboren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string birthplace ) ( string = ) en.city.new_york ) )
finde eine person, die geboren wurde, bevor alice anfing zu arbeiten	finden sie eine person geboren, bevor alice begann zu arbeiten	finden sie eine person, die geboren werden, bevor alice anfing zu arbeiten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) )
wer ist in der gleichen art von beziehung wie alice und ist 180 cm groß	der in der gleichen art von beziehung wie alice ist und 180 cm groß ist	wer ist in der gleichen art von beziehung, wie alice und ist 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) en.person.alice ) )
suche nach personen, die vor dem arbeitsende von alice geboren wurden	personen finden, die vor dem arbeitsendedatum von alice geboren wurden	finden sie personen geboren vor der beschäftigung enddatum der alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) )
finden sie städte, die die geburtsorte von mitarbeitern sind, deren enddatum nicht später als 2004 liegt	städte finden, die die geburtsorte von arbeitnehmern mit einem enddatum spätestens 2004 sind	finden sie städte, das sind die geburtsstätten der mitarbeiter mit einem enddatum nicht später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
ein student, der gegangen ist, bevor es student alice getan hat	ein student, der vor der studentenalice gegangen ist,	ein student, der links vor der studentin alice hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wie ist der beziehungsstatus des studenten, der seinen job bis 2004 verlässt?	wie ist der beziehungsstatus des studenten, der seinen job bis 2004 verlässt	was ist der familienstand des studenten verlassen, seinen job von 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wie ist der status der beziehung zweier völker?	wie ist der status der beziehung der beiden völker	was ist der status der beziehung der beiden völker	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
wer hat maximal zwei freunde	der maximal zwei freunde hat	wer hat maximal zwei freunde	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
die an nur einer universität studiert haben	der nur an einer universität studiert hat	wer studium an nur einer universität	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string university ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen mit weniger als zwei geschlechtern finden	menschen mit weniger als zwei geschlechtern finden	finden sie personen mit weniger als zwei geschlechter	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string < ) ( number 2 ) ) )
finde jemanden, der kürzer als 200 cm ist	finden sie jemanden kürzer als 200 cm	jemanden finden, der kürzer als 200 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) ) ) )
suche nach schülern mit einem enddatum in 2004 oder 2010	studierende mit enddatum 2004 oder 2010 finden	finden sie studenten mit endedatum in 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welchen beziehungsstatus haben weniger als zwei personen?	welcher beziehungsstatus weniger als zwei personen haben	die beziehung status weniger tun, als zwei menschen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
wo wurden zwei menschen geboren?	wo zwei menschen geboren wurden	wo waren die zwei leute, beide geboren	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
was war alices letzter arbeitstag von 2004?	was war alices letzter tag ihres jobs von 2004	was war alice der letzte tag von ihrem job aus dem jahr 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_end_date ) ) )
nennen sie den freund eines mitarbeiters, der nach 2004 gekündigt hat	nennen sie den freund eines mitarbeiters, der nach 2004 gekündigt hat	name der freundin eines mitarbeiters, dass sie nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wann hat alice das informatikstudium beendet?	wann hat alice das studium der informatik beendet	wann hat alice studium der informatik	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string education_end_date ) ) )
was männlich ist, ist befreundet mit alice	was männlich ist freunde mit alice	was männlich ist befreundet mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string gender ) ( string = ) en.gender.male ) )
welche leute sind gemeinsame freunde von alice	welche menschen gemeinsame freunde von alice sind	die menschen sind gemeinsame freunde von alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
personen, die mit dem mitarbeiter befreundet sind, der vor 2004 ausscheidet	personen, die mit dem mitarbeiter befreundet sind, der vor 2004 ausscheidet	menschen, die freunde sind mit der mitarbeiterthats verlassen, bevor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
suche nach schülern mit dem letzten tag am oder nach dem ersten tag von alice	finden sie studenten mit dem letzten tag am oder nach alices erstem tag	finden sie studenten, die mit letzte tag, die am oder nach alice ' s erster tag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wann hat alice ihren job im jahr 2004 verlassen?	an welchem datum alice ihren job im jahr 2004 verlassen hat	wann hat alice verlassen ihren job im jahr 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_end_date ) ) )
welche mitarbeiter am letzten tag sind spätestens am geburtsdatum von alice	welche mitarbeiter am letzten tag nicht später als das geburtsdatum von alice sind	die mitarbeiter letzten tag nicht später als alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
schüler, die nach 2004 eingeschult wurden	schüler, die nach 2004 mit der schule begonnen haben	studenten, die begann, die schule nach 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
person, die mit einem studenten befreundet ist, der höchstens bis 2004 beginnt	person, die mit einem studenten befreundet ist, der höchstens 2004 beginnt	person, die freundin eines studenten, der beginnt bei den meisten von 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
mitarbeiter finden, die nicht im jahr 2004 angefangen haben	mitarbeiter finden, die nicht mehr als 2004	suchen mitarbeiter ab andere als in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde menschen, die nach der beschäftigung von alice geboren wurden	menschen finden, die nach der beschäftigung von alice	finden sie personen geboren nach der beschäftigung von alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) )
person, die am oder nach dem ende des arbeitsverhältnisses von alice geboren wurde	person, die am oder nach beendigung der beschäftigung von alice geboren wurde	person geboren am oder nach dem ende von alice beschäftigung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) )
welcher mitarbeiter hat das niedrigste startdatum?	welche mitarbeiter das zuletzt letzte startdatum haben	die mitarbeiter hat, die mindestens den letzten start datum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche person hat die wenigsten freunde?	welche person die wenigsten freunde hat	die person hat die geringste anzahl von freunden	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( string friend ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
finde leute mit freunden, die spätestens 2004 die schule beendet haben	finden sie menschen mit freunden, die die schule spätestens 2004 beendet haben	finden sie personen mit freunden, die schule beendet, spätestens 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
hier findest du alle 2004 geborenen personen, die mit alice befreundet sind	finden sie alle menschen geboren im jahr 2004, die mit alice befreundet sind	finden sie alle personen geboren im jahr 2004, dass sind freunde mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string friend ) ( string = ) en.person.alice ) )
menschen, die am selben tag oder nach alice geboren wurden	menschen, die am selben tag wie oder nach alice geboren wurden	menschen, die geboren wurden, den gleichen tag oder nach alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )
geburtsort von zwei oder weniger personen	geburtsort von zwei oder weniger personen	geburtsort von zwei oder weniger personen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
welche person, die im jahr 2004 endete, ist 180 cm groß	welche person, die 2004 endete, 180 cm groß ist	welche person endete im jahr 2004 ist 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )
welche schüler haben ein enddatum nach 2004?	welche studenten ein enddatum nach 2004 haben	was die studierenden haben ein endedatum später als 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mit wem war der student, mit dessen startdatum mindestens 2004 befreundet war?	der student ist, dessen startdatum mindestens 2004 freunde mit	wer ist der student, dessen startdatum war zumindest 2004 freunde mit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
leute, die anfingen zu arbeiten, nachdem alice aufgehört hatte zu arbeiten	personen, die nach der arbeit von alice begonnen haben, arbeiten nicht mehr	menschen, die arbeiten begonnen, nachdem alice aufgehört zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche person ist mit jemandem befreundet, der nicht nur an eine braune universität geht?	welche person ist mit jemandem befreundet, der irgendwo neben der braunen universität hingeht	die person ist befreundet mit jemandem, der geht irgendwo neben der brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
suche nach schülern, deren letzter tag vor 2010 war	studenten finden, deren letzter tag vor 2010 war	finden sie studenten, deren letzten tag war vor 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde mich freunde von singles	finden sie mich freunde von einzelnen menschen	mich finden freunde des einzelnen menschen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )
person, die mit jemandem befreundet ist, dessen enddatum nach 2004 liegt	person, die mit jemandem befreundet ist, dessen enddatum nach 2004	person, die freunde mit jemandem, dessen enddatum nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
ein freund eines mitarbeiters, der nach 2004 endet	ein freund eines mitarbeiters, der nach 2004 endet	ein freund eines mitarbeiters endet nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter, die gleichzeitig mit oder vor alice fertig werden	mitarbeiter, die zeitgleich mit oder vor alice	mitarbeiter finishing gleichzeitigen oder vor alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche person ist 180 cm groß und gerade online	welche person 180 cm groß ist und derzeit online ist	welche person ist 180 cm groß und ist momentan online	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string logged_in ) ) )
welcher mitarbeiter hat frühestens am ende von alice angefangen	welcher mitarbeiter frühestens am enddatum von alice begonnen hat	die mitarbeiter begannen, die nicht älter als alice ' s enddatum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde alices freunde, die im jahr 2004 geboren wurden	finde alices freunde, die 2004 geboren wurden	finden sie alice ' s freunden, die geboren wurden in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
finde leute mit nur einem oder zwei freunden	menschen mit nur einem oder zwei freunden finden	finden sie personen mit nur einem oder zwei freunden	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
wie viele leute sind da	wie viele menschen dort sind	wie viele menschen gibt es	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
welche mitarbeiter nach 2004 ihren job gekündigt haben	welcher mitarbeiter nach 2004 seinen arbeitsplatz aufgibt	die mitarbeiter beenden ihre arbeit nach 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
180 cm große freunde von alice	180 cm groß freunde von alice	180 cm groß freunde von alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string friend ) ( string = ) en.person.alice ) )
mitarbeiter, dessen enddatum nicht nach dem startdatum von alice liegt	mitarbeiter, dessen enddatum nicht nach dem startdatum der mitarbeiteralice liegt	mitarbeiter, deren enddatum nach dem startdatum der mitarbeiter alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
arbeitnehmer, dessen enddatum vor 2004 oder 2010 liegt	arbeitnehmer, dessen enddatum vor 2004 oder 2010 liegt	mitarbeiter, deren endedatum liegt vor dem jahr 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
die alices freunde aus ihrer heimatstadt sind	die alices freunde aus ihrer heimatstadt sind	wer sind alice ' s freunden aus ihrer heimatstadt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
ein freund von alice oder bob	ein freund von alice oder bob	ein freund von alice oder bob	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
eine person, deren freund der angestellte im jahr 2004 nicht abgereist ist	eine person, deren mitarbeiterfreund 2004 nicht gegangen ist	eine person, deren mitarbeiter freund nicht verlassen, im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
ein mitarbeiter, der vor 2004 begann	ein mitarbeiter, der vor 2004	ein mitarbeiter, der bereits vor 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist alices chef bei ihrem software engineer job	die alices chefin bei ihrem softwareingenieurjob ist	wer ist alice ' s boss an ihrer software engineer job	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) ( string employer ) ) )
finden sie einen mitarbeiter, der nach 2010 abgereist ist	einen mitarbeiter finden, der nach 2010 gegangen ist	finden sie einen mitarbeiter, der linke nach 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie das geschlecht der schüler, die ein startdatum nach 2004 haben	das geschlecht der studierenden zu finden, die nach 2004 ein startdatum haben	finden sie das geschlecht des studenten, die ein startdatum, die nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie die geschlechter der mitarbeiter, deren enddatum nicht später als 2004 liegt	die geschlechter von arbeitnehmern zu finden, die spätestens 2004 ein enddatum haben	finden sie die geschlechter der mitarbeiter, die ein endedatum nicht später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welcher mitarbeiter hat den gleichen beziehungsstatus wie der mitarbeiter, der vor 2004 angefangen hat?	welcher mitarbeiter den gleichen beziehungsstatus hat wie der mitarbeiter, der vor 2004 begonnen hat	welcher mitarbeiter hat die gleiche beziehung status, als die mitarbeiter, die früher begonnen als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finden sie die geschlechter der schüler mit einem enddatum nach 2004	die geschlechter von studierenden mit enddaten nach 2004 zu finden	finden sie die geschlechter der studierenden mit endetermine, die später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
beziehungsstatus von menschen, die mit alice befreundet sind	beziehungsstatus von personen, die mit alice befreundet sind	beziehungsstatus von menschen, die freunde sind mit alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
nennen sie den beziehungsstatus eines mitarbeiters, der spätestens 2004 angefangen hat	benennen sie den beziehungsstatus eines mitarbeiters, der spätestens 2004 begonnen hat	name der beziehungen status eines mitarbeiters, der begann spätestens 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
schüler, die die schule nach dem tag beendeten, beendeten alice die schule	schüler, die die schule nach dem tag alice beendet schule beendet	schüler beendet die schule nach dem tag, alice endete der schule	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer wurde geboren, bevor alice ging	der geboren wurde, bevor alice links	wer wurde geboren, bevor alice links	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) )
finden sie menschen, die zwischen 180 cm und 200 cm groß sind	finden sie personen, die zwischen 180 cm und 200 cm groß sind	finden sie menschen, die sind zwischen 180 cm und 200 cm hoch	( call SW.listValue ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) )
180 cm große person, die eingeloggt ist	180 cm große person, die eingeloggt ist	180 cm große person, die angemeldet ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
entweder 180cm oder 200cm	entweder 180cm oder 200cm	entweder 180cm oder 200cm	( call SW.listValue ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) )
wie ist der beziehungsstatus eines mannes?	was ist der beziehungsstatus eines mannes	was ist die beziehung der status eines männlichen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )
welcher student hat vor 2004 angefangen?	welcher student vor 2004 begonnen hat	die schüler früher begonnen als 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
studenten, die ihre ausbildung vor 2004 abgeschlossen haben	studenten, die vor 2004 fertig wurden	die studierenden beenden, bevor 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wie viele beziehungsstatus gibt es?	wie viele beziehungsstatus gibt es	wie viele beziehung status sind es	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ) )
welche person wurde in new york geboren und single	welche person in new york und single geboren wurde	welche person wurde in new york geboren und single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
menschen geboren im jahr 2004, die 180 cm sind	2004 geborene personen, die 180 cm alt sind	menschen geboren in 2004, die 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
eine freundin von alice, die 180 cm groß ist	ein freund von alice, der 180 cm groß ist	ein freund von alice, die ist 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
welche mitarbeiter haben ein enddatum, das nach dem startdatum von student alice liegt?	welche mitarbeiter ein enddatum haben, das nach dem startdatum der studentenalice liegt	was die mitarbeiter haben ein endedatum, das später als das startdatum der student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer hat zwei freunde	der zwei freunde hat	wer hat zwei freunde	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
geburtsorte von arbeitnehmern, die nach 2004 angefangen haben	geburtshäuser von arbeitnehmern, die nach 2004	geburtsorte der mitarbeiter, die nach 2004 begonnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
geschlecht der studierenden, die im oder nach dem jahr 2004 begonnen haben	geschlecht von studierenden, die in oder nach 2004	geschlecht von studenten, die im jahr 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie mitarbeiter, die am selben tag beginnen wie die studentin alice	mitarbeiter finden, die am selben tag beginnen wie student alice	finden die mitarbeiter ab dem gleichen tag als student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist mit jemandem befreundet, der in new york geboren wurde?	wer ist freundemit jemandin geboren in new york	wer ist freunde mit jemandem in new york geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )
suche nach schülern mit einem startdatum, das gleich oder größer als das von schüler alice ist	suchen sie nachkurs von schülern mit einem startdatum, das identisch oder größer als die kursteilnehmeralice ist	finden sie studenten mit einem startdatum ist der gleiche oder größer als studentin alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie geburtsorte von schülern, deren letzter tag 2004 oder früher war	geburtshäuser von studenten finden, deren letzter tag 2004 oder früher	finden geburtsstätten von studenten, deren letzten tag war 2004 oder vor	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finde menschen, die im jahr 2004 geboren wurden und 180 cm groß sind	finden sie 2004 geborene personen, die 180 cm groß sind	finden sie personen geboren im jahr 2004, die 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
menschen, die mit jemandem befreundet sind, der vor 2004 in die schule gekommen ist	menschen, die mit jemandem befreundet sind, der vor 2004 mit der schule begonnen hat	menschen, die freunde sind mit einer person, mit der schule begonnen, bevor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
ein student, der nach alice geboren wurde	ein student, der nach der geburt von alice beginnt	ein student ab nach alice geboren wurde	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
beziehungsstatus, der dem eines 2004 geborenen menschen entspricht	beziehungsstatus, der mit einer 2004 geborenen person identisch ist	beziehung, status, ist gleich wie eine person, die 2004 geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )
geburtsstadt der person mit einer größe von 180 cm	geburtsstadt einer person mit einer körpergröße von 180 cm	geburtsort der person, deren höhe von 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
finde freunde von menschen, die frühestens 2004 mit der arbeit begonnen haben	freunde von menschen zu finden, die frühestens 2004 mit der arbeit begonnen haben	freunde finden von menschen, die mit der arbeit begonnen, im jahr 2004, frühestens	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter, dessen startdatum nicht nach dem enddatum von student alice liegt	mitarbeiter, dessen startdatum nicht nach dem enddatum der studentenalice liegt	mitarbeiter, deren startdatum ist nicht nach dem enddatum der student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer hat die meisten freunde	wer die meisten freunde hat	wer hat die meisten freunde	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string friend ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
finden sie den geburtsort von mitarbeitern, deren letzter tag nicht in 2004 liegt	den geburtsort von arbeitnehmern finden, deren letzter tag nicht im jahr 2004 liegt	finden sie das geburtshaus von mitarbeitern, deren letzten tag nicht mehr in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche einzelne person ist mit alice befreundet?	welche einzelne person ist freundemit alice	was eine einzige person ist befreundet mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
menschen, die ihr studium vor der geburt von alice abgeschlossen haben	menschen, die ihr studium abgeschlossen haben, bevor alice geboren wurde	menschen, die den abschluss ihrer studie, bevor sie geboren wurde alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde menschen, die nach alice geboren wurden, kündige ihren job	finden sie menschen, die geboren wurden, nachdem alice ihren job gekündigt hatte	finden sie menschen, die geboren wurden, nachdem alice ihren job beenden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) )
welcher student besucht die gleiche universität wie die studentin alice?	welcher student an die gleiche universität geht wie student alice	welcher student geht an der gleichen universität als student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde menschen ohne geburtsort	menschen ohne geburtshäuser finden	finden sie personen mit keine geburtsorte	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( string birthplace ) ) )
an welchem tag im jahr 2004 begann alice zu arbeiten?	an welchem tag im jahr 2004 begann alice zu arbeiten	was für ein tag, im 2004 habe alice anfangen zu arbeiten	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_start_date ) ) )
wie ist der beziehungsstatus einer 2004 geborenen person?	wie hoch ist der beziehungsstatus einer 2004 geborenen person?	was ist der beziehungsstatus einer person, geboren in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )
freunde von menschen, die nach 2003 ihren job gekündigt haben	freunde von menschen, die nach 2003 ihren job aufgeben	freunde von menschen, die ihre jobs aufgegeben, nach 2003	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
nennen sie die mitarbeiter, die den job gekündigt haben, als alice geboren wurde	benennen sie die mitarbeiter, die den job beendet haben, als alice geboren wurde	namen der mitarbeiter, beenden sie den job als alice geboren wurde	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus von studenten, die nach 2004 beigetreten sind?	wie ist der beziehungsstatus von studenten, die nach 2004 beigetreten sind	was ist der beziehungsstatus der studierenden, die sich nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welcher mitarbeiter hat ein enddatum nach dem startdatum von alice	welcher mitarbeiter ein enddatum nach dem startdatum von alice hat	welche mitarbeiter hat ein endedatum später als das startdatum von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie heißt eine person mit zwei geschlechtern?	was ist eine person, die zwei geschlechter hat, genannt	was ist eine person, die zwei geschlechter genannt	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( number 2 ) ) )
student, dessen enddatum mit dem der mitarbeiterin alice übereinstimmt	student, dessen enddatum mit dem von employee alice identisch ist	schüler, deren endedatum ist dasselbe wie das der mitarbeiter von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter finden, die ihren job nach 2004 gekündigt haben	mitarbeiter finden, die nach 2004 gekündigt haben	finden sie mitarbeiter, beenden sie die aufgabe nach 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, dessen startdatum vor dem enddatum von mitarbeiter alice liegt	mitarbeiter, dessen startdatum vor dem enddatum der mitarbeiteralice liegt	mitarbeiter, deren startdatum vor dem enddatum des mitarbeiters alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
personen mit einem beschäftigungsende von 2004 finden	personen mit arbeitsschluss datum 2004 finden	finden sie personen mit beschäftigung enddatum als 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_end_date ) ) )
menschen, die in new york geboren sind und eine größe von 180 cm haben	menschen, die in new york geboren sind und 180cm groß sind	menschen, die in new york geboren und sind 180 cm hoch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
freund eines studenten, dessen startdatum nach 2004 liegt	freund eines studenten, dessen startdatum nach 2004 ist	freund der schüler, deren startdatum nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
suche nach schülern, deren enddatum über dem geburtstag von alice liegt	suchen sie nachstudenten mit einem enddatum, das größer ist als alices geburtstag	finden sie studierende, die ein endedatum ist größer als alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
schüler, die nach alices enddatum angefangen haben	studenten, die nach alices enddatum begonnen haben	studenten, die nach alice ' s enddatum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
hat alice informatik studiert	hat alice studium informatik	hat alice informatik studieren	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string field_of_study ) ) )
leute, die die schule abgebrochen haben, bevor alice anfing zu arbeiten	menschen, die die schule beendeten, bevor alice anfing zu arbeiten	menschen, die nicht mehr die schule, bevor alice anfing zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche personen haben weniger als zwei beziehungsstatus?	welche personen weniger als zwei beziehungsstatus haben	die menschen haben weniger als zwei beziehung status	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string < ) ( number 2 ) ) )
welche personen haben 2004 geburtstag?	was personen geburtstag im jahr 2004 ist	welche personen geburtstag im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
geschlecht von alices freunden	geschlecht von alices freunden	geschlecht von "alice' s freunde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
person, die ein freund eines studenten ist, der bis 2004 seinen abschluss machen wird	person, die ein freund von studenten ist, die bis 2004 ihren abschluss machen wird	person, die ein freund der schüler, absolvent 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
studenten, die mit alice beginnen	studenten, die mit alice beginnen	studenten, die beginnen mit alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
freunde von menschen, die ihre arbeit vor 2005 gekündigt haben	freunde von menschen, die vor 2005 ihren job gekündigt haben	freunde von menschen, die ihre arbeitsplätze verlassen, bevor 2005	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finde die leute, die mit männern befreundet sind	finden sie die menschen, die mit männern befreundet sind	finden sie die menschen, die freunde sind mit männchen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )
suche nach schülern, deren startdatum unter dem von schüler alice liegt	finden sie studenten, deren startdatum kleiner ist als das von student alice	finden sie studenten, deren startdatum ist weniger als die studentin alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche schüler haben ein startdatum, das entweder 2004 oder 2010 ist	welche studenten ein startdatum haben, das entweder 2004 oder 2010 ist	was die studierenden haben ein startdatum, entweder 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche person ist mit einem mitarbeiter befreundet, dessen enddatum nicht später als 2004 liegt?	welche person mit einem mitarbeiter befreundet ist, der spätestens 2004 ein enddatum hatte	welche person ist befreundet mit einem mitarbeiter, der hatte ein endedatum nicht später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
studenten, die am oder nach dem enddatum von alice begonnen haben	studenten, die am oder nach dem enddatum von alice	studenten, die am oder nach dem enddatum von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist das enddatum von alice's job als software engineer?	was ist das enddatum von alices job als softwareingenieur	was ist das enddatum der alice den job als softwareingenieur	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) ( string employment_end_date ) ) )
wie ist der beziehungsstatus von weniger als zwei personen?	wie hoch ist der beziehungsstatus von weniger als zwei personen	was ist der beziehungsstatus von weniger als zwei personen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
welche person mit dem mitarbeiter befreundet ist, dessen enddatum nicht 2004 ist	welche person mit dem mitarbeiter befreundet ist, dessen enddatum nicht 2004 ist	welche person ist mit freunden die mitarbeiter, deren endedatum ist nicht 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
geburtsort von mitarbeitern, die nicht bei mckinsey beschäftigt sind	geburtsort von mitarbeitern, die nicht bei mckinsey beschäftigt sind	geburtsort von mitarbeitern, die nicht bei mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
nennen sie einen freund, der im jahr 2004 geboren wurde	nennen sie einen freund, der 2004 geboren wurde	namen der personen freund, wurde 2004 geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )
leute, die mit jemandem befreundet sind, der die schule in irgendeinem jahr außer 2004 beendet hat	menschen, die mit jemandem befreundet sind, der die schule in jedem jahr außer 2004 beendet hat	leute, dass sind freunde mit jemandem, der die schule beendet in jedem jahr, sondern 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wer ist mit bob oder alice befreundet?	wer ist freunde mit bob oder alice	wer ist befreundet mit bob oder alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
was ist die geburtsstadt der studenten, die 2004 am meisten angefangen hat?	was ist die studenten geburtsstadt, die höchstens im jahr 2004 begonnen	was ist mit den studenten, geburtsortstadt, begonnen bei den meisten in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
person, die an den meisten universitäten ging	person, die zu den meisten universitäten ging	mensch, dass ging an den meisten universitäten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string university ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter, der softwareentwickler oder programmmanager ist	mitarbeiter, der softwareingenieur oder programmmanager ist	mitarbeiter, die ein softwareingenieur oder programmmanager	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.concat en.job_title.software_engineer en.job_title.program_manager ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
eine 180 cm große person, die an der gleichen stelle geboren wurde wie alice	eine 180 cm große person, die an der gleichen stelle wie alice geboren wurde	eine 180 cm große person geboren im selben ort wie alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) )
person, die am tag der geburt von alice zum studium kam	person, die am tag der geburt der alice in samstudiet wurde	person, die sich die studie an dem tag geboren wurde alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
jemand, der an weniger als zwei universitäten studiert hat	jemand, der an weniger als zwei universitäten studiert hat	jemand, der studiert hat, bei weniger als zwei universitäten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string university ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
leute, die aufgehört haben zu arbeiten, bevor alice in die schule kam	menschen, die nicht mehr arbeiteten, bevor alice mit der schule begann	menschen, die aufgehört zu arbeiten, bevor alice in die schule kam	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
suche nach studenten mit den meisten studienrichtungen	studenten mit den meisten studienrichtungen finden	finden sie studenten mit den meisten studienrichtungen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche personenhöhe ist kürzer als 180 bis 200 cm	welche personenhöhe kürzer als 180 bis 200 cm ist	was personen, die höhe ist kürzer als 180 bis 200 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) ) ) )
was sind die geschlechter der schüler, die nach 2004 beginnen?	was sind geschlechter von studierenden ab 2004	was sind geschlechter von studenten ab, die nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wer hat die meisten beziehungsstatus	wer die meisten beziehungsstatus hat	wer hat am meisten beziehung status	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( string relationship_status ) ) )
finde einzelne leute, die mit alice befreundet sind	finden sie einzelne personen, die mit alice befreundet sind	finden einzigen menschen, die freunde sind mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string friend ) ( string = ) en.person.alice ) )
leute, die aufhörten zu arbeiten, nachdem alice in die schule gekommen war	menschen, die nach dem schulstart aufgehört haben zu arbeiten	menschen, die aufgehört zu arbeiten, nachdem alice in die schule kam	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche schülerin hat den tag begonnen, als alice ihren job verließ	welche studentin den tag begann, an dem alice ihren job verließ	die schüler begann der tag alice verließ ihren job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde die größte person	die größte person zu finden	finden sie die höchste person	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string height ) ) ) )
geburtsort von zwei personen	geburtsort von zwei personen	geburtsort von zwei personen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
ist alice's berufsbezeichnung software engineer	ist alices berufsbezeichnung softwareingenieur	ist alice ' s jobtitel software engineer	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) ( string job_title ) ) )
was ist die geburtsstadt von nicht mehr als zwei menschen	was ist die geburtsstadt von nicht mehr als zwei menschen	was ist die geburtsstadt von nicht mehr als zwei personen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
wie ist der beziehungsstatus eines studenten, dessen enddatum nicht später als 2004 liegt?	wie hoch ist der beziehungsstatus eines studenten, dessen enddatum nicht später als 2004 liegt?	was ist die beziehung der status eines studenten, deren endedatum nicht später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
männer, die online sind	männer, die online sind	männer, die online sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string gender ) ( string = ) en.gender.male ) )
der 2004 geboren wurde und 180 cm groß ist	geboren 2004 und 180 cm groß	wer wurde 2004 geboren und ist 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
menschen, die die schule begonnen haben, als alice angefangen hat zu arbeiten oder früher	menschen, die mit der schule begonnen haben, als alice anfing zu arbeiten oder vor	menschen, die mit der schule angefangen, als alice anfing zu arbeiten oder vor	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche mitarbeiterin kündigte nach alices geburtstag	welcher mitarbeiter nach alices geburtstag gekündigt hat	die mitarbeiter beenden, nachdem alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche jungs sind auch 180 cm groß	welche jungs sind auch 180 cm groß	die jungs sind auch 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
mitarbeiter mit dem letzten letzten tag suchen	mitarbeiter mit dem letzten tag finden	finden mitarbeiter mit den neuesten letzten tag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie die geburtsorte von menschen, die 180 cm groß sind	finden sie die geburtsorte von menschen, die 180 cm groß sind	finden sie die geburtsorte der menschen, die sind 180 cm hoch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
finde mich alle rüden die gerade online sind	finden sie mich alle männer, die derzeit online sind	finden mich alle männer, die derzeit online sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string gender ) ( string = ) en.gender.male ) )
finden sie mitarbeiter mit einem startdatum von 2004 oder später und deren freunde	mitarbeiter finden, die ein startdatum von 2004 oder höher haben, und ihre freunde	finden sie mitarbeiter, die ein startdatum von 2004 oder später und ihre freunde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche person hat zwei freunde	welche person zwei freunde hat	die person hat zwei freunde	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
leute, die die schule nach alice abgebrochen haben	menschen, die die schule nach alice beendet haben	leute, beendet die schule nach alice hast	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer hat zwei oder mehr geschlechter	die zwei oder mehr geschlechter haben	wer hat zwei oder mehr geschlechter	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string >= ) ( number 2 ) ) )
person, deren name lebt oder bob ist	person, deren name lebendig ist oder bob	person, deren namen am leben ist, oder bob	( call SW.listValue ( call SW.concat en.person.alice en.person.bob ) )
wo sind die menschen geboren, die nach 2004 in die schule gekommen sind?	wo waren die menschen, die nach 2004 in die schule gingen, geboren	wo waren die menschen, die mit der schule begonnen, die nach 2004 geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
freund des mitarbeiters, dessen startdatum höchstens 2004 ist	freund eines mitarbeiters, dessen startdatum höchstens 2004 ist	freund des mitarbeiters, dessen startdatum ist bei den meisten 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
die vor alice in die schule gegangen sind	der vor alice mit der schule begonnen hat	wer mit der schule begonnen, bevor alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche mitarbeiterin hat ihren job an alices geburtstag angefangen	welcher mitarbeiter seinen job am geburtstag von alice begonnen hat	die angestellte begann ihre arbeit auf alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
student mit dem gleichen fach wie student alice	student mit dem gleichen studienbereich wie das von student alice	schüler mit gleichen studienfach wie der student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die am selben tag wie alice geboren wurden	menschen, die am selben tag wie alice geboren wurden	menschen, die am selben tag geboren wie alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) )
welche studierenden außerhalb von 2004 gekündigt haben	welche studenten außerhalb des jahres 2004 aufhörten	die studenten beenden außerhalb von 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde menschen mit einer höhe von 180 cm und dem gleichen geburtsort wie alice	menschen mit einer höhe von 180 cm und dem gleichen geburtsort wie alice finden	finden sie personen mit einer körpergröße von 180 cm und den gleichen geburtsort wie alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) )
geburtsort des studenten, dessen enddatum nicht nach 2004 liegt	geburtsstadt des studenten, dessen enddatum nicht nach 2004 liegt	geburt stadt schüler, deren endedatum ist nicht nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen, die männlich und in new york geboren sind	menschen, die männlich sind und in new york geboren	menschen, die männlich sind und in new york geboren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string birthplace ) ( string = ) en.city.new_york ) )
freund eines studenten, dessen startdatum vor 2004 liegt	freund eines studenten, dessen startdatum vor 2004 liegt	freund der schüler, deren startdatum vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
schüler, die vor alices startdatum angefangen haben	studenten, die vor dem startdatum von alice begonnen haben	studenten, die vor alices start datum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche beziehungsstatus werden von alice 'freunden beansprucht?	welche beziehungsstatus von alices freunden beansprucht werden	welche beziehung status sind gefordert, durch alice ' s freunde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ) )
wer ist mit einer person befreundet, die mit alice befreundet ist?	der mit einer person befreundet ist, die mit alice befreundet ist	wer freunde mit einer person, die freunde mit alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
person mit mehr als zwei personen	person mit mehr als zwei personen	person, die mit mehr als zwei personen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
freund einer 2004 geborenen person	freund einer 2004 geborenen person	freund von jemand, geboren im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )
studenten, deren enddatum mit dem startdatum von student alice übereinstimmt	studenten, die das gleiche enddatum wie das startdatum der studentenalice haben	studenten, die haben das gleiche enddatum als startdatum der student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was hat alice studiert?	was hat alice studie	was hat alice studie	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ) )
was ist der geburtsort von alice?	was ist der geburtsort von alice	was ist der geburtsort von alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.getProperty en.person.alice ( string birthplace ) ) ) )
was ist der geburtsort eines studenten, der vor 2004 beigetreten ist?	was ist der geburtsort der studentin, die vor 2004 beigetreten ist	was ist der geburtsort der schüler, die sich vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finde jemanden, der in derselben stadt wie alice geboren ist	jemanden finden, der in der gleichen stadt wie alice geboren wurde	jemanden zu finden, geboren in derselben stadt wie alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) ) )
welches geschlecht haben die beiden menschen?	welches geschlecht sind die beiden menschen	welches geschlecht sind die beiden menschen, die	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
freund von mitarbeitern, deren enddatum nach 2004 liegt	freund von mitarbeitern, deren enddatum nach 2004 liegt	freund von arbeitnehmern, deren enddatum nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter endet vor oder als alice geboren wurde	mitarbeiter, der vor oder nach der geburt von alice endet	mitarbeiter beenden, bevor oder als alice geboren wurde	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die nach alice geboren wurden	menschen, die nach alice geboren wurden	menschen, die geboren wurden, nachdem alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )
mit wem sind einige meiner hauptfreunde in der informatik befreundet?	die einige meiner nichtcomputerwissenschaftlichen hauptverbindungen sind, mit denen	wer sind meine noncomputer wissenschaft wichtige verbindungen mit freunden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche schüler sind in die schule gekommen, bevor alice in die schule kam?	welche schüler die schule begannen, bevor alice die schule begann	die schüler begannen, die schule vor alice in die schule kam	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was für geschlechter sind die menschen, die nach 2004 die schule beendet haben?	welche geschlechter sind die menschen, die die schule nach 2004 beendet haben	welche geschlechter sind die menschen, die mit der schule fertig, nachdem 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wer ist mit dem mann befreundet?	wer mit dem männchen befreundet ist	wer ist freunde mit dem männlichen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )
welcher student hat ein enddatum, das nach dem startdatum von alice liegt?	welcher kursteilnehmer ein enddatum hat, das nach dem startdatum von alice liegt	welche studentin hat ein endedatum, das später als das startdatum von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie mitarbeiter mit dem gleichen startdatum wie mitarbeiter alice	suchen sie mitarbeiter, deren startdatum mit der mitarbeiteralice identisch ist	finden sie mitarbeiter, die ein startdatum das gleiche wie alice mitarbeiter	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche firma beschäftigt eine 180 cm große person	welches unternehmen eine 180 cm große person beschäftigt	was unternehmen beschäftigt 180 cm große person	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.company ) ( string ! type ) ) ( call SW.reverse ( string employer ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
welche person hat den gleichen beziehungsstatus wie die mehrheit?	welche person den gleichen beziehungsstatus wie die mehrheit seither hat	welche person hat die gleiche beziehung status als die mehrheit	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string relationship_status ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
ein student, der nach oder zu beginn von alice endet	ein student endet nach oder wenn alice beginnt	ein student endet nach oder, wenn alice beginnt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie alle menschen, die 180 cm groß sind	finden sie alle personen, die 180 cm groß sind	finden alle menschen 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
welche personen haben zwei beziehungsstatus	welche personen zwei beziehungsstatus haben	was haben die menschen zwei beziehung status	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( number 2 ) ) )
finde studenten freunde mit anderen letzten tagen als 2004	finden sie studenten freunde mit letzten tagen anders als 2004	finden studenten freunde mit letzten anderen tagen, als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
schüler, dessen startdatum nach dem startdatum von mitarbeiter alice liegt	student, dessen startdatum nach dem startdatum der mitarbeiteralice liegt	schüler, deren startdatum nach startdatum des mitarbeiteralice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
ein angestellter, der gegangen ist, bevor alice geboren wurde	ein mitarbeiter, der vor alice verlassen wurde geboren	ein mitarbeiter, der links, bevor sie geboren wurde alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist das geschlecht der menschen, die nach 2004 eingeschult wurden?	was ist das geschlecht der menschen, die nach 2004 mit der schule begonnen haben	was ist das geschlecht von menschen, die mit der schule begonnen, die nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche mitarbeiter haben nicht die berufsbezeichnung software engineer?	welche mitarbeiter nicht über die berufsbezeichnung softwareingenieur verfügen	die mitarbeiter haben nicht die stellenbezeichnung softwareingenieur	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
leute, die softwareingenieure oder programmmanager sind	personen, die softwareingenieure oder programmmanager sind	menschen, die softwareingenieure oder programmmanager	( call SW.listValue ( call SW.concat en.job_title.software_engineer en.job_title.program_manager ) )
mitarbeiter, der vor 2004 eingestiegen ist	mitarbeiter, der vor 2004 eingestiegen ist	mitarbeiter, die sich vor 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
nennen sie den schüler, der nach alice geboren wurde	nennen sie den schüler, der nach alice geboren wurde	namen der schüler, der geboren wurde, nachdem alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher mitarbeiter hat nach alices geburtsdatum angefangen	welcher mitarbeiter nach dem geburtsdatum von alice begonnen hat	die mitarbeiter gestartet, nachdem alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
geschlecht von jemandem, der single ist	geschlecht einer person, die ledig ist	geschlecht von jemandem, der single ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )
startdatum von alices studie, die im jahr 2004 endete	beginn der 2004 abgeschlossenen studie von alice	starttermin von "alice' s studie endete im jahr 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string education_start_date ) ) )
menschen, die mit mitarbeitern befreundet sind, die ihre arbeit in oder vor 2004 aufgenommen haben	personen, die mit mitarbeitern befreundet sind, die in oder vor 2004 angefangen haben, zu arbeiten	menschen, die freunde sind mit mitarbeitern, die begonnen arbeiten in oder vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finden sie menschen, die studenten mit einem studienfach sind, das nicht informatik ist, und ihre freunde	finden sie menschen, die studenten mit einem studienbereich sind, der nicht informatik ist, und ihre freunde	suchen sie menschen, die studierenden mit einem bereich der studie, dass nicht die informatik und ihre freunde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
person geboren, nachdem alice in die schule kam	person geboren, nachdem alice begann schule	person geboren, nachdem alice in die schule kam	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )
finde leute, die kürzer sind als alice	finden sie leute kürzer als alice	menschen finden, die kürzer als alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )
alices männliche freunde	alices männliche freunde	alice männliche freunde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string friend ) ( string = ) en.person.alice ) )
das geschlecht eines arbeitnehmers, der 2004 oder früher abgereist ist	geschlecht eines arbeitnehmers, der 2004 oder vor	das geschlecht eines arbeitnehmers, links 2004 oder vor	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
studenten, die entweder informatik oder geschichte studieren	studierende, die informatik oder geschichte studieren	studierenden, die entweder informatik oder geschichte	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.concat en.field.computer_science en.field.history ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wie ist der beziehungsstatus eines mitarbeiters, der kein softwareentwickler ist?	wie hoch ist der beziehungsstatus eines mitarbeiters, der kein softwareingenieur ist?	was ist der beziehungsstatus von einem mitarbeiter dessen nicht einen softwareingenieur	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wer hat freunde, die studenten sind, deren startdatum vor 2004 liegt?	wer hat freunde, die studenten sind, deren startdatum vor 2004 ist	wer hat freunde, sind studenten, deren startdatum vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
was ist die gesamthöhe aller in meinem netzwerk?	was ist die kombinierte höhe eines jeden in meinem netzwerk	was ist die kombinierte höhe der jeder in mein netzwerk	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ) ) )
wie ist der beziehungsstatus eines studenten, der 2004 oder früher begonnen hat?	wie hoch ist der beziehungsstatus eines studenten, der 2004 oder vor	was ist die beziehung der status eines studenten, begann im jahr 2004 oder vor	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche schüler haben den gleichen geburtstag und starttermin von alice	welche schüler den gleichen geburtstag und das gleiche startdatum von alice haben	die schüler haben am selben tag geburtstag und den starttermin von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde freunde von studenten mit einem anderen enddatum als 2004	freunde von studenten mit anderen enddaten als 2004 finden	freunde finden von studenten mit enddatum andere als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
das ist die universität von student alice, die im jahr 2004 abgeschlossen hat	die universität der studenten alice, die im jahr 2004 beendet	was ist die universität der studentin alice, die im jahr 2004 fertig	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string university ) ) )
wie ist der beziehungsstatus von mitarbeitern, deren berufsbezeichnung nicht softwareingenieur ist?	welcher beziehungsstatus von mitarbeitern ist, deren berufsbezeichnung nicht softwareingenieur ist?	was ist der beziehungsstatus der mitarbeiter, deren jobtitel ist nicht software ingenieur	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was ist das geschlecht der arbeitenden menschen, die nicht im jahr 2004 begonnen haben?	was ist das geschlecht der arbeitenden menschen, die nicht im jahr 2004 begonnen haben	was ist das geschlecht der arbeitenden menschen, die nicht in das geschäftsjahr 2004 gestartet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
beziehungsstatus des mitarbeiters, dessen enddatum vor 2004 liegt	beziehungsstatus des arbeitnehmers, dessen enddatum vor 2004 liegt	beziehungsstatus der mitarbeiter, deren enddatum vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finden sie die geburtsstadt für schüler mit einem anderen startdatum als 2004	finden sie die geburtsstadt für studenten, die ein anderes startdatum als 2004 haben	finden sie die geburtsstadt für studenten, denen ein startdatum als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche leute sind 180 cm an der braunen universität	welche menschen sind 180 cm an der braunen universität	die menschen sind 180 cm an der brown university	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string university ) ( string = ) en.university.brown ) )
freund eines studenten, dessen enddatum nicht vor 2004 liegt	freund eines studenten, dessen enddatum nicht vor 2004 liegt	freund der schüler, deren endedatum ist nicht vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finden sie menschen, die mehr als zwei geburtsorte haben	menschen finden, die mehr als zwei geburtsplätze haben	finden sie menschen, die mehr als zwei geburtsorte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string > ) ( number 2 ) ) )
nennen sie eine freundin von alice, die in new york geboren wurde	nennen sie einen freund von alice, der in new york geboren wurde	namen, ein freund von alice, der in new york geboren wurde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
welcher student ist zuletzt abgereist?	welcher student zuletzt gegangen ist	die studentische linke, die zuletzt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
personen, die die studie nach 2004 abgeschlossen haben	personen, die die studie nach 2004 abgeschlossen haben	menschen, die die studie beendet, die nach 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche person hat das gleiche geburtsdatum wie alice?	welche person das gleiche geburtsdatum wie alice hat	welche person hat den gleichen geburtstag wie alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) )
was ist der beziehungsstatus der person, die 180 cm groß ist	wie ist der beziehungsstatus der person, die 180 cm groß ist	was ist der beziehungsstatus der person, die 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
menschen, die 180 cm groß sind und im jahr 2004 gekündigt haben	personen, die 180 cm groß sind und 2004 aufgehört haben	menschen, die sind 180 cm hoch und beenden sie im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )
beziehungsstatus von personen mit einer körpergröße von 180 cm	beziehungsstatus von personen mit einer körpergröße von 180cm	beziehungsstatus von menschen, deren höhe 180cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
suchen sie nach schülern, deren enddatum vor dem von schüler alice liegt	suchen sie von studenten mit einem enddatum, das älter als die kursteilnehmeralice ist	finden studenten, die haben ein enddatum, das älter als student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
alle alleinstehenden oder verheirateten personen	alle alleinstehenden oder verheirateten personen	alle single oder verheiratete personen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( call SW.concat en.relationship_status.single en.relationship_status.married ) ) )
finde mich alle leute die nicht alices freunde sind	finden sie mich alle menschen, die nicht alice freunde sind	finden mich alle menschen, die nicht alices freunde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string ! = ) en.person.alice ) )
wer ist alice arbeitgeber	der arbeitgeber von alice ist	wer ist alice arbeitgeber	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string employer ) ) )
finde die älteste person	die älteste person finden	die älteste person	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string birthdate ) ) ) )
finde schüler mit einem enddatum nach dem startdatum von alice	suche nach kursteilnehmer mit enddatum nach dem startdatum von alice	finden student mit enddatum nach alice startdatum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche einzelne person ist mit alice befreundet?	welche einzelne person ist freundemit alice	was eine einzige person ist befreundet mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
menschen, die vor 2004 eingeschult wurden	menschen, die vor 2004 mit der schule begonnen haben	menschen, die in die schule kamen vor 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
freund von alice	freund von alice	freund von alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string friend ) ( string = ) en.person.alice ) )
ein schüler, der zu der gleichen zeit endet, zu der alice beginnt	ein schüler, der die gleiche zeit beendet, in der alice beginnt	ein student, der enden der gleichen zeit alice beginnt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
leute, die aufhörten zu arbeiten, als alice es tat oder vorher	personen, die nicht mehr funktionierthaben, wenn alice tat oder vor	menschen, die nicht mehr funktioniert, wenn alice getan hat, oder vor	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen mit freunden, die single sind	menschen mit freunden, die single sind	menschen mit freunden, die single sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )
schüler, die nach alice in die schule kamen	schüler, die die schule begannen, nachdem alice geboren wurde	studenten, die begann, die schule nach alice geboren wurde	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
geburtsort des studenten, dessen startdatum vor 2004 liegt	geburtsstadt des studenten, dessen startdatum vor 2004 liegt	geburt stadt schüler, deren startdatum vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welcher beziehungsstatus hat höchstens zwei personen?	welcher beziehungsstatus höchstens zwei personen	die beziehung status ist von zwei person	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
wer ist alices männlicher freund?	wer ist alices männlicher freund	wer ist alice ' s männlichen freund	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string gender ) ( string = ) en.gender.male ) )
welches geschlecht haben die mitarbeiter, die das unternehmen vor 2004 verlassen haben?	welches geschlecht sind die mitarbeiter, die das unternehmen vor 2004 verlassen haben	welches geschlecht sind die mitarbeiter, die das unternehmen verlassen, bevor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finden sie menschen mit einem beziehungsstatus von single und einer gesamthöhe von 180 cm	personen mit einem beziehungsstatus von single und einer gesamthöhe von 180 cm zu finden	finden sie personen mit einer beziehung status des einzelnen und einer gesamthöhe von 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
welche personen sind mit der aktuell angemeldeten person befreundet?	welche personen mit der aktuell eingeloggten person befreundet sind	die menschen sind freunde mit der person, die derzeit angemeldet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
welcher arbeitnehmer hat die meisten früheren arbeitgeber?	welcher arbeitnehmer die meisten früheren arbeitgeber hat	welcher mitarbeiter hat die meisten bisherigen arbeitgeber	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
ucla oder braune universität	ucla oder braune universität	ucla oder der brown university	( call SW.listValue ( call SW.concat en.university.brown en.university.ucla ) )
mitarbeiter, dessen letzter tag zwischen 2004 und 2010 lag	mitarbeiter, der letzten tag zwischen 2004 und 2010 war	mitarbeiter, deren letzten tag war zwischen 2004 und 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
nennen sie den mitarbeiter, der den job zum gleichen datum wie mitarbeiter alice gekündigt hat	benennen sie den mitarbeiter, der den auftrag am selben datum wie employee alice beendet hat	namen der mitarbeiter, beenden sie den job, der am gleichen tag als angestellter alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
geburtsorte aller 180 cm großen menschen	geburtsorte aller 180 cm großen menschen	geburtsorte von allen 180 cm große menschen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
leute, die die schule vor alice abgebrochen haben	menschen, die die schule beendeten, bevor alice	menschen, die nicht mehr die schule vor alice haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher mitarbeiter hat vor alice angefangen	welcher mitarbeiter vor alice begonnen hat	die mitarbeiter begonnen, bevor alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus von menschen, die 2004 oder später die schule abgebrochen haben?	wie hoch ist der beziehungsstatus von personen, die 2004 oder später die schule beendet haben?	was ist der beziehungsstatus von menschen, die die schule beendet im jahr 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
studenten, die gleichzeitig oder vor alice fertig sind	studenten, die zeitgleich oder vor alice	schüler schlichten, gleichzeitig oder vor alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher student hat ein startdatum, das später als das von student alice ist	welcher schüler ein startdatum hat, das später als das von student alice liegt	welche studentin hat ein startdatum, das später als student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
freund eines studenten, der vor oder während des jahres 2004 begann	freund eines studenten, der vor oder während 2004 beginnt	freund eines studenten ab, die vor oder während 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
geburtsort von mitarbeitern, die vor 2004 angefangen haben	geburtsort von arbeitnehmern, die vor 2004 begonnen haben	geburtsort von mitarbeitern, die bereits vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
person, die in den meisten bereichen studiert hat	person, die in den meisten bereichen studiert hat	person, die studiert haben, in den meisten bereichen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter ab 2004	mitarbeiter ab 2004	mitarbeiter ab 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
jemand, der nicht mit alice befreundet ist	jemand nicht freunde mit alice	jemand, der nicht freunde mit alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string ! = ) en.person.alice ) )
mitarbeiter, der ein kleineres startdatum als alice hat	mitarbeiter, der ein kleineres startdatum als alice hat	mitarbeiter, die einen kleineren startdatum als alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde schüler mit dem frühesten letzten tag	finden sie student mit frühestem letzten tag	finden student mit frühestens der letzte tag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer ist ein student, der nach 2004 angefangen hat?	wer ist ein student, der nach 2004 begonnen hat	wer ist ein student, der begann, nachdem 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche firma beschäftigt eine 180 cm große person	welches unternehmen eine 180 cm große person beschäftigt	was unternehmen beschäftigt 180 cm große person	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.company ) ( string ! type ) ) ( call SW.reverse ( string employer ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
schüler fangen an, bevor alice fertig ist	studenten beginnen, bevor alice beendet ist	schüler ab vor alice abgeschlossen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
ein mitarbeiter endet, bevor alice anfängt	ein mitarbeiter endet, bevor alice beginnt	ein mitarbeiter beenden, bevor alice beginnt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter ab alice	mitarbeiter, die nach alice beginnen	mitarbeiter ab nach alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
studenten, die mit oder nach alice enden	schüler, die mit oder nach alice enden	studenten mit oder nach alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
gibt es ein geschlecht, das weniger als zwei personen haben?	ist ein geschlecht, das weniger als zwei personen	gibt es ein geschlecht weniger als zwei menschen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
menschen in new york geboren, die single sind	menschen, die in new york geboren sind, die single sind	menschen geboren in new york, die single sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string birthplace ) ( string = ) en.city.new_york ) )
menschen, die 2004 angefangen haben und 180 cm groß sind	menschen, die 2004 angefangen haben und 180 cm groß sind	menschen, die im jahr 2004 begonnen und sind 180 cm hoch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )
menschen, die aufhörten zu arbeiten, nachdem alice geboren wurde	menschen, die nach der geburt von alice nicht mehr funktionierten	menschen, die aufgehört zu arbeiten, nachdem alice geboren wurde	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
studenten, die das college am längsten besuchten	studenten, die das college am längsten besuchten	studenten, die an collegedie längste	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string university ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
nennen sie eine person, die online ist und 180 cm groß ist	nennen sie eine person, die online ist, die 180 cm groß ist	nennen sie eine person, die online ist, die ist 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
menschen, die zu arbeiten begannen, als alice geboren wurde oder zuvor	menschen, die mit der arbeit begonnen haben, als alice geboren wurde oder	menschen, die begann, als alice geboren wurde oder vor	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher mitarbeiter startet nachdem alice gegangen ist	welcher mitarbeiter nach dem ausscheiden von alice beginnt	die mitarbeiter beginnen nach alice verlässt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist der geburtsort derer, die mit alice befreundet sind?	was ist der geburtsort derer, die mit alice befreundet sind	was ist der geburtsort von diejenigen, die freunde mit alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
menschen, die mit alice befreundet und in new york geboren sind	menschen, die mit alice befreundet sind und in new york geboren sind	menschen, die freunde sind mit alice und geboren in new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string friend ) ( string = ) en.person.alice ) )
arbeitnehmer, dessen enddatum nach dem geburtsdatum von alice liegt	mitarbeiter, dessen enddatum nach dem geburtsdatum von alice liegt	mitarbeiter, deren enddatum nach alice ' geburt datum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welches geschlecht hat die 2004 geborene person?	welches geschlecht hat die 2004 geborene person	welches geschlecht hat die person geboren im jahr 2004 haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )
mitarbeiter mit einer berufsbezeichnung	mitarbeiter mit einer berufsbezeichnung	mitarbeiter mit einem jobtitel	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche person hat eine größe von mindestens 180 cm	welche person eine höhe von mindestens 180 cm hat	welche person hat eine höhe von mindestens 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )
finde mich bei alices kerl freunden	finden sie mich alle alice kerl freunde	mich finden alle von alice guy freunde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string friend ) ( string = ) en.person.alice ) )
der 2004 aufgehört hat zu arbeiten und 180 cm groß ist	der 2004 aufgehört hat zu arbeiten und 180 cm groß ist	wer aufgehört hat zu arbeiten in 2004 und ist 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )
welcher mitarbeiter hat an dem tag, an dem alice anfing, seine arbeit gekündigt?	welche mitarbeiter ihren job am tag des beginns von alice gekündigt haben	was mitarbeiter beenden ihre arbeit, auf der tag begann alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher mitarbeiter hat ein enddatum, das vor dem enddatum von alice liegt?	welcher mitarbeiter ein enddatum hat, das vor dem enddatum von alice liegt	welche mitarbeiter hat ein enddatum, das vor dem enddatum von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche mitarbeiter einen starttermin haben, der größer als 2004 oder 2010 ist	welche mitarbeiter ein startdatum haben, das größer als 2004 oder 2010 ist	was mitarbeiter in ein startdatum, das größer ist als 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist die geburtsstadt eines studenten, der 2004 nicht aufgehört hat?	was ist die geburtsstadt eines studenten, der 2004 nicht aufhörte	was ist die geburtsstadt von studenten, die nicht aufhören, 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
freund eines studenten, dessen enddatum nach 2004 liegt	freund des studenten, dessen enddatum nach 2004 ist	freund der schüler, deren enddatum nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
der mit alice befreundet ist und 180 cm groß ist	wer ist mit alice befreundet und ist 180 cm groß	wer ist befreundet mit alice und ist 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
mitarbeiter mit freunden finden, deren letzter tag nicht 2004 war	finden sie mitarbeiter freunde mit letzten tag anders als 2004	mitarbeiter suchen freunde mit letzten anderen tag als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was ist der geburtsort von mitarbeitern, deren berufsbezeichnung nicht softwareingenieur ist	was ist der geburtsort von mitarbeitern, deren berufsbezeichnung nicht softwareingenieur ist	was ist der geburtsort der mitarbeiter, deren jobtitel nicht software ingenieur	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was ist die person, die in new yorks beziehungsstatus geboren wurde?	was ist die person, die im beziehungsstatus von new york geboren ist?	was ist die person geboren in new york, beziehungsstatus	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )
menschen, die vor alice geboren wurden, sind in die schule gekommen	menschen, die geboren wurden, bevor alice die schule begann	menschen, die geboren wurden, bevor alice in die schule kam	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )
wo wurde der mitarbeiter geboren, der nicht für mckinsey arbeitet?	wo war der mitarbeiter geboren, der nicht für mckinsey arbeitet	wo war der mitarbeiter geboren ist, die nicht arbeiten bei mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was ist der beziehungsstatus des mitarbeiters mit einem enddatum bis spätestens 2004?	was der beziehungsstatus des arbeitnehmers mit einem enddatum spätestens 2004	was ist der familienstand des arbeitnehmers mit einem enddatum nicht später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finde jemanden, der 2 geburtsorte auflistet	finden sie jemanden, der 2 geburtsstätten auflistet	finden sie jemanden, der listen 2 geburtshäuser	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string >= ) ( number 2 ) ) )
mitarbeiter, dessen enddatum vor dem enddatum von alice liegt	mitarbeiter, dessen enddatum nach dem enddatum der mitarbeiteralice liegt	mitarbeiter, deren enddatum vor und nach dem enddatum des mitarbeiteralice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist aus new york und eingeloggt	der aus new york stammt und eingeloggt ist	wer ist aus new york und angemeldet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string birthplace ) ( string = ) en.city.new_york ) )
welche softwareingenieurin hat alice angestellt	welcher softwareingenieur alice beschäftigt hat	die softwareengineer beschäftigt alice	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) ( string employer ) ) )
personen, die mit mitarbeitern befreundet sind, deren letzter tag in oder vor 2004 lag	personen, die mit mitarbeitern befreundet sind, deren letzter tag in oder vor 2004 war	menschen, die freunde sind, mit mitarbeitern, deren letzten tag wurde in oder vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
arbeitnehmer mit den wenigsten arbeitgebern	arbeitnehmer mit den wenigsten arbeitgebern	die mitarbeiter mit den wenigsten arbeitgebern	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
eine 180 cm große person	eine 180 cm große person	eine 180 cm große person	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
menschen mit freunden, die spätestens 2004 mit der arbeit begonnen haben	menschen mit freunden, die spätestens 2004 ihre arbeit aufgenommen haben	menschen mit ihren freunden, die mit der arbeit begonnen, im jahr 2004, spätestens	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wer studiert informatik oder geschichte?	der informatik oder geschichte studiert	wer studium der informatik oder geschichte	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.concat en.field.computer_science en.field.history ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer ist mit jemandem befreundet, der nach 2004 seinen abschluss gemacht hat?	der mit jemandem befreundet ist, der nach 2004 seinen abschluss gemacht hat	wer ist befreundet mit jemandem, absolvierte nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finde einen mitarbeiter mit dem letzten tag wie alice's oder davor	finden sie mitarbeiter mit dem letzten tag wie oder vor alice es	finden mitarbeiter mit dem letzten tag derselben oder vor alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
leute, die nach alice aufgehört haben zu arbeiten	personen, die nach alice nicht mehr funktionierten	menschen, die aufgehört zu arbeiten, nachdem alice hast	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
leute, die freunde haben, die keine softwareingenieure sind	personen, die freunde haben, die keine softwareingenieure sind	menschen, die haben freunde, die nicht softwareingenieure	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
suche mitarbeiter ab dem ersten tag von alice oder später	mitarbeiter finden, der am ersten tag oder später von alice beginnt	suchen mitarbeiter ab alice ' s ersten tag oder später	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher student geht an eine andere universität als braun?	welcher student an eine andere universität neben braun geht	welcher student geht an eine andere uni außer braun	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche von alices freunden ist online	welche von alices freunden online ist	die von alices freunden online ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
finde mich alle mitarbeiter, die bei der firma anfangen, bevor alice geht	finden sie mich alle mitarbeiter, die im unternehmen beginnen, bevor alice geht	mich finden alle mitarbeiter, die im unternehmen vor alice verlässt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
einzelpersonen, die gerade online sind	einzelne personen, die derzeit online sind	einzelne menschen, die derzeit online sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
wie ist der beziehungsstatus von menschen, die an eine andere universität gehen als braun?	was ist der beziehungsstatus von menschen, die zu einer universität gehen, aber braun	was ist der beziehungsstatus von menschen, die an irgendeiner universität, sondern braun	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welcher student hat die meisten majors	welcher student die meisten majors hat	welcher schüler hat die meisten majors	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer sind menschen, die studenten mit einem enddatum von nicht mehr als 2004 sind, mit denen sie befreundet sind?	die menschen sind, die studenten mit einem enddatum nicht größer als 2004 freunde mit	wer sind die menschen, die studenten, ein endedatum nicht größer als 2004 freunde mit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
freund von alice, die in new york geboren wurde	freund von alice, die in new york geboren wurde	freund von alice, der in new york geboren wurde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string birthplace ) ( string = ) en.city.new_york ) )
finde alle männer, die freunde haben	finden sie alle männer, die freunde haben	finden alle männer, die freunde haben	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )
wer ist mit dem studenten befreundet, der nach 2004 angefangen hat?	wer ist mit dem studenten, der nach 2004 begonnen	wer ist befreundet mit dem student, die nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen, die nach alice beigetreten sind, wurden geboren	menschen, die nach alice beigetreten sind	menschen, die sich nach alice geboren wurde	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist der beziehungsstatus aller studenten mit ausnahme derjenigen von der braunen universität?	was ist der beziehungsstatus aller studenten mit ausnahme der erinnen der braunen universität	was ist der beziehungsstatus für alle schüler mit ausnahme derjenigen aus der brownuniversität	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche singles sind 180 cm groß	welche singles sind 180 cm groß	die singles sind 180 cm hoch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
student, der vor 2004 beigetreten ist	student, der vor 2004 beitrat	schüler, die sich vor 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie die freunde von mitarbeitern, die 2004 oder später gekündigt haben	finden sie die freunde von mitarbeitern, die 2004 oder später aufhörten	finden die freunde von mitarbeitern, die aufhören, die 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wie ist das geschlecht der arbeitnehmer mit dem letzten tag im jahr 2004 oder früher?	was ist das geschlecht der arbeitnehmer mit dem letzten tag im jahr 2004 oder vor	was ist das geschlecht der arbeitnehmer mit dem letzten tag im jahr 2004 oder vor	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter, die ihren neuen job an alices geburtstag beginnen	mitarbeiter, die ihren neuen job an alices geburtstag beginnen	mitarbeiter, die am beginn ihrer neuen aufgabe auf alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus von mitarbeitern, die vor 2004 ausgeschieden sind?	wie hoch ist der beziehungsstatus der arbeitnehmer, die vor 2004 ausgereist sind?	was ist der beziehungsstatus der mitarbeiter, die linke vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
leute, die zur gleichen zeit oder früher in die schule kamen	menschen, die mit der schule begonnen haben, als alice tat oder vor	menschen, die in die schule kamen, wenn alice getan hat, oder vor	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche mitarbeiter am letzten tag zuletzt waren	welche mitarbeiter am letzten tag am wenigsten vor kurzem	die mitarbeiter letzte tag war zumindest vor kurzem	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist die durchschnittliche größe aller personen in meinem netzwerk?	was ist die durchschnittliche höhe aller personen in meinem netzwerk	was ist die durchschnittliche höhe der alle leute in meinem netzwerk	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ) ) )
nennen sie einen mitarbeiter, der im jahr 2004, aber vor 2011 begann	namen eines mitarbeiters, der 2004, aber vor 2011 begonnen hat	name eines mitarbeiters, begann im jahr 2004, aber vor 2011	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche mitarbeiter haben nach alices geburtsdatum angefangen	welche mitarbeiter nach dem geburtsdatum von alice begonnen haben	die mitarbeiter gestartet, nachdem alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist das geschlecht des studenten, der im jahr 2004 begann	was ist das geschlecht der studentin, die 2004 begonnen hat	was ist das geschlecht der schüler, die im jahr 2004 begonnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
was ist der beziehungsstatus eines mitarbeiters, der vor 2004 aufgehört hat zu arbeiten?	wie hoch ist der beziehungsstatus eines mitarbeiters, der die arbeit an oder vor 2004 eingestellt hat?	was ist der familienstand des arbeitnehmers, die aufgehört zu arbeiten, die am oder vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
leute, die mit studenten befreundet sind, die kein hauptfach informatik haben	menschen, die mit studenten befreundet sind, die keinen hauptfach informatik erhaben sind	menschen, die freunde sind mit studenten, die keine major in computer science	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
person, die die schule abgebrochen hat, bevor alice aufgehört hat zu arbeiten	person, die die schule gestoppt hat, bevor alice aufhörte zu arbeiten	person, die schule beendet, bevor alice aufgehört zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche personen mit einem enddatum von 2004 sind 180 cm groß	menschen mit einem enddatum von 2004 sind 180 cm groß	die menschen, die mit einem endedatum von 2004 sind 180 cm hoch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )
wie viele felder gibt es?	wie viele felder vorhanden sind	wie viele felder es gibt	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.field ) ( string ! type ) ) ) )
finden sie menschen mit der gleichen größe wie alice oder 180 cm	finden sie menschen mit der gleichen höhe wie alice oder 180 cm	finden sie menschen mit der gleichen höhe wie alice oder 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string height ) ) ( string = ) en.person.alice ) )
geschlecht der arbeitnehmer, die nach oder in 2004 abschließen	geschlecht der arbeitnehmer, die nach oder im jahr 2004	geschlecht der mitarbeiter, die oberfläche nach oder im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
ein student, der anfängt, wenn alice aufhört	ein student, der beginnt, wenn alice endet	ein student anfangen, wenn alice endet	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher student hat ein enddatum vor 2004?	welcher student ein enddatum vor 2004 hat	welche studentin hat ein endedatum vor dem jahr 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
leute mit den meisten freunden	menschen mit den meisten freunden	die leute mit den meisten freunden	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( string friend ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
schüler, die 2004 oder 2010 eingeschult wurden	schüler, die 2004 oder 2010 mit der schule begonnen haben	schüler, die schule begann im jahr 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
suche nach schülern, die sich das studienfach von alice teilen	finden sie studenten, die alices studiengebiet teilen	finden die schüler teilen sich alice studienrichtung	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die nach alice geboren wurden, haben die schule abgeschlossen	menschen, die nach alice abgeschlossene schule geboren wurden	menschen, die geboren wurden, nachdem alice schlossschule	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) )
menschen, die in zwei oder weniger bereichen studiert haben	personen, die in zwei oder weniger bereichen studiert haben	menschen die studiert haben, die in zwei oder weniger bereichen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche mitarbeiter vor 2004 ausgeschieden sind	welche mitarbeiter vor 2004 ausgetreten sind	die mitarbeiter übrig, die vor 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche freundin von alice wurde in new york geboren	welcher freund von alice in new york geboren wurde	was der freund von alice war in new york geboren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string birthplace ) ( string = ) en.city.new_york ) )
finde mitarbeiter mit letzten tagen an oder nach alices geburtstag	finden sie mitarbeiter mit letzten tagen am oder nach alices geburtstag	finden mitarbeiter mit den letzten tagen, die am oder nach alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welches datum hat alice angefangen, die im jahr 2004 geendet hat?	welches datum alice start, wer im jahr 2004 beendet	welches datum hat alice starten, die im jahr 2004 fertig	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string education_start_date ) ) )
das startdatum des schülers liegt am oder vor dem enddatum von alice	welches kursteilnehmerstartdatum am oder vor dem enddatum von alice liegt	die schüler starten date ist am oder vor "alice' s enddatum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
studenten, die spätestens am anfangsdatum von alice angefangen haben	studenten, die spätestens mit dem startdatum von alice begonnen haben	studenten, die nicht später als das startdatum von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist der beziehungsstatus von alice oder bob?	was ist der beziehungsstatus von alice oder bob	was ist der beziehungsstatus von alice oder bob	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
mitarbeiter, dessen startdatum nicht vor dem enddatum von student alice liegt	mitarbeiter, dessen startdatum nicht vor dem enddatum der studentenalice liegt	mitarbeiter, deren startdatum nicht vor dem enddatum von alice schüler	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die mit einem studenten befreundet sind, der erst 2004 angefangen hat	personen, die mit einem studenten befreundet sind, der frühestens 2004 begonnen hat	menschen, die freunde sind mit einem schüler begonnen, die nicht früher als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
personen, die mit einem mitarbeiter befreundet sind, dessen enddatum nicht später als 2004 liegt	personen, die mit einem mitarbeiter befreundet sind, dessen enddatum nicht später als 2004 liegt	menschen, die freunde sind, mit einem mitarbeiter, deren endedatum nicht später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wie ist der beziehungsstatus des schülers zum letzten tag vor 2004?	was ist der beziehungsstatus des studenten mit dem letzten tag vor 2004	was ist beziehung status der schüler mit dem letzten tag vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
freund von alices freund, der aus new york kommt	freund von alice freund, der von new york ist	freund von alice ' s freund, der ist aus new york	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )
freund eines mitarbeiters, dessen enddatum nach 2004 liegt	freund eines mitarbeiters, dessen enddatum nach 2004 liegt	freund der mitarbeiter, deren enddatum nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wer ist befreundet mit mitarbeitern, die ein enddatum von 2004 haben?	der mit mitarbeitern befreundet ist, die ein enddatum von 2004 haben	wer ist freunde mit den mitarbeitern, die ein endedatum von 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wie ist der beziehungsstatus der arbeitenden menschen, die 2004 nicht aufgehört haben?	wie hoch ist der beziehungsstatus von erwerbstätigen, die 2004 nicht aufgehört haben?	was ist der beziehungsstatus der arbeitenden menschen, der nicht in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die an dem tag, als alice geboren wurde, die schule abbrachen	menschen, die die schule am tag alice geboren wurde	menschen, die nicht mehr die schule der tag geboren wurde alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist die berufsbezeichnung der person, die 180 cm ist	was ist die berufsbezeichnung der person, die 180 cm groß ist	was ist die jobtitel der person, die 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.job_title ) ( string ! type ) ) ( call SW.reverse ( string job_title ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
welche mitarbeiter haben einen starttermin, der nicht später als alices geburtstag ist	welche mitarbeiter ein startdatum haben, das nicht später als alices geburtstag ist	was mitarbeiter in ein startdatum, das nicht später als alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
studenten, die am enddatum von alice begannen	studenten, die am enddatum von alice begonnen haben	studenten, die an alice ' s enddatum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
der mit alice einen geburtstag hat und 180 cm groß ist	wer teilt sich einen geburtstag mit alice und ist 180 cm groß	wer teilt einen geburtstag mit alice und ist 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string birthdate ) ) ( string = ) en.person.alice ) )
fein mir alle angestellten, die bis 2004 anfangen	gut mir alle mitarbeiter, die bis 2004 beginnen	fein mir alle mitarbeiter, die von 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus von studierenden, die erst 2004 angefangen haben?	wie hoch ist der beziehungsstatus von studenten, die frühestens 2004 begonnen haben?	was ist der beziehungsstatus von studenten, die nicht früher als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
was ist das enddatum des studiums 2004 oder 2010?	was ist das enddatum der studierenden 2004 oder 2010	was ist das enddatum der schüler, die 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wann hat mckinsey mitarbeiter alice angefangen	wann hat mckinsey mitarbeiter alice gestartet	wann hast mckinseymitarbeiterin alice starten	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string employment_start_date ) ) )
welche mitarbeiter haben die wenigsten berufsbezeichnungen?	welche mitarbeiter die wenigsten berufsbezeichnungen haben	die mitarbeiter haben die wenigsten berufsbezeichnungen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche mitarbeiterin ihren job nach dem start von alice verlassen hat	welcher mitarbeiter seinen job nach dem start von alice verlassen hat	die mitarbeiter verlassen ihren job nach alice begann	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter ab vor alice	mitarbeiter beginnen vor alice	mitarbeiter ab, bevor alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
arbeitnehmer, dessen enddatum vor 2004 liegt	mitarbeiter, dessen enddatum vor 2004 liegt	mitarbeiter, deren enddatum vor 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist mit über zwei personen befreundet	der mit über zwei personen befreundet ist	wer ist freunde mit mehr als zwei personen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
geschlecht der personen, die nach 2004 an der studie teilgenommen haben	geschlecht von personen, die nach 2004 an ihrer studie teilnahmen	geschlecht von menschen, die sich ihrer studie nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
was ist alices geburtsort	was ist alices geburtsort	was ist alice ' s geburtsort	( call SW.listValue ( call SW.getProperty en.person.alice ( string birthplace ) ) )
ein mitarbeiter, der endet, bevor alice beginnt	ein mitarbeiter, der endet, bevor alice beginnt	ein mitarbeiter, der endet, bevor alice beginnt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher arbeitnehmer hat nicht mehr als zwei arbeitgeber	welcher arbeitnehmer nicht mehr als zwei arbeitgeber hat	was der mitarbeiter nicht mehr als zwei arbeitgeber	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die die schule in oder vor 2004 beendet haben	menschen, die die schule in oder vor 2004 abgeschlossen haben	menschen, die die schule beendet in oder vor 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
am wenigsten gemeinsamen beziehungsstatus	am wenigsten gemeinsamer beziehungsstatus	kleinste gemeinsame beziehung status	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string relationship_status ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
finde alle männlichen singles	alle männlichen singles finden	finden sie alle männlichen singles	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
welche studenten beginnen frühestens am abschlusstag von alice	welche studenten frühestens als alices abschlusstag beginnen	die schüler beginnen nicht früher als alice ' s graduation day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wo sind die geburtsorte von arbeitnehmern, deren startdatum nicht früher als 2004 liegt?	wo sind die geburtsstädte von arbeitnehmern, die ein startdatum von frühestens 2004 haben?	wo sind die geburtsstädte für mitarbeiter, die ein startdatum nicht früher als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wie ist der beziehungsstatus von studierenden, die spätestens 2004 begonnen haben?	wie hoch ist der beziehungsstatus von studenten, die spätestens 2004 begonnen haben?	was ist der beziehungsstatus von studenten, die nicht später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welcher mitarbeiter hat früher als 2004 oder 2010 angefangen?	welcher mitarbeiter vor 2004 oder 2010 begonnen hat	die mitarbeiter früher begonnen als 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die für mckinsey oder google arbeiten	menschen, die für mckinsey oder google arbeiten	menschen, die die arbeit bei mckinsey oder google	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string = ) ( call SW.concat en.company.mckinsey en.company.google ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wo sind die menschen geboren, die vor 2004 die schule beendet haben?	wo waren die menschen, die die schule vor 2004 beendeten, geboren	wo waren die menschen, die die schule abgeschlossen vor 2004 geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
jemand mit mehreren beziehungsstatus	jemand mit mehreren beziehungsstatus	jemand mit mehreren beziehung status	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string > ) ( number 2 ) ) )
wer ist der arbeitgeber der person mit einer körpergröße von 180 cm?	der arbeitgeber der person ist, deren körpergröße 180 cm beträgt	wer ist der arbeitgeber von der person, deren höhe von 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.company ) ( string ! type ) ) ( call SW.reverse ( string employer ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
studierende, die 2004 oder früher angefangen haben	studenten, die 2004 oder vor	studenten, die im jahr 2004 oder vor	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
leute, die aufgehört haben zu arbeiten, als alice die schule abgebrochen hat	menschen, die nicht mehr arbeiten, als alice die schule beendete	menschen, die aufgehört zu arbeiten, als alice aufhörte schule	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist mit jemandem befreundet, der nicht zur braunen universität gegangen ist?	der mit jemandem befreundet ist, der nicht zur braunen universität gegangen ist	wer ist befreundet mit jemandem, der nicht gehen, um brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wer ist 180 cm und von der gleichen stelle wie alice	wer ist 180 cm und von der gleichen stelle wie alice	wer ist 180 cm und von der gleichen stelle wie alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) )
wer ist alices freundin, die aus new york kommt?	wer ist alice s freund, der von new york ist	wer ist alice ' s freund, der ist aus new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string birthplace ) ( string = ) en.city.new_york ) )
welcher student endete spätestens als alice	welcher student endete nicht später als alice	die schüler beendet, die nicht später als alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
nennen sie einen mitarbeiter, dessen enddatum mit dem von alice vergleichbar ist	benennen sie einen mitarbeiter, dessen enddatum dem von alice ähnelt	namen einem mitarbeiter, deren enddatum ist ähnlich wie das von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche person hat das geburtsdatum von alice	welche person das geburtsdatum von alice hat	die person hat ein geburtsdatum von alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )
finde menschen, die nach alice 'letztem arbeitstag geboren wurden	menschen finden, die nach alices letztem arbeitstag geboren wurden	finden sie personen geboren nach alice der letzte tag der arbeit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) )
welches geschlecht haben die beiden menschen?	welches geschlecht sind die beiden menschen	welches geschlecht sind die beiden menschen, die	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
finde schüler mit dem letzten tag zuvor oder dem gleichen wie alice	finden sie studenten mit dem letzten tag vor oder dem gleichen wie alice es	finden sie studenten mit dem letzten tag bevor oder die gleiche wie alice ' s	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist das geschlecht des studenten, der keine braune universität besucht hat?	was ist das geschlecht der studentin, die nicht an der braunen universität besucht hat	was ist das geschlecht der schüler, die nicht an der brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie mitarbeiter mit einem startdatum, das mit dem von mitarbeiter alice identisch ist	suchen sie mitarbeiter mit einem startdatum, das mit der vonalice identisch ist	finden sie mitarbeiter, die ein startdatum, das ist das gleiche wie alice mitarbeiter	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde studenten freunde, die nicht informatik studieren	finden studenten freunde nicht studieren informatikbereich	finden studenten, freunde, die nicht studieren im bereich informatik	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
geburtsort des studenten, dessen studienfach nicht informatik ist	geburtsstadt eines studenten, dessen studienbereich nicht informatik ist	geburtsstadt von studenten, deren studienfach ist nicht informatik	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
person, die im jahr 2004 oder 2010 geboren wurde	person, die 2004 oder 2010 geboren wurde	person, die geboren wurde, im jahr 2004 oder 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) )
menschen, die freunde haben, mit denen alice befreundet ist	menschen, die freunde haben, mit denen alice befreundet ist	menschen, die freunde haben, ist befreundet mit alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
mitarbeiter beginnen, bevor alice fertig ist	mitarbeiter beginnen, bevor alice beendet ist	mitarbeiter ab, bevor alice abgeschlossen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die nach 2004 ihren beruf angetreten haben	personen, die nach 2004 in ihren job eingetreten sind	menschen, die sich ihren job nach 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was war das abschlussdatum von alice im jahr 2004?	was war das abschlussdatum von alice im jahr 2004	was war die graduierung von alice in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string education_end_date ) ) )
was ist das geschlecht des studenten, dessen enddatum vor 2004 liegt?	welches geschlecht der studentin ist, deren enddatum vor 2004 liegt	was ist das geschlecht der schüler, deren enddatum vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finde mich studenten, deren enddatum nicht später als 2004 ist	finden sie mich studenten, deren enddatum ist nicht später als 2004	mich finden studenten, deren endedatum nicht später als 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter, die nach alice stießen	mitarbeiter, die nach alice beigetreten sind	mitarbeiter, die sich nach alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche beziehungsstatus sind für weniger als zwei personen gedacht?	welche beziehungsstatus für weniger als zwei personen gedacht sind	welche beziehung zustände gemeint sind, die weniger als zwei menschen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
welche studenten 2004 oder 2010 oder früher ihren abschluss machen	die studenten 2004 oder 2010 oder vor	die absolventen im jahr 2004 oder 2010, oder vor	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
leute, die mit einem studenten befreundet sind, der vor 2004 angefangen hat	personen, die mit einem studenten befreundet sind, der vor 2004 angefangen hat	menschen, die freunde sind mit einem studenten, der bereits vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen, die die schule in oder nach 2004 abgebrochen haben	menschen, die die schule in oder nach 2004 beendet enden	menschen, die nicht mehr die schule im jahr 2004 oder später	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die anfingen, an oder nach alice zu arbeiten, wurden geboren	menschen, die mit der arbeit an oder nach der geburt von alice begonnen haben	menschen, die arbeiten begonnen, die am oder nach alice geboren wurde	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter mit dem spätesten startdatum	mitarbeiter mit dem letzten startdatum	mitarbeiter mit der neuesten startdatum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was sind die geschlechter, die nach 2004 aufgehört haben zu arbeiten?	welche geschlechter sind die menschen, die nach 2004 nicht mehr arbeiten	welche geschlechter sind die menschen, die aufgehört zu arbeiten, nachdem 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
nennen sie eine person im alter von 180 cm, die 2004 mit der arbeit begonnen hat	nennen sie eine person, die 180 cm groß ist und 2004 mit der arbeit begonnen hat	nennen sie eine person, die 180 cm, der begann die arbeit im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )
mit welchen geschlechtern sind die menschen befreundet, mit denen alice befreundet ist?	welche geschlechter sind die menschen, mit denen alice befreundet ist	welche geschlechter sind die menschen, die alice ist befreundet mit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
person, die mit jemandem befreundet ist, dessen startdatum nicht später als 2004 liegt	person, die mit jemandem befreundet ist, dessen startdatum nicht später als 2004 ist	person, die freunde mit jemandem, dessen startdatum nicht später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
der 180 cm groß ist und in der gleichen stadt wie alice geboren wurde	der 180 cm groß ist und in der gleichen stadt wie alice geboren ist	wer ist 180 cm groß und geboren in der gleichen stadt wie alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) )
was ist das startdatum eines studenten, der vor alice angefangen hat?	was ist das startdatum eines studenten, der vor alice begonnen hat	was ist der starttermin von studenten, die bereits vor alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die am oder vor dem tag, an dem alice die schule beendete, in die schule kamen	menschen, die die schule am oder vor dem tag begonnen alice beendet schule	menschen, die mit der schule begonnen, die am oder vor dem tag, alice die schule beendet	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wann hat mitarbeiter alice angefangen	wann hat mitarbeiteralice begonnen	wann haben mitarbeiter alice begann	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) )
welcher student hat das größte enddatum?	welcher schüler das höchste enddatum hat	welcher student hat den größten endedatum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die mit jemandem befreundet sind, der vor 2004 aufgehört hat zu arbeiten	personen, die mit jemandem befreundet sind, der vor 2004 nicht mehr gearbeitet hat	menschen, die freunde sind mit einer person, die aufgehört zu arbeiten, bevor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
alices freunde geboren im jahr 2004	alices freunde geboren 2004	alice ' s freunde geboren in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
welcher student graduiert am frühesten?	welche studenten am frühesten absolventen	was studentenabsolventen der frühesten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
suche nach schülern mit einem startdatum vor 2004 oder 2010	suche nach studierenden, die ein startdatum vor 2004 oder 2010 haben	finden studenten, die ein startdatum, bevor sie entweder 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
angestellter, dessen berufsbezeichnung dieselbe berufsbezeichnung wie die von angestellter alice ist	mitarbeiter, dessen berufsbezeichnung die gleiche berufsbezeichnung wie der mitarbeiter alice ist	mitarbeiter, deren jobtitel ist der gleiche jobtitel, als der mitarbeiter von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
in welcher stadt wurde alice oder bob geboren?	welche stadt alice oder bob geboren war	in welcher stadt war alice oder bob in geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
die berufsbezeichnung einer 180 cm großen person	die berufsbezeichnung einer 180 cm großen person	die berufsbezeichnung eine 180 cm große person	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.job_title ) ( string ! type ) ) ( call SW.reverse ( string job_title ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
was ist der geburtsort eines mitarbeiters, der nach 2004 endete?	was ist der geburtsort des arbeitnehmers, der nach 2004 endete	was ist der geburtsort der mitarbeiter, der endete nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
geburtsorte von schülern, die die schule in oder nach 2004 beendet haben	geburtsorte von schülern, die die schule in oder nach 2004 beendet haben	geburtsorte der schüler beendet die schule im jahr 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
studenten, die vor alice fertig sind	studenten, die vor alice beenden	studierende, die abgeschlossen wurden, bevor alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
geschlecht des studenten, dessen enddatum nicht 2004 liegt	geschlecht der studierenden, deren enddatum nicht 2004 ist	geschlecht der schüler, deren endedatum ist nicht 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
der mit alice befreundet ist und am 2004 geboren wurde	wer mit alice befreundet ist und geboren am 2004 wurde	wer ist befreundet mit alice und wurde am 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
welcher student hat ein startdatum vor dem geburtsdatum von alice?	welcher schüler ein startdatum vor dem geburtsdatum von alice hat	welche studentin hat ein startdatum vor dem geburtsdatum von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde mich alle menschen, die einem geschlecht angehören	finden sie mich alle menschen, die zu einem geschlecht gehören	finden mich alle menschen, die gehören zu einem geschlecht	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string < ) ( number 2 ) ) )
wer ist mit jemandem befreundet, der während oder vor 2004 mit der arbeit begonnen hat?	der mit jemandem befreundet ist, der während oder vor 2004 angefangen hat zu arbeiten	wer ist befreundet mit jemandem, der begonnen arbeiten während oder vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche mitarbeiter am letzten tag zuletzt waren	welche mitarbeiter zuletzt	die mitarbeiter letzte tag war zuletzt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist das geschlecht von studenten, die im jahr 2004 und später begonnen haben?	was ist das geschlecht der studierenden, die 2004 und später	was ist das geschlecht der studierenden, die im jahr 2004 begonnen und später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie personen mit einer körpergröße von 180 cm und anfangsdaten für 2004	finden sie personen, die 180 cm groß sind mit 2004 startdaten	finden sie menschen, die sind 180 cm hoch mit 2004 beginnen, termine	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )
welche mitarbeiter einen starttermin haben, der alices geburtstag oder später ist	welche mitarbeiter ein startdatum haben, das alices geburtstag oder höher ist	was die mitarbeiter haben ein startdatum, das ist alices geburtstag oder später	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
nennen sie eine 180 cm große person, die im jahr 2004 geboren wurde	nennen sie eine person 180 cm groß, die im jahr 2004 geboren wurde	nennen sie eine person, die 180 cm groß, geboren in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
person aus dem gleichen geburtsort wie die von alice	person vom selben geburtsort wie die von alice	person aus demselben geburtsort wie alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.getProperty en.person.alice ( string birthplace ) ) ) )
leute, die anfingen zu arbeiten, bevor alice aufhörte zu arbeiten	personen, die mit der arbeit begonnen haben, bevor alice aufhörte zu arbeiten	menschen, die arbeiten begonnen, bevor alice aufgehört zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die mit studenten befreundet sind, die vor 2004 angefangen haben	personen, die mit studenten befreundet sind, die vor 2004 begonnen haben	menschen, die freunde sind mit studenten, die vor dem jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wie ist der beziehungsstatus der 180 cm großen person?	was ist der beziehungsstatus der person, die 180 cm groß ist	was ist der beziehungsstatus der person, die 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
beziehungsgeschichte einer person	beziehungsgeschichte einer person	beziehung geschichte einer person	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string < ) ( number 2 ) ) )
menschen, die an anderen universitäten als der braunen universität studiert haben	personen, die an anderen universitäten als der braunen universität studiert haben	menschen die studiert haben, in anderen hochschulen als der brown university	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
geburtsort des studenten, dessen universität keine braune universität ist	geburtsstadt von studenten, deren universität nicht braune universität ist	geburtsstadt der student, dessen universität nicht der brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie die geburtsstadt der schüler mit einem enddatum nach 2004	finden sie die geburtsstadt der studenten mit einem enddatum später als 2004	finden sie die geburtsstadt von studenten mit einem enddatum später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
ein mitarbeiter, der nach alices geburt gegangen ist	ein mitarbeiter, der nach der geburt von alice gegangen ist	ein mitarbeiter, der links nach alice geboren wurde	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, dessen enddatum vor dem startdatum von student alice liegt	mitarbeiter, dessen enddatum vor dem startdatum der studentenalice liegt	mitarbeiter, deren enddatum vor dem startdatum der student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde einen schüler, der an alices geburtstag gegangen ist	finden sie einen studenten, der auf alicegeburtstag verlassen	finden sie eine studentin, die links auf alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die ihren job in oder nach 2004 gekündigt haben	personen, die ihren arbeitsplatz in oder nach 2004 aufgeben	menschen, die beenden ihre arbeit im jahr 2004 oder später	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
ermitteln sie den beziehungsstatus eines mitarbeiters mit einem enddatum von 2004	finden sie den beziehungsstatus eines mitarbeiters mit einem enddatum von 2004	die beziehung der status eines mitarbeiters, hat ein endedatum von 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche person wurde an mehr als 2 orten geboren	welche person an mehr als 2 orten geboren wurde	die person geboren wurde, mehr als 2 plätze	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string > ) ( number 2 ) ) )
was ist das geschlecht des studenten, der vor 2004 abreist?	was ist das geschlecht der studentin, die vor 2004 geht	was ist das geschlecht der schüler, der die blätter vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche person ist die größte	welche person die höchste ist	welche person ist das höchste	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string height ) ) ) )
welcher mitarbeiter hat angefangen nachdem alice gegangen ist	welcher mitarbeiter nach dem ausscheiden von alice gestartet wurde	die mitarbeiter begannen nach alice links	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer sind die freunde der neuen studenten, die bis 2004 beginnen?	die freunde der neuen studenten, die bis 2004 beginnen	wer sind die freunde von den neuen studenten, die ab 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
beziehungsstatus von schülern, die ab 2004 eingeschult wurden	beziehungsstatus von schülern, die in oder nach 2004 mit der schule begonnen haben	beziehung, status der studierenden, die schule begann im jahr 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
ein mitarbeiter ab vor 2004	ein mitarbeiter, der vor 2004 beginnt	ein mitarbeiter ab, bevor 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist 180 cm groß	wer 180 cm groß ist	wer ist 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
die zuletzt aufgehört haben zu arbeiten	die zuletzt ihre arbeit beendet haben	wer aufhört zu arbeiten zuletzt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die vor alice geboren wurden, beendeten die schule	menschen geboren, bevor alice beendet schule	menschen geboren, bevor alice die schule beendet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) )
schüler, die die schule am selben tag beendet haben, an dem alice die schule beendet hat	schüler, die die schule am selben tag beendet, dass alice beendete schule	schüler beendet die schule am selben tag, dass alice die schule beendet	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher mitarbeiter hat das späteste startdatum?	welcher mitarbeiter das letzte startdatum hat	was für mitarbeiter hat der letzte starttermin	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
student, dessen startdatum nach dem startdatum von student alice liegt	student, dessen startdatum nach dem startdatum der studentenalice liegt	schüler, deren startdatum nach startdatum der student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche studenten machen ihren abschluss frühestens am ersten arbeitstag von alice	die studenten kurz vor alices erstem arbeitstag abschließen	die studierenden ihr studium nicht früher als alice ' s erster tag der arbeit	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
eine person, deren freund vor 2004 mit dem studium begonnen hat	eine person, deren freund vor 2004 ein studium begann	eine person, deren freund begann studien vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wer war ein student vor oder im jahr 2004	der vor oder am jahr 2004 student war	der ein schüler war, bevor 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
studienfeld von jemandem 180 cm groß	untersuchungsgebiet von jemandem 180 cm groß	bereich der studie, die von jemand 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.field ) ( string ! type ) ) ( call SW.reverse ( string field_of_study ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
finden sie mitarbeiter mit weniger als zwei berufsbezeichnungen	mitarbeiter mit weniger als zwei berufsbezeichnungen finden	finden mitarbeiter mit weniger als zwei berufsbezeichnungen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die ab 2004 oder ab 2010 zu arbeiten begonnen haben	personen, die in oder nach 2004 oder in oder nach 2010 mit der arbeit begonnen haben	menschen, die begann im jahr 2004 oder später oder in oder nach 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
jemand 180 cm groß und gleiches geschlecht wie alice	jemand 180 cm groß und das gleiche geschlecht wie alice	jemand 180 cm groß und gleichen geschlechts als alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string gender ) ) ( string = ) en.person.alice ) )
wann ist die softwareentwicklerin alice gegangen?	wann hat software engineer alice verlassen	wann hat softwareingenieur alice links	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) ( string employment_end_date ) ) )
wie lautete die berufsbezeichnung von alice aus dem jahr 2004?	was war alices berufsbezeichnung von 2004	was war alice ' s jobtitel von 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string job_title ) ) )
welche menschen sind mit mitarbeitern befreundet? wie hat es nach 2004 angefangen?	welche menschen mit mitarbeitern befreundet sind, wie sie nach 2004 begonnen haben	die menschen sind freunde mit den mitarbeitern, wie sie begann, nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter, die zeitgleich mit oder vor alice anfangen	mitarbeiter, die zeitgleich mit oder vor alice beginnen	mitarbeitern der gleichzeitigen oder vor alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde mich studenten enddatum gleich student alice	finden sie mich studenten enddatum gleich student alice	mich finden die schüler enddatum gleich student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
der online ist und 180 cm groß ist	wer ist online und ist 180 cm groß	wer ist online und ist 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string logged_in ) ) )
welche person hat zwei oder weniger freunde?	welche person zwei oder weniger freunde hat	welche person hat zwei oder weniger freunde	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
nennen sie die freundin von alice, deren geburtsort new york ist	nennen sie den freund von alice, dessen geburtsort ist new york	name der freund von alice, deren geburtsort ist new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
menschen, die männlich oder weiblich sind	personen, die männlich oder weiblich sind	menschen, die männlich oder weiblich sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( call SW.concat en.gender.male en.gender.female ) ) )
freunde von alice geboren im jahr 2004	freunde von alice geboren 2004	freunde von alice geboren in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
was für leute sind angestellte eines arbeitgebers, mit dem mckinsey nicht befreundet ist	welche menschen angestellte eines arbeitgebers sind, der nicht mckinsey freunde mit	was für menschen sind die arbeitnehmer eines arbeitgebers, der nicht mckinsey freunde mit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter, die am oder nach alices letztem tag angefangen haben	mitarbeiter, die am oder nach dem letzten tag von alice begonnen haben	mitarbeiter, die begann, die am oder nach alice der letzte tag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie das geschlecht der schüler, die nach 2004 geboren wurden	das geschlecht der studenten zu finden, die nach 2004 geboren wurden	finden sie das geschlecht des studenten, die geboren wurden, nachdem 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
eine freundin von alice, geboren im jahr 2004	ein freund von alice geboren 2004	ein freund von alice, geboren in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
personen, die mit einem studenten befreundet sind, dessen enddatum nach 2004 liegt	personen, die mit einem studenten befreundet sind, dessen enddatum nach 2004	menschen, die freunde sind mit einer studentin, deren enddatum nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche schüler haben ein startdatum, das mit dem enddatum von alice übereinstimmt?	welche kursteilnehmer ein startdatum haben, das mit dem enddatum von alice identisch ist	was die studierenden haben ein startdatum, das ist das gleiche wie das endedatum von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer ist mit dem mitarbeiter befreundet, der später als 2004 gekündigt hat?	der mit dem mitarbeiter befreundet ist, der ende 2004 gekündigt hat	wer ist freunde mit dem mitarbeiter beenden sie später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was ist das geschlecht des studenten, der bis 2004 abgereist ist?	was ist das geschlecht der studentin, die bis 2004 ausschied	was ist das geschlecht der schüler, der links von 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
was für geschlechter sind die menschen, die die schule in irgendeinem jahr außer 2004 abgebrochen haben?	welche geschlechter sind die menschen, die die schule in jedem jahr außer 2004 beendet haben	welche geschlechter sind die menschen, die nicht mehr die schule in jedem jahr, sondern 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
ein 180 cm großer rüde	ein 180 cm großer rüde	180 cm groß, männlich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
wo sind die leute geboren, die die schule in oder vor 2004 beendet haben?	wo waren die menschen, die die schule in oder vor 2004 beendeten, geboren	wo waren die menschen, die die schule beendet in oder vor 2004 geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche person wurde in new york geboren	welche person in new york geboren wurde	welche person war in new york geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) )
was ist das geschlecht von studenten, die vor 2004 ihren abschluss gemacht haben?	was ist das geschlecht von studenten, die vor 2004 keinen abschluss gemacht haben	was ist das geschlecht des studenten, die halblizentiat, kein abschluss vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
nennen sie eine 180 cm große person, die mit alice befreundet ist	nennen sie eine person 180 cm in der höhe, die mit alice befreundet ist	nennen sie eine person, die 180 cm in der höhe, wer ist befreundet mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
arbeitnehmer, dessen startdatum vor 2004 liegt	mitarbeiter, dessen startdatum vor 2004 liegt	mitarbeiter, deren startdatum vor 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist mit der person befreundet, die vor 2004 aufgehört hat zu arbeiten?	wer mit der person befreundet ist, die vor 2004 aufgehört hat zu arbeiten	wer freunde mit der person, die aufgehört zu arbeiten, bevor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
freunde von menschen, die nach 2004 ihren job gekündigt haben	freunde von menschen, die nach 2004 ihren job aufgeben	freunde von menschen, die ihre jobs aufgegeben, nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was ist der studienbereich für menschen, die 180 cm groß sind	was ist das studiengebiet für menschen, die 180 cm groß sind	was ist der bereich der studie, für die leute, die sind 180 cm hoch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.field ) ( string ! type ) ) ( call SW.reverse ( string field_of_study ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
was ist der geburtsort von mitarbeitern, deren letzter tag vor 2004 lag?	was ist der geburtsort von arbeitnehmern, deren letzter tag vor 2004 war	was ist der geburtsort von beschäftigten, deren letzte tag war, bevor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finden sie mitarbeiter, deren startdatum 2004 oder später ist	mitarbeiter finden, deren startdatum 2004 oder höher ist	mitarbeiter suchen, dessen startdatum ist 2004 oder später	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
beziehungsstatus der mitarbeiter ab 2004	beziehungsstatus der mitarbeiter ab 2004	beziehungsstatus der mitarbeiter ab, die nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
schüler, die nicht vor 2004 eingeschult wurden	schüler, die vor 2004 nicht mit der schule begonnen haben	studenten, die nicht eingeschult, bevor 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was studiert alice an der brown university?	was ist alice studium an der braunen universität	was ist alice studium an der brown university	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string field_of_study ) ) )
finden sie das geschlecht der schüler, deren enddatum nicht später als 2004 liegt	das geschlecht der studierenden zu ermitteln, deren enddatum nicht später als 2004 liegt	finden sie die gleichstellung von studierenden, deren endedatum nicht später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
leute, die aufgehört haben zu arbeiten, nachdem alice angefangen hat zu arbeiten	personen, die nach der arbeit von alice nicht mehr funktioniert haben	menschen, die aufgehört zu arbeiten, nachdem alice anfing zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
transgendermenschen	transgendermenschen	transgenderpersonen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string >= ) ( number 2 ) ) )
suche nach mitarbeitern, die am oder nach dem letzten tag von alice beginnen	mitarbeiter finden, die am oder nach dem letzten tag von alice beginnen	finden sie mitarbeiter ab, die am oder nach alice der letzte tag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
schüler, die ihren abschluss spätestens am tag der alice gemacht haben	studenten, die spätestens am tag ihren abschluss gemacht haben,	studierende, graduierte, die nicht später als am tag alice hast	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter, die gekündigt haben, bevor alice ihren job gekündigt hat	mitarbeiter, die gekündigt haben, bevor alice ihren job aufgab	mitarbeiter, die aufhören, bevor alice ihren job beenden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter mit dem niedrigsten beschäftigungsstatus	mitarbeiter mit dem niedrigsten stellenstatus	mitarbeiter mit der kleinsten jobstatus	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie mitarbeiter mit dem letzten tag vor oder am letzten tag von alice	finden sie mitarbeiter mit dem letzten tag vor oder am letzten tag von alice	finden mitarbeiter mit dem letzten tag vor oder am alice der letzte tag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist mit der person befreundet, die 2004 oder früher ihren abschluss gemacht hat?	der mit der person befreundet ist, die 2004 oder früher abschloss	wer freunde mit der person, die die promotion in 2004 oder früher	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
suche nach schülern, die vor alice 'letztem arbeitstag beginnen	finden sie studenten, die vor alices letztem arbeitstag beginnen	finden die studierenden ab, bevor alice der letzte tag bei der arbeit	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche schüler haben ein enddatum, das vor dem geburtstag von alice liegt	welche schüler ein enddatum vor dem geburtstag von alice haben	was die studierenden haben ein enddatum, das vor dem geburtstag von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher mitarbeiter hat das späteste startdatum?	welcher mitarbeiter das letzte startdatum hat	was für mitarbeiter hat der letzte starttermin	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, die zeitgleich mit alice aufgehört haben zu arbeiten	mitarbeiter, die gleichzeitig mit alice	mitarbeiter, die aufgehört zu arbeiten in der gleichen zeit wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen mit freunden, die keine softwareingenieure sind	personen mit freunden, die keine softwareingenieure sind	menschen mit freunden, die nicht softwareingenieure	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
personen, die 180 cm oder größer sind	personen, die 180 cm oder größer sind	menschen, die sind 180 cm oder größer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )
welcher student von der braunen universität ist 180 cm groß?	welcher student von der braunen universität ist 180 cm groß	die schüler von der brown university ist 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string university ) ( string = ) en.university.brown ) )
wer ist befreundet mit dem mitarbeiter ab 2004	der seit 2004 mit dem mitarbeiter befreundet ist	wer ist freunde mit dem mitarbeiter ab 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche studenten haben spätestens mit alices geburtsdatum angefangen	die studenten spätestens mit dem geburtsdatum von alice begonnen haben	die schüler begannen, nicht später als alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was menschen mit einer person befreundet sind, deren größe 180 cm beträgt	welche menschen mit einer person befreundet sind, deren körpergröße 180 cm beträgt	was die menschen freunde sind mit einer person, deren höhe von 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
finde die leute, die ihren job angetreten haben, bevor alice zu ihrem studium kam	finden sie die menschen, die ihren job aufgenommen haben, bevor alice zu ihrem studium kam	menschen zu finden, die schlossen sich ihren job vor alice trat ihr studium	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
in welcher stadt wurden mehr als zwei personen in meinem sozialen netzwerk geboren?	welche stadt waren mehr als zwei menschen in meinem sozialen netzwerk geboren in	in welcher stadt wurden mehr als zwei menschen in mein soziales netzwerk geboren	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
welche person behauptet die meisten geschlechter	welche person die meisten geschlechter beansprucht	die person, die behauptet, die meisten geschlechter	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( string gender ) ) )
leute, die am tag, an dem alice fertig war, zum studium kamen	personen, die am tag der alicestudie mitgemacht haben	menschen, die sich die studie auf den tag alice abgeschlossen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
person, die aufgehört hat zu arbeiten, bevor alice die schule abgebrochen hat	person, die aufgehört zu arbeiten, bevor alice die schule beendet	person, die aufgehört zu arbeiten, bevor alice beendet die schule	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
alice freunde, die single sind	alices freunde, die single sind	alice ' s freunden, die single sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string friend ) ( string = ) en.person.alice ) )
finden sie personen, die mit mitarbeitern befreundet sind, deren enddatum nicht später als 2004 liegt	finden sie personen, die mit mitarbeitern befreundet sind, die spätestens 2004 ein enddatum haben	finden, menschen, die freunde sind mit mitarbeitern, die ein endedatum nicht später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter fangen an, wenn alice fertig ist	mitarbeiter, die beginnen, wenn alice beendet ist	mitarbeiter beginnend bei alice abgeschlossen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
leute finden, die am selben tag geboren wurden, als alice die schule beendete	finden sie menschen geboren am selben tag alice beendet schule	finden sie personen am selben tag geboren alice endete der schule	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) )
was hat alice 2004 aufgehört zu studieren?	was hat alice 2004 mit dem studium aufgehört?	was hat alice stopstudium in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string field_of_study ) ) )
arbeitgeber aller personen, die 180 cm groß sind	arbeitgeber aller menschen, die 180 cm groß sind	arbeitgeber, die alle menschen 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.company ) ( string ! type ) ) ( call SW.reverse ( string employer ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
mitarbeiter, dessen startdatum mindestens dem enddatum von mitarbeiter alice entspricht	mitarbeiter, dessen startdatum mindestens das enddatum der mitarbeiteralice ist	mitarbeiter, deren startdatum ist mindestens das endedatum des mitarbeiteralice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde jemanden, der weiblich ist	jemanden finden, der weiblich ist	finden sie jemanden, der weiblich ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string ! = ) en.gender.male ) )
wie ist der beziehungsstatus von studenten, die vor 2004 ihren abschluss gemacht haben?	wie ist der beziehungsstatus von studenten, die vor 2004 ihren abschluss gemacht haben	was ist der beziehungsstatus der studierenden, die studierte bis 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
was ist alice's geschlecht?	was ist alices geschlecht	was ist alice ' s geschlecht	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) en.person.alice ) ( call SW.reverse ( string gender ) ) ( string = ) en.person.alice ) )
mitarbeiter, dessen enddatum nicht nach dem enddatum von alice liegt	mitarbeiter, dessen enddatum nicht nach dem enddatum von alice liegt	mitarbeiter, deren endedatum ist nicht nach alice ' s enddatum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die männlich oder weiblich sind	menschen, die männlich oder weiblich sind	menschen, die männlich oder weiblich sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( call SW.concat en.gender.male en.gender.female ) ) )
menschen größer als alice	menschen größer als alice	die leute größer als alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )
welches geschlecht haben menschen, die seit 2004 arbeiten?	welches geschlecht sind menschen, die in oder nach 2004 zu arbeiten begonnen haben	welches geschlecht sind die menschen, die begann im jahr 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
männer, die online sind	männer, die online sind	männer, die online sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string logged_in ) ) )
welche studentin hat ihren abschluss gemacht, bevor alice ihren job gekündigt hat?	was studentin abgeschlossen hat, bevor alice ihren job aufgab	welche studentin absolvierte, bevor alice ihren job beenden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
der am selben ort wie alice geboren wurde	der am selben ort wie alice geboren wurde	geboren im selben ort wie alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.getProperty en.person.alice ( string birthplace ) ) ) )
angestellt bis 2004 oder 2010	beschäftigt bis 2004 oder 2010	arbeitete bis 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche person hat die geringste anzahl von beziehungsstatus	welche person die geringste anzahl von beziehungsstatus hat	die person hat die geringste anzahl von beziehung status	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( string relationship_status ) ) )
menschen in new york geboren und 180 cm groß	menschen geboren in new york und 180 cm groß	die menschen in new york geboren und 180 cm hoch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthplace ) ( string = ) en.city.new_york ) )
finden sie menschen, die 180 cm groß sind	finden sie personen, die 180 cm groß sind	finden sie menschen, die sind 180 cm hoch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
welche schülerin hat die schule gerade beendet, als alice ihren job angefangen hat	welche schülerin die schule beendete, als alice ihren job begann	die schüler beendeten die schule recht, wenn alice begann ihr job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
leute finden, die single sind	finden sie personen, die single sind	finden sie menschen, die single sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )
welche mitarbeiter den tag beginnen alice fängt an	welche mitarbeiter den tag beginnen alice beginnt	die mitarbeiter beginnen den tag alice beginnt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde mich den schüler, der vor alices abreise angefangen hat	finden sie mich die studentin, die vor alices abreise begonnen hat	finden sie mich, den schüler, der beginnt, bevor alice abreise	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wann ist alice in die schule gekommen?	wann hat alice die schule begonnen	wann hat alice die schule beginnen	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) )
freunde von männern	freunde von männchen	freunde der männer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )
personen mit zwei oder weniger aufgeführten arbeitgebern	personen, die zwei oder weniger arbeitgeber auf der liste haben	menschen, die zwei oder weniger die arbeitgeber aufgeführt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
leute, die aufgehört haben zu arbeiten, bevor alice geboren wurde	menschen, die nicht mehr arbeiteten, bevor alice geboren wurde	menschen, die aufgehört zu arbeiten, bevor sie geboren wurde alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus der schüler, die älter als 2004 sind?	was ist der status der studentenbeziehung, der größer als 2004 endete	was ist das schülerbeziehung der status, der endete mehr als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welches geschlecht haben mitarbeiter, deren berufsbezeichnung nicht "software engineer" ist?	welches geschlecht sind mitarbeiter, deren berufsbezeichnung nicht softwareingenieur ist	welches geschlecht sind die mitarbeiter, deren jobtitel nicht software ingenieur	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die nach der geburt von alice ihre arbeit aufgeben	menschen, die ihren job nach alice geboren gekündigt	menschen, die ihre arbeitsplätze verlassen, nachdem alice geboren	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die nach alice zur arbeit kamen	personen, die nach alice zur arbeit gekommen sind	menschen, die sich die arbeit nach alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welches geschlecht hat zwei personen?	welches geschlecht das geschlecht zweier menschen ist	welches geschlecht ist das geschlecht von zwei menschen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
personen, die an oder vor dem datum geboren wurden, an dem alice die schule abgebrochen hat	personen, die am oder vor dem datum geboren wurden, hörten auf, die schule zu besuchen	menschen geboren, die am oder vor dem datum alice nicht mehr in die schule	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) )
nennen sie eine person, die mit einer 180 cm großen person befreundet ist	nennen sie eine person, die mit einer person befreundet ist, die 180 cm groß ist	nennen sie eine person, die freunde mit einer person, die 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
person nicht in new york geboren	person nicht in new york geboren	person, die nicht in new york geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string ! = ) en.city.new_york ) )
menschen, die am selben ort wie alice geboren wurden	menschen, die am selben ort wie alice geboren wurden	menschen, die geboren wurden in der gleichen stelle, wie alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.getProperty en.person.alice ( string birthplace ) ) ) )
geburtsort des arbeitnehmers, dessen startdatum nicht 2004 ist	geburtsstadt des mitarbeiters, dessen startdatum nicht 2004 ist	geburtsstadt des mitarbeiters, dessen startdatum ist nicht 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wer ist die person, die mit einem mitarbeiter befreundet ist?	wer die person ist, die mit einem mitarbeiter befreundet ist	wer ist die person, die freunde mit einem mitarbeiter	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
geschlecht der beschäftigten, die 2004 nicht abgeschlossen haben	geschlecht der arbeitnehmer, die 2004 nicht fertig wurden	geschlecht von mitarbeitern endet nicht im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
ein eindeutiger beziehungsstatus	ein eindeutiger beziehungsstatus	eine einzigartige beziehung status	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
finde jemanden, der nach alice 'letztem arbeitstag geboren wurde	jemanden finden, der nach alices letztem arbeitstag geboren wurde	jemanden zu finden, geboren, nachdem alice der letzte tag der arbeit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) )
personen, die 2004 oder später geboren wurden	personen, die 2004 oder später geboren wurden	personen geboren im jahr 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
menschen, die mit einem mitarbeiter befreundet sind, der nach 2004 angefangen hat	personen, die mit einem mitarbeiter befreundet sind, der nach 2004 angefangen hat	menschen, die freunde sind mit einem mitarbeiter begonnen, die nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die mit alice befreundet sind und im jahr 2004 geboren wurden	menschen, die mit alice befreundet sind und im jahr 2004 geboren wurden	menschen, die freunde sind mit alice und 2004 geboren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string friend ) ( string = ) en.person.alice ) )
welcher mitarbeiter hat ein startdatum von 2004	welcher mitarbeiter ein startdatum 2004 hat	welche mitarbeiter hat ein startdatum 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
alle männer, die im jahr 2004 geboren wurden	alle männer, die 2004 geboren wurden	alle männer, die geboren wurden, im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
studenten, die nicht im jahr 2004 begonnen haben	studenten, die 2004 nicht gestartet sind	studenten, die nicht in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche menschen haben mehr als geschlechter	welche menschen mehr haben als geschlechter	die menschen haben mehr als eine geschlechter 	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string > ) ( number 2 ) ) )
suche nach schülern mit einem startdatum, das nicht höher ist als das startdatum von schüler alice	suchen sie von schülern mit einem startdatum, das nicht größer als das startdatum von student alice ist	finden sie studenten mit einem starttermin, der nicht größer ist als student alice startdatum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter mit einem enddatum suchen, das nicht 2004 ist	mitarbeiter mit einem enddatum finden, das nicht 2004 ist	finden mitarbeiter mit einem enddatum, das nicht 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
geschlecht eines mitarbeiters, der nicht seit 2004 beschäftigt ist	geschlecht eines mitarbeiters, der nicht 2004 anfängt	geschlecht des mitarbeiters nicht ab 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was war alices studienfach als student	was war alices studienfach als student	was war alices bereich der studie als student	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ) )
menschen mit freunden, die nach 2004 die schule abgeschlossen haben	menschen mit freunden, die nach 2004 die schule abgeschlossen haben	menschen mit freunden, die absolvierte schule, die nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
schüler, die am oder vor alices geburtstag ihren abschluss gemacht haben	studenten, die am oder vor alices geburtstag ihren abschluss gemacht haben	studierende, graduierte, die am oder vor alices geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
freunde von menschen, die größer als 180 cm sind	freunde von menschen, die größer als 180 cm sind	freunde von menschen, die größer sind als 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
menschen, die das gleiche fach wie alice studiert haben	menschen, die das gleiche feld wie alice studiert haben	menschen die studiert haben, das gleiche feld wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
freunde von mitarbeitern, die im jahr 2004 nicht fertig sind	freunde von mitarbeitern, die 2004 nicht fertig sind	freunde von mitarbeitern, die nicht fertig in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was ist das geschlecht von alice oder bob?	was ist das geschlecht von alice oder bob	was ist das geschlecht von alice oder bob	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
welches geschlecht hat der student, der nach 2004 geendet hat?	welches geschlecht die studentin ist, die nach 2004 endete	das geschlecht ist der student, der endete nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
student, dessen enddatum vor dem enddatum von student alice liegt	student, dessen enddatum vor dem enddatum der studentenalice liegt	schüler, deren endedatum liegt vor dem enddatum der student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche schüler haben ein startdatum, das mindestens 2004 oder 2010 ist	welche studierenden ein startdatum haben, das mindestens 2004 oder 2010 ist	was die studierenden haben ein startdatum, das mindestens entweder 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
person, die zwei geschlechter hat	person, die zwei geschlechter hat	person mit zwei geschlechtern	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string <= ) ( number 2 ) ) )
freunde von mitarbeiter mit enddatum nicht in 2004 finden	finden sie freunde von mitarbeitern mit enddatum nicht im jahr 2004	finden freunde der mitarbeiter mit endedatum nicht in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
stadt, in der die person, deren beziehungsstatus ledig ist, geboren ist	stadt, in der eine person, deren beziehungsstatus alleingeboren ist,	stadt, wo die person, deren beziehungsstatus single ist geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )
ein freund von alice	ein freund von alice	ein freund von alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
wo wurde alice geboren?	wo wurde alice geboren	wo wurde alice geboren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) )
wie ist der beziehungsstatus von menschen, die im oder vor 2004 eingeschult wurden?	wie hoch ist der beziehungsstatus von personen, die in oder vor 2004 mit der schule begonnen haben?	was ist der beziehungsstatus von menschen, die mit der schule angefangen, in oder vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finde eine person, die eingeloggt ist und im jahr 2004 geboren wurde	finden sie eine eingeloggte person, die im jahr 2004 geboren wurde	finden sie eine person angemeldet wurde 2004 geboren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string logged_in ) ) )
wann hat alice bei mckinsey angefangen?	wann hat alice bei mckinsey angefangen	wann hat alice start bei mckinsey	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string employment_start_date ) ) )
beziehungsstatus des studenten, dessen startdatum nicht vor 2004 liegt	beziehungsstatus eines studenten, dessen startdatum nicht vor 2004 liegt	beziehung status des schülers, dessen startdatum ist nicht vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
geschlecht, das von zwei personen geteilt wird	geschlecht, das von zwei personen geteilt wird	geschlecht, geteilt durch zwei personen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
welche leute sind mit studenten befreundet, die ihren abschluss erst 2004 gemacht haben?	welche menschen mit studenten befreundet sind, die frühestens 2004 ihren abschluss gemacht haben	die menschen sind freunde mit studierenden studiert nicht früher als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
ein student endet, wenn alice anfängt	ein student endet, wenn alice beginnt	ein student ende, wenn alice beginnt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
leute, die vor alice in die schule kamen	menschen, die mit der schule begannen, bevor alice anfing zu arbeiten	menschen, die mit der schule begonnen, bevor alice anfing zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde heraus, für wen alice im jahr 2004 gearbeitet hat	finden, für wen alice im jahr 2004 gearbeitet hat	herauszufinden, wer alice arbeitete in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employer ) ) )
mitarbeiter, die 2004 oder 2010 eingestellt wurden	mitarbeiter, die entweder 2004 oder 2010 eingestellt wurden	mitarbeiter, die eingestellt wurden, entweder 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie lautet die berufsbezeichnung von alice?	was ist alices berufsbezeichnung	was ist alice ' s jobtitel	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) )
alice, die informatik studiert, studiert an welcher universität	alice, der informatikstudent ist, ist studentischer studierender, von welcher universität	alice, die ist ein student, der informatik studiert, die universität	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string university ) ) )
wie ist der beziehungsstatus des schülers, dessen startdatum vor 204 liegt?	wie ist der beziehungsstatus des studierenden, dessen startdatum vor 204 liegt?	was ist die beziehung der status des schülers, dessen startdatum vor 204	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
studenten, die starben, bevor alice geboren wurde	studenten, die starben, bevor alice geboren wurde	studenten, die starb, bevor sie geboren wurde alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
freund eines studenten, dessen enddatum nicht 2004 liegt	freund des studenten, dessen enddatum nicht 2004 ist	freund der schüler, deren endedatum ist nicht 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welcher student hat am frühesten angefangen?	welcher student am frühesten begonnen hat	die studenten fingen an zu frühesten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer studiert die meisten dinge	der die meisten dinge studiert	wer studiert, die meisten dinge	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche person hat ein geburtsdatum bis spätestens 2004?	welche person spätestens 2004 ein geburtsdatum hat	welche person hat ein geburtsdatum nicht später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
welche stadt ist der geburtsort eines mitarbeiters, der 2004 noch nicht angefangen hat?	welche stadt ist der geburtsort eines mitarbeiters, der 2004 nicht angefangen hat	in welcher stadt ist der geburtsort des arbeitnehmers, die nicht gestartet in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
woher kamen mitarbeiter, die keine softwareingenieure sind?	wo waren mitarbeiter, die keine softwareingenieure geboren	wo waren die mitarbeiter, die nicht softwareingenieure geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
angestellter, der vor dem geburtsdatum von alice gekündigt hat	mitarbeiter, der vor dem geburtsdatum von alice gekündigt hat	mitarbeiter, die vor dem beenden den geburtstag von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wo sind die menschen geboren, die nach 2004 die schule beendet haben?	wo waren die menschen, die die schule nach 2004 beendeten, geboren	wo waren die menschen, die die schule abgeschlossen, die nach 2004 geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
suchen sie nach schülern mit einem enddatum, das nicht höher ist als das von mitarbeiter alice	suchen sie studenten mit einem enddatum, das nicht größer ist als das von employee alice	suchen sie studierende, die ein enddatum, das nicht größer ist als mitarbeiter von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
leute, die die schule abgebrochen haben, als alice anfing zu arbeiten	menschen, die die schule beendeten, als alice anfing zu arbeiten	menschen, die nicht mehr die schule, als alice anfing zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die 180 cm groß sind und informatik studieren	menschen, die 180 cm groß sind und informatik studieren	menschen, die sind 180 cm hoch und informatik studieren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) )
mitarbeiter, die ihre arbeit 2004 oder 2010 aufgenommen haben	mitarbeiter, die entweder 2004 oder 2010 ihre tätigkeit aufgenommen haben	mitarbeiter, die arbeiten begannen entweder 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
studenten, deren enddatum nach 2004 liegt	studierende, deren enddatum später als 2004 liegt	studierende, deren endedatum ist später als 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
hier finden sie alle personen, die im jahr 2004 geboren wurden	finden sie alle menschen geboren im jahr 2004	finden sie alle personen geboren in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
geburtsort des arbeitnehmers, dessen startdatum nicht nach 2004 liegt	geburtsstadt des mitarbeiters, dessen startdatum nicht nach 2004 liegt	geburtsstadt des mitarbeiters, dessen startdatum ist nicht nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
ein freund ist jemand, der nicht bei mckinsey angestellt ist	ein freund ist jemand, der nicht bei mckinsey beschäftigt ist	ein freund ist jemand, die nicht erfüllungsgehilfen von mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
schüler, die 2004 oder später eingeschult wurden	schüler, die 2004 oder später mit der schule begannen	schüler, die schule begann im jahr 2004 oder später	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was studenten abschließen, wenn alice eingestellt wurde	welche studenten graduieren, als alice eingestellt wurde	was absolventen bei alice wurde eingestellt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
student mit nur einem studienfach	student mit nur einem studienbereich	schüler mit nur einem feld der studie	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
ein mitarbeiter, der vor alice endet	ein mitarbeiter, der vor alice endet	ein mitarbeiter, der endet, bevor alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, die zeitgleich mit alice oder danach beginnen	mitarbeiter beginnen zeitgleich mit oder nach alicefinishes	mitarbeitern der gleichzeitigen oder nach alice abgeschlossen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
schüler, die nach alices beginn enden	schüler, die nach alicestarts fertig sind	studenten nach alice beginnt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
person mit dem gleichen geschlecht wie die person 180 cm groß	person mit dem gleichen geschlecht wie die person 180 cm groß	person mit demselben geschlecht wie die person, die 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
was sind die geburtsorte der arbeitnehmer ab 2004?	was sind die geburtsorte von arbeitnehmern ab 2004	was sind die geburtsstätten der mitarbeiter ab, die nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wann hat alice angefangen, die braune universität zu besuchen?	wann hat alice begonnen, die braune universität zu besuchen	wann hat alice starten sie die teilnahme an der brown university	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string education_start_date ) ) )
finden sie studenten, die die meisten universitäten besucht haben	studenten finden, die die meisten universitäten besucht haben	finden studenten, die an den meisten universitäten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string university ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
das ist die universität, die alice studiert hat	das ist die universität alice studiert	das ist die universität, studierte alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde mitarbeiter mit letzten tagen am oder vor alices erstem tag	mitarbeiter mit letzten tagen am oder vor dem ersten tag von alice finden	finden mitarbeiter mit letzten tage auf oder vor alice ' s erster tag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher mitarbeiter hat ein startdatum, das das geburtsdatum von alice ist	welcher mitarbeiter ein startdatum hat, das das geburtsdatum von alice ist	welche mitarbeiter hat ein startdatum, ist der geburtstag von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche studenten machen ihren abschluss frühestens am ersten arbeitstag von alice	welche studenten kurz vor alices erstem arbeitstag ihren abschluss machen	die studierenden ihr studium nicht früher als alice ' s erster arbeitstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist die berufsbezeichnung von menschen mit einer körpergröße von 180 cm?	was ist die berufsbezeichnung von personen, die eine höhe von 180 cm haben	was ist die berufsbezeichnung von menschen, die haben eine höhe von 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.job_title ) ( string ! type ) ) ( call SW.reverse ( string job_title ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
andere mitarbeiter als softwareingenieure	mitarbeiter außer softwareingenieuren	mitarbeiter andere als die softwareingenieure	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist mit einem mitarbeiter befreundet, dessen startdatum nicht 2004 ist?	der mit einem mitarbeiter befreundet ist, der das startdatum nicht 2004 ist	wer freunde mit einem mitarbeiter, der starttermin ist nicht 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche person ist mit männern befreundet?	welche person mit männern befreundet ist	welche person ist freunde mit männchen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )
welche beziehungsstatus werden von personen beansprucht, die im jahr 2004 geboren wurden?	welche beziehungsstatus von 2004 geborenen personen beansprucht werden	welche beziehung status sind in anspruch genommen von menschen, die 2004 geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )
was ist die universität von alice?	was ist die universität von alice	was ist die universität von alice	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ) )
wer ist entweder kleiner als alice oder gleich	der entweder kürzer als alice oder gleich ist	die ist entweder kürzer als alice oder der gleichen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )
mitarbeiter, die nach 2004 beginnen	mitarbeiter, die nach 2004 beginnen	mitarbeiter, die nach 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche mitarbeiter am letzten tag waren jünger als am abschlusstag von alice	welche mitarbeiter letzten tag jünger waren als alices abschlusstag	die mitarbeiter letzte tag war mehr die jüngsten, als "alice' s graduation day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, die am startdatum von alice oder später angefangen haben	mitarbeiter, die am startdatum von alice oder höher begonnen haben	mitarbeiter, die begonnen haben, auf alice ' startdatum oder später	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche arbeitnehmer haben nicht mehr als arbeitgeber gehabt	die arbeitnehmer nicht mehr als arbeitgeber hatten	die mitarbeiter haben nicht mehr als arbeitgeber	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist die berufsbezeichnung von mitarbeiter alice	was ist die berufsbezeichnung von employee alice	was ist jobtitel mitarbeiteralice	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) )
welcher student hielt zur selben zeit an, als mitarbeiter alice dies tat	welcher student zur gleichen zeit angehalten hat, hat mitarbeiter alice	die schüler angehalten, in der gleichen zeit mitarbeiter von alice hast	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist der beziehungsstatus von menschen, die männlich sind	was ist der beziehungsstatus von menschen, die männlich sind	was ist der beziehungsstatus von menschen, die männlich sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )
welche person ist eingeloggt	welche person eingeloggt ist	welche person angemeldet ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) )
mitarbeiter, die ihre arbeit begonnen haben, bevor alice in die schule kam	mitarbeiter, die ihre arbeit begonnen haben, bevor alice mit der schule begann	mitarbeiter, die mit der arbeit begonnen, bevor alice in die schule kam	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche mitarbeiter hatten ein austrittsdatum, das nicht in 2004 lag?	welche mitarbeiter ein auszeitdatum hatten, das 2004 nicht	die mitarbeiter hatten einen quitdatum, das war nicht 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, der den tag verlassen hat alice ist beigetreten	mitarbeiter, der den tag alice verlassen hat, trat bei	mitarbeiter, die gelassen den tag alice kam	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie mitarbeiter mit der geringsten anzahl von berufsbezeichnungen	mitarbeiter mit der geringsten anzahl von berufsbezeichnungen finden	finden mitarbeiter mit der geringsten anzahl von berufsbezeichnungen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
student, der seinen abschluss vor alice beginnt	student, der absteigt, bevor alice beginnt	studenten, absolventen, bevor alice beginnt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
suche mir eine liste von studenten, deren startdatum 2004 oder 2010 war	finden sie mir eine liste der studenten, deren startdatum 2004 oder 2010 war	suche mir eine liste der studenten, deren startdatum war im jahr 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter, die vor alice anfingen, hörten auf, student zu sein	mitarbeiter, die vor alice begonnen haben, hörten auf, student zu sein	mitarbeiter, die begonnen wurde, bevor alice ist nicht mehr ein student	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche schüler haben ein enddatum, das unter dem des startdatums von mitarbeiter alice liegt?	welche kursteilnehmer ein enddatum haben, das kleiner ist als das des startdatums der mitarbeiteralice	was die studierenden haben ein enddatum kleiner als das beginndatum des mitarbeiters alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
suche mir alle mitarbeiter, die nach 2004 oder 2010 angefangen haben zu arbeiten	finden sie mich alle mitarbeiter, die nach 2004 oder 2010 angefangen haben	mich finden alle mitarbeiter, die arbeiten begonnen, die nach 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
geburtsort des studenten, dessen enddatum vor 2004 liegt	geburtsstadt des studenten, dessen enddatum vor 2004 liegt	geburt stadt schüler, deren enddatum vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
freunde von alice oder bob finden	finden sie freunde von alice oder bob	finden freunde von alice oder bob	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
welche mitarbeiter haben die gleiche berufsbezeichnung wie alice?	welche mitarbeiter die gleiche berufsbezeichnung wie alice haben	welche mitarbeiter haben die gleichen jobtitel, als alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
freunde von studierenden ab 2004	freunde von studenten ab 2004	freunde von studierenden zu beginn vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wer ist mit der person befreundet, die 180 cm groß ist?	der mit der person befreundet ist, die 180 cm groß ist	wer freunde mit der person, die 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
nennen sie eine person, die mit mehr als zwei anderen personen befreundet ist	nennen sie eine person, die mit mehr als zwei anderen personen befreundet ist	nennen sie eine person, die freunde, die mit mehr als zwei anderen personen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
finde leute, die den gleichen beziehungsstatus haben wie jemand, mit dem alice befreundet ist	finden sie personen, die den gleichen beziehungsstatus von jemandem haben alice ist freunde mit	menschen, die die gleiche beziehung status von jemand alice ist befreundet mit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
den beziehungsstatus eines studenten, der nicht im jahr 2004 begonnen hat	der beziehungsstatus eines studenten, der nicht 2004 beginnt	der beziehungsstatus der studierenden nicht ab 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
beginn der anstellung bei alice im jahr 2004	alices beschäftigungsbeginn 2004	alice 2004 anstellung start date	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_start_date ) ) )
mitarbeiter finden, die vor 2010 beginnen	mitarbeiter ab 2010 finden	suchen mitarbeiter ab, bevor 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
nennen sie die beziehung des schülers, der vor 2004 angefangen hat	nennen sie die beziehung des studenten, der vor 2004 begonnen hat	nennen sie das verhältnis der schüler, die bereits vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wer ist online und mit alice befreundet?	wer ist online und freunde mit alice	wer ist online und freunde mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string logged_in ) ) )
menschen, die in einer beziehung sind	menschen, die in einer beziehung sind	menschen, die in einer beziehung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string ! = ) en.relationship_status.single ) )
was war das geschlecht der arbeitnehmer, die vor 2004 abgereist sind?	was war das geschlecht der arbeitnehmer, die vor 2004 ausschied	was war das geschlecht der mitarbeiter, die linke vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wie ist der beziehungsstatus des mitarbeiters ab 2004?	wie ist der beziehungsstatus des mitarbeiters ab 2004	was ist der familienstand des arbeitnehmers ab, die nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
student, der an einer braunen oder ucla universität eingeschrieben ist	student, der an der braun oder uclauniversität eingeschrieben ist	student eingeschrieben ist in braun oder ucla university	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.concat en.university.brown en.university.ucla ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
arbeitnehmer mit nicht mehr als zwei berufsbezeichnungen	mitarbeiter mit nicht mehr als zwei berufsbezeichnungen	arbeitnehmer mit nicht mehr als zwei titel	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde die person, die 180 cm groß und auch weiblich ist	finden sie die person, die 180 cm groß ist und auch weiblich ist	suchen sie die person, die 180 cm groß und ist auch weiblich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string gender ) ) ( string = ) en.person.alice ) )
menschen, die nach alice geboren wurden	menschen, die nach alice geboren wurden	menschen, die geboren wurden, nachdem alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )
welche personen sind mit mitarbeitern befreundet, deren berufsbezeichnung nicht "software engineer" ist?	welche personen mit mitarbeitern befreundet sind, deren berufsbezeichnung kein softwareingenieur ist	die menschen sind freunde mit der mitarbeiter, deren jobtitel nicht software ingenieur	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
nennen sie einen freund des schülers, der nach 2004 seinen abschluss gemacht hat	nennen sie einen freund des studenten, der nach 2004 abgeschlossen hat	name von einem freund der student, absolvierte nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen, die nicht das gleiche geschlecht wie alice haben	menschen, die nicht das gleiche geschlecht wie alice sind	menschen, die nicht das gleiche geschlecht haben wie alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string ! = ) en.person.alice ) )
was ist alices berufsbezeichnung von der firma, die sie im jahr 2004 verlassen hat	was ist alices berufsbezeichnung von unternehmen, das sie 2004 verlassen hat	was ist alice berufsbezeichnung von der gesellschaft in der sie links in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string job_title ) ) )
leute, die gerade online sind	personen, die derzeit online sind	menschen, die derzeit online sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) )
welche mitarbeiter am letzten tag am selben tag waren, an dem alice in die schule kam	welche mitarbeiter letzten tag war der gleiche tag alice begann schule	die mitarbeiter letzte tag war am selben tag alice in die schule kam	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche personen haben mindestens zwei beziehungsstatus	welche personen mindestens zwei beziehungsstatus haben	was haben die menschen mindestens zwei beziehung status	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string >= ) ( number 2 ) ) )
person, die vor kurzem die schule abgebrochen hat	person, die die schule zuletzt gestoppt hat	person, die nicht mehr die schule zuletzt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wo wurde alices freundin geboren in	wo war alices freund geboren in	wo war alice ' s freund geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ) )
finde freunde von menschen, die 2004 geboren wurden	freunde der 2004 geborenen person finden	finden sie freunde der person, die 2004 geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )
finde alle leute die freunde von alice sind	finden sie alle menschen, die freunde von alice sind	finden alle menschen, die freunde sind von alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string friend ) ( string = ) en.person.alice ) )
wie ist der beziehungsstatus aktueller oder ehemaliger studierender mit ausnahme derjenigen, die im jahr 2004 begonnen haben?	wie hoch ist der beziehungsstatus aktueller oder ehemaliger studierender mit ausnahme derjenigen, die 2004 begonnen haben?	was ist die beziehung status von aktuellen oder ehemaligen studenten, mit ausnahme derjenigen, die im jahr 2004 begonnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
zeig mir alle mitarbeiter, die das unternehmen verlassen, bevor alice anfängt	zeigen sie mir alle mitarbeiter, die das unternehmen verlassen, bevor alice beginnt	zeige mir alle mitarbeiter, die das unternehmen verlassen, bevor alice beginnt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
freunde finden, die nach 2004 eingeschult wurden	freunde von menschen finden, die nach 2004 mit der schule begonnen haben	freunde finden von menschen, die mit der schule begonnen, die nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finde menschen, die mit alice befreundet sind und in new york geboren sind	finden sie menschen, die mit alice befreundet sind und in new york geboren sind	finden, menschen, die freunde sind mit alice und geboren in new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string birthplace ) ( string = ) en.city.new_york ) )
wer hat zwei geschlechter	der zwei geschlechter hat	wer hat zwei geschlechter	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( number 2 ) ) )
finde einen schüler mit einem anderen letzten tag als 2004	finden student mit letzten tag anders als 2004	finden student mit letzten anderen tag als 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welches geschlecht haben die meisten menschen mit einer körpergröße von 180 cm?	welches geschlecht sind die meisten menschen, die 180 cm groß sind	welches geschlecht sind die meisten menschen, die sind 180 cm hoch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
studenten, die spätestens mit dem geburtstag von alice angefangen haben	studenten, die spätestens mit dem geburtsdatum von alice begonnen haben	studenten, die nicht später als alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist mit der person befreundet, die während oder vor 2004 ihren abschluss gemacht hat?	der mit der person befreundet ist, die während oder vor 2004 ihren abschluss gemacht hat	wer freunde mit der person, die absolvierte während oder vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
mitarbeiter, die vor 2010 begonnen haben	mitarbeiter, die vor 2010	mitarbeiter, die bereits vor 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
geschlecht der studierenden, deren enddatum nach 2004 liegt	geschlecht von studierenden, deren enddatum später als 2004 liegt	geschlecht von studenten, deren endedatum ist später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen mit zwei geburtsorten finden	menschen mit zwei geburtsstätten finden	finden sie personen mit zwei geburtsorte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( number 2 ) ) )
wer hat maximal zwei beziehungsstatus	der maximal zwei beziehungsstatus hat	wer hat maximal zwei beziehungsstatus	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string <= ) ( number 2 ) ) )
nenne eine freundin von alice, die online ist	nennen sie einen freund von alice, der online ist	namen, ein freund von alice, wer online ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
finden sie personen mit zwei beziehungsstatus	personen mit zwei beziehungsstatus finden	finden sie personen mit zwei beziehung status	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( number 2 ) ) )
alices studiengebiet ist die informatik	alices studienbereich ist informatik	alice studienrichtung ist informatik,	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string field_of_study ) ) )
nennen sie einen freund des studenten, der spätestens 2004 angefangen hat	nennen sie einen freund des studenten, der spätestens 2004 begann	name von einem freund der student, der begann spätestens 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
der 2004 angefangen hat und 180 cm groß ist	der 2004 begann und 180 cm groß ist	die im jahr 2004 begonnen und ist 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )
menschen, die mit anderen mitarbeitern als softwareingenieuren befreundet sind	personen, die mit anderen mitarbeitern als softwareingenieuren befreundet sind	menschen, die freunde sind mit mitarbeitern anderer als softwareingenieure	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finden sie personen, die mit einer körpergröße von 180 cm eingeloggt sind	finden sie personen, die mit einer höhe von 180 cm eingeloggt sind	leute zu finden, die angemeldet sind, mit einer höhe von 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
menschen, die ab 2004 anfingen zu arbeiten	personen, die in oder nach 2004 mit der arbeit begonnen haben	menschen, die begann im jahr 2004 oder später	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
hochschulnummer	universitätsnummer	universität anzahl	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.university ) ( string ! type ) ) ) )
wer hat zwei geburtsorte	der zwei geburtshäuser hat	wer hat zwei geburtsorte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( number 2 ) ) )
suche nach schülern mit einem enddatum unter 2004	studenten finden, die ein enddatum von weniger als 2004 haben	finden studenten, die haben ein enddatum weniger als 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie alle mitarbeiter, deren startdatum mit dem von alice übereinstimmt	finden sie alle mitarbeiter, deren startdatum mit alices	finden sie alle mitarbeiter, deren startdatum mit alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist das geschlecht der menschen, die nach 2004 ihre arbeit aufgenommen haben?	was ist das geschlecht der menschen, die nach 2004 mit der arbeit begonnen haben	was ist das geschlecht der menschen, zu arbeiten begonnen, die nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
student, der nach 2004 seinen abschluss gemacht hat	student, der nach 2004 seinen abschluss gemacht hat	student, absolvierte nach 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche schüler haben ihr studium bis auf 2004 abgeschlossen?	welche studenten jedes jahr abgeschlossen haben, aber 2004	die studenten absolviert jedes jahr, sondern 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist der beziehungsstatus von zwei personen	was ist der beziehungsstatus von zwei personen	was ist der beziehungsstatus von zwei menschen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
geschlecht wie alice	geschlecht, das mit alice identisch ist	geschlecht die gleichen wie alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) en.person.alice ) ( call SW.reverse ( string gender ) ) ( string = ) en.person.alice ) )
menschen, die ihre arbeit beendet haben, als alice angefangen hat oder früher	personen, die mit der arbeit beendet haben, als alice begonnen hat oder vor	menschen, die mit der arbeit fertig, als alice begann, oder bevor	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
suche nach schülern mit einem startdatum von alice oder höher	finden sie studenten mit einem startdatum von mitarbeiteralice oder höher	finden sie studenten mit einem startdatum des mitarbeiteralice oder höher	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
alices freund, der eingeloggt ist	alices freund, der eingeloggt ist	alice ' s freund, wer eingeloggt ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string friend ) ( string = ) en.person.alice ) )
wer ist mit einem studenten befreundet, der keine braune universität besucht?	der mit einem studenten befreundet ist, der keine braune universität besucht	wer freunde mit einem schüler, der nicht kümmert, brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wer ist der freund des schülers, der 2004 oder später aufgehört hat?	der freund des studenten ist, der in oder nach 2004 aufgehört hat	wer ist der freund der studenten, kündigte im jahr 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie menschen mit einer größe von 180 und einem enddatum von 2004	menschen mit einer höhe von 180 und einem enddatum von 2004 finden	finden sie personen mit einer körpergröße von 180 und ein enddatum von 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )
mitarbeiter, die anfingen, als alice ihren job kündigte	mitarbeiter, die mit dem ausscheiden von alice ihren job beendet haben	mitarbeiter, die begann, als alice ihren job beenden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche stadt ist der geburtsort von zwei der menschen	welche stadt ist der geburtsort von zwei der menschen	die stadt ist der geburtsort von zwei der menschen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
arbeitnehmer mit den wenigsten berufsbezeichnungen	mitarbeiter mit den geringsten berufsbezeichnungen	mitarbeiter mit den wenigsten berufsbezeichnungen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie die geburtsorte von menschen, die männlich sind	die geburtsorte von menschen finden, die männlich sind	finden sie die geburtsorte der menschen, die männlich sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )
welche mitarbeiter haben am oder vor alices geburtsdatum angefangen	welche mitarbeiter am oder vor dem geburtsdatum von alice begonnen haben	die mitarbeiter begonnen, die am oder vor alices geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche leute sind mit alice befreundet?	was menschen sind freunde mit alice	was für menschen sind freunde mit alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
studierende ab 2004	studenten ab 2004	studierenden, die nach 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche personen wurden nach 2004 geboren?	welche menschen nach 2004 geboren wurden	die menschen waren geboren, die nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
was ist der geburtsort von studenten, die ihren abschluss spätestens 2004 gemacht haben?	was ist der geburtsort von studenten, die spätestens 2004 ihren abschluss gemacht haben	was ist der geburtsort der studierenden studiert nicht später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
startdatum von alice bei mckinsey	startdatum von alice bei mckinsey	startdatum alice bei mckinsey	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string employment_start_date ) ) )
welche schülerin hat nach alices geburtsdatum angefangen	welcher student nach alices geburtsdatum begann	was studenten begann, nach alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde leute, deren geburtstag mit dem enddatum von alice übereinstimmt	finden sie personen, deren geburtstag mit dem enddatum von alice identisch ist	finden sie menschen, deren geburtstag ist das gleiche wie alice ' s enddatum	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) )
finden sie das geschlecht aller eingeloggten personen mit einer größe von 180 cm	finden sie das geschlecht aller eingeloggten personen mit einer höhe von 180 cm	finden sie die gleichstellung aller menschen angemeldet, mit einer höhe von 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
finde menschen, die den gleichen geburtsort haben wie alice	menschen finden, die den gleichen geburtsort wie alice haben	finden sie menschen, die die gleichen geburtsort wie alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) ) )
arbeitnehmer, dessen startdatum nicht 2004 ist	mitarbeiter, dessen startdatum nicht 2004 ist	mitarbeiter, deren startdatum nicht 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist die gleiche höhe wie alice bei 180 cm	wer ist die gleiche höhe wie alice bei 180 cm	wer ist der gleichen höhe wie bei alice 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string height ) ) ( string = ) en.person.alice ) )
finde mich bei freunden von leuten, die vor 2004 ihren job angetreten haben	finden sie mich freunde von menschen, die ihre arbeit vor 2004	mich finden freunde von menschen, die sich ihre jobs vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
student, dessen enddatum mit dem startdatum von alice identisch ist	student, dessen enddatum mit dem startdatum der mitarbeiteralice identisch ist	schüler, deren endedatum ist dasselbe wie das startdatum des mitarbeiteralice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer ist online, der ist 180 cm groß	wer online ist, der 180 cm groß ist	wer online ist, dass ist 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string logged_in ) ) )
was ist der studienbereich der studentin alice, deren universität die braune universität ist?	was ist das studiengebiet der studenten alice, deren universität ist braune universität	was ist der bereich der studie, die von studierenden der alice, deren universität brown university	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string field_of_study ) ) )
wer mit der person befreundet ist, wird spätestens 2004 gekündigt	wer mit der person befreundet ist, wird spätestens 2004 gekündigt	wer freunde mit der person, die verlassen wurde, nicht später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
studenten, die vor 2004 angefangen haben	studenten, die vor 2004 begonnen haben	studenten, die vor dem jahr 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wie ist der beziehungsstatus von menschen, die nach 2004 aufgehört haben zu arbeiten?	wie hoch ist der beziehungsstatus von personen, die nach 2004 nicht mehr arbeiten	was ist der beziehungsstatus von menschen, die aufgehört zu arbeiten, nachdem 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
student mit nicht mehr als zwei universitäten	student mit nicht mehr als zwei universitäten	schüler mit nicht mehr als zwei universitäten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string university ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
geburtsort eines studenten ab 2004	geburtsort eines studenten ab 2004	der geburtsort der studentin ab, die nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen, die nach alice geboren wurden, fingen an zu arbeiten	menschen, die geboren wurden, nachdem alice zu arbeiten begann	menschen, die geboren wurden, nachdem alice anfing zu arbeiten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) )
in welcher stadt waren menschen, die alleinstehend geboren wurden?	welche stadt waren menschen, die allein geboren sind	in welcher stadt waren die leute, die single sind geboren in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )
menschen in new york geboren	menschen, die in new york geboren wurden	die menschen in new york geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) )
menschen, die mehr als zwei freunde haben	personen, die mehr als zwei freunde haben	menschen, die mehr als zwei freunde	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
nennen sie einen mitarbeiter, der im jahr 2004 oder später begann	namen eines mitarbeiters, der 2004 oder später begann	name eines mitarbeiters, begann im jahr 2004 oder später	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
nennen sie einen studenten, der 2004 oder 2010 angefangen hat	benennen sie einen studenten, der 2004 oder 2010 begonnen hat	name eines studenten, begann im jahr 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die einen anderen beziehungsstatus haben als alice	personen, die einen anderen beziehungsstatus als alice haben	menschen, die eine andere beziehung status als alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string ! = ) en.person.alice ) )
schüler, die am starttag von alice fertig sind	schüler beenden am alicestarttag	schüler schlichten auf alice ' s starttag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer ist mit der person befreundet, die 2004 aufgehört hat zu arbeiten?	der mit der person befreundet ist, die 2004 aufgehört hat zu arbeiten	wer freunde mit der person, die aufgehört zu arbeiten in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter mit dem niedrigsten enddatum	mitarbeiter mit kleinstem enddatum	mitarbeiter mit kleinsten enddatum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus der männchen?	was ist der beziehungsstatus der männer	was die männer beziehungsstatus	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )
was ist die durchschnittliche größe einer person	was ist die durchschnittliche körpergröße einer person	was ist die durchschnittliche höhe einer person	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ) ) )
finde männer, mit denen alice befreundet ist	finden männer, mit denen alice befreundet ist	finden männer, dass alice mit freunden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string gender ) ( string = ) en.gender.male ) )
finde die männlichen freunde von alice	finden sie die männlichen freunde von alice	finden die männlichen freunde von alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string friend ) ( string = ) en.person.alice ) )
welcher mitarbeiter endete am startdatum von alice	welcher mitarbeiter am startdatum von alice endete	die mitarbeiter endete am alice startdatum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wo ist der geburtsort des mitarbeiters, der 2004 nicht angefangen hat?	was ist der geburtsort des mitarbeiters, der 2004 nicht gestartet ist?	was ist der geburtsort des arbeitnehmers, die didnt start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wann hat alice 2004 aufgehört zu studieren	an welchem datum beendete alice das studium im jahr 2004	wann hat alice brach sein studium im jahr 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string education_start_date ) ) )
welcher student hat aufgehört, bevor alice geboren wurde?	welcher student gestoppt wurde, bevor alice geboren wurde	was schüler gestoppt, bevor sie geboren wurde alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher schüler hat die schule verlassen, bevor alice die schule verlassen hat?	welcher schüler die schule verließ, bevor alice die schule verließ	die schüler verlassen die schule, bevor alice die schule verlassen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die zwei geburtsorte haben	menschen, die zwei geburtshäuser haben	menschen, die zwei geburtshäuser	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( number 2 ) ) )
suche nach schülern, deren enddatum über dem startdatum von alice liegt	suchen sie nachstudenten, deren enddatum größer als das startdatum der mitarbeiteralice ist	finden studenten, die haben ein enddatum größer als das startdatum des mitarbeiters alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
personen, die mit einem studenten befreundet sind, dessen startdatum vor 2004 liegt	personen, die mit einem studenten befreundet sind, dessen startdatum vor 2004 liegt	menschen, die freunde sind mit einer studentin, deren startdatum vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
was ist das geschlecht der person, die im jahr 2004 geboren ist	was ist das geschlecht der person, die im jahr 2004 geboren wurde	was ist das geschlecht der person, die 2004 geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )
geburtsort des arbeitnehmers, dessen arbeitgeber nicht mckinsey ist	geburtsstadt des arbeitnehmers, dessen arbeitgeber nicht mckinsey ist	geburtsstadt der arbeitnehmer, deren arbeitgeber nicht mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finden sie mitarbeiter mit einem enddatum, das gleich oder später als das der schüler ist	suchen von mitarbeitern mit einem enddatum, das dasselbe oder später als die kursteilnehmeralice ist	finden mitarbeiter mit einem enddatum ist der gleiche oder später als student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
arbeitnehmer mit der geringsten anzahl von berufsbezeichnungen	mitarbeiter mit der geringsten anzahl von berufsbezeichnungen	mitarbeiter mit der geringsten anzahl von berufsbezeichnungen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche stadt ist der geburtsort des mitarbeiters, der vor 2004 angefangen hat?	welche stadt ist der geburtsort des mitarbeiters, der vor 2004 begonnen hat	in welcher stadt ist der geburtsort des arbeitnehmers, die früher begonnen als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wer ist dieser mitarbeiter, mit dem kein softwareingenieur befreundet ist?	der mitarbeiter ist, der kein softwareingenieur ist, der mit	wer ist mitarbeiter, wer ist nicht ein softwareingenieur mit freunden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
in welcher stadt wurden alice oder bob geboren?	welche stadt alice oder bob geboren wurden	in welcher stadt wurden alice oder bob in geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
student, dessen enddatum vor dem geburtsdatum von alice liegt	student, dessen enddatum vor dem geburtsdatum von alice liegt	schüler, deren endedatum liegt vor dem geburtsdatum von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist der schulbeginn von alice?	was ist schulbeginndatum von alice	was ist schulbildung startdatum alice	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) )
wie ist der beziehungsstatus von studenten, die vor 2003 ihren abschluss gemacht haben?	wie hoch ist der beziehungsstatus von studierenden, die vor 2003 ihren abschluss gemacht haben?	was ist der beziehungsstatus der studierenden, die vor 2003 absolviert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
geschlecht des studenten, dessen enddatum nicht nach 2004 liegt	geschlecht der studierenden, deren enddatum nicht nach 2004 liegt	geschlecht der schüler, deren endedatum ist nicht nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wie ist der beziehungsstatus von erwerbstätigen, die 2004 noch nicht angefangen haben?	wie hoch ist der beziehungsstatus von erwerbstätigen, die 2004 nicht begonnen haben?	was ist der beziehungsstatus von arbeiten personen, die nicht in das geschäftsjahr 2004 gestartet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
suche nach schülern, die vor alice beginnen	finden sie studenten, die vor alice beginnen	finden die studierenden ab, bevor alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer ist mit alices freund befreundet	wer ist freundet mit alice s freund	wer ist befreundet mit alice ' s freund	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ) )
was ist das geschlecht der studenten, die spätestens 2004 begonnen haben?	was ist das geschlecht der studenten, die spätestens 2004 begonnen haben	was ist das geschlecht des studenten, die nicht später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche studenten haben die wenigsten majors?	welche studenten die wenigsten majors haben	die schüler haben die wenigsten majors	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie leute, die mit mitarbeitern befreundet sind, deren startdatum nicht später als 2004 liegt	personen finden, die mit mitarbeitern befreundet sind, die ein startdatum bis spätestens 2004 haben	finden, menschen, die freunde sind mit mitarbeitern, die ein startdatum nicht später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die mit schülern befreundet sind, die 2005 oder später in die schule gekommen sind	menschen, die mit schülern befreundet sind, die 2005 oder später mit der schule begonnen haben	menschen, die freunde sind mit studenten, die die schule im jahr 2005 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
was schüler vor alice angefangen haben	was die schüler vor alice begonnen haben	was die schüler begannen, bevor alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist das geschlecht der studierenden mit einem startdatum bis spätestens 2004	was ist das geschlecht der studierenden mit einem startdatum spätestens 2004	was ist das geschlecht der schüler mit einem startdatum nicht später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wer hat freunde, die nicht mitarbeiter bei mckinsey sind	die freunde haben, die keine mitarbeiter bei mckinsey sind	wer hat freunde, die nicht mitarbeiter bei mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finde alleinstehende menschen, die in new york geboren sind	finden sie einzelne menschen in new york geboren	finden einzigen menschen in new york geboren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
personen, die mit einem mitarbeiter befreundet sind, der nicht die berufsbezeichnung softwareingenieur hat	personen, die mit einem mitarbeiter befreundet sind, der nicht die berufsbezeichnung softwareingenieur hat	menschen, die freunde sind mit einem mitarbeiter, der nicht über den jobtitel software engineer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wo wurden alices freunde geboren	wo wurden alices freunde geboren	wo waren alice ' s freunde geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ) )
welche studenten vor alices geburtsdatum ihren abschluss gemacht haben	welche studenten vor alices geburtsdatum abgeschlossen haben	die studienanfänger ihr studium vor alices geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
freunde finden, die nach 2004 ihren abschluss gemacht haben	freunde finden verbindungen, die nach 2004 abgeschlossen haben	freunde findenverbindungen, die abgestuft nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche von alices freunden wurden im jahr 2004 geboren	welche von alices freunden im jahr 2004 geboren wurden	die von alices freunden geboren wurden, im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
was ist der beziehungsstatus von alice?	was ist der beziehungsstatus von alice	was ist der beziehungsstatus von alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) en.person.alice ) ( call SW.reverse ( string relationship_status ) ) ( string = ) en.person.alice ) )
menschen finden, die im jahr 2004 oder später geboren wurden	menschen zu finden, die 2004 oder später geboren wurden	finden sie menschen, die geboren wurden, im jahr 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
welche schüler haben das gleiche hauptfach wie alice?	welche studenten das gleiche hauptfach wie alice haben	die schüler haben die gleichen großen, wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher mitarbeiter hat zuletzt gekündigt?	welcher mitarbeiter zuletzt gekündigt hat	die mitarbeiter beenden zuletzt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer hat die meisten geburtsorte aufgelistet	der die meisten geburtsorte aufgelistet hat	wer hat die meisten geburtshäuser gelistet	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( string birthplace ) ) )
der 2004 geboren wurde und 180 cm groß ist	geboren 2004 und 180 cm groß	wer wurde 2004 geboren und ist 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
finden sie menschen, die im jahr 2004 geboren sind und 180 cm groß sind	finden sie 2004 geborene menschen mit einer körpergröße von 180 cm	finden sie personen geboren im jahr 2004, deren höhe von 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
student, dessen startdatum nach dem enddatum von alice liegt	student, dessen startdatum nach dem enddatum der mitarbeiteralice liegt	schüler, deren anfangsdatum nach enddatum des mitarbeiters alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
die nach alices geburtstag kündigten	die nach alices geburtstag aufgehört haben	die beendet, nachdem alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche person hat ein geburtsdatum früher als alice	welche person ein geburtsdatum früher hat als alice	welche person hat ein geburtsdatum früher als alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) )
was für geschlechter sind menschen, die vor 2004 aufgehört haben zu arbeiten?	welche geschlechter sind personen, die in oder vor 2004 nicht mehr arbeiten	welche geschlechter sind die menschen, die aufgehört zu arbeiten in oder vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
arbeitnehmer, die ihren arbeitsplatz in oder nach 2004 gekündigt haben	mitarbeiter, die ihren arbeitsplatz in oder nach 2004 aufgeben	mitarbeiter beenden ihre arbeit im jahr 2004 oder später	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
schüler, die am oder nach dem tag, an dem alice geboren wurde, die schule beendeten	schüler, die die schule am oder nach dem tag beendet haben, an dem alice geboren wurde	schüler beendet die schule, die am oder nach dem tag geboren wurde alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
suche nach schülern mit dem letzten tag vor oder am geburtstag von alice	finden sie studenten mit dem letzten tag vor oder am geburtstag von alice	finden sie studenten mit dem letzten tag vor oder am alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche leute sind mit studenten befreundet, die nach 2004 angefangen haben?	welche leute mit studenten befreundet sind, die nach 2004 begonnen haben	die menschen sind freunde mit studenten, die nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
student, dessen enddatum so spät ist wie das von alice	student, dessen enddatum so später als alices	schüler, deren endedatum ist später als alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
nennen sie den freund einer person, die nicht bei mckinsey beschäftigt ist	nennen sie den freund einer person, die nicht bei mckinsey beschäftigt ist	name der freund von einer person, die nicht erfüllungsgehilfen von mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finde menschen mit einer höhe von 180 cm, die auch mit alice befreundet sind	finden sie menschen, deren höhe 180 cm beträgt, die auch mit alice befreundet sind	finden sie personen deren höhe ist 180 cm, das sind auch freunde mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
der 180 cm groß ist und 2004 geboren wurde	180 cm groß und geboren 2004	wer ist 180 cm groß und geboren in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
mitarbeiter, die vor alices geburtstag fertig sind	mitarbeiter, die vor alices geburtstag enden	mitarbeiter, die oberfläche vor alices geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche person hat ihren status als single	welche person ihren status als single hat	welche person hat ihren status als single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
finde menschen mit demselben geburtsort wie alice	menschen mit dem gleichen geburtsort wie alice finden	finden sie menschen mit gleichen geburtsort wie alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.getProperty en.person.alice ( string birthplace ) ) ) )
finden sie mitarbeiter mit einem startdatum bis spätestens 2004 und deren freunde	mitarbeiter mit einem startdatum spätestens 2004 und ihre freunde zu finden	finden mitarbeiter mit einem startdatum nicht später als 2004 und ihre freunde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche schüler haben ein enddatum, das dem von schüler alice entspricht?	welche schüler ein enddatum haben, das mit der von den schülern identisch ist	was die studierenden haben ein enddatum, das ist das gleiche als student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
eine person 180 cm groß und hat das gleiche geburtsdatum wie alice	eine person 180 cm groß und hat das gleiche geburtsdatum wie alice	eine person, die 180 cm groß und hat das gleiche geburtsdatum wie alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string birthdate ) ) ( string = ) en.person.alice ) )
freunde von mitarbeitern finden, die den job nach 2004 gekündigt haben	freunde von mitarbeitern finden, die nach 2004 ihren job aufgeben	freunde finden der mitarbeiter, beenden sie die aufgabe nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die am oder nach dem tag in die schule kamen, hörten auf zu arbeiten	menschen, die die schule am oder nach dem tag begonnen alice aufgehört zu arbeiten	menschen, die mit der schule begonnen, die am oder nach dem tag, alice aufgehört zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
studenten, die vor alice keinen abschluss hatten, meldeten sich an	studenten, die vor der einschreibung nicht ihren abschluss gemacht haben	studenten, die nicht abschloss, bevor alice eingeschrieben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
ein freund von jemandem, der nach 2004 gekündigt hat	ein freund von jemandem, der nach 2004 aufhörte	ein freund von jemandem, dass sie nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wie heißt die geburtsstadt eines arbeitnehmers, der im jahr 2004 oder später angefangen hat?	was ist die geburtsstadt eines arbeitnehmers, der 2004 oder nach	was ist die geburt, die stadt der arbeiter, der im jahr 2004 begonnen oder nach	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wer ist am jüngsten	wer der jüngste ist	wer ist die jüngste	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string birthdate ) ) ) )
studenten, die das studienfach von alice teilen	studenten, die alices studienfeld teilen	studenten, die freigabe von alice ' s feld der studie	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
die universität von jemandem 180 cm groß	die universität von jemandem 180 cm groß	die universität von jemand 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.university ) ( string ! type ) ) ( call SW.reverse ( string university ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
finde mich alle studenten, die nach 2004 ihren abschluss gemacht haben	finden sie mich alle studenten, die nach 2004 abgeschlossen haben	mich finden alle schüler, die abgestuft nach 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer ist geboren, nachdem student alice angefangen hat	wer geboren wird, nachdem studentische alice begonnen hat	wer ist geboren, nachdem student alice begann	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )
was ist der beziehungsstatus des freundes von alice?	was ist der beziehungsstatus von freund von alice	was ist der beziehungsstatus der freund von alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
welche leute haben zwei oder mehr geschlechter	welche menschen zwei oder mehr geschlechter haben	was haben die menschen zwei oder mehr geschlechter	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string >= ) ( number 2 ) ) )
welcher mann hat den beziehungsstatus single?	welcher mann einen beziehungsstatus von single hat	das männchen hat einen beziehungsstatus single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string gender ) ( string = ) en.gender.male ) )
geburtsorte von schülern, die nach 2004 eingeschult wurden	geburtsorte von schülern, die nach 2004 mit der schule begonnen haben	geburtsorte von studenten, die mit der schule begonnen, die nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
die studenten begannen spätestens zu dem tag, an dem alice mit der arbeit begann	die studenten spätestens am tag begonnen haben alice begann arbeit	die schüler begannen, nicht später als der tag in alice zu arbeiten begann	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die nach alice zu arbeiten begannen	personen, die nach alice begonnen haben zu arbeiten	menschen, die arbeiten begonnen, nachdem alice hast	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde leute, die mit alice befreundet sind	finden sie leute, die mit alice befreundet sind	menschen, denen sind freunde mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string friend ) ( string = ) en.person.alice ) )
was menschen mit einem geburtsdatum von 2004 auch mit alice befreundet sind	was menschen mit einem geburtsdatum von 2004 sind auch freunde mit alice	was personen mit einem geburtsdatum von 2004 sind auch freunde mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string friend ) ( string = ) en.person.alice ) )
nennen sie einen freund der person, die online ist	benennen sie einen freund der person, die online ist	name von einem freund der person, die online ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
student, dessen enddatum nicht vor dem enddatum von alice liegt	student, dessen enddatum nicht vor dem enddatum der mitarbeiteralice liegt	schüler, deren enddatum nicht vor dem enddatum des mitarbeiteralice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer ist in einer stadt geboren, in der alice geboren wurde?	der in einer stadt geboren ist, in der alice geboren wurde	wer ist geboren, in einer stadt, alice, geboren in	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) )
welcher student hat ein startdatum in der nähe des startdatums von alice?	welcher schüler ein startdatum in der nähe des startdatums von alice hat	welche studentin hat ein startdatum in der nähe der startdatum für alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
student, der nicht nach 2004 angefangen hat	student, der nicht nach 2004 begann	student, begann nicht nach 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
schüler, dessen enddatum auf dem datum liegt, an dem schüler alice angefangen hat	student, dessen enddatum am tag des beginns der studentenalice liegt	schüler, deren enddatum ist das datum student alice begann	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
studenten in braun oder ucla	studenten bei brown oder ucla	studenten an der braunen oder der ucla	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.concat en.university.brown en.university.ucla ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher mitarbeiter hat den frühesten starttermin?	welcher mitarbeiter das früheste startdatum hat	welcher mitarbeiter hat den frühesten starttermin	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
suche mir die geburtsstadt aller schüler, deren enddatum 2004 oder später ist	finden sie mir die geburtsstadt aller studenten, deren enddatum 2004 oder später ist	mich finden die geburtsstadt von allen studierenden, deren endedatum ist 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wer ist der neueste mitarbeiter?	wer der neueste mitarbeiter ist	wer die neuesten mitarbeiter	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die nicht in new york geboren sind	menschen, die nicht in new york geboren wurden	menschen, die nicht in new york geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string ! = ) en.city.new_york ) )
finde den angestellten, der gegangen ist, nachdem alice angefangen hat	finden sie den mitarbeiter, der nach dem start von alice gegangen ist	finden sie den mitarbeiter, der links nach alice begann	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche studenten besuchen keine braune universität	welche studenten nicht die braune universität besuchen	welche studierenden nicht an der brown university	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wann hat alice nach dem studium der informatik ihren abschluss gemacht?	wann hat alice nach dem studium der informatik abgeschlossen	wann hat alice absolvent nach dem studium der informatik	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string education_end_date ) ) )
suche nach schülern mit einem enddatum, das nicht höher ist als das von schüler alice	finden sie studenten mit einem enddatum, das nicht größer als die schüleralice ist	finden studenten, die haben ein enddatum, das nicht größer als studentin alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wo wurde alices freund geboren	wo wurde alices freund geboren	wo war alice ' s freund geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
alice ist eine studentin an welcher universität	alice ist ein student, an dem universität	alice ist ein student an die universität	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ) )
menschen, die mit menschen befreundet sind, die ihren jetzigen job vor 2005 bekommen haben	menschen, die mit menschen befreundet sind, die vor 2005 ihren aktuellen job bekommen haben	menschen, die freunde sind mit menschen, die haben ihren aktuellen job, bevor 2005	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
suche mir den geburtsort für alle mitarbeiter ab 2004	finden sie mir den geburtsort für alle mitarbeiter ab 2004	finden mich der ort der geburt für alle mitarbeiter, beginnend vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter finden, die nach 2004 beginnen	mitarbeiter ab 2004 finden	finden sie mitarbeiter ab, die nach 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche person hat zwei beziehungsstatus	welche person zwei beziehungsstatus hat	welche person hat zwei beziehung status	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string <= ) ( number 2 ) ) )
welche universität besuchte alice im jahr 2004?	was universität hat alice besuchen im jahr 2004	welche universität hat alice besuchen in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string university ) ) )
die ihren job vor längster zeit verlassen haben	die ihren job vor der längsten zeit verlassen haben	die linken ihren job die längste zeit	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was hat alice im jahr 2004 studiert?	was hat alice studie im jahr 2004	was hat alice studie im jahr 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string field_of_study ) ) )
person, die die ausbildung zuerst abgeschlossen hat	person, die die ausbildung zuerst abgeschlossen hat	person, die abgeschlossen ausbildung erste	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist die durchschnittliche größe der menschen	was ist die durchschnittliche körpergröße der menschen	was ist die durchschnittliche körpergröße der menschen	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ) ) )
wie ist der beziehungsstatus des vor 2004 beendeten studenten?	wie hoch ist der beziehungsstatus des studenten, der vor 2004 abgeschlossen hat?	was ist der beziehungsstatus der studierenden, die abgeschlossen vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen, die vor alice geboren wurden, kündigten ihren job	menschen, die vor alice geboren wurden, beendeten ihren job	menschen geboren, bevor alice ihren job beenden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) )
wie ist der beziehungsstatus des mitarbeiters, der im jahr 2004 angefangen hat?	wie ist der beziehungsstatus des mitarbeiters, der 2004 begonnen hat	was ist der beziehungsstatus der mitarbeiter, die im jahr 2004 begonnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
personen, die mit einem studenten befreundet sind, dessen startdatum 2004 oder später liegt	personen, die mit einem studenten befreundet sind, dessen startdatum 2004 oder höher ist	menschen, die freunde sind mit einem schüler, dessen startdatum ist 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welcher student war der letzte, der fertig wurde?	welcher schüler war der letzte, der fertig war	die studentin war der letzte zu beenden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde alice, eine studentin an der universität	finden alice ein student an der universität	finden sie alice, ein student an der universität	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ) )
welche mitarbeiter starrten am selben tag wie alice in die schule	welche mitarbeiter am selben tag alice begann schule starrte	die mitarbeiter starrte am gleichen tag alice in die schule kam	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
städte von mitarbeitern, die nach 2004 eingestellt wurden	städte von mitarbeitern, die nach 2004 eingestellt wurden	städte der mitarbeiter, die eingestellt wurden, die nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
ein student, der nach student alice angefangen hat	ein student, der nach der studentenalice begonnen hat	ein student, der begann, nachdem alice schüler	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher student begann am selben tag wie alice?	was schüler am selben tag wie alice begann	was schüler begann am selben tag, als alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher student hat ein enddatum nicht vor dem enddatum von alice?	welcher schüler ein enddatum nicht vor dem enddatum von alice hat	welche studentin hat ein endedatum nicht früher als alice ' s enddatum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welches geschlecht von mindestens zwei personen beansprucht wird	welches geschlecht von mindestens zwei personen beansprucht wird	das geschlecht wird behauptet, durch mindestens zwei personen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
mitarbeiter, der geboren wurde, als alice den job kündigte	mitarbeiter, der geboren wurde, als alice den job beendete	mitarbeiter, die geboren wurde, als alice beenden sie den job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
geburtsort des arbeitnehmers, dessen enddatum vor 2004 liegt	geburtsstadt des arbeitnehmers, dessen enddatum vor 2004 liegt	geburtsstadt der mitarbeiter, deren enddatum vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
geburtsort von schülern, die ihren abschluss in oder nach 2004 haben	geburtsort von studenten, die in oder nach 2004 abschließen	geburtsort der studierenden, finishing im jahr 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welcher student hat ein enddatum vor student alice	welcher student ein enddatum vor der schüleralice hat	welche studentin hat ein endedatum vorstudentin alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde mitarbeiter mit dem letzten tag am oder vor alices erstem tag	mitarbeiter mit dem letzten tag am oder vor dem ersten tag von alice finden	finden mitarbeiter mit dem letzten tag vor oder alice ' s erster tag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde menschen, die männlich und 180 cm groß sind	finden sie personen, die männlich und 180 cm groß sind	suchen sie menschen, die männliche und 180 cm hoch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
welche mitarbeiter haben einen starttermin, der entweder 2004 oder 2010 ist	welche mitarbeiter ein startdatum haben, das entweder 2004 oder 2010 ist	was die mitarbeiter verfügen über eine startdatum ist entweder 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie hoch ist die gesamtzahl der geschlechter?	wie hoch ist die gesamtzahl der geschlechter	was ist die gesamtzahl der geschlechter	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ) )
wer ist mit einem studenten befreundet, der vor 2004 angefangen hat?	der mit einem studenten befreundet ist, der vor 2004 angefangen hat	wer freunde mit einem schüler, der bereits vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
was ist das geschlecht von studenten, die nicht an einer braunen universität studieren?	was ist das geschlecht von studenten, die nicht auf eine braune universität gehen	was ist das geschlecht des studenten, die nicht gehen, um brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
angestellter, der gekündigt hat, bevor alice seinen abschluss gemacht hat	mitarbeiter, der gekündigt hat, bevor alice graduiert wurde	mitarbeiter beenden, bevor alice schloss	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche personen sind mit mitarbeitern befreundet, deren enddatum vor 2004 liegt?	welche personen mit mitarbeitern befreundet sind, die ein enddatum vor 2004 haben	was die leute freunde sind, mit mitarbeitern, die ein endedatum vor dem jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finde freunde von studenten, deren letzter tag 2004 oder später ist	freunde von studenten finden, deren letzter tag 2004 oder später ist	finden freunde von studenten, deren letzten tag ist die 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
die 180 cm großen menschen haben ein startdatum von 2004	die 180 cm großen menschen haben ein startdatum von 2004	die 180 cm große menschen haben ein startdatum 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )
in welcher stadt wurden studenten geboren, die vor 2004 begannen?	welche stadt waren studenten geboren, die vor 2004 begannen	in welcher stadt wurden die studenten geboren, die bereits vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welcher mitarbeiter startet, wenn alice das unternehmen verlässt	welcher mitarbeiter mit dem zeitpunkt beginnt, zu dem alice das unternehmen verlässt	was mitarbeiter ab, durch die zeit, die alice verlässt das unternehmen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde mitarbeiter mit einem startdatum nach alice's	mitarbeiter mit einem startdatum nach alice es finden	finden mitarbeiter mit einem startdatum nach alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, die nicht im jahr 2004 begonnen haben	mitarbeiter, die 2004 nicht anden,	mitarbeiter, die nicht in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
beziehungsstatus von studierenden, die nicht im jahr 2004 begonnen haben	beziehungsstatus der studierenden, die nicht 2004 beginnen	beziehungsstatus der studierenden nicht ab 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
geburtsorte von arbeitnehmern, die ihren arbeitsplatz im jahr 2004 oder später gekündigt haben	geburtsorte von arbeitnehmern, die 2004 oder später ihren arbeitsplatz aufkündigten	der geburtsorte der mitarbeiter, die beenden ihre arbeit im jahr 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welcher mitarbeiter hat nach 2004 oder 2010 angefangen?	welcher mitarbeiter nach 2004 oder 2010 begonnen hat	die mitarbeiter begonnen, die nach 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie diejenigen, die mit schülern befreundet sind, deren startdatum vor 2004 liegt	finden sie diejenigen, die mit studenten befreundet sind, die vorstudientermine vor 2004 haben	diejenigen, die freunde sind mit studenten, die starttermine früher als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche person ist kürzer als 180 cm	welche person kürzer als 180 cm ist	welche person ist kürzer als 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )
wer ist 180 cm groß und hat ein startdatum im jahr 2004	180 cm groß und hat einen starttermin im jahr 2004	wer ist 180 cm hoch und hat einen starttermin im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )
nennen sie personen mit einer körpergröße von mehr als 180 cm	nennen sie personen, deren höhe größer als 180 cm ist	name volk, dessen höhe größer ist als 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )
leute mit einem oder zwei geburtsorten finden	menschen mit einem oder zwei geburtsstätten finden	finden sie personen mit einem oder zwei geburtsorte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string <= ) ( number 2 ) ) )
studierende mit dem gleichen studienfach wie alice	studenten mit dem gleichen studienbereich wie alice	studenten der gleichen fachrichtung wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was die schüler in die schule brachten, bevor alice anfing zu arbeiten	was schüler begann schule, bevor alice begann zu arbeiten	was die studenten begannen, die schule vor alice begann zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
leute, die vor alice eingeschult wurden	menschen, die die schule begonnen haben, bevor alice	menschen, die mit der schule begonnen, bevor alice hast	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche schüler haben zwischen 2004 und 2010 teilgenommen?	die studenten zwischen 2004 und 2010 besuchten	die studenten nahmen an, der zwischen 2004 und 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche person ist die kürzeste	welche person die kürzeste ist	welche person ist die kürzeste	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string height ) ) ) )
wer hat die schule abgebrochen, bevor alice angefangen hat?	die schule beendet haben, bevor alice begann	wer die schule beendet, bevor sie begann alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher mann wurde in new york geboren?	was männchen wurde in new york geboren	was männlich war in new york geboren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string birthplace ) ( string = ) en.city.new_york ) )
was ist das geschlecht der arbeitnehmer, die am oder nach dem jahr 2004 gekündigt wurden?	was ist das geschlecht der arbeitnehmer, die am oder nach 2004 gekündigt wurden	was ist das geschlecht der beschäftigten gekündigt, die am oder nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
ein schüler, der am oder nach alices geburtstag abreiste	ein student, der am oder nach alices geburtstag gegangen ist	ein student, der linken, die am oder nach alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche leute sind mit studenten befreundet, die 2004 oder später ihren abschluss machen?	welche menschen mit studenten befreundet sind, die 2004 oder später ihren abschluss machen	die menschen sind freunde mit absolventen, die 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welcher mitarbeiter hat ein enddatum vor 2004?	welcher mitarbeiter ein enddatum vor 2004 hat	welche mitarbeiter hat ein endedatum vor dem jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was ist der geburtsort von menschen, die nicht im jahr 2004 begonnen haben?	was ist der geburtsort von menschen, die nicht im jahr 2004 begonnen haben	was ist der geburtsort von menschen, die nicht in das geschäftsjahr 2004 gestartet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
in welchem geburtsort leben mindestens zwei personen?	welcher geburtsort mindestens zwei personen enthält	was geburtsstätte hat mindestens zwei menschen in ihm	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
freunde von mitarbeitern, die keine softwareingenieure sind	freunde von mitarbeitern, die keine softwareingenieure sind	freunde der mitarbeiter, die nicht softwareingenieure	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
studierende, die nicht mehr als zwei studienrichtungen haben	studierende, die nicht mehr als zwei studienrichtungen haben	studierende, die nicht mehr als zwei felder von studie	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
entweder mckinsey oder google	entweder mckinsey oder google	entweder mckinsey oder google	( call SW.listValue ( call SW.concat en.company.mckinsey en.company.google ) )
welche schülerin hat die schule verlassen, nachdem alice ihren job gekündigt hat	welche schülerin die schule verließ, nachdem alice ihren job gekündigt hatte	die schüler die schule verlassen, nachdem alice ihren job beenden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche mitarbeiter haben ein startdatum das gleiche wie alices enddatum	mitarbeiter haben ein startdatum, das mit dem enddatum von alice identisch ist	was die mitarbeiter haben ein startdatum, das gleiche wie alice ' s enddatum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
studenten, die 2004 oder 2010 angefangen haben	studenten, die 2004 oder 2010 begonnen haben	studenten, die in 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
leute, die die schule am selben tag wie alice abgebrochen haben	menschen, die die schule am selben tag wie alice gestoppt	menschen, die nicht mehr die schule am selben tag, wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
freund eines mitarbeiters, dessen startdatum nicht 2004 ist	freund eines mitarbeiters, dessen startdatum nicht 2004 ist	freund des mitarbeiters, dessen startdatum ist nicht 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
studenten, die 2004 nicht fertig sind	studenten, die 2004 nicht fertig wurden	schüler endet nicht im jahr 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher arbeitnehmer hat die meisten berufsbezeichnungen?	welche arbeitskraft die meisten berufsbezeichnungen hat	was arbeitnehmer hat die meisten berufsbezeichnungen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche schüler begannen am selben tag, als alice es tat	welche studenten am selben tag begannen alice tat	die schüler begannen am selben tag alice hast	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde mich bei freunden von leuten, die nicht an einer braunen universität studieren	finden sie mich freunde von menschen, die irgendwo anders als braune universität studieren	mich finden freunde der menschen studieren an einer anderen stelle als der brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen, die seit oder vor 2004 arbeiten	personen, die in oder vor 2004 mit der arbeit begonnen haben	menschen, die begonnen arbeiten in oder vor 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
personen, die größer als 180 cm sind, sind eingeloggt	personen, die größer als 180 cm sind eingeloggt	menschen, die größer als 180 cm eingeloggt	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string logged_in ) ) )
welche leute sind mit studenten befreundet, die vor 2004 angefangen haben?	welche leute mit studenten befreundet sind, die vor 2004 begonnen haben	die menschen sind freunde mit studenten, die vor dem jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche personen sind mit einer körpergröße von 180 cm eingeloggt	was personen mit einer höhe von 180 cm eingeloggt sind	was die leute angemeldet sind, mit einer höhe von 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string logged_in ) ) )
personen in new york geboren	personen, die in new york geboren wurden	personen, geboren in new york	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) )
finden sie die menschen, die 180 cm groß sind	finden sie die menschen, die 180 cm groß sind	menschen zu finden, die sind 180 cm hoch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string height ) ) ( string = ) en.person.alice ) )
finde eingeloggte personen, die auch mit alice befreundet sind	finden sie personen, die eingeloggt sind, die auch mit alice befreundet sind	leute zu finden, die angemeldet sind, die auch freunde mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string logged_in ) ) )
finden sie männer, die 180cm groß sind	männchen finden, die 180cm groß sind	finden männer, die 180cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
was ist alices studienfach	was ist alices studienfeld	was ist alice ' s feld der studie	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ) )
was ist die nummer der stadt	wie ist die anzahl der stadt	was ist die zahl der stadt	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ) )
wer wurde am tag der abreise von alice geboren?	wer am datum alice links geboren wurde	wer wurde geboren am datum, alice links	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) )
finde alices freunde, die 180 cm groß sind	finde alices freunde, die 180 cm groß sind	finden sie alice ' s freunde, die sind 180 cm hoch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
wer ist mit der person befreundet, die ihren abschluss frühestens im jahr 2004 macht?	der frühestens mit der person befreundet ist, die 2004 seinen abschluss macht	wer freunde mit der person, die dem abschluss im jahr 2004, frühestens	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie menschen, die eingeloggt sind und ihren geburtsort in new york haben	finden sie personen, die eingeloggt sind und den geburtsort als new york haben	leute zu finden, die angemeldet sind und hat den geburtsort new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string logged_in ) ) )
welche schüler haben den frühesten starttermin	welche studenten das früheste startdatum haben	die schüler haben die frühesten starttermin	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welches geschlecht haben menschen, die vor 2004 mit der arbeit begonnen haben?	welches geschlecht sind menschen, die vor 2004 mit der arbeit begonnen haben?	welches geschlecht sind die menschen, die arbeiten begonnen, bevor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finde mich die zwei leute, die in der gleichen stadt geboren sind	finden sie mich die beiden menschen in der gleichen stadt geboren	mich finden die beiden menschen, die in der selben stadt geboren	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
der das gleiche geschlecht wie alice hat und 180 cm groß ist	wer hat das gleiche geschlecht wie alice und ist 180 cm groß	wer hat das gleiche geschlecht wie alice und ist 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string gender ) ) ( string = ) en.person.alice ) )
nenne einen angestellten, der gegangen ist, nachdem alice angefangen hat	benennen sie einen mitarbeiter, der nach dem start von alice gegangen ist	name eines mitarbeiters, der links nach alice begann	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde die jüngste person	die jüngste person finden	finden sie die jüngste person, die	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string birthdate ) ) ) )
schüler, dessen startdatum am kleinsten ist	student, dessen startdatum das kleinste ist	schüler, deren starttermin ist der kleinste	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie mir den beziehungsstatus von studenten, die ihren abschluss seit 2004 gemacht haben	finden sie mir den beziehungsstatus von studenten, die seit 2004 ihren abschluss gemacht haben	finden mich der beziehungsstatus der studierenden studiert seit 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finde mich alle mitarbeiter, die vor 2004 gekündigt haben	finden sie mich alle mitarbeiter, die vor 2004 gekündigt haben	mich finden alle mitarbeiter, die vor dem beenden 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde leute, die studenten einer universität sind, die nicht braun ist, und ihre freunde	finden sie menschen, die studenten einer universität sind, die nicht braun ist und ihre freunde	leute zu finden, sind studenten einer hochschule, die nicht braun und ihre freunde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche menschen haben eine höhe von 180 cm und die höhe von alice	was menschen haben eine höhe von 180 cm und die höhe der alice	was die menschen haben eine höhe von 180 cm und der höhe von alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string height ) ) ( string = ) en.person.alice ) )
finde leute, die nicht alices freunde sind	finden sie leute, die nicht alices freunde sind	suchen sie menschen, die nicht alices freunde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string ! = ) en.person.alice ) )
mitarbeiter, die ihre ausbildung vor 2004 abgeschlossen haben	mitarbeiter, die vor 2004 fertig wurden	mitarbeiter beenden, bevor 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
angestellter, der vor alices einschreibung in die schule anfing zu arbeiten	mitarbeiter, der vor der einschulung von alice mit der arbeit begonnen hat	mitarbeiter, die zu arbeiten begonnen, bevor alice die anmeldung in der schule	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
schüler, die gleichzeitig mit oder nach dem start von alice fertig werden	schüler, die zeitgleich zu oder nach alicestarts abschließen	schüler schlichten gleichzeitigen oder nach alice beginnt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
ein student, der 2004 nicht aufgehört hat	ein student, der 2004 nicht aufhörte	ein student, der nicht aufhören in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
geburtsort von mitarbeitern, die vor 2004 ihren abschluss gemacht haben	geburtsort von mitarbeitern, die vor 2004 fertig sind	geburtsort von mitarbeiter zu beenden, bevor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche schüler haben ein startdatum, das mit dem enddatum von mitarbeiter alice oder später übereinstimmt?	welche kursteilnehmer ein startdatum haben, das mit dem enddatum von employee alice oder höher identisch ist	was die studierenden haben ein startdatum, das ist das gleiche als angestellter alice ' s enddatum oder später	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde leute, die zwei freunde haben	finden sie leute, die zwei freunde haben	finden menschen, die haben zwei freunde	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
welche schüler am selben tag mit der schule beginnen alice beginnt mit der arbeit	welche schüler am selben tag mit der schule beginnen, beginnt alice mit der arbeit	die schüler beginnen die schule am gleichen tag alice beginnt arbeit	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was sind die geschlechter der in new york geborenen menschen?	was sind die geschlechter von menschen, die in new york geboren wurden	was sind die geschlechter der menschen in new york geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )
arbeitnehmer, dessen arbeitgeber mckinsey oder google ist	arbeitnehmer, dessen arbeitgeber entweder mckinsey oder google ist	arbeitnehmer, deren arbeitgeber entweder mckinsey oder google	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string = ) ( call SW.concat en.company.mckinsey en.company.google ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
personen mit nur einem beziehungsstatus	personen mit nur einem beziehungsstatus	menschen mit nur einer beziehung status	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string < ) ( number 2 ) ) )
menschen, die ledig sind und im jahr 2004 geboren wurden	personen, die ledig sind und 2004 geboren wurden	menschen, die single sind und waren 2004 geboren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
wie ist der beziehungsstatus des schülers, der nach 2004 seinen abschluss gemacht hat?	was ist der beziehungsstatus des studenten, der nach 2004 seinen abschluss gemacht hat	was ist der beziehungsstatus der studierenden, die studierte nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
was ist alices berufsbezeichnung bei mckinsey?	was ist alices berufsbezeichnung bei mckinsey	was ist alice ' s jobtitel bei mckinsey	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string job_title ) ) )
welcher student hat ein enddatum, das kleiner ist als das startdatum von alice?	welcher kursteilnehmer ein enddatum hat, das kleiner als das startdatum von alice ist	die studentin hat ein endedatum kleiner als das startdatum von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die mit jemandem befreundet sind, der nach 2004 in die schule gekommen ist	menschen, die mit jemandem befreundet sind, der nach 2004 mit der schule begonnen hat	menschen, die freunde sind mit einer person, mit der schule begonnen, die nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
suche nach personen mit nur 1 beziehungsstatus	personen finden, die nur 1 beziehungsstatus haben	menschen, die nur 1beziehung mit status	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( string relationship_status ) ) )
student, dessen enddatum nach dem enddatum von student alice liegt	student, dessen enddatum nach dem enddatum der studentenalice ist	schüler, deren endedatum liegt nach dem enddatum der student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wann hat alice angefangen, die schule zu besuchen, die sie 2004 abgeschlossen hat	wann begann alice, die schule zu besuchen, die sie 2004 abgeschlossen hat	wann hat alice gehen, die schule, die sie 2004 ihren abschluss	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string education_start_date ) ) )
menschen, die zu arbeiten begannen, als alice die schule abbrach oder früher	menschen, die mit der arbeit begonnen haben, als alice die schule beendete oder	menschen, die begann, als alice aufhörte schule oder vor	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
ermitteln sie das geschlecht der schüler mit einem enddatum von 2004 oder später	geschlecht von studierenden zu finden, die ein enddatum von 2004 oder höher haben	suchen sie das geschlecht des studenten, die ein endedatum von 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
beziehungsstatus des studierenden, dessen studienfach nicht informatik ist	beziehungsstatus eines studierenden, dessen studienbereich nicht informatik ist	beziehung status von studenten, deren studienfach ist nicht informatik	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
was ist das geschlecht eines mitarbeiters mit einem enddatum nach 2004?	was ist das geschlecht eines arbeitnehmers mit einem enddatum nach 2004	was ist die gleichstellung eines arbeitnehmers mit einem enddatum später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
freunde von menschen finden, die ihren job vor 2004 gekündigt haben	freunde von menschen finden, die vor 2004 ihren job gekündigt haben	freunde finden von menschen, die beenden ihre arbeit vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
der ist 180 cm groß und hat den gleichen geburtsort wie alice	der 180 cm groß ist und den gleichen geburtsort wie alice hat	wer ist 180 cm groß und hat den gleichen geburtsort wie alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) )
finden sie mitarbeiter, deren enddatum mindestens dem geburtstag von alice entspricht	mitarbeiter finden, die ein enddatum haben, das dem geburtstag von alice entspricht oder größer ist	mitarbeiter suchen, die haben ein enddatum, das gleich oder höher sein, um den geburtstag von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die mit jemandem befreundet sind, der vor 2004 angefangen hat zu arbeiten	personen, die mit jemandem befreundet sind, der vor 2004 angefangen hat zu arbeiten	menschen, die freunde sind mit einer person, zu arbeiten begonnen, bevor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
suche nach beziehungsstatus für mitarbeiter mit einem startdatum nach 2004	beziehungsstatus für mitarbeiter mit einem startdatum nach 2004 suchen	finden beziehung status für die mitarbeiter mit einem startdatum später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
schüler, die an alices geburtstag angefangen haben	studenten, die an alices geburtstag begonnen haben	studenten, die an alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche studierenden haben starttermine nach 2004?	welche studienanfänger die starttermine nach 2004 haben	was die schüler / innen beginnen, termine, die später als 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
student, dessen startdatum nicht 2004 ist	student, dessen startdatum nicht 2004 ist	schüler, deren startdatum nicht 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie die schüler des gleichen geschlechts, die mindestens 2004 geboren wurden	die studenten des gleichen geschlechts, die mindestens 2004 geboren wurden,	finden die studenten des gleichen geschlechts, die geboren wurden, in mindestens 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche stadt ist der geburtsort eines mitarbeiters, dessen enddatum nicht im jahr 2004 liegt?	welche stadt der geburtsort eines arbeitnehmers ist, dessen enddatum nicht im jahr 2004 liegt	in welcher stadt ist der geburtsort des arbeitnehmers, deren endedatum ist nicht in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finden sie mitarbeiter mit den neuesten enddaten	mitarbeiter mit den neuesten enddaten finden	finden mitarbeiter mit den neuesten endtermine	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
personen mit weniger als zwei aufgeführten geschlechtern	personen, die weniger als zwei geschlechter aufgelistet haben	menschen, die weniger als zwei geschlechter aufgeführt	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string < ) ( number 2 ) ) )
leute, die gerade online sind und mit alice befreundet sind	personen, die derzeit online sind und mit alice befreundet sind	menschen, die derzeit online sind und freunde mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string friend ) ( string = ) en.person.alice ) )
jemand mit über zwei freunden	jemand mit über zwei freunden	jemand mit über zwei freunde	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
finde einen schüler, dessen letzter tag mit dem startdatum von alice übereinstimmt	suche schüler, dessen letzter tag mit dem startdatum von alice übereinstimmt	finden sie studenten, deren letzten tag entspricht, alice startdatum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
personen mit zwei oder mehr beziehungsstatus	personen mit zwei oder mehr beziehungsstatus	menschen, die zwei oder mehr beziehung status	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string >= ) ( number 2 ) ) )
wie ist der beziehungsstatus des neuen studenten, der vor 2004 beginnt?	wie ist der beziehungsstatus des neuen studenten ab 2004	was ist der beziehungsstatus der neuen studentenstart vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
ein freund eines mitarbeiters, der kein softwareentwickler ist	ein freund eines mitarbeiters, der kein softwareingenieur ist	ein freund eines mitarbeiters, dass ist nicht ein softwareingenieur	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
der 2004 geboren wurde und mit alice befreundet ist	der 2004 geboren wurde und mit alice befreundet ist	wer wurde 2004 geboren und ist befreundet mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string friend ) ( string = ) en.person.alice ) )
menschen, die mit jemandem befreundet sind, der vor 2005 angefangen hat zu arbeiten	personen, die mit jemandem befreundet sind, der vor 2005 angefangen hat zu arbeiten	menschen, die freunde sind, mit jemandem zu arbeiten begonnen, bevor 2005	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die mit jemandem befreundet sind, der 2004 nicht aufgehört hat zu arbeiten	personen, die mit jemandem befreundet sind, der 2004 nicht aufgehört hat zu arbeiten	menschen, die freunde sind, mit jemandem, der nicht aufhören zu arbeiten in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter suchen, deren enddatum unter 2004 oder 2010 liegt	mitarbeiter finden, deren enddatum weniger als 2004 oder 2010 ist	finden sie mitarbeiter, deren endedatum ist weniger als 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
die nach alices abschluss im jahr 2004 in die schule gegangen sind	der die schule begann, als alice 2004 seinen abschluss machte	wer in die schule kam, als alice absolvierte im jahr 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string education_start_date ) ) )
finde die freunde von menschen, die nach 2004 studiert haben	finden sie die freunde von menschen, die nach 2004 an ihrem studium teilgenommen haben	finden sie die freunde der menschen, die sich ihr studium nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
geschlecht der schüler, die 2004 oder früher eingeschult wurden	geschlecht von schülern, die 2004 oder früher mit der schule begonnen haben	sex von den studenten, die mit der schule angefangen in 2004 oder früher	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
der vor alices letztem schultag geboren wurde	der vor alices letztem schultag geboren wurde	wer wurde geboren, bevor alice ' s letzten tag in der schule	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) )
finde schüler mit dem letzten tag von 2004 oder früher	finden student mit letzten tag auf 2004 oder früher	finden student mit dem letzten tag auf 2004 oder früher	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer ist der mitarbeiter mit den meisten berufsbezeichnungen?	der mitarbeiter mit den meisten berufsbezeichnungen ist	wer ist der mitarbeiter mit der meisten berufsbezeichnungen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
hier finden sie alle beziehungsstatus für mitarbeiter, deren startdatum nicht später als 2004 liegt	finden sie alle beziehungsstatus für mitarbeiter, deren startdatum nicht später als 2004 liegt	mich finden alle beziehung status für die mitarbeiter, dessen startdatum nicht später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
jeder freund von alice, der eingeloggt ist	jeder freund von alice, der eingeloggt ist	jeder freund von alice, der angemeldet ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string logged_in ) ) )
finden sie den beziehungsstatus von menschen, die im jahr 2004 geboren wurden	den beziehungsstatus von 2004 geborenen personen zu finden	die beziehung status der menschen, geboren in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )
finden sie mitarbeiter mit einer oder zwei berufsbezeichnungen	mitarbeiter mit einem oder zwei berufsbezeichnungen finden	finden sie mitarbeiter mit ein oder zwei berufsbezeichnungen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist das geschlecht der arbeitenden menschen, die nicht für mckinsey arbeiten?	was ist das geschlecht von arbeitenden menschen, die nicht für mckinsey arbeiten	was ist das geschlecht der arbeitenden menschen, die nicht arbeiten bei mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
student, der zuletzt endete	student, der zuletzt endete	schüler die am ende der letzten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
person, die älter als alice ist	person, die älter als alice ist	person, die älter ist als alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )
finde ich das geschlecht der arbeitnehmer ab 2004	finden sie mich das geschlecht der mitarbeiter ab 2004	mich finden das geschlecht der mitarbeiter ab, bevor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen mit einer größe von 180 cm und ihrem beziehungsstatus finden	menschen mit einer höhe von 180 cm und ihrem beziehungsstatus finden	finden sie personen mit einer körpergröße von 180 cm und ihre beziehung status	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
welches schülerstartdatum am nächsten zu alices geburtstag liegt	welcher studienbeginn dem geburtstag von alice am nächsten kommt	die schüler beginnen datum am nächsten ist alices geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher mitarbeiter hat die längste beschäftigung	welcher arbeitnehmer die längste beschäftigung hat	was für mitarbeiter hat die längste beschäftigung	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, deren enddatum mit dem von alice übereinstimmt	mitarbeiter, deren enddatum mit dem von alice identisch ist,	mitarbeiter, deren enddatum ist das gleiche wie alice ' s	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die freunde haben, die ihre arbeit in oder nach 2004 aufgegeben haben	personen, die freunde haben, die ihren arbeitsplatz in oder nach 2004 verlassen haben	menschen, die haben freunde, die ihre jobs aufgegeben haben im jahr 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
person, die mit einem studenten befreundet ist, der 2004 keinen abschluss gemacht hat	person, die mit studenten befreundet ist, die 2004 keinen abschluss gemacht haben	person, die freunde mitstudent, der nicht absolvent 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie freunde von menschen, die spätestens im jahr 2004 die arbeit aufgeben	freunde von menschen zu finden, die spätestens 2004 ihre arbeit niedergelegt haben	freunde finden von menschen, die aufhören zu arbeiten in 2004, spätestens	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
der 180 cm groß ist und informatik studiert	der 180 cm groß ist und informatik studiert	wer ist 180 cm groß und studiert informatik	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) )
personen, die vor dem startdatum von alice geboren wurden	personen, die vor dem startdatum von alice geboren wurden	personen geboren vor beginn der alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )
welcher mitarbeiter hat das selbe enddatum wie alice	welcher mitarbeiter das gleiche enddatum wie alice hat	was für mitarbeiter hat die gleichen enddatum, wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter finden, dessen letzter tag vor 2010 lag	mitarbeiter finden, deren letzter tag vor 2010 war	finden sie mitarbeiter, deren letzten tag war vor 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer hat ein kleineres enddatum als 2004	der ein kleineres enddatum als 2004 hat	wer hat eine kleinere enddatum als 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
geschlecht des studenten, der ein kleineres datum als 2004 hatte	geschlecht der studentin, die ein kleineres datum als 2004 war	geschlecht der schüler, war ein kleiner date 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
mitarbeiter, die am selben tag wie alice angefangen haben	mitarbeiter, die am selben tag wie alice	mitarbeiter, die begonnen haben, auf dem gleichen datum wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer mit alice befreundet ist, ist eingeloggt	wer mit dem alice freundet, ist eingeloggt	wer ist alice freunde mit, die angemeldet ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string logged_in ) ) )
wer hat freunde, die studenten sind und deren enddatum 2004 ist?	wer freunde hat, die studenten sind und deren enddatum 2004 ist	wer hat freunde, die sind schüler und whos enddatum 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
schüler beenden, wenn alice beginnt	studenten beenden, wenn alice beginnt	schüler schlichten, wenn alice beginnt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde mich alle menschen mit weniger als zwei geburtsorten	finden sie mich alle menschen mit weniger als zwei geburtsstätten	mich finden alle menschen mit weniger als zwei geburtsorte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string < ) ( number 2 ) ) )
welche mitarbeiterin hat ihren job am selben tag wie alice angefangen?	welcher mitarbeiter seine arbeit am selben tag wie alice	was angestellte begann ihre arbeit am gleichen tag, als alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
ein arbeiter, dessen firma nicht mckinsey ist	ein arbeiter, dessen unternehmen nicht mckinsey ist	ein arbeitnehmer, deren unternehmen nicht mckinsey	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
leute, die aufhörten zu arbeiten, nachdem alice die schule abgebrochen hatte	menschen, die aufgehört zu arbeiten, nachdem alice die schule gestoppt	menschen, die aufgehört zu arbeiten, nachdem alice beendet die schule	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
student, dessen enddatum nicht vor dem enddatum von student alice liegt	student, dessen enddatum nicht vor dem enddatum der studentenalice liegt	schüler, deren enddatum nicht vor dem enddatum von alice schüler	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche leute wurden in new york geboren?	welche menschen in new york geboren wurden	die menschen wurden in new york geboren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string birthplace ) ( string = ) en.city.new_york ) )
suche nach schülern, deren startdatum unter 2004 liegt	suche nach studenten, deren startdatum kleiner als 2004 ist	finden sie studenten, deren startdatum ist weniger als 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
schüler, die ihren letzten tag vor alice haben, kündigen ihren job	studenten, die ihren letzten tag haben, bevor alice ihren job aufgibt	studierende, die ihren letzten tag vor alice kündigt ihren job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde menschen, die mindestens so groß sind wie alice	finden menschen mindestens so groß wie alice	menschen finden, die mindestens so groß ist wie alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )
wer hat mit alice angefangen	der mit alice begonnen hat	wer begann mit alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wo sind die arbeitenden menschen geboren, die nicht für mckinsey arbeiten?	wo waren die arbeitenden menschen, die nicht für mckinsey geboren arbeiten	wo waren die arbeitenden menschen, die keine arbeit für mckinsey geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
suche schüler mit dem letzten tag vor alice	finden sie studenten mit letzten tag vor alice es	finden sie studenten mit dem letzten tag vor alices	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die einen freund haben, der im jahr 2004 geboren wurde	menschen, die einen freund im jahr 2004 geboren haben	menschen, die einen freund haben 2004 geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )
mitarbeiter, dessen startdatum nach dem enddatum von student alice liegt	mitarbeiter, dessen startdatum nach dem enddatum der studentenalice liegt	mitarbeiter, deren anfangsdatum nach enddatum der student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
freunde von menschen finden, die im jahr 2004 keine arbeit verloren haben	freunde von menschen finden, die 2004 keine beschäftigung verloren haben	freunde finden von menschen, die nicht verlieren beschäftigung im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
geburtsort für alle nichtsoftwareingenieure	geburtsstadt für alle nichtsoftwareingenieure	stadt der geburt für alle nichtsoftwareingenieure	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wie lautet die nummer der stadt?	wie ist die nummer der stadt	was ist die nummer der stadt	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ) )
studenten, die vor 2004 oder 2010 angefangen haben	studierende, die vor 2004 oder 2010 begonnen haben	studenten, die vor dem jahr 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche mitarbeiter haben einen starttermin nach 2004 und mit wem sind sie befreundet?	welche mitarbeiter einen starttermin nach 2004 haben und mit wem sie befreundet sind	welche mitarbeiter haben einen starttermin später als 2004und wer sind sie freunde mit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
suche einen studenten, der spätestens 2004 angefangen hat	finden sie einen studenten, der spätestens 2004 begonnen hat	finden sie ein student, der begann spätestens 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter, die nach alice eingestiegen sind	mitarbeiter, die nach alice beigetreten sind	mitarbeiter, die sich nach alice kam	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer hat einen anderen beziehungsstatus als alice?	der einen anderen beziehungsstatus als alice hat	wer hat andere beziehung status zu alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string ! = ) en.person.alice ) )
studenten, die nach alice enden	studenten, die nach alice beenden	studenten nach alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
ein student, der vor alice endet	ein student, der vor alice endet	ein student, der endet, bevor alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer hat die wenigsten freunde	wer die wenigsten freunde hat	wer hat die wenigsten freunde	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string friend ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
finden sie personen, die mit mitarbeitern befreundet sind, deren enddatum nicht 2004 liegt	finden sie personen, die mit mitarbeitern befreundet sind, die ein enddatum haben, das nicht 2004 ist	finden sich menschen, die freunde sind, mit mitarbeitern, die haben ein enddatum, das nicht 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter, die die gleichen berufsbezeichnungen wie alice haben	mitarbeiter, die die gleichen berufsbezeichnungen wie alice teilen	mitarbeiter, die denselben jobtitel, als alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist der beziehungsstatus von zwei personen mit demselben status?	wie hoch ist der beziehungsstatus von zwei personen mit demselben status	was ist der beziehungsstatus von zwei menschen mit dem gleichen status	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
studenten, die gingen, bevor alice anfing	studenten, die gegangen sind, bevor alice begonnen hat	studierende, die linke vor alice begann	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die im jahr 2004 oder früher geboren wurden	menschen, die 2004 oder früher geboren wurden	menschen, die geboren wurden in 2004 oder früher	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
wer ist mit jemandem befreundet, der 2004 nicht aufgehört hat zu arbeiten?	der mit jemandem befreundet ist, der 2004 nicht aufgehört hat zu arbeiten	wer ist befreundet mit jemandem, der nicht aufhören zu arbeiten in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
arbeitnehmer mit der größten anzahl von arbeitgebern	arbeitnehmer mit der größten anzahl von arbeitgebern	mitarbeiter mit der größten anzahl von arbeitgebern	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie mich, die studentin, die am geburtstag von alice ihren abschluss gemacht hat	finden sie mich die studentin, die am geburtsdatum von alice abgeschlossen hat	mich finden, der student, der absolvent auf alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter mit einem enddatum nach 2004 finden	mitarbeiter mit enddatum nach 2004 finden	finden mitarbeiter mit einem enddatum, die nach 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher student hat zuletzt angefangen?	was der student zuletzt begonnen hat	was schüler begann letzte	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist das geschlecht von alice	was ist das geschlecht von alice	was ist das geschlecht von alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) en.person.alice ) )
nennen sie eine person, mit der alice befreundet ist	benennen sie eine person, mit der alice befreundet ist	nennen sie eine person, die alice ist befreundet mit	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
beziehungsstatus von mitarbeitern, die im jahr 2004 nicht abgeschlossen haben	beziehungsstatus der mitarbeiter, die 2004 nicht fertig wurden	beziehungsstatus der mitarbeiter endet nicht im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
ein student, der keine informatik studiert	ein student, der keine informatik macht	ein schüler nicht unter computer science	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie mich nach dem geschlecht der schüler, die 2004 nicht eingeschult wurden	finden sie mich das geschlecht der schüler, die nicht die schule im jahr 2004 begonnen haben	mich finden das geschlecht des studenten, die nicht eingeschult im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welcher student hat den tag begonnen? alice hat aufgehört	was student begann den tag alice beenden	was schüler begann der tag alice beenden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
beziehungsstatus von mitarbeitern, die nicht im jahr 2004 angefangen haben	beziehungsstatus von mitarbeitern, die 2004 nicht begonnen haben	beziehungsstatus der mitarbeiter, die nicht in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
woher kamen die menschen, die in einem anderen jahr als 2004 zu arbeiten begannen?	wo waren die menschen, die in jedem jahr, aber 2004 geboren	wo waren die menschen, zu arbeiten begonnen, in jedem jahr aber 2004 geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was mitarbeiter nach 2004 angefangen haben	was mitarbeiter nach 2004 begonnen haben	was mitarbeiter, die nach 2004 begonnen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche person, die online ist, ist mit alice befreundet	welche person, die online ist, ist freundemit alice	welche person, die online ist ist befreundet mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string logged_in ) ) )
welches unternehmen beschäftigt die person, die 180 cm groß ist	welches unternehmen die person beschäftigt, die 180 cm groß ist	die mitarbeiter des unternehmens die person, die 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.company ) ( string ! type ) ) ( call SW.reverse ( string employer ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
was ist das geschlecht der arbeitnehmer, die 2004 oder früher angefangen haben?	was ist das geschlecht der arbeitnehmer, die 2004 oder früher begonnen haben	was ist, mitarbeiter geschlecht, die in 2004 oder früher	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
ein freund einer einzelnen person	ein freund einer einzelnen person	ein freund von einer einzigen person	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )
der ist 180 cm groß und hat das gleiche geburtsdatum wie alice	der 180 cm groß ist und das gleiche geburtsdatum wie alice hat	wer ist 180 cm hoch und hat das gleiche geburtsdatum wie alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string birthdate ) ) ( string = ) en.person.alice ) )
mitarbeiter, die vor alices geburtstag gekündigt haben	mitarbeiter, die vor alices geburtstag gekündigt haben	mitarbeiter, die vor dem beenden alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
männer, die in new york geboren wurden	männchen, die in new york geboren wurden	männer, die wurden in new york geboren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string gender ) ( string = ) en.gender.male ) )
beziehungsstatus des mitarbeiters, dessen enddatum nach 2004 liegt	beziehungsstatus des mitarbeiters, dessen enddatum nach 2004 liegt	beziehungsstatus der mitarbeiter, deren enddatum nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
student mit weniger als zwei universitäten	student mit weniger als zwei universitäten	schüler mit weniger als zwei universitäten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string university ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist der beziehungsstatus von alice und bob?	was ist der beziehungsstatus von alice und bob	was ist die beziehung status von alice und bob	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
was hat alice an der brown university studiert?	was hat alice studium an der braunen universität	was hat alice studie an der brown university	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string field_of_study ) ) )
welche personen sind 180 cm groß und haben ein geburtsdatum von 2004	welche menschen 180 cm groß sind und ein geburtsdatum von 2004 haben	die menschen sind 180 cm hoch und haben einen geburtstag 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
wer ist mit einer person befreundet, die im jahr 2004 nicht aufgehört hat zu arbeiten?	der mit einer person befreundet ist, die 2004 nicht aufgehört hat zu arbeiten	wer freunde mit einer person, die nicht aufhören zu arbeiten in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wo werden menschen geboren, die 180 cm groß sind	wo sind menschen geboren, die 180 cm groß sind	wo sind die menschen geboren, die 180 cm in der höhe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
finden sie den beziehungsstatus von mitarbeitern mit einem enddatum vor 2004	finden sie den beziehungsstatus von mitarbeitern mit einem enddatum vor 2004	finden sie den beziehungsstatus der mitarbeiter, die mit einem endedatum älter als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was ist das geschlecht	was ist das geschlecht	was ist das geschlecht	( call SW.listValue ( call SW.concat en.gender.male en.gender.female ) )
menschen, die mit alice oder bob befreundet sind	personen, die mit alice oder bob befreundet sind	menschen, die freunde sind mit alice oder bob	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
geschlechter von mitarbeitern, die keine softwareingenieure sind	geschlecht von mitarbeitern, die keine softwareingenieure sind	geschlecht von mitarbeitern, die nicht softwareingenieure	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
freunde von alice finden	finden sie einzelne freunde von alice	finden freunde von alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
welche schüler haben ein startdatum, das nicht größer ist als mitarbeiter alice	welche kursteilnehmer ein startdatum haben, das nicht größer als die mitarbeiteralice ist	was die studierenden haben ein startdatum, der nicht größer ist als mitarbeiter von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wie ist das geschlecht der arbeitnehmer, deren letzter tag nicht später als 2004 war?	was ist das geschlecht der arbeitnehmer, deren letzter tag nicht später als 2004 war	was ist das geschlecht von arbeitnehmern, deren letzten tag war nicht später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter mit den wenigsten berufsbezeichnungen	mitarbeiter mit den wenigsten berufsbezeichnungen	die mitarbeiter mit den wenigsten berufsbezeichnungen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
kürzeste person	kürzeste person	kürzeste person	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string height ) ) ) )
personen unter 200 cm	personen kürzer als 200 cm	menschen, die kürzer als 200 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) ) ) )
person, die in weniger als 3 beziehungen war	person, die in weniger als 3 beziehungen war	person, die hat in weniger als 3 beziehungen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string <= ) ( number 2 ) ) )
menschen mit einer körpergröße von 180 cm am letzten tag des jahres 2004 finden	finden sie menschen, die 180 cm groß sind mit dem letzten tag im jahr 2004	finden sie menschen, die sind 180 cm hoch mit dem letzten tag im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )
alice geht zur braunen universität	ist alice geht an die braune universität	alice geht zur brown universität	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string university ) ) )
wer sind einige von alice freunde verbindungen	die einige von alices freunden verbindungen sind	wer sind einige von alices freundenverbindungen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
menschen, die single sind	personen, die alleinstehend sind	menschen, die single sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
geburtsort von studenten, die vor 2004 geboren wurden	geburtsort von studenten, die vor 2004 geboren wurden	geburtsort der studierenden, geboren vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche stadt ist der geburtsort von weniger als zwei menschen	welche stadt ist der geburtsort von weniger als zwei menschen	in welcher stadt ist der geburtsort von weniger als zwei personen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
was ist die berufsbezeichnung der person, die 180 cm groß ist	was ist die berufsbezeichnung der person, die 180 cm groß ist	was ist die jobtitel der person, die 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.job_title ) ( string ! type ) ) ( call SW.reverse ( string job_title ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
menschen mit geburtsdatum finden nicht im jahr 2004	finden sie personen mit geburtsdatum nicht im jahr 2004	finden sie personen mit geburtsdatum nicht in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string ! = ) ( date 2004 -1 -1 ) ) )
welche schüler haben größere enddaten als alice	welche schüler größere enddaten als alice haben	die schüler haben größere ende geht, als alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche personen sind freunde von mitarbeitern, die ein startdatum vor 2004 haben?	welche personen freunde von mitarbeitern sind, die ein startdatum vor 2004 haben	was für leute sind freunde von mitarbeitern, die ein startdatum vor dem jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finden sie 180 cm große und eingeloggte personen	finden sie personen, die 180 cm groß und eingeloggt sind	finden sie menschen, die sind 180 cm hoch und ist angemeldet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string logged_in ) ) )
schüler, die vor alices letztem tag anfangen	schüler, die vor dem letzten tag von alice beginnen	studierende, die ab bevor alice der letzte tag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche erwerbstätigen haben weniger als zwei berufsbezeichnungen?	welche erwerbstätigen weniger als zwei berufsbezeichnungen haben	die arbeitenden menschen haben weniger als zwei berufsbezeichnungen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde alle menschen mit zwei geschlechtern	finden sie alle menschen, die zwei geschlechter haben	finden alle menschen mit zwei geschlechtern	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( number 2 ) ) )
welche menschen haben das gleiche geburtsdatum wie diejenigen, deren größe 180 cm beträgt	welche menschen das gleiche geburtsdatum haben wie menschen mit einer höhe von 180 cm	welche personen haben den gleichen geburtstag wie diejenigen, deren höhe von 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
geburtsort von mitarbeitern, die vor 2005 beigetreten sind	geburtsort der mitarbeiter, die vor 2005	geburtsort von mitarbeitern, die sich vor 2005	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
alle 180 cm großen menschen, die 2004 gekündigt haben	alle 180 cm großen menschen, die 2004 aufgehört haben	alle 180 cm großen menschen, die im jahr 2004 beenden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )
welches geschlecht hat die studentin, die 2004 angefangen hat?	welches geschlecht ist die studentin, die 2004 begonnen hat	was ist das geschlecht der schüler, die im jahr 2004 begonnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welches datum hat die studentin alice verlassen?	welches datum hat student alice verlassen	welches datum haben studenten alice links	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) )
eine person mit einem freund, der kein hauptfach informatik ist	eine person mit einem freund, der kein informatikmajor ist	eine person mit einem freund whos nicht ein informatikdur	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen mit zwei oder mehr geburtsorten	menschen mit zwei oder mehr geburtsländern	menschen mit zwei oder mehr geburtshäuser	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string >= ) ( number 2 ) ) )
finden sie mitarbeiter, deren enddatum mit dem startdatum für student alice übereinstimmt	suchen von mitarbeitern, deren enddatum mit dem startdatum für die kursteilnehmeralice identisch ist	finden sie mitarbeiter, deren enddatum ist das gleiche wie das startdatum für alice schüler	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist der beziehungsstatus der schüler, die 2004 noch nicht angefangen haben?	was ist der beziehungsstatus der studenten, der 2004 nicht begonnen hat	was ist das schülerbeziehung der status, wer didnt start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
leute, die die schule an oder nach dem datum abgebrochen haben, als alice in die schule kam	personen, die die schule am oder nach dem datum beendet haben, haben mit der schule begonnen	leute, beendet die schule, die am oder nach dem datum, alice in die schule kam	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
ein mitarbeiter, der anfängt, wenn oder bevor alice endet	ein mitarbeiter, der beginnt, wenn oder bevor alice endet	ein mitarbeiter beginnt, wenn oder bevor alice endet	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher mitarbeiter hat ein startdatum am geburtsdatum von alice	welcher mitarbeiter ein startdatum am geburtsdatum von alice hat	welcher mitarbeiter hat ein startdatum auf alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde alle leute, die gerade online sind	finden sie alle personen, die derzeit online sind	finden sie alle personen, die derzeit online sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string logged_in ) ) )
welche mitarbeiterin endete zumindest bei alices geburtsdatum	welcher mitarbeiter mindestens am geburtsdatum von alice endete	was mitarbeiter endete zumindest auf alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
studenten, die die gleiche universität besuchen wie alice	studenten, die an die gleiche universität wie alice gehen	schüler, die auf dieselbe universität gehen wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche schüler haben ein startdatum, das nicht später als das enddatum von mitarbeiter alice ist	welche kursteilnehmer ein startdatum haben, das nicht später als das enddatum der mitarbeiteralice liegt	was die studierenden haben ein startdatum, das nicht später als das enddatum der mitarbeiter alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wie ist der beziehungsstatus von nicht mehr als zwei personen?	was ist der beziehungsstatus von nicht mehr als zwei personen	was ist der beziehungsstatus von nicht mehr als zwei personen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
finde studenten, deren enddatum gleich alices geburtstag ist	finden sie studenten, deren enddatum mit alices geburtstag gleichist	finden sie studenten, deren endedatum ist gleich um alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wo sind die leute, die vor 2004 aufgehört haben zu arbeiten?	wo waren die menschen, die vor 2004 nicht mehr arbeiteten, geboren	wo waren die menschen, die aufgehört zu arbeiten, bevor sie 2004 geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche person ist mit dem mitarbeiter befreundet, der kein softwareingenieur ist?	welche person mit dem mitarbeiter befreundet ist, der kein softwareingenieur ist	welche person befreundet ist mit dem arbeitnehmer, der nicht einen softwareingenieur	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche mitarbeiter am oder vor dem startdatum von alice angefangen haben	welche mitarbeiter am oder vor dem startdatum von alice begonnen haben	was die mitarbeiter begonnen, die am oder vor alices start datum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde alle leute, die mit leuten befreundet sind, die im jahr 2004 geboren wurden	finden sie alle menschen, die mit menschen im jahr 2004 geboren ist	finden sie alle personen, wer ist freund mit menschen, die 2004 geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )
wann wurde alice geboren?	wann alice geboren wurde	wann wurde alice geboren	( call SW.listValue ( call SW.getProperty en.person.alice ( string birthdate ) ) )
welche mitarbeiter haben zwei oder weniger berufsbezeichnungen	welche mitarbeiter zwei oder weniger berufsbezeichnungen haben	was die mitarbeiter haben zwei oder weniger jobtitel	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus eines mitarbeiters, der seinen job nach 2004 gekündigt hat?	wie ist der beziehungsstatus eines arbeitnehmers, der nach 2004 seinen arbeitsplatz aufgab	was ist der beziehungsstatus der mitarbeiter, beenden ihre arbeit nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche mitarbeiter haben nach 2004 angefangen zu arbeiten?	was mitarbeiter nach 2004 mit der arbeit begonnen haben	was die mitarbeiter mit der arbeit begonnen, die nach 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
nennen sie die person mit einer größe von 180 cm, die angemeldet ist	nennen sie die person mit einer höhe von 180 cm, die eingeloggt ist	name der person, die mit einer höhe von 180 cm, wer eingeloggt ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
finden sie mitarbeiter, die als softwareingenieure bezeichnet werden und 180 cm groß sind	finden sie mitarbeiter genannt softwareingenieure, die 180 cm groß sind	finden die mitarbeiter als softwareingenieure, die sind 180 cm hoch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) )
freund eines studenten, dessen enddatum nicht nach 2004 liegt	freund eines studenten, dessen enddatum nicht nach 2004 ist	freund der schüler, deren endedatum ist nicht nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
was ist das geschlecht der einzelnen menschen	was ist das geschlecht der einzelnen menschen	was ist das geschlecht des einzelnen menschen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )
der vor 2004 seinen abschluss gemacht hat	der vor 2004 seinen abschluss gemacht hat	studiert, bevor sie 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
leute, die nach alice in die schule gekommen sind, haben die schule abgebrochen	menschen, die die schule begannen, nachdem alice die schule beendet hatte	menschen, die mit der schule begonnen, nachdem alice beendet die schule	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie personen mit einem beziehungsstatus, den mehr als zwei personen haben	personen mit einem beziehungsstatus zu finden, die mehr als zwei personen	finden sie personen mit einer beziehung status, dass mehr als zwei menschen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
geburtsorte anderer mitarbeiter als softwareingenieure	geburtsorte von mitarbeitern mit einem anteil an softwareingenieuren	geburtsorte der mitarbeiter andere als die softwareingenieure	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die zwei oder weniger freunde haben	menschen, die zwei oder weniger freunde haben	menschen, die zwei oder weniger freunde	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
was ist das geschlecht der studenten, die nicht informatik studieren	was ist das geschlecht der studenten, die nicht informatik studieren	was ist das geschlecht des studenten, die nicht informatik studiert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wer ist nicht 180cm groß	wer nicht 180cm groß ist	wer nicht 180cm groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string ! = ) ( number 180 en.cm ) ) )
wie ist der beziehungsstatus der mitarbeiter ab 2004 oder später?	wie hoch ist der beziehungsstatus der arbeitnehmer ab 2004 oder später	was ist der beziehungsstatus der mitarbeiter, die ab 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
derzeit angemeldete personen, deren beziehungsstatus ledig ist	derzeit eingeloggte personen, deren beziehungsstatus	derzeit angemeldeten personen, deren beziehungsstatus single ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
wann hat alice aufgehört, für mckinsey zu arbeiten?	wann hat alice die arbeit für mckinsey beendet	wann hat alice beenden sie arbeiten bei mckinsey	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string employment_end_date ) ) )
nennen sie die einzelnen freunde	nennen sie die einzelnen personen freunde	nennen sie die einzelne personen, freunde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )
geburtsort der männchen finden	geburtsort von männchen finden	finden geburtsstätte der männer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )
wer geht zur braunen universität oder ucla	wer geht auf braune universität oder ucla	wer geht an die brown university oder der ucla	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.concat en.university.brown en.university.ucla ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die ihr studium vor alice abgeschlossen haben	menschen, die ihr studium abgeschlossen haben, bevor alice beitrat	menschen, die ihr studium vor alice kam	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche studenten haben ein enddatum, das nicht später als 2004 ist	welche studenten ein enddatum haben, das nicht später als 2004 ist	was die studierenden haben ein endedatum, das nicht später als 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde leute, die mit nicht mehr als zwei leuten befreundet sind	menschen finden, die mit nicht mehr als zwei personen befreundet sind	finden, menschen, die freunde sind, die mit nicht mehr als zwei personen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
finde freunde, die 180 cm groß sind wie alice	finden sie freunde, die 180 cm groß sind wie alice	finde freunde, die sind 180 cm hoch, wie alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string height ) ) ( string = ) en.person.alice ) )
zeig mir alle mitarbeiter, die vor alices letztem tag gehen	zeigen sie mir alle mitarbeiter, die vor alices letztem tag gehen	zeige mir alle mitarbeiter, die vor alice der letzte tag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen des am wenigsten gemeinsamen geschlechts	menschen mit dem am wenigsten gemeinsamen geschlecht	menschen der kleinste gemeinsame geschlecht	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string gender ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
finde jemanden mit zwei oder weniger geburtsorten	jemanden mit zwei oder weniger geburtsstätten finden	jemanden zu finden, mit zwei oder weniger geburtshäuser	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string <= ) ( number 2 ) ) )
menschen mit freunden, die seit 2004 nicht mehr arbeiten	personen, die freunde haben, die 2004 nicht mit der arbeit begonnen haben	menschen, die freunde haben, die nicht mit der arbeit beginnen im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche schüler haben ein enddatum, das nicht vor dem startdatum von alice liegt	welche kursteilnehmer ein enddatum haben, das nicht vor dem startdatum von alice liegt	was die studierenden haben ein enddatum, das nicht früher als der starttermin von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
der geburtsort eines studenten, der vor oder während des jahres 2004 begann	geburtsort eines studenten, der vor oder während des jahres 2004 beginnt	der geburtsort des studenten ab, die vor oder während 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
nennen sie einen mann, der mit alice befreundet ist	nennen sie einen mann, der mit alice befreundet ist	namen einen mann, der ist befreundet mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string friend ) ( string = ) en.person.alice ) )
person, die zwei oder mehr freunde hat	person, die zwei oder mehr freunde hat	person, die zwei oder mehr freunde	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
menschen, die ihre arbeit in oder vor 2004 oder in oder vor 2010 begonnen haben	personen, die in oder vor 2004 oder vor 2010 mit der arbeit begonnen haben	menschen, die mit der arbeit begonnen, im oder vor dem jahr 2004 oder im oder vor dem jahr 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie mitarbeiter, die im jahr 2004 oder früher begonnen haben	mitarbeiter zu finden, die 2004 oder vor	finden sie mitarbeiter, die im jahr 2004 begonnene oder vor	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist die geburtsstadt eines studenten, der 2004 noch nicht angefangen hat?	was ist die geburtsstadt eines studenten, der 2004 nicht gestartet ist?	was ist die geburtsstadt von studenten, die didnt start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie geburtsstädte für studenten, deren startdatum nicht später als 2004 liegt	geburtsstädte für studenten finden, die spätestens 2004 ein startdatum haben	finden geburt städte für studenten, die ein startdatum nicht später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
nennen sie einen freund der person, die 180 cm groß ist	nennen sie einen freund der person, die 180 cm groß ist	name von einem freund der person, die 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
finden sie mitarbeiter, deren enddatum nicht später als das startdatum von mitarbeiter alice liegt	suchen sie mitarbeiter, deren enddatum nicht später als das startdatum der mitarbeiteralice liegt	mitarbeiter suchen, die haben ein endedatum, das nicht später als das startdatum des mitarbeiters alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
student, der nach 2004 beigetreten ist	student, der nach 2004 beitrat	schüler, die 2004 oder später beigetreten sind	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher mitarbeiter kündigte vor alice	welcher mitarbeiter gekündigt hat, bevor alice	die mitarbeiter beenden, bevor alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
ein mitarbeiter, der vor der geburt von alice anfing	ein mitarbeiter, der vor der geburt von alice beginnt	ein mitarbeiter ab, bevor sie geboren wurde alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist in new york oder peking geboren	wer in new york oder beijing geboren ist	wer ist geboren in new york oder peking	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.concat en.city.new_york en.city.bejing ) ) )
was ist das geschlecht der menschen, die eine universität besuchen, aber braun	was ist das geschlecht der menschen, die eine universität besuchen, aber braun	was ist das geschlecht der menschen, die teilnahme an irgendeiner universität, sondern braun	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche mitarbeiter am letzten tag waren am selben tag wie alices abschlusstag	welche mitarbeiter am letzten tag der gleiche tag wie alices abschlusstag war	die mitarbeiter letzte tag war der gleiche tag, wie alice ' s graduation day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer hat zwei verschiedene beziehungsstatus	der zwei unterschiedliche beziehungsstatus hat	wer hat zwei verschiedene beziehung status	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( number 2 ) ) )
wo sind die menschen geboren, die vor 2004 eingeschult wurden?	wo waren die menschen, die in oder vor 2004 mit der schule begannen, geboren	wo waren die menschen, die in die schule kamen, in oder vor 2004 geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
für wen hat alice gearbeitet, als sie 2004 ihren job gekündigt hat?	für die sie alice gearbeitet hat, als sie 2004 ihren job aufgab	wer hat alice die arbeit wenn sie ihren job beenden, 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employer ) ) )
welchen beziehungsstatus beanspruchen mehr als zwei personen?	welcher beziehungsstatus von mehr als zwei personen beansprucht wird	welche beziehung status wird behauptet, durch mehr als zwei personen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
menschen, die mindestens so groß sind wie alice	menschen, die mindestens so groß sind wie alice	menschen, die mindestens so groß ist wie alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )
wie ist der beziehungsstatus dieser beiden personen?	wie ist der beziehungsstatus dieser beiden personen	was ist der beziehungsstatus der beiden menschen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
finden sie personen mit dem gleichen geburtsdatum wie das enddatum der beschäftigung von alice	personen mit geburtsdatum finden, die mit dem arbeitsenddatum von alice identisch sind	finden sie personen mit geburtsdatum gleichen wie die beschäftigung enddatum der alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) )
freunde von menschen finden, die nach 2004 ihren job gekündigt haben	freunde von menschen finden, die nach 2004 ihren job aufgeben	freunde finden von menschen, die ihre jobs aufgegeben, nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
student, der nach alice begann	student, der nach alice begann	student, begann nach alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
ein freund eines nichtinformatikstudenten	ein freund eines nichtcomputerwissenschaftlichen studenten	ein freund von einem noncomputer science student	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wer hat freunde, die 180 cm groß sind	wer hat freunde, die 180 cm groß sind	wer hat freunde, die sind 180 cm hoch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
wie ist der beziehungsstatus von studierenden ab 2004?	wie hoch ist der beziehungsstatus der studierenden ab 2004 und nach	was ist beziehung, status der studierenden, die 2004 beginnt und nach der	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finde mich alle menschen, die 180 cm groß sind und am selben ort geboren wurden wie alice	finden sie mich alle menschen, die 180 cm groß sind und am selben ort wie alice geboren wurden	finden mich alle menschen, die sind 180 cm hoch und geboren wurden, in der gleichen stelle, wie alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) )
in welcher stadt wurden alices freunde geboren	welche stadt alices freunde waren, die in	die stadt waren alices freunde geboren in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
wer ist mit studenten befreundet, die ein enddatum von 2004 haben?	wer ist mit studenten befreundet, die ein enddatum von 2004 haben	wer ist befreundet mit studenten, ein endedatum von 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wo wurde alice nicht geboren?	wo wurde alice nicht geboren	wo war alice nicht geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string ! = ) en.person.alice ) )
welcher student hat nach 2004 angefangen?	welcher student nach 2004 begann	die studenten fingen an, die nach 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was die schüler nach oder zur gleichen zeit wie alice begannen	was die schüler nach oder gleichzeitig mit alice begonnen haben	was die schüler begannen, nach oder zur gleichen zeit wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welches studentenenddatum ist größer als 2010?	das enddatum der studierenden größer ist als 2010	die schüler enddatum ist größer als 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
die mitarbeiterin hat den tag verlassen, an dem alice anfing	mitarbeiter verließ den tag alice begann	mitarbeiter links der tag begann alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
alices freundin wurde in new york geboren	alices freund geboren in new york	alice ' s freund in new york geboren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string birthplace ) ( string = ) en.city.new_york ) )
was studenten zwischen 2004 und 2010 angefangen haben	was studenten zwischen 2004 und 2010 begann	was die schüler begannen, zwischen 2004 und 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche person ist online	welche person online ist	was die person online ist	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string logged_in ) ) )
welcher student ging zuerst	welcher student zuerst gegangen ist	die studentische linke seite zuerst	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
woher kamen menschen, die ihre arbeit vor 2004 begonnen haben?	wo menschen, die vor 2004 mit der arbeit begonnen haben, geboren	wo waren die menschen, die mit der arbeit begonnen, die vor 2004 geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welches geschlecht haben personen, die im oder nach dem jahr 2004 eingeschult wurden?	welches geschlecht sind menschen, die in oder nach 2004 mit der schule begonnen haben?	welches geschlecht sind die menschen, die in die schule kamen im jahr 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wie ist der beziehungsstatus des mitarbeiters, der im jahr 2004 angefangen hat?	wie ist der beziehungsstatus des mitarbeiters, der 2004 begonnen hat	was ist der beziehungsstatus der mitarbeiter, die im jahr 2004 begonnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche person hat zwei freunde	welche person zwei freunde hat	welche person hat zwei freunde	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
freunde von studenten, die in oder nach 2004 beginnen	freunde von studenten ab 2004	freunde von studierenden, beginnend im jahr 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
geburtsort von studenten, die nicht an der braunen universität studieren	geburtsort von studenten, die nicht an der braunen universität studieren	geburtsort von studenten, die nicht das studium an der brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen, die mit alice und mann befreundet sind	menschen, die mit alice und männlich befreundet sind	menschen, die freunde sind mit alice und männlich	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
in welcher stadt wurden die meisten menschen geboren?	welche stadt die meisten menschen geboren wurden	in welcher stadt waren die meisten menschen geboren	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string birthplace ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
mitarbeiter mit der gleichen berufsbezeichnung wie alice	mitarbeiter mit der gleichen berufsbezeichnung wie alice	mitarbeiter mit demselben jobtitel, als alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
angestellter, dessen berufsbezeichnung nicht softwareingenieur ist	mitarbeiter, dessen berufsbezeichnung kein softwareingenieur ist	mitarbeiter, deren jobtitel ist nicht software ingenieur	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was war alices berufsbezeichnung bei mckinsey?	was war alices berufsbezeichnung während der arbeit für mckinsey	was war alice ' s jobtitel während der arbeit für mckinsey	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string job_title ) ) )
suche nach schülern, deren letzter tag der gleiche oder ein späterer als der von alice ist	finden sie studenten, deren letzter tag derselbe oder später ist als alices	finden sie studenten, deren letzten tag ist der gleiche oder später als alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist alice kündigungstermin	was ist alices kündigungsdatum	was ist alice beendigung datum	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) )
in welcher stadt wurden weniger als zwei menschen geboren?	welche stadt weniger als zwei menschen waren, die in	in welcher stadt waren weniger als zwei personen geboren in	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
welchen job hat alice im jahr 2004 verlassen?	welchen job hat alice im jahr 2004 verlassen	welche aufgabe hat alice verlassen, im jahr 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string job_title ) ) )
person mit gleichem geburtsdatum der person mit 180 cm körpergröße	person mit gleichem geburtsdatum der person mit 180 cm höhe	person mit gleichem geburtsdatum der person mit 180 cm höhe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
freunde finden, die nicht in der informatik sind	finden sie freunde, die nicht in der informatik sind	finde freunde, die nicht in computer science	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
was leute mit studenten befreundet sind, die ein startdatum haben, das nicht später als 2004 liegt	welche menschen mit studenten befreundet sind, die spätestens 2004 ein startdatum haben	was für menschen sind freunde mit studenten, die ein startdatum nicht später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
die größe der person alice oder größer	person alice höhe oder größer	person alice die höhe oder größer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )
welcher arbeiter am oder vor dem tag, an dem student alice anfing, abgereist ist	welcher arbeitnehmer am oder vor dem tag, an dem die studentenalice begonnen hat,	die workerlinks, die am oder vor dem tag, student alice begann	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist am oder nach dem startdatum des mitarbeiters alice geboren	der am oder nach dem startdatum der mitarbeiteralice geboren wird	wer ist geboren am oder nach dem startdatum des mitarbeiteralice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) )
geburtsstadt von nicht mehr als zwei personen	geburtsstadt von nicht mehr als zwei personen	geburtsstadt von nicht mehr als zwei personen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
finden sie alle personen mit dem gleichen beziehungsstatus wie die 180 cm große person	finden sie alle personen mit beziehungsstatus, die die gleiche wie die person ist, die 180 cm groß ist	finden alle menschen mit einer beziehung status ist der gleiche wie die person, die 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
mitarbeiter, die zu ende gehen, wenn alice anfängt	mitarbeiter, die fertig sind, wenn alice beginnt	mitarbeiter, die fertig stellen, wenn alice beginnt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
ein student, der am selben tag wie mitarbeiterin alice angefangen hat	ein student, der am selben tag wie mitarbeiter alice begann	ein student, begann am selben tag, als mitarbeiter von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde mich alle menschen die 180 cm groß sind und gerade online sind	finden sie mich alle menschen, die 180 cm groß und derzeit online sind	finden mich alle menschen 180 cm groß und derzeit online	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string logged_in ) ) )
wer ist der freund des mitarbeiters, dessen startdatum mindestens 2005 ist?	der freund des mitarbeiters ist, dessen startdatum mindestens 2005 ist	wer ist der freund des mitarbeiters, dessen startdatum ist mindestens 2005	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wie ist der status der mitarbeiterbeziehung, die nicht im jahr 2004 endete?	wie sieht der beziehungsstatus der arbeitnehmer aus, der 2004 nicht endete	was ist das mitarbeiterbeziehungstatus, der nicht zu ende im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche mitarbeiter sind nicht bei mckinsey angestellt	welche mitarbeiter nicht bei mckinsey beschäftigt sind	die mitarbeiter sind nicht erfüllungsgehilfen von mckinsey	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
entweder 2004 oder 2010	entweder 2004 oder 2010	entweder 2004 oder 2010	( call SW.listValue ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) )
finden sie mitarbeiter mit der größten anzahl von arbeitgebern	mitarbeiter zu finden, die die meisten arbeitgeber haben	finden sie mitarbeiter, die den größten betrag, den der arbeitgeber	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die weniger als zwei freunde haben	personen, die weniger als zwei freunde haben	menschen, die weniger als zwei freunde	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
menschen, die mit oder vor alice studiert haben	personen, die ein studium mit oder vor alice abgeschlossen haben	menschen, die abgeschlossene berufsausbildung vor oder mit alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
nennen sie einen freund des mitarbeiters, der seine arbeit spätestens 2004 aufgenommen hat	nennen sie einen freund des mitarbeiters, der spätestens 2004 mit der arbeit begonnen hat	name eines freundes von dem mitarbeiter, der begann spätestens 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welcher student hat nach der geburt von alice angefangen?	welcher student nach der geburt von alice begann	die studenten fingen an, nachdem alice geboren wurde	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde einen schüler mit dem neuesten startdatum	suche student mit dem neuesten startdatum	finden sie studenten, die mit der neuesten startdatum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
person geboren in new york im jahr 2004	person geboren in new york im jahr 2004	person geboren in new york im jahre 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string birthplace ) ( string = ) en.city.new_york ) )
wer ist ein softwareingenieur, der 180 cm ist	der ist ein softwareingenieur, der 180 cm groß ist	wer ist ein softwareingenieur, ist 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) )
menschen, die nicht alice's freund sind	personen, die nicht alices freund sind	menschen, die nicht alices freund	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string ! = ) en.person.alice ) )
studenten, die vor alice ihren abschluss gemacht hatten, wurden geboren	studenten, die ihren abschluss gemacht haben, bevor alice geboren wurde	studierende, graduierte, bevor sie geboren wurde alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was schüler begann, bevor schüler alice tat	was student begann, bevor student alice tat	welche studentin begann vor studentin alice hat	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
person, die einen befreundeten mitarbeiter hat, der 2004 mit der arbeit beginnt	person, die einen mitarbeiterfreund hat, der 2004 mit der arbeit beginnt	person, die hat ein mitarbeiter freund, der anfängt zu arbeiten, die von 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welches geschlecht hat der arbeitnehmer, dessen enddatum nicht 2004 ist?	welches geschlecht ist der arbeitnehmer, dessen enddatum nicht 2004 ist	was ist das geschlecht der mitarbeiter, deren endedatum ist nicht 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wie ist der beziehungsstatus eines mitarbeiters, der seit 2004 beschäftigt ist?	wie hoch ist der beziehungsstatus eines mitarbeiters, der seit 2004 tätig ist?	was ist der familienstand eines arbeitnehmers, der gearbeitet hat, seit 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wer ist alice befreundet mit wem ist 180 cm groß	wer ist alice freundet mit, wer ist 180 cm groß	wer ist alice freunde mit, die ist 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
freunde von menschen, die ihr studium nach 2003 abgeschlossen haben	freunde von menschen, die ihr studium nach 2003 abgeschlossen haben	freunde von menschen, die ihr studium nach 2003	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finde mich die schülerin, die am selben tag mit alices abreise angefangen hat	finden sie mich die studentin, die am selben tag wie alice s abreise begonnen	mich finden die schüler, begann am selben tag, als alice sich auf die abreise	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
stadt, in der die meisten personen geboren wurden	stadt, dass die meisten personen geboren	stadt, die die meisten anzahl von personen, geboren	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string birthplace ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
student, dessen studienfach nicht informatik ist	student, dessen studienbereich nicht informatik ist	schüler, deren gebiet der studie ist nicht informatik	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde mich alle leute die in new york geboren wurden die gerade online sind	finden sie mich alle menschen, die in new york geboren wurden, die derzeit online sind	finden mich alle menschen, die geboren wurden, in new york, die derzeit online sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string logged_in ) ) )
wie ist der beziehungsstatus von menschen, die nach 2004 ihre arbeit aufgenommen haben?	wie hoch ist der beziehungsstatus von personen, die nach 2004 mit der arbeit begonnen haben?	was ist der beziehungsstatus von menschen, die arbeiten begonnen, die nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wer studiert informatik oder geschichte?	die studenten, die informatik oder geschichte studieren	wer sind die studierende der informatik oder geschichte	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.concat en.field.computer_science en.field.history ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
studentin, die vor alice ihren abschluss gemacht hat	studentin, die ihren abschluss machte, bevor alice ihren job begann	student studiert, bevor alice begann ihr job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde eine person mit weniger als zwei freunden	eine person mit weniger als zwei freunden finden	finden sie eine person mit weniger als zwei freunde	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
wie viele unternehmen gibt es?	wie viele unternehmen es gibt	wie viele unternehmen gibt es	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.company ) ( string ! type ) ) ) )
wer sind die mitarbeiter, die vor 2004 gekündigt haben?	die mitarbeiter sind, die vor 2004 gekündigt haben	wer sind die mitarbeiter, die beenden, bevor 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist der beziehungsstatus von studenten, die nicht informatik studiert haben?	was ist der beziehungsstatus von studenten, die keine informatik studiert haben	was ist der beziehungsstatus der studierenden, die nicht informatik studieren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen, die freunde von bob oder alice sind	personen, die freunde von bob oder alice sind	menschen, die freunde von bob oder alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
menschen, die die schule abgebrochen haben, als alice geboren wurde oder früher	menschen, die die schule beendeten, als alice geboren wurde oder	menschen, die nicht mehr der schule als alice geboren wurde oder vor	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist das geschlecht von menschen, die etwas anderes als informatik studieren?	was ist das geschlecht von menschen, die etwas anderes als informatik studieren	was ist das geschlecht der menschen studieren etwas anderes als informatik	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche mitarbeiter waren zuletzt 2004 oder 2010 beschäftigt?	welche mitarbeiter am letzten tag 2004 oder 2010 waren	die mitarbeiter letzte tag war im jahr 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
geburtsorte von arbeitnehmern, die im jahr 2004 nicht abgeschlossen haben	geburtshäuser von arbeitnehmern, die 2004 nicht fertig wurden	geburtsorte der mitarbeiter endet nicht im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
leute, die aufhörten zu arbeiten, als alice die schule abbrach oder danach	menschen, die nicht mehr arbeiteten, wenn alice die schule beendete oder	menschen, die aufgehört zu arbeiten, als alice aufhörte schule oder nach	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus von menschen, die in new york geboren wurden?	was sind die beziehungsstatus von menschen, die in new york geboren sind	was sind die beziehung der status von menschen in new york geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )
student, der vor alice endet	student, der vor alice beendet	schüler, die endet, bevor alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie personen, die mit mitarbeitern befreundet sind, deren startdatum nach 2004 liegt	personen finden, die mit mitarbeitern befreundet sind, deren startdatum später als 2004 liegt	finden sie menschen, die freunde sind, mit mitarbeitern, deren startdatum ist später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
der mit alice befreundet ist und 180 cm groß ist	wer ist mit alice befreundet und ist 180 cm groß	wer ist befreundet mit alice und ist 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
was ist das geschlecht von studenten mit einem startdatum, das nicht dem von 2004 entspricht?	was ist das geschlecht der studierenden mit einem startdatum, das nicht mit 2004 identisch ist	was ist das geschlecht der schüler mit einem startdatum, das ist nicht das gleiche wie 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
arbeitnehmer mit einem arbeitgeber finden	mitarbeiter mit einem arbeitgeber finden	finden mitarbeiter mit einem arbeitgeber	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
alice, deren studienfach informatik ist, endete an welchem datum	alice, deren studienbereich informatik ist, endete an welchem datum	alice, deren studienrichtung ist informatik, endete an welchem datum	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string education_end_date ) ) )
geschlecht eines mitarbeiters, der während oder vor 2004 endet	geschlecht eines mitarbeiters, der während oder vor 2004 endet	geschlecht des arbeitnehmers endet, die sich während oder vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche mitarbeiter haben eine andere berufsbezeichnung als softwareingenieur?	welche mitarbeiter eine andere berufsbezeichnung als softwareingenieur haben	welche mitarbeiter haben einen jobtitel, anderem als softwareingenieur	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie mitarbeiter mit dem gleichen enddatum wie alice	mitarbeiter finden, die ein enddatum haben, die mit alice identisch sind	finden sie mitarbeiter, die ein end datum das gleiche wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
beziehungsstatus von mindestens zwei personen	beziehungsstatus von mindestens zwei personen	familienstand von mindestens zwei personen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
welche person wurde am letzten tag der beschäftigung von alice geboren	welche person am letzten tag der beschäftigung von alice geboren wurde	welche person geboren wurde, am letzten tag von "alice' s beschäftigung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) )
geburtsort von mitarbeitern, die im oder nach dem jahr 2004 angefangen haben	geburtsort von arbeitnehmern, die in oder nach 2004	geburtsort von mitarbeitern, die begann im jahr 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die vor alice zu arbeiten begannen	personen, die vor alice begonnen haben zu arbeiten	menschen, die arbeiten begonnen, bevor alice hast	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist das geschlecht von studenten, die nach 2004 ihren abschluss machen?	was ist das geschlecht von studenten, die nach 2004 ihren abschluss machen	was ist das geschlecht des studenten, die ihren abschluss nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
die zur gleichen zeit oder nach alice gekündigt haben	die zur gleichen zeit oder nach alice beendet haben	wer zur selben zeit zu beenden oder nach alice hast	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist das geschlecht von alice's freundin?	was ist das geschlecht von alices freund	was ist das geschlecht von "alice' s freund	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
finden sie menschen, die in new york oder peking geboren sind	finden sie menschen geboren in new york oder beijing	finden sie menschen, geboren in new york oder peking	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.concat en.city.new_york en.city.bejing ) ) )
beziehungsstatus des studenten, dessen enddatum vor 2004 liegt	beziehungsstatus des studierenden, dessen enddatum vor 2004 liegt	beziehung status der schüler, deren enddatum vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche universität wird alice im jahr 2004 beenden	was universität wird alice beenden im jahr 2004	was hochschule alicefinish in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string university ) ) )
alices freundin ist 180 cm groß	alices freund, der 180 cm groß ist	alice ' s freund, der ist 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
menschen, die vor alice angefangen haben zu arbeiten, kündigten ihren job	menschen, die mit der arbeit begonnen haben, bevor alice ihren job aufgab	menschen, die arbeiten begonnen, bevor alice ihren job beenden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
schüler, die nach alices erstem arbeitstag ihren abschluss gemacht haben	studenten, die nach alices erstem arbeitstag ihren abschluss gemacht haben	schüler, die abgestuft nach alice ' s erster arbeitstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist der beziehungsstatus von studenten mit anderen enddaten als 2004?	wie hoch ist der beziehungsstatus von studierenden mit anderen enddaten als 2004	was ist der familienstand der studierenden mit enddatum andere als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
geburtsort des arbeitnehmers, dessen startdatum nach 2004 liegt	geburtsstadt des mitarbeiters, dessen startdatum nach 2004 liegt	geburtsstadt des mitarbeiters, dessen startdatum ist nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
schüler, dessen startdatum nicht nach dem startdatum von mitarbeiter alice liegt	student, dessen startdatum nicht nach dem startdatum der mitarbeiteralice liegt	schüler, deren startdatum ist nicht nach dem startdatum von alice mitarbeiter	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher student hat den frühesten starttermin?	welcher schüler hat das früheste startdatum	was student hast den frühesten starttermin	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
geburtsorte von menschen, die in anderen bereichen als der informatik studiert haben	geburtsorte von menschen, die in anderen bereichen als informatik studiert haben	geburtsorte von menschen, die studiert haben, in anderen bereichen als der informatik	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
was ist die geburtsstadt von studenten, deren enddatum unter 2004 liegt?	was ist die geburtsstadt von studenten, deren enddatum weniger als 2004 ist	was ist die geburtsstadt von studenten, deren endedatum ist weniger als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie geburtsorte von studenten, die keine braune universität besuchen	geburtsorte von studenten finden, die keine braune universität besuchen	finden geburtsorte der schüler nicht an der brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen, die am selben tag geboren werden, haben ihre arbeit aufgenommen	menschen, die am selben tag alice geboren werden, begann ihren job	menschen, die am selben tag geboren alice begann ihr job	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) )
was ist der geburtsort des mitarbeiters, der nach 2004 gegangen ist?	was ist der geburtsort des arbeitnehmers, der nach 2004 ausschied	was ist der geburtsort des arbeitnehmers, die linke, die nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
leute mit nur zwei freunden	menschen mit nur zwei freunden	leute mit nur zwei freunden	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
finde die studentin, die an alices geburtstag ihren abschluss gemacht hat	finden sie den studenten, der an alices geburtstag abgeschlossen hat	finden sie die studenten, graduierte auf alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
jeder freund von jemandem, der in new york geboren wurde	jeder freund von jemandem geboren in new york	jeder freund von jedermann in new york geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )
wann hat alice angefangen, für mckinsey zu arbeiten?	wann hat alice angefangen, für mckinsey zu arbeiten	wann hat alice anfangen zu arbeiten für mckinsey	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string employment_start_date ) ) )
beziehungsstatus von studenten, die keine braune universität besuchen	beziehungsstatus von studenten, die nicht an die braune universität gehen	beziehung, status der studierenden, die nicht gehen, um brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wie viele mitarbeiter teilen die berufsbezeichnung von alice	wie viele mitarbeiter die berufsbezeichnung von alice teilen	wie viele mitarbeiter teilen sich alice den jobtitel	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
der am ersten schultag von alice geboren wurde	der am ersten schultag von alice geboren wurde	geboren wurde alice ' s erster tag in der schule	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) )
finde freunde von studenten mit einem anderen startdatum als 2004	freunde von studenten mit anderen startdaten als 2004 finden	freunde finden von studenten mit startdaten andere als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche person ist mit der eingeloggten person befreundet?	welche person mit der eingeloggten person befreundet ist	welche person befreundet ist mit der person, die sich eingeloggt	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
welche person wurde nicht in new york geboren	welche person nicht in new york geboren wurde	welche person war nicht in new york geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string ! = ) en.city.new_york ) )
finde alle, die entweder ledig oder verheiratet sind	finden sie alle, die entweder ledig oder verheiratet sind	finden alle, die entweder single oder verheiratet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( call SW.concat en.relationship_status.single en.relationship_status.married ) ) )
finde menschen, die einen geburtsort in new york haben, und ihre freunde	menschen finden, die einen geburtsort von new york und ihre freunde haben	menschen, die einen geburtsort von new york und ihre freunde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )
die sind alices männliche freunde	die männlichen freunde von alice sind	wer sind alice männliche freunde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
angestellter mit geringster berufserfahrung	mitarbeiter mit kleinster auftragshistorie	mitarbeiters mit der kleinsten jobgeschichte	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, der maximal 2 berufsbezeichnungen hat	mitarbeiter mit maximal 2 berufsbezeichnungen	mitarbeiter hat maximal 2 berufsbezeichnungen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus von mitarbeitern, die vor 2004 gekündigt haben?	wie hoch ist der beziehungsstatus von arbeitnehmern, die vor 2004 gekündigt haben?	was ist der beziehungsstatus der mitarbeiter, die beenden, bevor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
leute, die die schule abgebrochen haben, als alice aufgehört hat zu arbeiten oder danach	menschen, die die schule beendeten, wenn alice aufhörte zu arbeiten oder nach	menschen, die nicht mehr der schule, wenn alice nicht mehr funktioniert oder nach	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher mitarbeiter hat einen arbeitgeber, der entweder mckinsey oder google ist	welcher mitarbeiter einen arbeitgeber hat, der entweder mckinsey oder google ist	was ein mitarbeiter zu einem arbeitgeber, der ist entweder mckinsey oder google	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string = ) ( call SW.concat en.company.mckinsey en.company.google ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche mitarbeiter am letzten tag waren nicht n 2004	welche mitarbeiter am letzten tag nicht n 2004 waren	die mitarbeiter letzte tag war nicht n 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist alice freund in new york geboren	wer ist alice freund geboren in new york	wer ist alice freund in new york geboren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string birthplace ) ( string = ) en.city.new_york ) )
menschen, die nach alices arbeitsende zu ihrem studium kamen, kündigten ihren job	menschen, die ihr studium nach alice beendet ihren job	menschen, die sich ihr studium nach alice ihren job beenden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher student hat am frühesten angefangen?	welcher student am frühesten begonnen hat	die studenten fingen an zu frühesten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die 180 cm groß sind und ihren job im jahr 2004 verlassen haben	menschen, die 180 cm groß sind und 2004 ihren job verlassen haben	menschen, die sind 180 cm hoch und verließ ihren job im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )
student, dessen startdatum nicht vor dem startdatum von student alice liegt	student, dessen startdatum nicht vor dem startdatum der studentenalice liegt	schüler, deren startdatum nicht vor beginn der schülerin alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher student besucht keine braune universität?	welcher student nicht die braune universität besucht	welcher student hat nicht an der brown university	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher mitarbeiter endete nicht größer als alices	welcher mitarbeiter nicht größer als alice es beendet hat	die mitarbeiter endete nicht größer als alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
ein mitarbeiter, der vor der geburt von alice endete	ein mitarbeiter endet, bevor alice geboren wurde	ein mitarbeiter beenden, bevor sie geboren wurde alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche person ist 200 cm oder kürzer	welche person 200 cm oder kürzer ist	welche person ist 200 cm oder kürzer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) ) ) )
suche nach schülern mit einem startdatum, das dem enddatum von schülerin alice entspricht	suchen von schülern, deren startdatum dem enddatum der schüleralice entspricht	finden studenten, die ein startdatum gleich student alice ' s enddatum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
entweder nummer des feldes	entweder anzahl der felde	entweder anzahl der felder	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.field ) ( string ! type ) ) ) )
geburtsort von studenten, die vor 2004 beginnen	geburtsort von studenten, die vor 2004 beginnen	geburtsort der studierenden, die vor dem jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
geburtsstadt aller studierenden, die vor 2004 angefangen haben	geburtsstadt aller studenten, die vor 2004 begonnen haben	geburtsstadt von allen studierenden, die früher begonnen als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
mitarbeiter, die softwareentwickler oder programmmanager sind	mitarbeiter, die softwareingenieure oder programmmanager sind	mitarbeiter sind softwareingenieure oder programmmanager	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.concat en.job_title.software_engineer en.job_title.program_manager ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
leute, die nach alice in die schule kamen, hörten auf zu arbeiten	menschen, die die schule begannen, nachdem alice aufgehört hatte zu arbeiten	menschen, die mit der schule begonnen, nachdem alice aufgehört zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
die mitarbeiter alice als softwareingenieur	die alice als softwareingenieur beschäftigt	die alice mitarbeiter als softwareingenieur	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) ( string employer ) ) )
suche nach schülern mit dem neuesten startdatum	finden sie studenten mit dem neuesten startdatum	finden studenten, der späteste starttermin	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
suche nach schülern mit dem gleichen startdatum wie mitarbeiter alice	finden sie studenten, deren startdatum mit dem von mitarbeitern identisch ist	finden studenten, die ein startdatum das gleiche wie alice mitarbeiter	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
beziehungsstatus von alice freunde	beziehungsstatus von alices freunden	beziehungsstatus von "alice' s freunde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
schüler, die die schule am tag des beginns von alice beendet hatten, arbeiteten	schüler, die die schule am tag beendet enden alice begann zu arbeiten	schüler die am ende der schule den tag in alice zu arbeiten begonnen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer ist befreundet mit dem mitarbeiter, der später als 2004 begann	der mit dem mitarbeiter befreundet ist, der später als 2004 begonnen hat	wer ist freunde mit dem mitarbeiter, der begann, die später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welcher mitarbeiter hat ein startdatum nach dem enddatum von alice	welcher mitarbeiter ein startdatum nach dem enddatum von alice hat	welche mitarbeiter hat ein startdatum später als das enddatum von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die mit studenten befreundet sind, die keine braune universität besuchen	menschen, die mit studenten befreundet sind, die keine braune universität besuchen	menschen, die freunde sind mit studenten, die nicht an der brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
geburtsorte von menschen, die vor 2004 studiert haben	geburtsorte von studien, die vor 2004 studiennah waren	geburtsorte der menschen schlossen sich studien vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welcher mitarbeiter hat am oder nach alices geburtsdatum angefangen	welcher mitarbeiter am oder nach dem geburtsdatum von alice begonnen hat	was mitarbeiter begonnen, die am oder nach alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher mitarbeiter hat nach alice angefangen	welcher mitarbeiter nach alice gestartet wurde	die mitarbeiter begannen nach alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wann hat alice ihren job angefangen	wann hat alice ihren job begonnen	wann hat alice dann ihren job	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) )
welche personen sind mit mitarbeitern befreundet, deren letzter tag vor 2004 lag?	welche menschen mit mitarbeitern befreundet sind, deren letzter tag vor 2004 war	die menschen sind freunde mit den mitarbeitern, deren letzten tag war vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wer ist mit jemandem befreundet, dessen geburtstag 2004 ist?	wer mit jemandem befreundet ist, dessen geburtsdatum 2004 ist	wer ist befreundet mit jemandem, dessen geburtsdatum ist 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )
studenten, die mit alice abschließen	studenten, die mit alice abschließen	schüler schlichten mit alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter, die in oder nach 2004 beginnen	mitarbeiter ab 2004	mitarbeiter, beginnend im jahr 2004 oder später	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
suche nach studenten, deren universität entweder braun oder ucla ist	studenten finden, deren universität entweder braune universität oder ucla ist	finden sie studenten, deren universität ist entweder der brown university oder der ucla	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.concat en.university.brown en.university.ucla ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer ist das gleiche geschlecht wie die 180 cm person	der das gleiche geschlecht wie die 180 cm person ist	wer das gleiche geschlecht haben wie der 180 cm große person	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
mitarbeiter ab alices geburtstag	mitarbeiter ab alices geburtstag	mitarbeiter ab alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
entweder new york oder peking	entweder new york oder beijing	entweder in new york oder peking	( call SW.listValue ( call SW.concat en.city.new_york en.city.bejing ) )
finden sie mitarbeiter, deren enddatum vor dem startdatum von mitarbeiter alice liegt	suchen von mitarbeitern, die ein enddatum vor dem startdatum von employee alice haben	finden sie mitarbeiter, die ein endedatum älter als mitarbeiter von alice startdatum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
nennen sie eine person, die 180 cm groß und genauso groß ist wie alice	nennen sie eine person, die 180 cm groß ist, die gleiche höhe wie alice	nennen sie eine person, die 180 cm hoch, die gleiche höhe wie alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string height ) ) ( string = ) en.person.alice ) )
wer ist der angestellte?	wer ist der mitarbeiter	wer ist der mitarbeiter	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie lautet die berufsbezeichnung von alice?	was ist alices berufsbezeichnung	was ist alice ' s jobtitel	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) )
menschen, die anfingen zu arbeiten, als alice aufhörte zu arbeiten oder danach	personen, die mit der arbeit begonnen haben, wenn alice aufhörte zu arbeiten oder nach	menschen, die begann, als alice hörte auf zu arbeiten, oder nach	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
städte, in denen alice nicht geboren wurde	städte, in denen alice nicht geboren wurde	städte, die alice war nicht geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string ! = ) en.person.alice ) )
was die mitarbeiter übrig hatten, als alice anfing	was mitarbeiter übrig haben, als alice begann	was den mitarbeitern bleibt, wenn alice begann	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
der am selben ort geboren wurde wie die 180 cm große person	der am selben ort wie die 180 cm große person geboren wurde	geboren im selben ort wie der 180 cm große person	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
welche schüler haben startdaten größer als die des enddatums von schüler alice	welche studienanfänger mehranfangsdaten als die des enddatums der studentenalice haben	was die schüler / innen starttermin höher als die der das endedatum der student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
verbindungen von freunden, die nicht bei mckinsey arbeiten	verbindungen von freunden, die nicht bei mckinsey arbeiten	verbindungen von freunden, die keine arbeit bei mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
der zur schule ging, aber 2004 nicht anfing	der zur schule ging, aber 2004 nicht begann	wer ging in die schule, aber nicht in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
geschlecht des mitarbeiters, der vor 2005 beigetreten ist	geschlecht des mitarbeiters, der vor 2005 beigetreten ist	geschlecht des mitarbeiters, die sich vor 2005	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
deren beziehungsstatus nicht eindeutig ist	deren beziehungsstatus kein eindeutiger	deren beziehung stand, ist nicht einzigartig	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
wie viele beziehungsstatusoptionen gibt es?	wie viele beziehungsstatusoptionen gibt es	wie viele beziehungsstatusoptionen gibt es	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ) )
180 cm große menschen arbeiteten bei mckinsey	180 cm große leute arbeiteten bei mckinsey	180 cm großen menschen arbeitete bei mckinsey	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string employer ) ( string = ) en.company.mckinsey ) )
was ist die berufsbezeichnung von alice, die für mckinsey arbeitet?	was ist die berufsbezeichnung alice, die für mckinsey arbeitet	was ist der jobtitel von alice, der arbeitet für mckinsey	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string job_title ) ) )
finde freunde von menschen, die in new york geboren sind	finden sie freunde von menschen in new york geboren	finden freunde von menschen, die in new york geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )
ein student, der vor oder während 2004 endet	ein student, der vor oder während des jahres 2004 endet	ein student endet vor oder während 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
studierende ab 2004 oder 2010	studierende ab 2004 oder 2010	studenten ab 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist der geburtsort von mitarbeitern, die nicht im jahr 2004 begonnen haben?	was ist der geburtsort von arbeitnehmern, die 2004 nicht begonnen haben	was ist der geburtsort von mitarbeitern, die nicht gestartet in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
freunde von menschen mit 180 cm körpergröße	freunde von menschen mit 180 cm höhe	freunde von menschen mit 180 cm höhe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
was ist der geburtsort der mitarbeiter ab 2004 und danach	geburtsort der arbeitnehmer ab 2004 und nach	was ist der geburtsort der angestellten ab dem jahr 2004 und nach	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche arbeitnehmer die geringste anzahl von arbeitgebern haben	welche arbeitnehmer die geringste anzahl von arbeitgebern haben	was die mitarbeiter haben die wenigsten arbeitgeber	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
der geburtsort von jemandem, der nicht bei mckinsey angestellt ist	der geburtsort einer person, die nicht bei mckinsey beschäftigt ist	der geburtsort von jemanden, der nicht beschäftigt von mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen des zahlreichsten geschlechts	menschen der zahlreichsten geschlechter	menschen der zahlreichste geschlecht	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string gender ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
mitarbeiter, der vor alice kam, kündigte den job	mitarbeiter, der vor alicejob beigetreten ist	mitarbeiter, die sich vor alice beenden sie den job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer freunde hat, deren enddatum vor 2004 liegt	wer hat freunde, derend datum ist vor 2004	wer hat freunde, deren enddatum vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche mitarbeiter haben vor alices letztem tag angefangen	welche mitarbeiter vor alices letztem tag begonnen haben	die mitarbeiter an, bevor alice der letzte tag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
softwareingenieure mit einer höhe von 180 cm	softwareingenieure, deren höhe 180cm beträgt	softwareingenieure, deren höhe 180cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) )
finden sie das geschlecht der menschen 180 cm groß	finden sie das geschlecht der menschen 180 cm groß	finden sie das geschlecht des menschen 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
personen mit einer körpergröße von 180 cm oder mehr	personen mit einer höhe von 180 cm oder mehr	personen, deren höhe von 180 cm oder mehr	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )
geburtsorte von arbeitnehmern, die ihre arbeit im jahr 2004 oder früher aufgenommen haben	geburtshäuser von arbeitnehmern, die 2004 oder früher ihre arbeit aufgenommen haben	geburtsorte der mitarbeiter, die zu arbeiten begonnen in 2004 oder früher	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche verbindungen meiner freunde sind jetzt online?	welche meiner freunde verbindungen jetzt online sind	die von meinen freundenverbindungen sind jetzt online	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
finde alle menschen, die alice als gemeinsamen freund haben	finden sie alle menschen, die alice es als einen gemeinsamen freund haben	finden alle menschen, die alice als gemeinsamen freund	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
geschlecht der beschäftigten, die vor 2004 angefangen haben	geschlecht der mitarbeiter, die vor 2004 begonnen haben	geschlecht von mitarbeitern, die bereits vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
nennen sie eine person, die mit einem mitarbeiter befreundet ist, der spätestens 2004 angefangen hat	benennen sie eine person, die mit einem mitarbeiter befreundet ist, der spätestens 2004 begonnen hat	namen einer person, die freunde mit einem mitarbeiter, der begann spätestens 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter, dessen enddatum nach dem startdatum von student alice liegt	mitarbeiter, dessen enddatum nach dem startdatum von student alice liegt	mitarbeiter, deren enddatum nach student alice startdatum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher beziehungsstatus wird von mindestens zwei personen beansprucht?	welcher beziehungsstatus von mindestens zwei personen beansprucht wird	die beziehung stand in anspruch genommen wird von mindestens zwei personen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
welcher mitarbeiter zwischen 2004 und 2010 endete	welcher mitarbeiter zwischen 2004 und 2010 endete	die mitarbeiter endete zwischen 2004 und 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher arbeitnehmer hat nicht mehr als zwei arbeitgeber	welcher arbeitnehmer nicht mehr als zwei arbeitgeber hat	was der mitarbeiter nicht mehr als zwei arbeitgeber	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
leute, die in die schule kamen, als alice es tat	menschen, die die schule begannen, als alice	menschen, die mit der schule angefangen, als alice hast	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
geschlecht der arbeitnehmer, die nicht seit 2004 beschäftigt sind	geschlecht der arbeitnehmer, die nicht im jahr 2004	geschlecht von arbeitnehmern, die nicht ab 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
schüler, die zeitgleich mit alice in die schule gingen	schüler, die gleichzeitig mit alice	schüler, die schule begann zur gleichen zeit wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche studenten zur selben zeit begannen wie die mitarbeiterin alice	welche studenten zur gleichen zeit mit der mitarbeiteralice begonnen haben,	die schüler begannen, zur gleichen zeit, die mitarbeiter von alice hast	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
in welchen städten wurden die männer in meinem sozialen netzwerk geboren?	welche städte die männer in meinem sozialen netzwerk waren, die in	welche städte waren die männer in meinem sozialen netzwerk in geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )
leute, die nach alice ihren beruf angetreten haben, haben ihr studium begonnen	menschen, die nach alice seugintraten, traten in ihr studium ein	menschen, die sich ihren job nach alice trat in ihrer studie	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist mit einer person befreundet, die vor 2004 ihren abschluss gemacht hat?	der mit einer person befreundet ist, die vor 2004 ihren abschluss gemacht hat	wer freunde mit einer person, die vor 2004 absolviert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
in welcher stadt wurden zwei menschen geboren?	welche stadt zwei menschen war, die in	in welcher stadt wurde zwei menschen geboren, die in	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
wer ist single aus new york	wer single aus new york ist	die single ist aus new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string birthplace ) ( string = ) en.city.new_york ) )
wer ist jünger als alice?	wer jünger als alice ist	wer ist jünger als alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )
menschen, die am oder nach alices erstem arbeitstag geboren wurden	menschen, die am oder nach dem ersten arbeitstag von alice geboren wurden	menschen, die geboren wurden, die am oder nach alice ' s erster tag der arbeit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) )
menschen finden, die mit mitarbeitern befreundet sind, deren letzter tag nicht im jahr 2004 lag	finden sie leute, die mit mitarbeitern befreundet sind, deren letzter tag nicht im jahr 2004 war	suchen sie menschen, die freunde mit den mitarbeitern, deren letzten tag war nicht 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
student von nur einer universität	student von nur einer universität	student der nur eine universität	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string university ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wann hat alice den job angefangen, den sie 2004 gekündigt hat	wann hat alice den job gestartet, den sie 2004 gekündigt hat	wann hat alice starten sie den job, den sie beenden im jahr 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_start_date ) ) )
leute, die aufgehört haben zu arbeiten, als alice in die schule kam oder danach	menschen, die nicht mehr arbeiteten, als alice mit der schule begann oder	menschen, die aufgehört zu arbeiten, als alice in die schule kam oder nach	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
student, dessen enddatum nicht nach dem startdatum von alice liegt	student, dessen enddatum nicht nach dem startdatum der mitarbeiteralice liegt	schüler, deren enddatum nach dem startdatum der mitarbeiter alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter, die nach alices abschluss angefangen haben	mitarbeiter, die nach alice graduiert begonnen haben	mitarbeiter, die begann, nachdem alice schloss	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie mich die geschlechter der mitarbeiter, die nach 2004 begonnen haben	finden sie mich die geschlechter der mitarbeiter, die nach 2004 begonnen haben	mich finden die geschlechter der mitarbeiter, die begann, nachdem 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die einzelne freunde haben	personen, die einzelne freunde haben	menschen, die einzigen freunde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )
welches studienfach studiert, ist informatik der geschichte	welche studierenden bereich des studiums ist informatik der geschichte	die studenten studienrichtung ist informatik, geschichte	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.concat en.field.computer_science en.field.history ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welchen beziehungsstatus teilen zwei personen?	welchen beziehungsstatus zwei personen teilen	welche beziehung status haben zwei menschen teilen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
das geschlecht eines arbeitnehmers, der nicht im jahr 2004 begonnen hat	geschlecht einer arbeitnehmerin, die 2004 nicht begonnen hat	das geschlecht der arbeitnehmer, der didnt start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was ist das geschlecht der schüler mit dem letzten tag im jahr 2004 oder später	was ist geschlecht der studenten mit letzten tag im jahr 2004 oder später	was ist mit der gleichstellung der studierenden mit dem letzten tag im jahr 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie menschen mit einer höhe von 180 cm und mckinsey als arbeitgeber	menschen mit einer körpergröße von 180 cm und mckinsey als arbeitgeber finden	finden sie personen mit einer körpergröße von 180 cm und mckinsey als arbeitgeber	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string employer ) ( string = ) en.company.mckinsey ) )
geburtsort des arbeitnehmers, dessen startdatum höchstens 2004 liegt	geburtsstadt des mitarbeiters, dessen startdatum höchstens 2004 ist	geburtsstadt des mitarbeiters, dessen startdatum ist bei den meisten 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wie ist der beziehungsstatus von studierenden, die nach 2004 angefangen haben?	wie ist der beziehungsstatus von studenten, die nach 2004 begonnen haben	was ist der beziehungsstatus von studenten, die nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen, die am oder nach dem tag geboren wurden, kündigten alice ihren job	menschen, die am oder nach dem tag alice geboren wurden, ihren job aufgeben	menschen, die geboren wurden, die am oder nach dem tag alice ihren job beenden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) )
ein arbeitnehmer, der im jahr 2004 oder früher begann	ein arbeitnehmer, der 2004 oder vor	ein arbeitnehmer, der 2004 begann, oder bevor	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche personen haben mehr als zwei beziehungsstatus	welche personen mehr als zwei beziehungsstatus haben	was haben die menschen mehr als zwei beziehungsstatus	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string > ) ( number 2 ) ) )
leute, die die schule abgebrochen haben, nachdem alice aufgehört hatte zu arbeiten	menschen, die die schule beendeten, nachdem alice aufgehört hatte zu arbeiten	leute, beendet die schule nach alice aufgehört zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche universität studierte alice informatik?	welche universität hat informatik studiert an der	die universität hatte alice studium der informatik an	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string university ) ) )
leute, die zur gleichen zeit wie oder vor alice die schule beendet haben	menschen, die die schule zur gleichen zeit wie oder vor alice beendet haben	menschen, die die schule beendet gleichzeitig mit oder vor alice haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer ist alices freund	wer ist alices freund	wer ist alice ' s freund	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) )
menschen, die gleich groß oder kleiner als alice sind	personen, die die gleiche höhe wie oder kürzer als alice haben	menschen, die die gleiche höhe oder kürzer als alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )
studenten, die zu der zeit fertig waren, als alice fertig war	studenten, die fertig waren, als alice fertig war	studierende, die abgeschlossen, wenn alice fertig	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
student, dessen startdatum nach 2004 liegt	student, dessen startdatum nach 2004 ist	schüler, deren startdatum nach 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was sind die geburtsstädte von studenten mit einem startdatum vor 2004?	was sind die geburtsstädte von studenten mit einem startdatum vor 2004	was sind die geburtsstädte schüler mit einem startdatum vor dem jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
suche mir einen programmmanager oder einen softwareingenieur	finden sie einen programmmanager oder softwareingenieur	mich finden, ein programmmanager oder softwareingenieur	( call SW.listValue ( call SW.concat en.job_title.software_engineer en.job_title.program_manager ) )
finde die menschen mit dem einzigen geschlecht	finden die menschen mit dem einzigen geschlecht	die leute finden, die mit dem nur ein geschlecht	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( string gender ) ) )
ein freund eines studenten, der mindestens 2004 angefangen hat	ein freund eines studenten, der mindestens 2004 begann	ein freund von studenten, die begann mindestens 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
suche nach studenten mit einem studienfach	finden sie studenten mit einem studienbereich	finden sie die studierenden mit einem bereich der studie	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
freunde aller im jahr 2004 geborenen menschen	freunde aller 2004 geborenen menschen	freunden von all den menschen, die 2004 geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )
welche person ist mit einem angestellten befreundet, der nicht für mckinsey arbeitet?	welche person mit einem mitarbeiter befreundet ist, der nicht für mckinsey arbeitet	welche person ist befreundet mit einem mitarbeiter, der nicht arbeiten bei mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen geboren im jahr 2004	2004 geborene menschen	menschen geboren in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
schüler, die die schule bis 2004 beendet haben	schüler, die die schule bis 2004 abgeschlossen haben	schüler, die die schule abgeschlossen 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher mitarbeiter hat weniger als zwei vorherige berufsbezeichnungen	welcher mitarbeiter weniger als zwei vorherige berufsbezeichnungen hat	was mitarbeiter, die weniger als zwei früheren jobtitel	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen mit dem gleichen beziehungsstatus wie alice	personen mit demselben beziehungsstatus wie alice	menschen mit dem gleichen familienstand wie alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( call SW.getProperty en.person.alice ( string relationship_status ) ) ) )
was menschen mit mitarbeitern befreundet sind, deren enddatum nach 2004 liegt	welche personen mit mitarbeitern befreundet sind, die ein enddatum nach 2004 haben	was die leute freunde sind, mit mitarbeitern, die ein endedatum später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
mitarbeiter, die am oder nach dem geburtsdatum von alice angefangen haben	mitarbeiter, die am oder nach dem geburtsdatum von alice begonnen haben	mitarbeiter, die begann, die am oder nach alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus einer person mit einer größe von 180 cm?	welcher beziehungsstatus einer person mit einer höhe von 180 cm hat?	was ist der beziehungsstatus einer person, deren höhe von 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
suche nach studenten, die 2004 oder 2010 angefangen haben	studenten finden, die 2004 oder 2010 begonnen haben	finden studenten, die im jahr 2004 oder im jahr 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die im jahr 2004 geboren wurden	menschen, die 2004 geboren wurden	menschen, die geboren wurden in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
finde mich mitarbeiter, die nach alices startdatum nicht mehr angestellt waren	finden sie mich mitarbeiter, die nach dem startdatum von alice nicht mehr beschäftigt waren	mich finden mitarbeiter, die nicht mehr beschäftigt, nachdem alice das anfangsdatum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
zeigen sie mir, in welchen städten menschen geboren wurden, die vor oder nach 2004 begannen	zeigen sie mir, in welchen städten die menschen, die vor oder nach 2004	zeigen sie mir, welche städte die menschen ab, die vor oder nach 2004 geboren wurden, in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wer ist mit einem studenten befreundet, der angefangen hat?	der mit einem studenten befreundet ist, der	wer freunde mit einem schüler begonnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
geburtsort von studenten, die nicht im jahr 2004 beginnen	geburtsort der studierenden, die nicht 2004 beginnen	geburtsort der schüler nicht ab 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
nennen sie die studenten der braunen universität	nennen sie die studenten der braunen universität	namen der studenten der brown university	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.concat en.university.brown en.university.ucla ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie menschen, die am selben geburtstag wie alice sind und 180 cm groß	finden sie menschen, die den gleichen geburtstag wie alice teilen und 180 cm groß sind	finden sie menschen, die denselben geburtstag wie alice und sind 180 cm hoch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string birthdate ) ) ( string = ) en.person.alice ) )
welcher student hatte ein enddatum, das später als das geburtsdatum von alice ist	welcher schüler ein enddatum hatte, das später als das geburtsdatum von alice liegt	welcher schüler hatte ein endedatum, das später als das geburtsdatum von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die vor 2004 angefangen haben zu arbeiten	personen, die vor 2004 mit der arbeit begonnen haben	menschen, die arbeiten begonnen, bevor 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
leute, die die schule abgebrochen haben, nachdem alice angefangen hat zu arbeiten	menschen, die die schule beendeten, nachdem alice mit der arbeit begonnen hatte	leute, beendet die schule nach alice anfing zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie das geschlecht eines studenten, dessen enddatum ungleich 2004 ist	das geschlecht einer studentin zu ermitteln, deren enddatum nicht gleich 2004 ist	finden sie das geschlecht der schüler, denen hat das endedatum nicht gleich 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welcher mitarbeiter hat weniger als zwei berufsbezeichnungen	welcher mitarbeiter weniger als zwei berufsbezeichnungen hat	was arbeitnehmer weniger als zwei berufsbezeichnungen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, der vor alice kündigte, wurde eingestellt	mitarbeiter, der gekündigt hat, bevor alice eingestellt wurde	mitarbeiter beenden, bevor alice wurde eingestellt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde angestellte freunde, die nicht bei mckinsey beschäftigt sind	finden sie mitarbeiter freunde nicht bei mckinsey beschäftigt	mitarbeiter suchen freunde nicht angestellt bei mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche studenten gehen an die selbe universität wie student alice	was studenten an die gleiche universität wie student alice gehen	was die schüler gehen auf die gleiche universität als student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche person hat die meisten beziehungsstatus?	welche person die meisten beziehungsstatus hat	welche person hast, die anzahl der beziehung status	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( string relationship_status ) ) )
welche stadt ist der geburtsort der studenten, der mindestens 2004 endete?	welche stadt ist der geburtsort der studenten, der mindestens im jahr 2004 endete	welche stadt ist die studierende geburtsort, die endete zumindest in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie mitarbeiter mit einem anderen startdatum als 2004	mitarbeiter finden, die ein anderes startdatum als 2004 haben	finden sie mitarbeiter, die ein startdatum als 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
eine mitarbeiterin, die nach der geburt von alice anfing	ein mitarbeiter, der nach der geburt von alice beginnt	ein mitarbeiter ab, nachdem alice geboren wurde	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, die ihren job am selben tag kündigten, begannen alice ihren job	mitarbeiter, die ihren job am selben tag gekündigt haben, an dem alice ihren job antrat	mitarbeiter beenden ihre arbeit am gleichen tag alice begann ihr job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher mitarbeiter ist nicht der softwareingenieur?	welcher mitarbeiter nicht der softwareingenieur ist	welcher mitarbeiter ist nicht der softwareingenieur	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
ein freund von jemandem, der vor 2004 angefangen hat	ein freund von jemandem, der vor 2004 begonnen hat	ein freund von jemandem, der bereits vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welches geschlecht haben die schüler, die ab 2004 aufgehört haben?	was für ein geschlecht sind die studenten, die ab 2004	welches geschlecht haben die studierenden die am ende von 2004 auf	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
leute, die anfingen zu arbeiten, als alice die schule abbrach	menschen, die mit der arbeit begannen, als alice die schule beendete	menschen, die begann, als alice aufhörte schule	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher mitarbeiter hat einen starttermin, der mit alice identisch ist?	welcher mitarbeiter über ein startdatum verfügt, das mit alice identisch ist	welche mitarbeiter hat ein startdatum, das ist das gleiche wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
beziehungsstatus von mitarbeitern, deren startdatum vor 2004 liegt	beziehungsstatus von mitarbeitern, deren startdatum vor 2004 liegt	beziehungsstatus der mitarbeiter, deren startdatum vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
leute, die die meisten freunde haben	menschen, die die meisten freunde haben	leute, dass haben die meisten freunde	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string friend ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
welches geschlecht haben die menschen, die die schule in oder vor 2004 beendet haben?	welches geschlecht sind die menschen, die die schule in oder vor 2004 abgeschlossen haben	welches geschlecht sind die menschen, die die schule beendet in oder vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wann hat alice die braune universität abgeschlossen?	wann hat alice absolvent der braunen universität	wann hat alice absolvent der brown university	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string education_end_date ) ) )
was ist der geburtsort des studenten, der im jahr 2004 begann	was ist der geburtsort des studenten, der 2004 begann	was ist der geburtsort der schüler, die im jahr 2004 begonnen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie mitarbeiter mit einem enddatum, das weniger als alice geburtstag ist	suchen sie mitarbeiter mit einem enddatum, das kleiner ist als alices geburtstag	finden mitarbeiter mit einem enddatum, das kleiner ist als alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
person, die die meisten berufsbezeichnungen hat	person, die die meisten berufsbezeichnungen hat	person, welche die meisten jobtitel	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, der vor dem startdatum von mitarbeiter alice gestartet ist	mitarbeiter, der vor dem startdatum der mitarbeiteralice begonnen hat	mitarbeiter, die bereits vor beginn der alice mitarbeiter	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde freunde von menschen, die in new york geboren wurden	finden sie freunde von menschen, die in new york geboren wurden	freunde finden von menschen, die geboren wurden, in new york	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )
finden sie das geschlecht, das mehr als zwei personen teilen	finden sie das geschlecht, das mehr als zwei personen teilen	finden sie das geschlecht, dass mehr als zwei menschen teilen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
welche schüler haben ein startdatum, das nicht vor dem enddatum von alice liegt	welche kursteilnehmer ein startdatum haben, das nicht vor dem enddatum von alice liegt	was die studierenden haben ein startdatum, nicht früher als das endedatum von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche schüler haben mit alices geburtsdatum angefangen	welche schüler am geburtsdatum von alice begonnen haben	die schüler begannen, auf alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche schüler die vor alice angefangen haben	welche studenten, die vor alice begonnen haben	die studenten, die vor alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher mitarbeiter hat ein startdatum, das nicht früher als das geburtsdatum von alice ist	welcher mitarbeiter ein startdatum hat, das nicht vor dem geburtsdatum von alice liegt	welche mitarbeiter hat ein startdatum, das nicht früher als der geburtstag von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
beziehungsstatus der studierenden nach 2004 beendet	beziehungsstatus der nach 2004 abgeschlossenen studierenden	beziehung, status der studierenden, die nach 2004 abgeschlossen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welches geschlecht hat der student, dessen enddatum 2004 oder später ist?	welches geschlecht ist die studentin, deren enddatum 2004 oder höher ist	was ist das geschlecht der schüler, deren endedatum ist 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wer ist mit der person befreundet, die vor 2004 mit der arbeit begonnen hat?	wer mit der person befreundet ist, die vor 2004 angefangen hat zu arbeiten	wer freunde mit der person, die zu arbeiten begonnen, bevor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
jeder hat eine ähnliche beziehung wie jeder, der eingeloggt ist	jeder hat eine ähnliche beziehung wie jemand, der eingeloggt ist	wer hat ähnliche beziehung, wie sie von jedermann angemeldet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
wer studiert weniger als zwei dinge	der weniger als zwei dinge studiert	wer ist das studium weniger als zwei dinge	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wann hat alice angefangen, angestellte zu sein?	wann hat alice angefangen, ein mitarbeiter zu sein	wann hat alice starten als ein angestellter	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_start_date ) ) )
welche menschen haben mehr als zwei geschlechter	welche menschen mehr als zwei geschlechter haben	die menschen haben mehr als zwei geschlechter	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string > ) ( number 2 ) ) )
nennen sie eine person, die 180 cm groß ist und mit alice befreundet ist	nennen sie eine person, die 180 cm groß ist und mit alice befreundet ist	nennen sie eine person, die 180 cm, der ist befreundet mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
welche studenten fingen frühestens am letzten arbeitstag von alice an	die studenten frühestens am letzten arbeitstag von alice begonnen haben	die studenten, die nicht älter als alice der letzte tag der arbeit	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
student, dessen studienfach entweder informatik oder geschichte ist	student, dessen studienbereich entweder informatik oder geschichte ist	schüler, deren gebiet der studie ist entweder informatik oder geschichte	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.concat en.field.computer_science en.field.history ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wie ist der beziehungsstatus von menschen, die nach 2004 die schule beendet haben?	wie hoch ist der beziehungsstatus von menschen, die nach 2004 die schule abgeschlossen haben?	was ist der beziehungsstatus von menschen, die mit der schule fertig, nachdem 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
ein mitarbeiter, der am oder vor dem tag abgereist ist, an dem student alice angefangen hat	ein mitarbeiter, der am oder vor dem tag der studentenalice verlassen hat	ein mitarbeiter, der linken, die am oder vor dem tag, student alice begann	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche beziehungsstatus werden von alice nicht beansprucht?	welche beziehungsstatus nicht von alice beansprucht werden	was die beziehung der status nicht behauptet, von alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string ! = ) en.person.alice ) )
menschen, die im jahr 2004 geboren wurden und 180 cm groß sind	menschen, die 2004 geboren wurden und 180 cm groß sind	menschen, die geboren wurden in den jahren 2004 und sind 180 cm hoch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
mitarbeiter endet nach alice endet	mitarbeiter endet nach aliceende	mitarbeiter ende nach alice endet	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde mich als eine von alices männlichen freunden	finden sie mich einen von alices männlichen freunden	finden mir einer von alice ' s männliche freunde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string friend ) ( string = ) en.person.alice ) )
wer ist mit einem mitarbeiter von mindestens 2004 befreundet	der mit einem mitarbeiter von mindestens 2004 befreundet ist	wer freunde mit einem mitarbeiter aus mindestens 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wie ist die beziehung des studenten, der keine braune universität besucht hat?	was ist die beziehung des studenten, der nicht an der braunen universität besucht hat	was ist die beziehung der schüler, die nicht an der brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wer sind die freunde von denen, die nicht bei mckinsey beschäftigt sind?	die freunde derer sind, die nicht bei mckinsey beschäftigt sind	wer sind die freunde jener, die nicht erfüllungsgehilfen von mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
fein mir freunde von menschen, die ihre arbeit nach 2003 beigetreten sind	fine me freunde von menschen, die ihre arbeit nach 2003	fein mir freunde von menschen, die sich ihre arbeitsplätze nach 2003	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
geburtsort der arbeitnehmer ab 2004	geburtsort der arbeitnehmer ab 2004	geburtsort von mitarbeitern, die in oder vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
geschlecht des arbeitnehmers, dessen eintrittstermin mindestens 2004 beträgt	geschlecht des arbeitnehmers, dessen startdatum mindestens 2004 ist	geschlecht des mitarbeiters, dessen startdatum ist mindestens 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wer hat alice aufgehört zu arbeiten im jahr 2004	für die alice 2004 aufgehört hat zu arbeiten	wen hat alicebeenden sie arbeiten für in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employer ) ) )
finde schüler mit den letzten tagen vor alice's erstem tag	finden sie studenten mit den letzten tagen vor alices erstem tag	finden sie studenten mit den letzten tagen vor alice ' s erster tag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer hat den gleichen beziehungsstatus wie die von alice	der den gleichen beziehungsstatus wie der von alice hat	wer hat die gleichen familienstand wie alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( call SW.getProperty en.person.alice ( string relationship_status ) ) ) )
wer ist 180 cm groß und hat ein enddatum von 2004	180 cm groß und hat ein enddatum 2004	wer ist 180 cm groß und hat ein endedatum von 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )
geschlecht des mitarbeiters, dessen berufsbezeichnung nicht software engineer ist	geschlecht des mitarbeiters, dessen berufsbezeichnung nicht softwareingenieur ist	geschlecht des arbeitnehmers, dessen berufsbezeichnung ist nicht software ingenieur	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finde mich alle menschen, die nicht in einer beziehung mit alice sind	finden sie mich alle menschen, die nicht in einer beziehung mit alice sind	finden mich alle menschen, die nicht in einer beziehung mit alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string ! = ) en.person.alice ) )
menschen, die einen freund haben, der in einem anderen jahr als 2004 in die schule gekommen ist	menschen, die einen freund haben, der in einem anderen jahr als 2004 mit der schule begonnen hat	menschen, die einen freund haben, der mit der schule begonnen, in einem jahr andere als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finde alle in new york geborenen, die 180 cm groß sind	finden sie jeden in new york geboren, der 180 cm ist	finden sie alle geboren in new york, 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
finden sie den mitarbeiter, der am nächsten an dem datum eingestellt wurde, an dem alice eingestellt wurde	finden sie den mitarbeiter, der am nächsten an dem datum eingestellt wurde alice eingestellt wurde	suchen sie den mitarbeiter, der eingestellt wurde, am nächsten zu dem zeitpunkt war alice angestellt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
freunde von mitarbeitern finden, die 2004 oder später angefangen haben	freunde von mitarbeitern zu finden, die 2004 oder nach	freunde finden von mitarbeitern, die im jahr 2004 begonnen oder nach	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche studenten gehen an die selbe universität wie alice	welche studenten an die gleiche universität gehen wie alice	die schüler gehen auf die gleiche universität wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter, die nach 2004 angefangen haben	mitarbeiter, die nach 2004	mitarbeiter, die nach 2004 begonnen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer informatik studiert ist 180 cm groß	wer informatik studiert, ist 180 cm groß	wer informatik studiert, ist 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) )
wer ist der geburtsort von studenten ohne hauptfach informatik?	der geburtsort von studenten ist, die keinen abschluss in informatik haben	wer ist der geburtsort von studierenden der fachrichtungen informatik	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen, die softwareingenieure oder projektmanager sind	personen, die softwareingenieure oder projektmanager sind	menschen, die softwareingenieure oder projektmanager	( call SW.listValue ( call SW.concat en.job_title.software_engineer en.job_title.program_manager ) )
wer ist mit der person befreundet, die nach 2004 aufgehört hat zu arbeiten?	wer mit der person befreundet ist, die nach 2004 aufgehört hat zu arbeiten	wer freunde mit der person, die aufgehört zu arbeiten, nachdem 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
leute, die nach alice die schule abgebrochen haben	menschen, die die schule beendeten, nachdem alice geboren wurde	leute, beendet die schule nach alice geboren wurde	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche mitarbeiter nach 2004 oder nach 2010 gekündigt haben	welche mitarbeiter nach 2004 oder nach 2010 ausscheiden	die mitarbeiter beenden, die nach 2004 oder nach 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist das geschlecht des studenten, der 2004 oder früher angefangen hat?	was ist das geschlecht der studentin, die 2004 oder früher begonnen hat	was ist das geschlecht der schüler, die in 2004 oder früher	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finde die leute, die sich ihrem studium angeschlossen haben, bevor alice geboren wurde	finden sie die menschen, die ihr studium vor alice geboren wurde	finden sie die menschen, die sich ihr studium, bevor sie geboren wurde alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher schüler ist am frühesten in die schule gekommen?	welcher schüler die schule am frühesten begann	die schüler mit der schule angefangen die frühesten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
nennen sie eine mitarbeiterin, die vor der schülerin namens alice angefangen hat	benennen sie einen mitarbeiter, der vor dem kursteilnehmer mit dem namen alice begonnen hat	name eines mitarbeiters, die gestartet wurden, bevor ein student namens alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
ein student, der vor 2004 endet	ein student, der vor 2004 endete	ein student endet vor 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die nicht männlich sind	menschen, die nicht männlich sind	menschen, die nicht männlich	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string ! = ) en.gender.male ) )
welche person ist jünger als alice?	welche person jünger ist als alice	welche person ist jünger als alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )
student, der ein kleineres startdatum als alice war	student, der ein kleineres startdatum als alice war	schüler, war ein kleiner startdatum als alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
schüler, dessen anfangsdatum am größten ist	student, dessen startdatum das größte ist	schüler, deren starttermin ist der größte	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
schüler, der mindestens vor dem ende von alice anfängt	student, der mindestens beginnt, bevor alice beendet ist	student, der beginnt, zumindest bevor alice abgeschlossen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
student, dessen startdatum nicht vor dem startdatum von alice liegt	student, dessen startdatum nicht vor dem startdatum der mitarbeiteralice liegt	schüler, deren startdatum nicht vor dem startdatum des mitarbeiters alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde das datum, an dem alice angefangen hat, informatik zu studieren	finden sie das datum, dass alice begann informatik zu studieren	finden sie das datum, dass alice begonnen, informatik zu studieren	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string education_start_date ) ) )
freunde von menschen, die andere bereiche als informatik studiert haben	freunde von menschen, die andere bereiche als informatik studiert haben	freunde von menschen, die studiert haben, die anderen bereichen als der informatik	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
der 2004 geboren wurde und mit alice befreundet ist	der 2004 geboren wurde und mit alice befreundet ist	wer wurde 2004 geboren und ist befreundet mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string friend ) ( string = ) en.person.alice ) )
mitarbeiter, dessen startdatum mit dem von student alice identisch ist	mitarbeiter, dessen startdatum mit dem von student alice identisch ist	mitarbeiter, deren startdatum ist dieselbe wie die der studentin alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche person ist 180 cm groß und alices freundin	welche person 180 cm groß ist und alices freund ist	welche person ist 180 cm groß und ist alice ' s freund	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
freunde von mitarbeiter ohne titel des softwareingenieurs finden	freunde von mitarbeitern ohne titel des softwareingenieurs finden	freunde finden von mitarbeiterohne titelsoftwareingenieur	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was für leute haben ein geburtsdatum, das 2004 ist und dessen größe 180 cm beträgt	was menschen haben ein geburtsdatum, das 2004 ist und dessen höhe 180 cm beträgt	was die menschen haben ein geburtsdatum, das jahr 2004 und dessen höhe 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
wer hat eine beziehung, die nach 2004 begann	der eine beziehung hat, die nach 2004 begann	wer eine beziehung hat, die nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen, die 2004 oder 2010 aufgehört haben zu arbeiten	menschen, die 2004 oder 2010 nicht mehr arbeiten	menschen, die aufgehört zu arbeiten in 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
freunde von menschen, die ihre arbeit vor 2004 gekündigt haben	freunde von menschen, die vor 2004 ihren job gekündigt haben	freunde von menschen, die ihre arbeitsplätze verlassen, bevor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
freunde von menschen, die ihr studium vor 2004 abgeschlossen haben	freunde von menschen, die ihr studium vor 2004 abgeschlossen haben	freunde von menschen, die ihr studium vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche person hat ein geburtsdatum zwischen 2004 und 2010?	welche person zwischen 2004 und 2010 ein geburtsdatum hat	welche person hat ein geburtsdatum zwischen 2004 und 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
finden sie personen mit einer körpergröße von 180 oder 200 cm	menschen mit einer höhe von 180 oder 200 cm finden	finden sie personen mit höheentweder 180 oder 200 cm	( call SW.listValue ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) )
arbeitende menschen, die nicht im jahr 2004 begonnen haben	arbeiten, die 2004 nicht begonnen haben	arbeiten menschen, die nicht in das geschäftsjahr 2004 gestartet	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die nach 2004 oder nach 2010 die schule abgebrochen haben	menschen, die die schule nach 2004 oder nach 2010 beendeten	menschen, die nicht mehr die schule, die nach 2004 oder nach 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist der beziehungsstatus des studenten nicht in der informatik	was ist der beziehungsstatus des studenten nicht in informatik	was ist der beziehungsstatus der studierenden nicht in der informatik	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
personen unter 180 cm	personen kürzer als 180 cm	menschen, die kürzer als 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )
finde mich 2 leute in einer beziehung	finden sie mich 2 personen in einer beziehung	finden sie mich 2 menschen in einer beziehung	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( number 2 ) ) )
person, deren geburtstag vor aliceabsolventen liegt	person, die geburtstag ist vor alice absolventen	person, deren geburtstag steht vor der aliceabsolventen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) )
schüler, die in die schule kamen, als alice ihren job kündigte	schüler, die die schule begonnen haben, als alice ihren job aufgab	studenten, die mit der schule angefangen, als alice ihren job beenden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
person, die noch nicht in 3 beziehungen war	person, die nicht in 3 beziehungen war	person, die nicht in 3 beziehungen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string < ) ( number 2 ) ) )
finden sie personen des gleichen geschlechts wie die angemeldete person	personen mit demselben geschlecht wie die eingeloggte person zu finden	finden sie personen mit dem gleichen geschlecht wie die person, die eingeloggt ist	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
menschen, die single sind und mit alice befreundet sind	personen, die single und freundet mit alice	menschen, die single sind und freunde mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string friend ) ( string = ) en.person.alice ) )
wer ist die älteste person in meinem netzwerk?	wer ist die älteste person in meinem netzwerk	wer ist die älteste person in meinem netzwerk	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string birthdate ) ) ) )
was für menschen haben einen geburtsort von new york und eine größe von 180 cm	was menschen haben einen geburtsort von new york und eine höhe von 180 cm	welche personen haben einen geburtsort in new york und eine höhe von 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
studenten, die gleichzeitig mit oder nach alice fertig werden	studenten, die zeitgleich nach oder nach alice	schüler schlichten gleichzeitigen oder nach alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
freunde von schülern, die nach 2004 abschließen	freunde von studenten beenden nach 2004	freunde des studenten nach beendigung 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie 180 cm große menschen, die in new york geboren wurden	finden sie menschen 180 cm groß, die in new york geboren wurden	finden sie personen 180 cm hoch, die wurden in new york geboren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthplace ) ( string = ) en.city.new_york ) )
studierende mit den wenigsten studienrichtungen	studenten mit den wenigsten studienfeldern	studenten mit den wenigsten studienrichtungen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher freund von alice ist online	welcher freund von alice ist online	die freundin von alice ist online	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string logged_in ) ) )
student, dessen studienfächer am kleinsten sind	studierende, deren studienrichtungen am kleinsten sind	studenten, deren felder der studie sind kleinste	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
schüler, die am tag der geburt von alice die schule beendeten	schüler, die die schule an dem tag beendeten, an dem alice geboren wurde	die schüler beendeten die schule an dem tag geboren wurde alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
freunde von alice finden, die single sind	finden sie freunde von alice, die single sind	finden freunde von alice, die single sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
welcher mitarbeiter kündigte bevor alice geboren wurde	welcher mitarbeiter gekündigt hat, bevor alice geboren wurde	die mitarbeiter beenden, bevor sie geboren wurde alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
ein student, der nicht im jahr 2004 endet	ein student, der 2004 nicht endet	ein student nicht ende 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde mich freunde des studenten, der vor 2004 abreist	finden sie mich freunde des studenten, der vor 2004 geht	mich finden freunde der schüler, die verlassen vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
jeder, der alice's freund ist	jeder, der alices freund ist	wer ist alice ' s freund	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
mitarbeiter mit startdaten nach 2004 finden	mitarbeiter mit startterminen nach 2004 finden	finden mitarbeiter mit starttermine nach 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
leute, die in die schule kamen, als alice aufhörte	menschen, die mit der schule begannen, als alice aufhörte	menschen, die mit der schule angefangen, als alice aufhörte	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die freunde haben, die in new york geboren wurden	menschen, die freunde haben, die in new york geboren wurden	menschen, die freunde haben, die wurden in new york geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )
wann hat alice ihren job bei mckinsey gekündigt?	wann hat alice den job bei mckinsey gekündigt	wann hat alice quit job bei mckinsey	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string employment_end_date ) ) )
alices geburtsort	alices geburtsort	alice ' s geburtsort	( call SW.listValue ( call SW.getProperty en.person.alice ( string birthplace ) ) )
finde alle freunde, die keine softwareingenieure sind	finden sie alle freunde, die keine softwareingenieure sind	finden sie alle freunde, die nicht softwareingenieure	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was ist die berufsbezeichnung von alice?	was ist die berufsbezeichnung alice	was ist der jobtitel von alice	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) )
was ist das geschlecht der arbeitnehmer, die nicht im jahr 2004 begonnen haben	was ist das geschlecht der arbeitnehmer, die 2004 nicht begonnen haben	was ist das geschlecht der mitarbeiter, die nicht in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finde freunde von studenten, die keine braune universität besuchen	freunde von studenten finden, die keine braune universität besuchen	freunde finden studenten nicht an der brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen, die geboren wurden, bevor alice in die schule kam	menschen, die geboren wurden, bevor alice die schule begann	menschen, die geboren wurden, bevor alice in die schule kam	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )
finden sie mitarbeiter, deren startdatum vor dem enddatum des mitarbeiters liegt	suchen sie mitarbeiter, die ein startdatum vor dem enddatum der mitarbeiteralice haben	finden sie mitarbeiter, die ein startdatum älter als das endedatum des mitarbeiters alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
nennen sie eine 180 cm große person, die mit alice befreundet ist	nennen sie eine person 180 cm groß, die mit alice befreundet ist	nennen sie eine person, die 180 cm groß, wer ist befreundet mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string friend ) ( string = ) en.person.alice ) )
was ist das geschlecht eines mitarbeiters, dessen enddatum vor 2004 liegt?	welches geschlecht hat ein arbeitnehmer, dessen enddatum vor 2004 liegt?	was ist das geschlecht von einem mitarbeiter, deren enddatum älter als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
student mit der meisten anzahl von studienfeldern	student mit den meisten studienbereichen	schüler mit den meisten anzahl von feldstudien	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
person mit mindestens zwei beziehungsstatus	person mit mindestens zwei beziehungsstatus	person mit mindestens zwei beziehung status	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string >= ) ( number 2 ) ) )
nennen sie eine 180 cm große person, die im jahr 2004 aufgehört hat	nennen sie eine person 180 cm groß, die 2004 aufhörte	nennen sie eine person, die 180 cm hoch, die im jahr 2004 beenden	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )
wie ist der beziehungsstatus eines mitarbeiters, dessen startdatum nicht 2004 ist?	welcher beziehungsstatus des arbeitnehmers, dessen startdatum nicht 2004 ist	was ist der familienstand des mitarbeiters, dessen startdatum ist nicht 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen mit zwei geburtsorten	menschen mit zwei geburtsstätten	menschen mit zwei geburtsorte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( number 2 ) ) )
welches studentenenddatum passierte zur selben zeit wie alice?	welches studentenenddatum zur gleichen zeit wie alice passierte	die schüler enddatum passierte in der gleichen zeit wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie männer, die single sind	finden männchen, die single sind	finden männer, die single sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
welcher mitarbeiter hat nicht mehr als zwei berufsbezeichnungen	welcher mitarbeiter nicht mehr als zwei berufsbezeichnungen hat	was der mitarbeiter nicht mehr als zwei titel	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche mitarbeiter haben nicht mehr als 2 berufsbezeichnungen?	welche mitarbeiter nicht mehr als 2 berufsbezeichnungen haben	die mitarbeiter haben nicht mehr als 2 berufsbezeichnungen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
leute, die mit jemandem befreundet sind, der single ist	personen, die mit jemandem befreundet sind, der single ist	leute, dass sind freunde mit jemandem, der einzigen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )
wie ist der beziehungsstatus von mitarbeitern, die nach 2004 angefangen haben?	wie hoch ist der beziehungsstatus von mitarbeitern, die nach 2004 begonnen haben?	was ist der beziehungsstatus der mitarbeiter, die begann, nachdem 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
gleichgeschlechtliche menschen	alleingeschlechtliche menschen	singlegendermenschen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string < ) ( number 2 ) ) )
wo wurde alice geboren?	wo wurde alice geboren	wo wurde alice geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) )
finde leute mit dem gleichen geschlecht wie alice oder bob	finden sie menschen mit dem gleichen geschlecht wie alice oder bob	finden sie personen mit dem gleichen geschlecht als alice oder bob	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
finden sie das geschlecht der studierenden, deren studienfach nicht informatik ist	das geschlecht von studierenden zu finden, deren studienbereich nicht informatik ist	finden sie das geschlecht des studenten, deren studienfach ist nicht informatik	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finde mich bei alices freunden, die gerade online sind	finden sie mich alle alice freunde, die derzeit online sind	finden mich alle alice ' s freunde, die derzeit online sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string friend ) ( string = ) en.person.alice ) )
menschen, die einen freund haben, der 2004 oder später in die schule kam	menschen, die einen freund haben, der in oder nach 2004 mit der schule begonnen hat	menschen, die einen freund haben, der in die schule kam im jahr 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
mitarbeiter, die 2003 oder früher gekündigt haben	mitarbeiter, die 2003 oder früher gekündigt haben	mitarbeiter, die aufhören, die 2003 oder früher	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche person ist mit der onlineperson befreundet?	welche person mit der onlineperson befreundet ist	welche person ist mit freunden die onlineperson	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
studenten, die am geburtstag von alice beginnen	studenten, die an alices geburtstag beginnen	studenten, die auf alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist der geburtsort einer person mit einer größe von 180 cm?	was ist der geburtsort einer person mit einer körpergröße von 180 cm	was ist der geburtsort einer person deren höhe von 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
was ist das geschlecht der arbeitnehmer, die spätestens 2004 begonnen haben?	was ist das geschlecht der arbeitnehmer, die spätestens 2004 begonnen haben	was ist das geschlecht der mitarbeiter, die begann spätestens 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finde menschen, die nicht größer als alice sind	finden sie menschen, die nicht größer als alice in der höhe sind	finden sie menschen, die sind nicht größer als alice in der höhe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )
ein freund von alice's freund	ein freund von alices freund	ein freund von alice ' s freund	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ) )
nennen sie einen freund eines studenten, der nicht an einer braunen universität studiert hat	nennen sie einen freund eines studenten, der nicht an der braunen universität studiert hat	namen, ein freund, ein student, der nicht studiert an der brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wer hat die geringste anzahl von beziehungsstatus	der die geringste anzahl von beziehungsstatus hat	wer hat die wenigsten beziehung status	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( string relationship_status ) ) )
mitarbeiter, dessen startdatum mindestens 2004 ist	mitarbeiter, dessen startdatum mindestens 2004 ist	mitarbeiter, deren startdatum ist mindestens 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist der beziehungsstatus für studenten mit einem startdatum ungleich 2004?	wie hoch ist der beziehungsstatus für studierende mit einem startdatum, das nicht 2004 entspricht?	was ist die beziehung status für studenten mit einem startdatum nicht gleich 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
geburtsort von schülern, die ihre ausbildung zeitgleich mit oder vor 2004 abgeschlossen haben	geburtsort von studenten, die zeitgleich mit oder vor 2004	geburtsort von studenten gleichzeitig auf oder vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welcher student hat ein enddatum, das mindestens 2004 oder 2010 ist?	welcher student ein enddatum hat, das mindestens 2004 oder 2010 ist	welche studentin hat ein enddatum, das mindestens entweder 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wie ist der beziehungsstatus von studierenden, die ihren abschluss im jahr 2004 nicht gemacht haben?	wie hoch ist der beziehungsstatus von studenten, die 2004 keinen abschluss gemacht haben?	was ist der beziehungsstatus der studierenden, die nicht diplom 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wo wurde alice geboren?	wo wurde alice geboren	wo wurde alice geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) )
menschen, die mit jemandem befreundet sind, der nach 2004 die schule abgebrochen hat	menschen, die mit jemandem befreundet sind, der nach 2004 die schule beendet hat	menschen, die freunde sind mit einer person, beendet die schule nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
studenten, die nach alice anfangen	studenten, die nach alice beginnen	studenten, die beginnen, nachdem alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
geburtsort des studenten, dessen startdatum nach 2004 liegt	geburtsstadt des studenten, dessen startdatum nach 2004 liegt	geburtsort des schülers, dessen startdatum ist nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welcher student hat die wenigsten universitäten besucht?	welcher student die wenigsten universitäten besucht hat	die studentin hat an den wenigsten universitäten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string university ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
beziehungsstatus einer 180 cm großen person	beziehungsstatus einer 180 cm großen person	beziehung stand der 180 cm große person	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
finde die kürzeste person	die kürzeste person finden	finden sie den kürzesten person	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string height ) ) ) )
freunde von mitarbeitern mit dem letzten tag im jahr 2004 oder früher finden	freunde von mitarbeitern mit letztem tag im jahr 2004 oder davor zu finden	freunde finden der arbeitnehmer mit dem letzten tag im jahr 2004 oder vor	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finden sie personen, die mit mitarbeitern befreundet sind, deren enddatum nicht später als 2004 liegt	finden sie personen, die mit mitarbeitern befreundet sind, die spätestens 2004 ein enddatum haben	finden sie menschen, die freunde sind mit mitarbeitern, die ein endedatum nicht später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die im jahr 2004 geboren und in new york geboren wurden	menschen, die 2004 geboren und in new york geboren wurden	menschen, die geboren wurden in 2004 und in new york geboren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string birthplace ) ( string = ) en.city.new_york ) )
mitarbeiter finden, die ihren job vor 2004 oder 2010 gekündigt haben	mitarbeiter finden, die vor 2004 oder 2010 ihren arbeitsplatz aufgeben	finden sie mitarbeiter, die beenden ihre arbeit, die vor 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
geschlecht der 180 cm großen personen	geschlecht der personen, die 180 cm groß sind	geschlecht von personen, die 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
welche schüler haben enddatum namen, die entweder 2004 oder 2010 sind	welche kursteilnehmer enddatumsnamen haben, die entweder 2004 oder 2010 sind	was die schüler / innen enddatum namen, die entweder 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche mitarbeiterin hat am selben tag angefangen wie alice	welcher mitarbeiter am selben tag wie alice begann	was mitarbeiter begannen am selben tag, wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus des schülers, der am oder vor 2004 beginnt?	wie ist der beziehungsstatus des studenten ab oder vor 2004	was ist der beziehungsstatus der studierenden, beginnend am oder vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche person hat ein geburtsdatum mit höchstens dem von alice	welche person ein geburtsdatum hat, mit dem von alice es	welche person hat ein geburtsdatum mit am meisten, dass von alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) )
finden sie mitarbeiter, die für die meisten arbeitgeber arbeiten	mitarbeiter finden, die für die meisten arbeitgeber arbeiten	finden mitarbeiter arbeiten für die meisten arbeitgeber	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, die am selben tag wie alice aussteigen	mitarbeiter, die am selben tag wie alice gekündigt haben	mitarbeiter, die aufhören am selben tag, wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist single und geboren im jahr 2004	wer ledig ist und 2004 geboren wurde	wer ist single und 2004 geboren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
suche nach schülern mit einem anderen startdatum als 2004	finden sie studenten mit anderen startdaten als 2004	finden sie studenten mit startdaten andere als 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die nach alice in die schule kamen	menschen, die die schule begannen, nachdem alice geboren wurde	menschen, die mit der schule begonnen, nachdem alice geboren wurde	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
jeder freund eines mannes	jeder freund eines männchens	jeder freund, der eine männliche	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )
welche studenten nicht früher als 2004 angefangen haben	die studenten frühestens 2004 begonnen haben	die studenten, die nicht älter als 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die mit mitarbeitern befreundet sind, die im oder nach dem jahr 2004 angefangen haben	personen, die mit mitarbeitern befreundet sind, die in oder nach 2004 begonnen haben	menschen, die freunde sind mit mitarbeitern, die begann im jahr 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was ist die berufsbezeichnung von alice, deren arbeitgeber mckinsey ist	was ist die berufsbezeichnung alice, deren arbeitgeber mckinsey ist	was ist der jobtitel von alice, deren arbeitgeber mckinsey	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string job_title ) ) )
finden sie das geschlecht der in new york geborenen menschen	finden sie das geschlecht von menschen, die in new york geboren	finden sie das geschlecht von menschen in new york geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )
finde mich freunde von leuten, die eingeloggt sind	finden sie mich freunde von menschen eingeloggt	mich finden freunde von menschen angemeldet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
freunde von menschen, die gerade online sind	freunde von menschen, die derzeit online sind	freunde von menschen, die derzeit online sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
an welcher universität war alice?	was universität alice besuchen	welche universität hat alice besuchen	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ) )
welche personen sind mit mitarbeitern befreundet, die vor 2004 angefangen haben?	welche personen mit mitarbeitern befreundet sind, die vor 2004 begonnen haben	welche personen sind freunde mit den mitarbeitern, die bereits vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche person hat nicht die höhe von 180 cm	welche person nicht die höhe von 180 cm hat	was die person nicht über die höhe von 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string ! = ) ( number 180 en.cm ) ) )
wer ist mit einem mitarbeiter befreundet, der 2004 oder später angefangen hat?	der mit einem mitarbeiter befreundet ist, der 2004 oder später begonnen hat	wer freunde mit einem mitarbeiter begonnen, die 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finde menschen, die mindestens zwei geburtsorte haben	menschen finden, die mindestens zwei geburtsplätze haben	die menschen finden, die mindestens zwei geburtsorte	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string >= ) ( number 2 ) ) )
mitarbeiter mit dem größten startdatum	mitarbeiter mit größtem startdatum	mitarbeiter mit dem größten startdatum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde jemanden, der genauso groß oder kleiner ist als alice	jemanden finden, der so groß oder kürzer als alice ist	jemanden finden, der so groß oder kürzer als alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )
menschen, die genauso groß sind wie alice	personen, die die gleiche höhe wie alice haben	menschen, die die gleiche höhe wie alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.getProperty en.person.alice ( string height ) ) ) )
finde mich die person mit den wenigsten freunden	finden sie mich die person mit den wenigsten freunden	finden mich die person mit den wenigsten freunden	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string friend ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
der in new york geboren ist und mit alice befreundet ist	wer in new york geboren ist und freunde mit alice	wer ist in new york geboren und freunde mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
finden sie mitarbeiter, die vor oder am selben tag wie alice beginnen	mitarbeiter finden, die vor oder am selben tag wie alice beginnen	finden sie mitarbeiter ab, die vor oder am gleichen tag als alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche person hat zwei geschlechter	welche person zwei geschlechter hat	welche person hat zwei geschlechter	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string <= ) ( number 2 ) ) )
student, dessen startdatum vor dem startdatum von student alice liegt	student, dessen startdatum vor dem startdatum der studentenalice liegt	schüler, deren startdatum vor dem startdatum der student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welcher mitarbeiter hatte einen starttermin schon oder später als alice	welcher mitarbeiter bereits ein startdatum als alice hatte	was mitarbeiter hatten einen start datum so früh wie oder höher als alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, die vor alices letztem tag anfangen	mitarbeiter, die vor dem letzten tag von alice beginnen	mitarbeiter, die beginnen, bevor alice der letzte tag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist der beziehungsstatus der person, die 180 cm groß ist	wie ist der beziehungsstatus der person, die 180 cm groß ist	was ist der beziehungsstatus der person, die 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
personen, die mit dem mitarbeiter befreundet sind, der bis 2004 aus dem unternehmen ausscheiden wird	personen, die mit dem mitarbeiter befreundet sind, der bis 2004 ausscheiden wird	menschen, die freunde sind mit dem mitarbeiter, die verlassen wird, die von 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die vor alices geburtsdatum die schule abgebrochen haben	menschen, die die schule vor dem geburtsdatum von alice beendet haben	menschen, die nicht mehr die schule vor alices geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter, die 2004 oder 2010 angefangen haben	mitarbeiter, die 2004 oder 2010 begonnen haben	mitarbeiter, die in 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie männer, die im jahr 2004 geboren sind	finden männer geboren 2004	finden männer jahrgang 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string gender ) ( string = ) en.gender.male ) )
wer ist mit mitarbeitern befreundet, deren enddatum größer als 2004 ist?	wer mit mitarbeitern befreundet ist, deren enddatum größer als 2004 ist	wer ist freunde mit den mitarbeitern, deren endedatum ist größer als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
student, dessen startdatum nicht vor 2004 liegt	student, dessen startdatum nicht vor 2004 liegt	schüler, deren startdatum nicht vor 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter, dessen enddatum vor dem enddatum von alice liegt	mitarbeiter, dessen enddatum vor dem enddatum der mitarbeiteralice liegt	mitarbeiter, deren enddatum vor dem enddatum des mitarbeiteralice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
suche nach schülern mit dem frühesten enddatum	finden sie studenten, die das früheste enddatum haben	finden sie studenten, denen die frühesten endtermin	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche mitarbeiter haben erst 2004 oder 2010 angefangen?	die mitarbeiter frühestens 2004 oder 2010	die mitarbeiter begann nicht früher als 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher mitarbeiter hat vor 2004 angefangen?	welcher mitarbeiter vor 2004 begonnen hat	die mitarbeiter früher begonnen als 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde leute, die mit alice oder bob befreundet sind	finden sie leute, die mit alice oder bob befreundet sind	suchen sie menschen, die freunde mit alice oder bob	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
beziehungsstatus des studenten, dessen startdatum nach 2004 liegt	beziehungsstatus des studierenden, dessen startdatum nach 2004 liegt	beziehung status des schülers, dessen startdatum ist nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
beziehungsstatus aller studierenden, die nach 2004 angefangen haben	beziehungsstatus aller studierenden, die nach 2004 begonnen haben	beziehung status aller studenten, die nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
alices freunde, die 180 cm groß sind	alices freunde, die 180 cm groß sind	alice ' s freunde, die sind 180 cm hoch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
menschen, die nach alice geboren wurden, begannen zu arbeiten	menschen, die geboren wurden, nachdem alice begann zu arbeiten	menschen, die geboren wurden, nachdem alice anfing zu arbeiten	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) )
welche mitarbeiter haben ihre anstellung vor alice angetreten	welche mitarbeiter eine beschäftigung begonnen haben, bevor sie	die mitarbeiter an der beschäftigung, bevor alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus eines studenten, dessen startdatum nicht im jahr 2004 liegt?	wie hoch ist der beziehungsstatus eines studenten, dessen startdatum nicht im jahr 2004 liegt?	was ist die beziehung der status eines schülers, dessen startdatum ist nicht in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen, die vor 2004 180 cm groß sind	personen, die vor 2004 180 cm groß sind	menschen, die sind 180 cm hoch, bevor 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )
wer wurde zuletzt geboren	der zuletzt geboren wurde	geboren, war zuletzt	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string birthdate ) ) ) )
mitarbeiter, die vor alices schuleintritt angefangen haben	mitarbeiter, die vor alice sin	mitarbeiter, die bereits vor alice in die schule kam	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen in new york oder peking geboren	menschen geboren in new york oder beijing	menschen geboren in new york oder peking	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.concat en.city.new_york en.city.bejing ) ) )
menschen, die vor alice in die schule kamen	menschen, die die schule begannen, bevor alice geboren wurde	menschen, die in die schule kamen, bevor sie geboren wurde alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiterfreund mit startdatum nach 2004 finden	mitarbeiter mit startdatum nach 2004 finden	mitarbeiter suchen freund mit dem datum beginnen, nachdem 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
arbeitende menschen, die keine softwareingenieure sind	arbeitende mitarbeiter, die keine softwareingenieure sind	arbeiten menschen, die nicht softwareingenieure	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher mitarbeiter beendete die selbe zeit, als alice anfing	welcher mitarbeiter die gleiche zeit beendet hat, in der alice gestartet wurde	die mitarbeiter fertigen die gleiche zeit begann alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie die freunde von mitarbeitern mit einem enddatum bis spätestens 2004	finden sie die freunde der mitarbeiter mit einem enddatum spätestens 2004	finden die freunde von mitarbeitern mit einer enddatum nicht später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finde mich alle online singles	finden sie mich alle onlinesingles	mich finden alle onlinesingles	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string logged_in ) ) )
menschen, die mit jemandem befreundet sind, der in oder vor 2004 aufgehört hat zu arbeiten	personen, die mit jemandem befreundet sind, der in oder vor 2004 nicht mehr gearbeitet hat	menschen, die freunde sind mit einer person, die aufgehört zu arbeiten in oder vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finden sie mitarbeiter, deren letzter tag nach dem ersten tag der schülerin alice liegt	finden sie mitarbeiter, deren letzter tag nach dem ersten tag der studentenalice ist	finden sie mitarbeiter, deren letzten tag ist nach student alice ' s erster tag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
die beziehungsstatuen eines studenten, die 2004 enden	die beziehungsstatuen eines studenten, die 2004 enden	die beziehung statuen eines schülers ende 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wo ist der geburtsort des schülers, der die schule vor 2004 verlassen hat?	wo ist der geburtsort des schülers, der die schule vor 2004 verlassen hat?	wo ist der geburtsort der schüler, die die schule verlassen, bevor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
freunde von studierenden ab 2004	freunde von studenten ab 2004	freunde von studierenden, die nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
das geschlecht eines studenten ab 2004	geschlecht eines studenten ab 2004	das geschlecht der schüler ab, bevor sie 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen, die an oder vor dem tag geboren wurden, als alice in die schule kam	menschen geboren am oder vor dem tag alice begann die schule	menschen geboren, die am oder vor dem tag von alice in die schule kam	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )
menschen, die nicht informatik studieren	menschen, die kein informatikstudium	leute, die nicht informatik studiert	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist das geschlecht eines studenten mit einem enddatum nach 2004?	was ist das geschlecht eines studenten mit einem enddatum nach 2004	was ist das geschlecht der schüler mit einem endedatum später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
personen, die mit dem neuen mitarbeiter bereits vor 1994 befreundet sind	personen, die mit dem neuen mitarbeiter seit 2004 befreundet sind	menschen, die freunde sind mit dem neuen mitarbeiter ab, bevor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welcher schüler hat angefangen, nachdem alice aufgehört hat zur schule zu gehen?	welcher schüler begann, nachdem alice aufgehört hatte, zur schule zu gehen	die studenten fingen an, nachdem alice aufgehört in die schule zu gehen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
beziehungsstatus von mitarbeitern, die ihre arbeit in oder vor 2004 aufgenommen haben	beziehungsstatus von arbeitnehmern, die in oder vor 2004 mit der arbeit begonnen haben	beziehung status der mitarbeiter, die begonnen arbeiten in oder vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
suche nach schülern mit einem früheren enddatum als dem der mitarbeiterin alice	finden sie studenten mit einem enddatum, das vor dem von employee alice liegt	finden sie studenten mit einem endedatum älter als das der mitarbeiter von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wann ist alice im jahr 2004 gegangen?	wann hat alice 2004 gegangen	wann hat alice verlassen, im jahr 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_end_date ) ) )
finden sie die geburtsstadt für alle mitarbeiter, die im jahr 2004 gekündigt haben	finden sie die geburtsstadt für alle mitarbeiter, die 2004 gekündigt haben	finden sie die stadt der geburt für alle mitarbeiter, die aufhören, 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
alice hat ihre arbeit im jahr 2004 begonnen, als sie sie verlassen hat	alice begann ihren job im jahr 2004, als sie es verlassen	alice begann ihre arbeit im jahr 2004, als wollte sie ihn verlassen	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_end_date ) ) )
geburtsstädte von studenten, die vor 2004 begannen	geburtsortstädte von studenten, die vor 2004 begonnen haben	geburtsort städten von studenten, die vor dem jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
180 cm große person mit geburtsdatum im jahr 2004	180 cm große person mit geburtsdatum im jahr 2004	180 cm große person mit geburtsdatum in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
schüler, die am selben tag mit der schule begannen, fingen an zu arbeiten	schüler, die am selben tag mit der schule begannen, begannen zu arbeiten	studenten, die begann die schule am selben tag in alice zu arbeiten begonnen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde leute mit mindestens zwei freunden	menschen mit mindestens zwei freunden finden	finden sie personen mit mindestens zwei freunden	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
menschen, die nicht single sind	menschen, die nicht single sind	menschen, die nicht single	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string ! = ) en.relationship_status.single ) )
nennen sie städte, wenn sie sie mit mehr als zwei personen als geburtsort teilen	städte als geburtsort mit mehr als zwei personen teilen	namen der städte, wenn sie gemeinsam mit mehr als zwei personen als ihren geburtsort	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
welche mitarbeiter beschäftigungen haben, deren titel mit mitarbeiter alice identisch ist	welche mitarbeiter jobs haben, deren titel mit der von mitarbeitern identisch ist	was die mitarbeiter haben arbeitsplätze, deren titel ist der gleiche wie alice mitarbeiter	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was für geschlechter sind alice freunde	welche geschlechter alices freunde sind	welche geschlechter sind alice ' s freunde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ) )
leute, die mit leuten befreundet sind, die nicht für mckinsey arbeiten	menschen, die mit leuten befreundet sind, die nicht für mckinsey arbeiten	menschen, die freunde sind, mit leuten, die nicht arbeit für mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finde mich alle, die in new york geboren sind und single sind	finden sie mich alle in new york geboren, die single ist	mich finden alle geboren in new york, der einzigen	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
mitarbeiter, der bei alices geburtsdatum gekündigt hat	mitarbeiter, der am geburtsdatum von alice gekündigt hat	mitarbeiter, beenden sie auf alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche schülerin hat ein startdatum vor alices geburtstag	welcher schüler ein startdatum vor alices geburtstag hat	welche studentin hat ein startdatum vor alices geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welches geburtsdatum einer person entspricht höchstens dem startdatum von alice	welche personen das geburtsdatum höchstens mit dem startdatum von alice identisch sind	was personen geburtsdatum ist bei den meisten das gleiche wie alice ' s start date	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) )
wie ist der beziehungsstatus von mitarbeitern, die nicht bei mckinsey arbeiten?	wie hoch sind die beziehungsstatus von mitarbeitern, die nicht bei mckinsey arbeiten?	was sind die beziehung der status von mitarbeitern, die nicht arbeiten bei mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche stadt ist der geburtsort von mitarbeitern, deren enddatum nicht später als 2004 liegt?	welche stadt der geburtsort von arbeitnehmern ist, die spätestens 2004 ein enddatum haben	in welcher stadt ist der geburtsort von mitarbeitern, die ein endedatum nicht später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finden sie männer, die 180 cm groß sind	männchen finden, die 180 cm groß sind	finden männer, die 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string gender ) ( string = ) en.gender.male ) )
welche personen sind mit mitarbeitern befreundet, die 2004 noch nicht angefangen haben?	welche personen mit mitarbeitern befreundet sind, die 2004 nicht gestartet sind	die menschen sind freunde mit mitarbeitern, die nicht in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finde studentenfreunde, die im jahr 2004 oder früher geendet haben	studentenfreunde finden, die 2004 oder früher endeten	finden studenten, freunde, die endete im jahr 2004 oder vor	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche mitarbeiter haben die meisten berufsbezeichnungen?	welche mitarbeiter die meisten stellentitel haben	welcher mitarbeiter hat die größte menge von berufsbezeichnungen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
leute, die in die schule kamen, als alice aufhörte zu arbeiten	menschen, die mit der schule begannen, als alice aufhörte zu arbeiten	menschen, die mit der schule angefangen, als alice hörte auf zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mit welchen studenten bin ich befreundet?	mit welchen studenten ich befreundet bin, die 2004 nicht angefangen haben	die studenten bin ich freunde mit, die didnt start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
jeder mann, der sich eingeloggt hat	alle männer, die sich eingeloggt haben	jeder mann, der sich angemeldet hat	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string gender ) ( string = ) en.gender.male ) )
finden sie mitarbeiter mit einer berufsbezeichnung und nicht mit einem softwareentwickler	mitarbeiter mit berufsbezeichnung und nicht softwareingenieur finden	finden mitarbeiter mit berufsbezeichnung und keine software ingenieur	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie alle schüler, die im jahr 2004 und danach begonnen haben	finden sie alle studenten, die 2004 und nach	finden sie alle studenten, die im jahr 2004 begonnen und nach	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
student, dessen startdatum vor dem von alice liegt	student, dessen startdatum vor alice s	schüler, deren startdatum vor alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche studenten spätestens am ersten arbeitstag von alice ihren abschluss machen	die studenten spätestens am ersten arbeitstag von alice graduieren	die absolventen, die nicht später als alice ' s erster tag der arbeit	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
an welcher universität haben 180 cm große menschen teilgenommen?	welche universität menschen, die 180 cm groß sind teilnehmen	die universität tat menschen, die sind 180 cm hoch besuchen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.university ) ( string ! type ) ) ( call SW.reverse ( string university ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
ein freund von jemandem 180 cm groß	ein freund von jemandem 180 cm groß	ein freund von jemand 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
finde das datum, an dem alice ihren job als softwareingenieurin begonnen hat	finden sie das datum, an dem alice ihren softwareingenieurjob gestartet hat	finden sie das datum, dass alice begann ihre software engineer job	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) ( string employment_start_date ) ) )
mitarbeiter, die nach 2004 gekündigt haben	mitarbeiter, die nach 2004 gekündigt haben	mitarbeiter, die sie nach 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
studenten, die ihren abschluss vor alice gemacht hatten, begannen zu arbeiten	studenten, die ihren abschluss gemacht haben, bevor alice ihre arbeit aufnahm	studierende, graduierte, bevor alice mit der arbeit begonnen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
ein mitarbeiter, der 2004 oder 2010 endet	ein mitarbeiter, der 2004 oder 2010 endet	ein mitarbeiter ende 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist der freund des mitarbeiters, dessen beschäftigungsende mindestens 2004 ist?	der freund des arbeitnehmers ist, der das arbeitsende mindestens 2004 ist	wer ist der freund, der arbeitnehmer, der beschäftigung enddatum ist mindestens 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finde alle freunde eines schülers mit einem anderen enddatum als 2004	finden sie alle freunde mit student mit enddatum anders als 2004	finden sie alle freunde mitstudent mit enddatum als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wie groß ist alice?	wie groß ist alice	wie hoch ist alice	( call SW.listValue ( call SW.getProperty en.person.alice ( string height ) ) )
arbeitnehmer, der ein kleineres datum als 2004 und 2010 hat	mitarbeiter, der ein kleineres datum als 2004 und 2010 hat	mitarbeiter hat ein kleineres datum als 2004 und 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
leute, die anfingen zu arbeiten, als alice in die schule kam	menschen, die mit der arbeit begannen, als alice mit der schule begann	menschen, die begann, als alice in die schule kam	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde die mitarbeiter, die eingestellt wurden, bevor alice ihren job kündigte	finden sie die mitarbeiter, die eingestellt wurden, bevor alice ihren job aufgab	finden die mitarbeiter, die eingestellt wurden, bevor alice ihren job beenden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
eine person, deren freund am oder vor 2004 angefangen hat	eine person, deren freund am oder vor 2004 begonnen hat	eine person, deren freund begonnen, auf oder vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
schüler, die nach alices letztem tag bei der arbeit angefangen haben	studenten, die nach alices letztem tag bei der arbeit begonnen haben	studenten, die nach alice der letzte tag an dem job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
der 180 cm große arbeitet bei mckinsey	der 180 cm groß ist und bei mckinsey arbeitet	wer ist 180 cm groß arbeiten bei mckinsey	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string employer ) ( string = ) en.company.mckinsey ) )
180 cm große person mit informatik als studienfach	person, die 180 cm groß ist mit informatik als studienfach	person, die 180 cm groß mit informatik als studienfach	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) )
was ist das geschlecht der menschen, die die schule im oder nach dem jahr 2004 abgebrochen haben?	was ist das geschlecht von menschen, die die schule in oder nach 2004 beendet haben	was ist das geschlecht der menschen an, die nicht mehr die schule im jahr 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welcher student graduierte nach alice graduierte	welcher student nach alice graduiert abgeschlossen	die studentin absolvierte nach alice schloss	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
suche nach studenten, die vor 2010 beginnen	studierende ab 2010 finden	finden die studierenden zu beginn vor 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
geburtsorte von arbeitnehmern finden, die vor 2004 angefangen haben	geburtshäuser von arbeitnehmern finden, die vor 2004 begonnen haben	finden geburtsstätten der mitarbeiter, die bereits vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die mit oder nach der arbeit in die schule kamen	menschen, die mit der schule begannen, als alice mit der arbeit begann oder	menschen, die mit der schule angefangen, als alice mit der arbeit begonnen, oder nach	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wie ist der beziehungsstatus von menschen, die vor 2004 mit der arbeit begonnen haben?	wie hoch ist der beziehungsstatus von personen, die vor 2004 mit der arbeit begonnen haben?	was ist der beziehungsstatus von menschen, die arbeiten begonnen, bevor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
was mitarbeiter nach mitarbeiter alice angefangen hat	welcher mitarbeiter nach der mitarbeiteralice gestartet hat	was mitarbeiter begann, nach dem mitarbeiter von alice hast	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher mitarbeiter von mckinsey ist 180 cm groß	welcher mitarbeiter von mckinsey ist 180 cm groß	die mitarbeiter von mckinsey ist 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string employer ) ( string = ) en.company.mckinsey ) )
geschlecht der schüler, die am oder nach dem jahr 2004 abschließen	geschlecht der studierenden, die am oder nach 2004 abschließen	geschlecht von studierenden veredelung, die am oder nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
was ist alices erster tag als softwareingenieur	was ist alices erster tag als softwareingenieur	was ist alice ' s erster tag als softwareingenieur	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) ( string employment_start_date ) ) )
mitarbeiter, die nach alice verlassen starten	mitarbeiter, die nach aliceaustritten beginnen	mitarbeiter, die beginnen, nachdem alice verlässt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde eine person, die größer als 180 cm ist	finden sie eine person, die größer als 180 cm ist	finden sie eine person, die größer ist als 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) ) ) )
wer hat mindestens zwei freunde	der mindestens zwei freunde hat	wer mindestens zwei freunde	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
studenten, die das gleiche fach wie alice studieren	studenten, die das gleiche feld wie alice studieren	schüler, die das gleiche feld wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie studenten, die nicht teil der braunen universität sind	studenten finden, die nicht teil der braunen universität sind	finden studenten, die nicht teil der brown university	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie den beziehungsstatus für mitarbeiter, deren enddatum nicht auf 2004 festgelegt ist	beziehungsstatus für mitarbeiter suchen, die kein enddatum von 2004 haben	finden beziehung status für mitarbeiter, die nicht ein enddatum von 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finden sie das geschlecht von mitarbeitern, deren enddatum nicht 2004 liegt	das geschlecht der arbeitnehmer zu ermitteln, die ein enddatum haben, das nicht 2004 ist	finden sie das geschlecht des mitarbeiter, die haben ein enddatum, das nicht 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die aufhörten zu arbeiten, als alice anfing zu arbeiten	personen, die nicht mehr funktionierten, als alice mit der arbeit begann	menschen, die aufgehört zu arbeiten, als alice anfing zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
suche nach schülern mit einem startdatum, das größer oder gleich dem von schüler alice ist	suchen sie schüler mit einem startdatum, das größer oder gleich der kursalice ist	finden sie studenten mit einem startdatum ist größer als oder gleich student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
suche nach schülern mit einem enddatum, das gleich oder höher als das geburtsdatum von alice ist	finden sie schüler mit einem enddatum, das dem geburtsdatum von alice entspricht oder größer ist	finden sie studenten mit einem enddatum größer oder gleich dem geburtsdatum von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
leute finden, die mehr als zwei geschlechter haben	menschen finden, die mehr als zwei geschlechter haben	menschen, die mehr als zwei geschlechter	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string > ) ( number 2 ) ) )
welches enddatum liegt vor 2004?	das enddatum der studierenden vor 2004 liegt	die schüler enddatum älter als 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist die geburtsstadt eines arbeiters, der 2004 noch nicht angefangen hat?	was ist die geburtsstadt eines arbeiters, der 2004 nicht angefangen hat	was ist die geburt, die stadt der arbeiter, der didnt start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die mit der geburt von alice in die schule kamen	menschen, die mit der schule begannen, als alice geboren wurde	menschen, die mit der schule angefangen, als alice geboren wurde	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen mit freunden, die 2004 keine arbeit aufgenommen haben	menschen mit freunden, die 2004 nicht mit der arbeit begonnen haben	menschen mit ihren freunden, die nicht mit der arbeit beginnen im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die 2004 oder früher aufgehört haben zu arbeiten	personen, die 2004 oder vor der arbeit aufgehört haben,	menschen, die aufgehört zu arbeiten in 2004 oder vorher	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
in welchen städten wurden alices freunde geboren	welche städte alices freunde waren, die in	die städte waren alices freunde geboren in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ) )
finde alle personen, die single sind und gerade online sind	finden sie alle personen, die single und derzeit online sind	finden alle menschen, die single sind und derzeit online	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
schüler, die vor alices geburtstag fertig sind	studenten, die vor alices geburtstag enden	studenten vor alices geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
in welcher stadt wurde alice oder bob geboren?	welche stadt alice oder bob geboren war	in welcher stadt war alice oder bob in geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
personen, die mit einem mitarbeiter befreundet sind, der nach 2004 gegründet wurde	personen, die mit einem mitarbeiter befreundet sind, der später als 2004 begonnen hat	menschen, die freunde sind mit einem mitarbeiter begann, die später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wo sind alle mitarbeiter geboren, die nicht bei mckinsey beschäftigt sind?	wo sind alle mitarbeiter geboren, die nicht bei mckinsey beschäftigt sind	wo sind alle mitarbeiter geboren ist, die nicht bei mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen, die die schule abgebrochen haben, als alice geboren wurde oder danach	menschen, die die schule beendeten, als alice geboren wurde oder	menschen, die nicht mehr der schule als alice geboren wurde oder nach	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist alice's geburtsdatum?	was ist alices geburtsdatum	was ist alice ' s geburtstag	( call SW.listValue ( call SW.getProperty en.person.alice ( string birthdate ) ) )
alleinstehende geboren im jahr 2004	einzelstehende, geboren 2004	einzigen menschen, die 2004 geboren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
freunde von mitarbeitern, die 2004 noch nicht angefangen haben	freunde von mitarbeitern, die 2004 nicht gestartet sind	freunde der mitarbeiter, die didnt start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
student, dessen enddatum nicht nach dem enddatum von student alice liegt	student, dessen enddatum nicht nach dem enddatum der studentenalice ist	schüler, deren enddatum nach ablauf der studentin alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
suche nach mitarbeitern, die am oder vor dem letzten tag von alice beginnen	mitarbeiter finden, die am oder vor dem letzten tag von alice beginnen	mitarbeiter suchen, beginnend am oder vor alice der letzte tag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche informatikstudenten sind 180 cm groß?	welche informatikstudenten 180 cm groß sind	die informatikstudenten sind 180 cm hoch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) )
wer studiert etwas anderes als informatik	der etwas anderes als informatik studiert	wer ist studium etwas anderes als informatik	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wie viele männer oder frauen gibt es	wie viele männchen oder weibchen es gibt	wie viele männer oder frauen gibt es	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ) )
wer ist der freund eines mitarbeiters, dessen enddatum vor 2004 liegt?	der freund eines mitarbeiters ist, dessen enddatum vor 2004 liegt	wer ist der freund der ein mitarbeiter, deren enddatum vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche person ist eingeloggt und wurde in new york geboren	welche person eingeloggt ist und in new york geboren wurde	welche person angemeldet ist und in new york geboren wurde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string birthplace ) ( string = ) en.city.new_york ) )
wer ist mit der person online befreundet?	der mit der onlineperson befreundet ist	wer mit freunden die onlineperson	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
welche arbeit hat alice im jahr 2004 begonnen?	welcher job hat alice im jahr 2004 begonnen	was hiob tat alice start in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string job_title ) ) )
mitarbeiter finden, die vor 2004 beginnen	mitarbeiter ab 2004 finden	suchen mitarbeiter ab, bevor 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist befreundet mit mitarbeitern, deren enddatum nicht 2004 liegt?	wer mit mitarbeitern befreundet ist, die ein enddatum haben, das nicht 2004 ist	wer ist freunde mit mitarbeitern, die haben ein enddatum, das nicht 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
freunde von männern	freunde männlicher menschen	freunde von männlichen personen	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )
was ist das geschlecht von ein oder zwei personen	was ist das geschlecht einer oder zweier personen	was ist das geschlecht einer oder zwei personen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
finden sie die mitarbeiterin, die am nächsten zum tag eingestellt wurde alice kündigte ihren job	finden sie die mitarbeiterin, die am nächsten an dem tag alice ihren job gekündigt wurde	suchen sie den mitarbeiter, der eingestellt wurde, am nächsten tag alice ihren job beenden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie die geschlechter der schüler, deren anfangsdaten vor 2004 liegen	die geschlechter von studierenden zu finden, die vor 2004 begonnen haben	finden sie die geschlechter von studenten, denen starttermine früher als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie leute, die mit schülern befreundet sind, deren enddatum nicht 2004 liegt	finden sie personen, die mit studenten befreundet sind, die ein enddatum nicht von 2004 haben	suchen sie menschen, die freund mit studenten, ein endedatum nicht von 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie den beziehungsstatus für personen mit einer körpergröße von 180 cm	finden sie den beziehungsstatus für personen mit einer höhe von 180 cm	die beziehung status für menschen mit einer höhe von 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
suche schüler mit dem letzten tag nach 2004	studenten mit dem letzten tag nach 2004 finden	finden sie studenten mit dem letzten tag nach 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welches geschlecht hatten mehr mitarbeiter nach 2004 zu starten	welches geschlecht nach 2004 mehr mitarbeiter hatte	welches geschlecht hatte, mehr mitarbeiter beginnen, die nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wann hat ein student der informatik alice beendet?	wann hat student der informatik alice beendet	wann haben studenten der informatik, der alicefinish	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string education_end_date ) ) )
welche schüler haben ein enddatum, das das gleiche ist wie später als schüler alice	welche schüler ein enddatum haben, das mit später als der schüleralice identisch ist	was die studierenden haben ein enddatum, das ist der gleiche, der später als student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer ist single männlich	wer allein männlich ist	wer ist der mann	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string gender ) ( string = ) en.gender.male ) )
welche mitarbeiter haben spätestens am tag des schuleintritts von alice angefangen	die mitarbeiter spätestens am tag begonnen haben, an dem alice mit der schule begonnen hat	die mitarbeiter an, die nicht später als am tag alice in die schule kam	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
suche nach mitarbeitern, die am oder nach dem ersten tag von alice beginnen	mitarbeiter finden, die am oder nach dem ersten tag von alice beginnen	finden sie mitarbeiter ab, die am oder nach alice ' s erster tag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
leute, die zur gleichen zeit oder vor alice die schule abgebrochen haben	menschen, die die schule zur gleichen zeit oder vor alice beendet haben	menschen, die nicht mehr die schule zur gleichen zeit oder vor alice haben	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
leute, die kleiner sind als alice	menschen kürzer als alice	menschen, die kürzer als alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )
ein arbeiter, der am oder vor dem tag begann, an dem student alice anfing	ein arbeiter, der am oder vor dem tag begann student alice begann	ein arbeitnehmer, der begann, die am oder vor dem tag, student alice begann	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche person hat das gleiche geschlecht wie alice?	welche person das gleiche geschlecht wie alice hat	welche person hat das gleiche geschlecht wie alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( call SW.getProperty en.person.alice ( string gender ) ) ) )
welche schüler haben ein enddatum, das das startdatum von mitarbeiter alice oder später ist	welche kursteilnehmer ein enddatum haben, das das startdatum von employee alice oder höher ist	was die studierenden haben ein enddatum, das dem anfangsdatum der mitarbeiter alice oder später	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
der bei mckinsey arbeitet und 180 cm groß ist	wer bei mckinsey arbeitet und ist 180 cm groß	wer arbeitet bei mckinsey und ist 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string employer ) ( string = ) en.company.mckinsey ) )
welcher schüler endete spätestens am startdatum von alice	welcher schüler spätestens zum startdatum von alice endete	die schüler beendet, die nicht später als alice startdatum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die mit oder nach alice zu ihrem studium gekommen sind	menschen, die ihr studium mit oder nach alice	menschen, die sich ihr studium mit oder nach alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
student, der nicht in braun studiert	student studiert nicht bei braun	student nicht das studium an der brown	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche schüler haben vor 2004 angefangen?	welche studenten vor 2004 begonnen haben	die schüler begannen vor 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
alices freunde beziehungsstatus	alices freunde beziehungsstatus	alice ' s freunde beziehungsstatus	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ) )
menschen, die nach der geburt von alice zu arbeiten begannen	menschen, die nach der geburt von alice zu arbeiten begannen	menschen, die arbeiten begonnen, nachdem alice geboren wurde	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wie ist der beziehungsstatus von mitarbeitern, deren startdatum vor 2004 liegt?	wie hoch sind die beziehungsstatus von arbeitnehmern, deren startdatum vor 2004 liegt?	was sind die beziehung der status von mitarbeitern, deren startdatum ist früher als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
ein student endet, bevor alice anfängt	ein student endet, bevor alice beginnt	ein student beenden, bevor alice beginnt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche schüler am letzten tag waren ungefähr am selben tag wie alices letzter tag	welche schüler letzten tag war der etwa der gleiche tag wie alice letzten tag	die schüler letzten tag war die um den gleichen tag wie alice der letzte tag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was mitarbeiter an alices geburtstag anfingen	was mitarbeiter an alices geburtstag begonnen haben	was mitarbeiter begann auf alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
freunde von mitarbeitern, die in oder nach 2004 beginnen	freunde von mitarbeitern ab 2004	freunde von mitarbeitern, beginnend im jahr 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wer sind die freunde von mitarbeitern, die im jahr 2004 nicht gekündigt haben?	die freunde von mitarbeitern sind, die 2004 nicht gekündigt haben	wer sind die freunde der mitarbeiter, die nicht aufgeben in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
in welcher stadt ist der geburtsort des arbeitnehmers, der seine arbeit vor 2004 beendet hat?	welche stadt ist der geburtsort des arbeitnehmers, der vor 2004 seine arbeit beendet hat?	in welcher stadt ist der geburtsort des arbeitnehmers, die endete vor der arbeit 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wer hat angefangen an alices geburtsdatum zu arbeiten	die mit der arbeit am geburtsdatum von alice begonnen haben	wer fing mit der arbeit an alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche mitarbeiter hatten ein enddatum bevor alice in die schule kam	welche mitarbeiter ein enddatum hatten, bevor alice die schule begann	die mitarbeiter hatten ein endedatum vor alice in die schule kam	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, deren geschlecht mit alice identisch ist	menschen, deren geschlecht mit alice identisch ist	menschen, deren geschlecht ist dieselbe, wie alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) en.person.alice ) ) )
menschen, die nach alice geboren wurden, sind in die schule gekommen	menschen, die nach alice seuzten, die schule begonnen haben	menschen, die geboren wurden, nachdem alice in die schule kam	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )
beziehungsstatus von studenten, deren enddatum vor 2004 liegt	beziehungsstatus von studierenden, deren enddatum vor 2004 liegt	beziehung, status der studierenden, deren enddatum vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche person ist angemeldet und hat ein geburtsdatum im jahr 2004	welche person eingeloggt ist und ein geburtsdatum im jahr 2004 hat	welche person ist angemeldet und hat ein geburtsdatum in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string logged_in ) ) )
finde einen schüler, dessen letzter tag vor oder am selben tag liegt wie der erste tag von alice	finden sie schüler, dessen letzter tag vor oder am selben tag wie alices erster tag ist	finden sie studenten, deren letzten tag vor oder am selben tag, wie alice das erste tag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter, die nach alice anfangen	mitarbeiter, die nach alice beginnen	mitarbeiter, die nach alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
in welchen städten wurden 180 cm große menschen geboren?	welche städte waren menschen 180 cm groß geboren in	die städte waren menschen 180 cm groß, geboren in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
suche nach schülern, deren letzter tag am oder nach dem letzten tag von alice liegt	finden sie studenten mit letzten tag ist am oder nach alice letzten tag	finden sie studenten, die mit letzte tag ist, die am oder nach alice der letzte tag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
freunde von mitarbeitern, die vor 2004 fertig waren	freunde von mitarbeitern, die vor 2004 fertig wurden	freunde von mitarbeitern beenden, bevor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
leute, die gerade online sind und single sind	personen, die derzeit online sind und	menschen, die derzeit online sind, die single sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string logged_in ) ) )
suche mir eine person, die 2004 in new york geboren wurde	finden sie mich eine person geboren im jahr 2004 in new york	suche mir eine person geboren im jahr 2004 in new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string birthplace ) ( string = ) en.city.new_york ) )
wer wurde am startdatum von alice geboren	wer am startdatum von alice geboren wurde	geboren wurde alice anfangsdatum	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) )
finden sie mitarbeiter mit dem letzten tag im jahr 2004 oder früher	mitarbeiter mit dem letzten tag im jahr 2004 oder vor	finden mitarbeiter mit dem letzten tag im jahr 2004 oder vor	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
mitarbeiter, die am selben tag zu arbeiten begannen alice wurde geboren	mitarbeiter, die am selben tag mit der arbeit begonnen haben, alice wurde geboren	mitarbeiter, die begonnen arbeiten am selben tag geboren wurde alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
studenten, die später als 2004 begannen	studenten, die später als 2004 begonnen haben	studenten, die später als 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen, die vor 2004 oder vor 2010 eingeschult wurden	menschen, die vor 2004 oder vor 2010 mit der schule begonnen haben	menschen, die schule vor dem jahr 2004 oder vor 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist das geburtsdatum der person mit einer größe von 180 cm	was ist das geburtsdatum der person mit einer höhe von 180 cm	was ist das geburtsdatum der person, die mit einer höhe von 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
mitarbeiter, die am oder nach dem ende von alice beginnen	mitarbeiter, die auf oder nach dem ende von alice beginnen	mitarbeiter, beginnend am oder nach alice abgeschlossen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
ein gemeinsamer freund von alice	ein gemeinsamer freund von alice	ein gemeinsamer freund von alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
personen, die in oder vor 2004 geboren wurden	personen, die in oder vor 2004 geboren wurden	personen geboren vor oder in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
wer hat freunde mit einem enddatum, das vor 2004 liegt	wer hat freunde mit einem enddatum, das vor 2004 ist	wer freunde hat, die mit einem enddatum, das vor dem jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
menschen mit zwei oder weniger freunden	menschen mit zwei oder weniger freunden	personen mit zwei oder weniger freunde	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
person, die zum ersten mal in sein arbeitszimmer kam	person, die zum ersten mal an seinem studium teilnahm	person, die zuerst trat seine studie	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
geburtsort des studenten, dessen enddatum nicht 2004 liegt	geburtsstadt des studenten, dessen enddatum nicht 2004 ist	geburt stadt schüler, deren endedatum ist nicht 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
was sind die geburtsstädte von arbeitnehmern, die nicht bei mckinsey beschäftigt sind?	was sind die geburtsstädte von arbeitnehmern, die nicht bei mckinsey beschäftigt sind	was sind die geburtsstädte für mitarbeiter, die nicht bei mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wie ist der beziehungsstatus von menschen, die ihre arbeit in oder nach 2004 gekündigt haben?	wie hoch sind die beziehungsstatus von personen, die ihren arbeitsplatz in oder nach 2004 aufgeben	was sind die beziehung der status von menschen, die beenden ihre arbeit im jahr 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
personen, die sich an oder nach dem datum eingeschrieben haben, an dem alice ihr studium abgeschlossen hat	personen, die sich an oder nach dem datum, an dem alice ihr studium abgeschlossen hat, eingeschrieben haben	menschen, die eingeschrieben sind, die am oder nach dem datum, an dem alice beendete ihr studium	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
geburtsorte von mitarbeitern, die 2004 oder früher gekündigt haben	geburtsorte von arbeitnehmern, die 2004 oder vor	geburtsorte der mitarbeiter, die beenden im jahr 2004 oder vor	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welcher student endete nach 2004?	welcher student nach 2004 endete	die schüler endete nach 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
geschichte oder informatik	geschichte oder informatik	geschichte oder informatik	( call SW.listValue ( call SW.concat en.field.computer_science en.field.history ) )
mitarbeiter, die ihre ausbildung zeitgleich zu oder nach 2004 abgeschlossen haben	mitarbeiter, die zeitgleich nach oder nach 2004	mitarbeiter finishing gleichzeitigen oder nach 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer alice mit dem befreundet ist, ist single	wer alice freunde mit, dass ist single	wer ist alice freunde mit, die ist single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
geschlechter von personen, die gerade online sind	geschlechter von personen, die derzeit online sind	geschlechter der menschen, die derzeit online sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
beziehungsstatus von studierenden, die 2004 nicht abgeschlossen haben	beziehungsstatus der studierenden, die 2004 nicht abgeschlossen wurden	beziehungsstatus der studierenden endet nicht im jahr 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen, die 180 cm groß sind und eine beziehung zu alice haben	menschen, die 180 cm groß und in einer beziehung mit alice sind	menschen, die sind 180 cm hoch und in einer beziehung mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) en.person.alice ) )
alleinstehende, die in new york geboren wurden	alleinstehende, die in new york geboren wurden	einzelne menschen, die in new york geboren wurde	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string birthplace ) ( string = ) en.city.new_york ) )
finde leute die mit alice befreundet sind	finden sie leute, die mit alice befreundet sind	suchen sie menschen, die freunde mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
menschen, die vor alices abschluss an ihrem studium teilgenommen haben	personen, die an ihrem studium teilgenommen haben, bevor alice abgeschlossen ist	menschen, die sich in ihrer studie vor alice abgeschlossen	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche schülerin hat an alices geburtstag angefangen	welcher student an alices geburtstag begann	die studenten fingen an alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
in welchen städten wurden studenten geboren, die vor oder im jahr 2004 begannen?	in welchen städten studenten, die vor oder im jahr 2004 geboren	in welchen städten waren studenten, die vor oder im jahr 2004 geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
menschen, die mit der arbeit angefangen haben, als alice in die schule kam oder früher	menschen, die mit der arbeit begonnen haben, als alice mit der schule begann oder	menschen, die mit der arbeit begonnen, als alice in die schule kam oder bevor	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
beliebtester geburtsort	beliebtester geburtsort	beliebtesten geburtsort	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string birthplace ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
freunde von mitarbeitern mit einem enddatum von 2004 oder später finden	freunde von mitarbeitern mit endterminen 2004 oder später finden	finde freunde, die mitarbeiter mit 2004 enddatum oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finden sie alle mitarbeiter, die nicht mehr als zwei jobs hatten	finden sie alle mitarbeiter, die nicht mehr als zwei jobs hatten	finden sie alle mitarbeiter, die nicht mehr als zwei jobs	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche mitarbeiter waren hier weniger zeit als alice	was mitarbeiter hier weniger zeit als alice gewesen sind	was die mitarbeiter hier weniger zeit als alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher mitarbeiter hat den gleichen chef wie alice	welcher mitarbeiter den gleichen chef wie alice hat	welcher mitarbeiter hat den gleichen chef, wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche schüler haben weniger als 2 hauptfächer	welche schüler weniger als 2 hauptpersonen haben	die schüler haben weniger als 2 majors	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
leute, die am oder vor dem tag in die schule kamen, als alice aufhörte zu arbeiten	menschen, die die schule am oder vor dem tag begonnen alice aufgehört zu arbeiten	menschen, die mit der schule begonnen, die am oder vor dem tag, alice aufgehört zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
geburtsort von personen, die ihre ausbildung nach 2004 abgeschlossen haben	geburtsort von personen, die nach 2004 eine ausbildung abgeschlossen haben	geburtsort von menschen, die absolvierte ausbildung, die nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche person hat einen freund, der nicht an einer braunen universität studiert?	welche person einen freund hat, der ein student an einer anderen universität als der braunen universität ist	welche person hat einen freund, der ist student an einer anderen universität als der brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche geschlechter sind alice und bob	welche geschlechter alice und bob sind	die geschlechter sind alice und bob	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
finden sie mitarbeiter, deren startdatum vor 2004 liegt	mitarbeiter finden, die ein startdatum vor 2004 haben	finden sie mitarbeiter, die ein startdatum älter als 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde menschen mit alices geburtstag, die 180 cm groß sind	finden sie menschen mit alices geburtstag, die 180 cm groß sind	finden sie personen mit alices geburtstag, die sind 180 cm hoch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string birthdate ) ) ( string = ) en.person.alice ) )
personen, die mit dem neuen mitarbeiter befreundet sind, der vor oder nach 2004 beginnt	personen, die mit dem neuen mitarbeiter befreundet sind, der vor oder nach 2004 beginnt	menschen, die freunde sind mit dem neuen mitarbeiter, der anfangen wird, die vor oder nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche mitarbeiterin verlässt das unternehmen an dem tag, an dem alice ihre arbeit aufnimmt	welcher mitarbeiter das unternehmen am selben tag verlässt, an dem alice seinen job antritt	welche mitarbeiter verlassen das unternehmen auf das gleiche datum, das alice beginnt ihr job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
student, dessen startdatum das enddatum von student alice ist	student, dessen startdatum das enddatum der studentenalice ist	schüler, deren startdatum enddatum der student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche mitarbeiter haben ein enddatum, das entweder 2004 oder 2010 ist	welche mitarbeiter ein enddatum haben, das entweder 2004 oder 2010 ist	was die mitarbeiter haben ein enddatum, das ist entweder 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
in welcher stadt wurde die 180 cm große person geboren?	in welcher stadt war die 180cm große person geboren	in welcher stadt wurde die 180cm große person geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
anzahl der gehaltenen jobs	anzahl der arbeitsplätzed	anzahl der arbeitsplätze	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.job_title ) ( string ! type ) ) ) )
studenten, deren anfangsdatum kleiner als 2004 und 2010 ist	studierende, deren startdatum kleiner als 2004 und 2010 ist	studierende, deren startdatum ist kleiner als 2004 und 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
ort, an dem alice geboren wurde	ort, an dem alice geboren wurde	ort, wo geboren wurde alice	( call SW.listValue ( call SW.getProperty en.person.alice ( string birthplace ) ) )
finde mich alle mindestens so groß wie alice	finden sie mich alle mindestens so groß wie alice	mich findet jeder mindestens so groß wie alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )
was ist das enddatum von mitarbeiter alice	was ist das enddatum der mitarbeiteralice	was ist das endedatum des mitarbeiteralice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche schüler schlossen die schule ab, als alice anfing	welche schüler die schule zum zeitpunkt des beginns der schule abgeschlossen haben	die studierenden absolvierten schule durch die zeit, die alice begann	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
studenten, deren startdatum kleiner ist als das enddatum für mitarbeiter alice	studenten, deren startdatum kleiner als das des enddatums für mitarbeiteralice ist	studenten, die ein startdatum kleiner als das enddatum für mitarbeiter alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
ist diese person männlich oder weiblich?	ist diese person männlich oder weiblich	ist diese person männlich oder weiblich	( call SW.listValue ( call SW.concat en.gender.male en.gender.female ) )
student, der vor oder zu beginn des jahres 2004 angefangen hat	student, der bei oder vor 2004 begann	schüler, angefangen bei oder vor 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
die an der geringsten anzahl von universitäten studiert haben	die am wenigsten universitäten studiert haben	wer studiert an der geringsten anzahl von universitäten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string university ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter, die am letzten tag von alice angefangen haben	mitarbeiter, die am letzten tag von alice begonnen haben	mitarbeiter, die begonnen haben, auf alice der letzte tag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die im jahr 2004 geboren wurden und 180 cm groß sind	2004 geborene und 180 cm große menschen sind 180 cm groß	leute die 2004 geboren sind und die sind 180 cm hoch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
welche mitarbeiter sind entweder softwareingenieure oder programmmanager	welche mitarbeiter entweder softwareingenieure oder programmmanager sind	welche mitarbeiter sind entweder softwareingenieure oder programmmanager	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.concat en.job_title.software_engineer en.job_title.program_manager ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
suche nach beziehungsstatus für schüler, deren enddatum nicht 2004 liegt	suchen von beziehungsstatus für studenten, die ein enddatum haben, das nicht 2004 ist	finden beziehung status für studierende, die ein enddatum, das nicht 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
studenten, die nach alice geburtstag verlassen	studenten, die nach alices geburtstag gehen	studenten verlassen nach alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
an welchem tag hat alice ihren job im jahr 2004 angefangen?	an welchem tag begann alice ihren job im jahr 2004	was für ein tag hast alice starten sie ihren job im jahr 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_start_date ) ) )
welche schüler haben die schule zuletzt begonnen?	welche schüler die schule neu begonnen haben	die studenten der schule die letzte	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde menschen mit einem männlichen geschlecht, mit denen alice befreundet ist	finden sie menschen mit einem geschlecht von männern, mit denen alice befreundet ist	finden menschen mit einer gleichstellung von mann ist befreundet mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
was ist der beziehungsstatus von menschen, die etwas anderes als informatik studieren?	was ist der beziehungsstatus von menschen, die alles andere als informatik studieren	was ist der beziehungsstatus von menschen, die studieren etwas, aber die computer science	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
beziehungsstatus von nur einer person	beziehungsstatus von nur einer person	beziehungsstatus nur aus einer person	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
menschen, die mit denen befreundet sind, die ihr studium vor 2004 abgeschlossen haben	personen, die mit denjenigen befreundet sind, die vor 2004 ein studium abgeschlossen haben	menschen, die freunde sind mit denen, die abgeschlossenen studien vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
entweder braune universität oder ucla	entweder braune universität oder ucla	entweder der brown university oder der ucla	( call SW.listValue ( call SW.concat en.university.brown en.university.ucla ) )
finden sie die person, die 180 cm groß ist und ein softwareingenieur ist	finden sie die person, die 180 cm groß ist und softwareingenieur ist	suchen sie die person, die 180 cm hoch und ist ein softwareingenieur	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) )
studenten, die nach alice begannen	studenten, die nach alice begonnen haben	studenten, die nach alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
menschen mit freunden, die arbeit haben, aber keine softwareingenieure	menschen mit freunden, die jobs haben, aber keine softwareingenieure	menschen mit freunden, die arbeit haben, aber nicht die softwareingenieure	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche mitarbeiter am letzten tag waren frühestens am ersten tag von alice	welche mitarbeiter am letzten tag nicht früher als alices erster tag waren	die mitarbeiter letzte tag war nicht früher, als alice das erste tag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist kürzer als 181cm	wer kürzer als 181cm ist	wer kürzer als 181cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )
finden sie das geschlecht von menschen, die single sind	das geschlecht von personen zu finden, die ledig sind	finden sie das geschlecht der menschen, die single sind	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )
nenne einen schüler, der spätestens nach alice seinen abschluss machen wird	nennen sie einen studenten, der spätestens als alice seinen abschluss machen wird	name ein student, der das studium nicht später als alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie studenten mit den wenigsten universitäten	studenten finden, die die wenigsten universitäten haben	finden die schüler, dass die wenigsten universitäten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string university ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
welche personen haben geburtstage zwischen 2004 und 2010?	was menschen geburtsdaten zwischen 2004 und 2010 haben	was die leute haben, die geburtsdaten, die zwischen 2004 und 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
nennen sie eine person, die im jahr 2004 geboren wurde und 180 cm groß ist	nennen sie eine 2004 geborene person, die 180 cm groß ist	nennen sie eine person geboren im jahr 2004, die ist 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
welche mitarbeiter haben einen starttermin nicht später als der von student alice	welche mitarbeiter spätestens ein startdatum als das von student alice haben	was die mitarbeiter verfügen über eine startdatum nicht später als student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
was ist der häufigste beziehungsstatus?	was ist der häufigste beziehungsstatus	was ist der häufigste familienstand	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string relationship_status ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
geschlecht der arbeitnehmer ab 2004	geschlecht der arbeitnehmer ab 2004	geschlecht von mitarbeitern vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welcher von alices freunden ist single?	welcher von alices freund single ist	die von alice ' freund ist single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
menschen, die mit jemandem befreundet sind, der nach 2004 angefangen hat zu arbeiten	personen, die mit jemandem befreundet sind, der nach 2004 mit der arbeit begonnen hat	menschen, die freunde sind mit einer person, zu arbeiten begonnen, die nach 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
geburtsort von mitarbeitern, die vor 2004 angefangen haben	geburtsort von arbeitnehmern, die vor 2004 begonnen haben	geburtsort von mitarbeitern, die bereits vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
ein mitarbeiter, der nach dem ende von alice beginnt	ein mitarbeiter, der nach dem ende von alice beginnt	ein mitarbeiter ab, nachdem alice endet	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde menschen mit einer höhe von 180 cm und ihre freunde	menschen mit einer höhe von 180 cm und ihre freunde zu finden	finden sie personen mit einer körpergröße von 180 cm und ihre freunde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
finden sie leute, die studenten mit einem startdatum nach 2004 sind, und ihre freunde	menschen finden, die studenten mit einem startdatum nach 2004 sind und ihre freunde	suchen sie menschen, die schüler mit einem startdatum später als 2004 und ihre freunde	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche studenten haben ihr fach in der informatik der geschichte	was studenten haben ihr studium in informatik der geschichte	was haben die studierenden ihrer studienrichtung, in informatik der geschichte	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.concat en.field.computer_science en.field.history ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
schüler, die vor oder zeitgleich mit alices beginn enden	schüler, die vor oder gleichzeitig zum start von alice enden	studenten, die vor oder zeitgleich zu alice zu starten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer ist ein arbeiter, der am oder vor dem tag, an dem mitarbeiter alice gegangen ist, abgereist ist?	der ein arbeitnehmer ist, der am oder vor dem tag, an dem die mitarbeiteralice verlassen hat, gegangen ist	wer ist ein arbeiter, der linken, die am oder vor dem tag der mitarbeiter alice links	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie menschen mit einem geburtsort, der dem mit einer körpergröße von 180 cm entspricht	menschen finden, die einen geburtsort haben, der mit einer höhe von 180 cm identisch ist	menschen, die einen geburtsort die gleichen wie diejenigen mit einer höhe von 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
wer ist alices einzige freundin?	wer ist alices einzelner freund	wer ist alice ' s freund,	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
wer hat zwei oder mehr beziehungsstatus	der zwei oder mehr beziehungsstatus hat	wer hat zwei oder mehr beziehung status	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string >= ) ( number 2 ) ) )
was ist das geschlecht des schülers, der nach 2004 beginnt	was ist das geschlecht der studentin, die nach 2004 beginnt	was ist das geschlecht der schüler, der beginnt, nachdem 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
ein arbeitgeber mit mindestens zwei mitarbeitern	ein arbeitgeber mit mindestens zwei beschäftigten	ein arbeitgeber mindestens zwei mitarbeitern	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welcher student begann am selben tag wie die studentin alice?	welcher student am selben tag begann wie student alice	die schüler begann am selben tag, als studentin alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was war alices studienfach	was war alices studienfeld	was war alices bereich der studie	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ) )
welcher student hat den frühesten starttermin?	welcher schüler das früheste startdatum hat	welcher student hat den frühesten starttermin	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie den beziehungsstatus von mitarbeitern, die nicht bei mckinsey beschäftigt sind	finden sie den beziehungsstatus von mitarbeitern, die nicht bei mckinsey beschäftigt sind	finden sie den beziehungsstatus der mitarbeiter, die nicht bei mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welcher student kündigte zur gleichen zeit, die die angestellte alice tat	welcher student zur gleichen zeit aufhörte, als der mitarbeiter alice	die studenten beenden in der gleichen zeit, die mitarbeiter von alice hast	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finde die freunde von menschen, die vor 2004 studiert haben	die freunde von menschen zu finden, die vor 2004 an ihrem studium teilgenommen haben	finden sie die freunde der menschen, die sich ihr studium vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
arbeitnehmer mit weniger als zwei arbeitgebern	arbeitnehmer mit weniger als zwei arbeitgebern	mitarbeiter mit weniger als zwei arbeitgeber	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
personen, die 2004 in new york geboren wurden	2004 in new york geborene personen	personen, geboren in new york im jahre 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
finden sie die geburtsorte der mitarbeiter, deren startdatum nicht gleich 2004 ist	finden sie die geburtsortstädte von arbeitnehmern, die ein startdatum nicht gleich 2004 haben	finden sie den geburtsort städte der mitarbeiter, denen ein startdatum nicht gleich 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wie viele studenten in diesem bereich	wie viele studenten in diesem bereich	wie viele studenten in diesem bereich	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.field ) ( string ! type ) ) ) )
welcher mitarbeiter hat nach der anstellung von alice angefangen	welcher mitarbeiter nach der einstellung von alice begonnen hat	die mitarbeiter begannen, nachdem alice wurde eingestellt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
freunde von menschen, die nicht informatik studieren	freunde von menschen, die keine informatik studieren	freunde von menschen, die nicht informatik studiert	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wer hat den gleichen job wie alice	der den gleichen job wie alice hat	wer hat den gleichen job wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
studienbereich von alice endete im jahr 2004	studienbereich alice endete 2004	bereich der studie von alice endete im jahr 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string field_of_study ) ) )
welches datum hat die informatikstudentin alice angefangen?	welches datum hat informatikstudent alice begonnen	welches datum hat der informatikstudent alice starten	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string education_start_date ) ) )
ein mitarbeiter, der kein softwareentwickler ist	ein mitarbeiter, der kein softwareingenieur ist	ein mitarbeiter, der nicht einen softwareingenieur	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welches geschlecht wird von mehr als zwei personen beansprucht	welches geschlecht von mehr als zwei personen beansprucht wird	welches geschlecht wird behauptet, durch mehr als zwei personen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
welche leute sind mit studenten befreundet, die 2004 noch nicht angefangen haben?	welche leute mit studenten befreundet sind, die 2004 nicht angefangen haben	die menschen sind freunde mit studenten, die nicht in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wer ist der freund von alice?	wer ist der freund von alice	wer ist der freund von alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string friend ) ( string = ) en.person.alice ) )
finde menschen, die nicht männlich sind	finden sie menschen, die nicht männlich sind	suchen sie menschen, die nicht männlich	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string ! = ) en.gender.male ) )
welche firmen beschäftigen personen mit einer körpergröße von 180 cm	welche unternehmen mitarbeiter mit einer höhe von 180 cm beschäftigen	was unternehmen beschäftigen menschen mit einer höhe von 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.company ) ( string ! type ) ) ( call SW.reverse ( string employer ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
menschen, die alleinstehend sind und im jahr 2004 geboren wurden	personen, die ledig sind und im jahr 2004 geboren wurden	menschen, die single sind und 2004 geboren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
wer ist angemeldet sowie angemeldet	der eingeloggt und eingeloggt ist	wer angemeldet ist sowie angemeldet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string logged_in ) ) )
wer ist mit der person befreundet, die seit 2004 nicht mehr arbeitet?	der mit der person befreundet ist, die 2004 nicht angefangen hat zu arbeiten	wer freunde mit der person, die nicht zu arbeiten beginnen, 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
studenten, die am oder nach dem jahr 2004 beginnen	studierende ab oder nach 2004	die schüler beginnend ab 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie menschen mit einem geschlecht, das weniger als zwei personen haben	menschen mit einem geschlecht zu finden, das weniger als zwei personen	finden menschen mit einem geschlecht, das weniger als zwei menschen	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
menschen, die 180 cm groß sind	personen, die 180 cm groß sind	leute, dass sind 180 cm hoch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
person, die zuletzt an der studie teilgenommen hat	person, die zuletzt der studie beigetreten ist	person, die zuletzt trat der studie	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie menschen, die eine größe von 180 cm und einen beziehungsstatus von single haben	menschen mit einer höhe von 180 cm und einem beziehungsstatus von	finden sie menschen, die haben eine höhe von 180 cm und einem beziehungsstatus single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
geburtsort von studenten, die nicht braun sind	geburtsort von studenten nicht braun	geburtsort der schüler nicht bei braun	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
finden sie männer, die single sind	finden männer, die single sind	finden männer, die single sind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string gender ) ( string = ) en.gender.male ) )
student, dessen enddatum nicht nach dem enddatum von alice liegt	student, dessen enddatum nicht nach dem enddatum der mitarbeiteralice liegt	schüler, deren endedatum ist nicht nach dem enddatum des mitarbeiteralice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer ist ein freund exklusiv für alice	der ein freund ausschließlich von alice ist	wer ist ein freund, der sich ausschließlich auf alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string friend ) ( string = ) en.person.alice ) )
menschen, die am oder nach alices geburtsdatum eingeschult wurden	menschen, die die schule am oder nach dem geburtsdatum von alice begonnen haben	menschen, die mit der schule begonnen, die am oder nach alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
arbeitnehmer, die ihren arbeitsplatz im jahr 2005 oder später gekündigt haben	mitarbeiter, die 2005 oder später ihren arbeitsplatz aufkündigten	mitarbeiter beenden ihre arbeit, die 2005 oder später	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
jeder mann, der in new york geboren ist	jeder mann, der in new york geboren wird	ist jeder mann, der in new york geboren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string gender ) ( string = ) en.gender.male ) )
welcher mitarbeiter im jahr 2004 oder später endete	welcher mitarbeiter 2004 oder später endete	die mitarbeiter endete im jahr 2004 oder später	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie den beziehungsstatus von studenten, deren universität nicht braun ist	den beziehungsstatus von studenten zu finden, deren universität nicht der der braunen	die beziehung stand von studenten, deren universität nicht, dass von braun	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
beziehungsstatus von mitarbeitern, die 2004 noch nicht angefangen haben	beziehungsstatus von mitarbeitern, die 2004 nicht gestartet sind	beziehungsstatus der mitarbeiter, die didnt start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
leute, die aufhörten zu arbeiten, bevor alice zu arbeiten anfing	personen, die nicht mehr funktioniert haben, bevor alice mit der arbeit begonnen hat	menschen, die aufgehört zu arbeiten, bevor alice anfing zu arbeiten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
freunde von alice finden, die 180 cm groß sind	finden sie freunde von alice, die 180 cm groß sind	finden freunde von alice, die sind 180 cm hoch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
suche mir einen mitarbeiter, dessen enddatum nach dem enddatum von student alice liegt	finden sie mir einen mitarbeiter, dessen enddatum nach dem enddatum der studentenalice liegt	finden, die mir eine mitarbeiterin, deren endedatum ist später als das enddatum der student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde alices freunde, die in new york geboren wurden	finde alices freunde, die in new york geboren wurden	finden sie alice ' s freunden, die in new york geboren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
welche schüler haben in anderen jahren als 2004 angefangen?	die studenten in anderen jahren als 2004 begonnen haben	die schüler begannen, in anderen jahren, als 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wie ist der beziehungsstatus von menschen, die 2004 oder später aufgehört haben zu arbeiten?	wie hoch ist der beziehungsstatus von personen, die 2004 oder später aufgehört haben zu arbeiten	was ist der beziehungsstatus von menschen, die aufgehört zu arbeiten, die 2004 oder später	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
alices freunde, die im jahr 2004 geboren wurden	alices freunde, die 2004 geboren wurden	alice ' s freunden, die 2004 geboren	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
wer ist 180cm oder höher	wer 180cm oder höher ist	wer ist 180cm oder höher	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )
wie lautet die berufsbezeichnung von alice?	was ist alices berufsbezeichnung	was ist alice ' s jobtitel	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) )
suche nach schülern, deren erster tag nach alice's geburtstag liegt	finden sie studenten, deren erster tag nach alices geburtstag ist	finden sie studenten, deren erste tag nach alice ' s geburtstag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer sind die schüler, die zur selben zeit oder vor beginn von alice beginnen?	die studenten sind, die zur gleichen zeit oder vor alice beginnen	wer sind die studierenden an der gleichen zeit oder vor alice beginnt	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
suche nach mitarbeitern ab 2010 oder früher	mitarbeiter ab 2010 oder früher finden	suchen mitarbeiter ab 2010 oder früher	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
welche leute haben weniger als zwei freunde	welche menschen weniger als zwei freunde haben	die menschen haben weniger als zwei freunde	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
finde mitarbeiter mit der gleichen berufsbezeichnung wie alice's	mitarbeiter mit der gleichen berufsbezeichnung wie alice es finden	finden mitarbeiter mit demselben jobtitel, als alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
menschen, die 2004 oder 2010 geboren wurden	2004 oder 2010 geborene personen	menschen geboren in 2004 oder 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) )
schüler, die die schule 2003 oder früher beendet haben	schüler, die die schule 2003 oder früher beendeten	schüler beendet die schule in 2003 oder früher	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
ein student mit zwei oder weniger universitäten	ein student mit zwei oder weniger universitäten	ein student mit zwei oder weniger universitäten	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string university ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
suche nach schülern, deren enddatum größer als 2004 oder 2010 ist	studierende finden, deren enddatum entweder größer als 2004 oder 2010 ist	finden sie studenten, deren endedatum ist entweder größer als 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist das häufigste geschlecht?	was ist das häufigste geschlecht	was ist der häufigste geschlecht	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string gender ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
was ist der beziehungsstatus des schülers, der im jahr 2004 geboren wurde?	was ist der beziehungsstatus des mindestens 2004 geborenen studenten	was ist die beziehung status der schüler, der geboren wurde, am meisten 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
mit welchen menschen sind alice nicht befreundet	mit denen die leute nicht befreundet sind	die menschen sind alice nicht mit freunden	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string ! = ) en.person.alice ) )
finde mir alle enddaten aller mitarbeiter namens alice, die an der brown university studiert haben	finden sie mich alle enddaten aller mitarbeiter namens alice, die an der braunen universität studiert	suche mir alle endtermine aller mitarbeiter namens alice, die studierte an der brown university	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string education_end_date ) ) )
finde leute die zwischen 180cm200cm groß sind	finden sie personen, deren höhe zwischen 180cm200cm liegt	die menschen finden, deren höhe zwischen 180cm200cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) ) ) )
finden sie die geschlechter der mitarbeiter, deren startdatum nicht später als 2004 ist	die geschlechter der arbeitnehmer zu finden, die das datum spätestens 2004 beginnen	finden sie die geschlechter der mitarbeiter, die startdatum nicht später als 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
welche person hat eine größe von höchstens 180 cm	welche person eine höhe von höchstens 180 cm hat	welche person hat eine höhe von höchstens 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )
suche nach schülern, die nach alice 'letztem tag beginnen	finden sie studenten, die nach alices letztem tag beginnen	finden die studierenden nach alice der letzte tag	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wer hat den gleichen beziehungsstatus wie die 180 cm große person	der den gleichen beziehungsstatus hat wie die 180 cm große person	wer hat die gleiche beziehung status als 180 cm große person	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
welcher student hat nur ein studienfach	welcher student nur ein studienfach hat	welche studentin hat nur ein fach studieren	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
person vor 2004 geboren	vor 2004 geborene person	person geboren vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
wer ist ein freund von alice oder bob?	wer ist freund von alice oder bob	wer ist freund entweder alice oder bob	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
wer wurde 2004 oder 2010 geboren	geboren 2004 oder 2010	geboren im jahr 2004 oder 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
menschen, die freunde von freunden von alice sind	menschen, die freunde von freunden von alice sind	leute diejenigen, die sind freunde von freunden von alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
wer hat den gleichen geburtstag wie die person, die 180 cm groß ist	wer hat den gleichen geburtstag wie die person, die 180 cm groß ist	wer hat am selben tag geburtstag wie die person, die 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
leute, die die schule abgebrochen haben, als alice angefangen hat	menschen, die die schule beendeten, als alice begann	menschen, die nicht mehr der schule, wenn alice begann	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
das enddatum des mitarbeiters liegt vor dem startdatum von alice	welches mitarbeiterenddatum vor dem startdatum von alice liegt	die mitarbeiter endedatum älter als alice startdatum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
alle 180 cm großen singles	alle 180 cm hohen einzelstücke	alle 180 cm hoch singles	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
geburtsort des studenten, dessen enddatum mindestens 2004 ist	geburtsstadt eines studenten, dessen enddatum mindestens 2004 ist	geburt stadt schüler, deren endedatum ist mindestens 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
personen, die mit dem mitarbeiter befreundet sind, der nicht im jahr 2004 beginnt	personen, die mit dem mitarbeiter befreundet sind, der 2004 nicht startet	menschen, die freunde sind mit dem mitarbeiter, die nicht in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
finden sie mitarbeiter, deren letzter tag mit dem ersten schultag von alice übereinstimmt	finden sie mitarbeiter mit dem letzten tag passend alice s ersten tag in der schule	finden mitarbeiter mit dem letzten tag passenden alice ' s erster tag in der schule	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
personen mit einer körpergröße von 180 cm oder weniger	personen, die 180 cm oder weniger groß sind	menschen, die sind 180 cm oder weniger in der höhe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )
geschlecht des arbeitnehmers, dessen arbeitgeber nicht mckinsey ist	geschlecht des arbeitnehmers, dessen arbeitgeber nicht mckinsey ist	geschlecht der arbeitnehmer, deren arbeitgeber nicht mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wer ist mit dem mitarbeiter befreundet, der vor 2004 angefangen hat?	der mit dem mitarbeiter befreundet ist, der vor 2004 begonnen hat	wer ist freunde mit, die mitarbeiter, die bereits vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
wer ist eine person, deren größe 180 cm ist und die mit alice befreundet ist	wer ist eine person, deren höhe 180 cm ist und das ist freundemit alice	wer ist eine person, deren höhe von 180 cm und das ist, freunde mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string friend ) ( string = ) en.person.alice ) )
welche studenten haben 2004 oder 2010 ihren abschluss gemacht?	die studenten 2004 oder 2010 abgeschlossen haben	die studierenden absolvierte im jahr 2004 oder 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
studenten, die am selben tag ihren abschluss machen, beginnen alice ihren neuen job	studenten, die am selben tag alice beginnt ihren neuen job	studierende, absolvent am gleichen tag alice beginnt ihren neuen job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
studenten, die keine informatik studieren	studenten, die kein informatikstudium	studenten, die nicht informatik studiert	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
finden sie studenten von der braunen universität	studenten der braunen universität finden	finden die studenten der brownuniversität	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string university ) ) )
schüler, die nach alice eingeschult wurden, kündigten ihren job	schüler, die die schule begonnen haben, nachdem alice ihren job gekündigt hat	studenten, die mit der schule begonnen, nachdem alice ihren job beenden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
geschlecht der angestellten, die keine softwareingenieure sind	geschlecht der anderen mitarbeiter als softwareingenieure	geschlecht der mitarbeiter andere als die softwareingenieure	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
student, dessen startdatum nach dem enddatum von student alice liegt	student, dessen startdatum nach dem enddatum der studentenalice liegt	schüler, deren anfangsdatum nach enddatum der student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
wo waren schüler, die nicht im jahr 2004 fertig wurden geboren	wo waren studenten, die nicht im jahr 2004 geboren	wo waren die studenten, die nicht zu ende im jahr 2004 geboren	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
wie ist der status der 180 cm großen personenbeziehung?	wie ist der status der 180 cm großen personenbeziehung	was ist der stand der 180 cm großen personenbeziehung	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
wie ist der beziehungsstatus von studenten, die frühestens begonnen haben?	wie hoch ist der beziehungsstatus von schülern, die nicht früher als	was ist der beziehungsstatus von studenten, die nicht früher als	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welche mitarbeiter haben einen starttermin, der dem von schüler alice oder höher entspricht?	mitarbeiter haben ein startdatum, das mit der von den schülern identisch ist oder höher ist	was mitarbeiter in ein startdatum, das ist das gleiche als student alice oder höher	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
der 2004 beigetreten ist und 180 cm groß ist	der 2004 beitrat und 180 cm groß ist	die sich auf 2004 und ist 180 cm groß	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )
was mitarbeiter zeitgleich mit alice anfingen	was mitarbeiter gleichzeitig mit alice	was mitarbeiter begann zur gleichen zeit wie alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wer ist mit alice befreundet?	wer ist freunde mit alice	wer ist befreundet mit alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
leute mit drei geschlechtern finden	menschen mit drei geschlechtern finden	finden sie personen mit drei geschlechtern	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string > ) ( number 2 ) ) )
welche schüler fingen frühestens an dem tag an, als alice in die schule kam	die schüler begannen nicht früher als der tag alice begann schule	die schüler begannen, nicht früher als am tag alice in die schule kam	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
was ist das geschlecht der studenten, die nicht im jahr 2004 begonnen haben	was ist das geschlecht der studenten, die nicht im jahr 2004 gestartet	was ist das geschlecht des studenten, die nicht in das geschäftsjahr 2004 gestartet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
welcher student hat ein enddatum nicht später als das enddatum von alice	welcher schüler ein enddatum spätestens am enddatum von alice hat	welche studentin hat ein endedatum nicht später als das enddatum von alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
schüler, der vor alice graduiert hat, kündigte ihren job	studentin, die ihren abschluss gemacht hat, bevor alice ihren job aufgab	student studiert, bevor alice ihren job beenden	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
mitarbeiter, dessen enddatum vor dem startdatum von mitarbeiter alice liegt	mitarbeiter, dessen enddatum vor dem startdatum des mitarbeiters alice liegt	mitarbeiter, deren enddatum vor dem startdatum des mitarbeiters alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
wann hat alice aufgehört, die braune universität zu besuchen?	wann hat alice aufgehört, die braune universität zu besuchen	wann hat alice stoppen die teilnahme an der brown university	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string education_end_date ) ) )
menschen, die ihren job nach 2004 gekündigt haben	personen, die nach 2004 ihren arbeitsplatz aufgeben	menschen, die beenden ihre arbeit nach 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finde mitarbeiter mit startdatum am oder vor alice's	mitarbeiter mit startdatum auf oder vor alice es finden	finden mitarbeiter mit startdatum vor oder alice s	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
finden sie mitarbeiter freunde mit dem letzten arbeitsdatum vor 2004	mitarbeiter mit letztem arbeitsdatum vor 2004 anfreunden	mitarbeiter suchen freunde mit dem letzten tag der arbeiten vor 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
